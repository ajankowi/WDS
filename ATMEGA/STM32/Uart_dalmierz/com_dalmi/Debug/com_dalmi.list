
com_dalmi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c23c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  0800c3cc  0800c3cc  0001c3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9e0  0800c9e0  000204a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9e0  0800c9e0  0001c9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9e8  0800c9e8  000204a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9e8  0800c9e8  0001c9e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9ec  0800c9ec  0001c9ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a4  20000000  0800c9f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  200004a4  0800ce94  000204a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000834  0800ce94  00020834  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5cd  00000000  00000000  000204d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003035  00000000  00000000  0003baa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012c8  00000000  00000000  0003ead8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001140  00000000  00000000  0003fda0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000293c7  00000000  00000000  00040ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010267  00000000  00000000  0006a2a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f298f  00000000  00000000  0007a50e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016ce9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c2c  00000000  00000000  0016cf18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004a4 	.word	0x200004a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c3b4 	.word	0x0800c3b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004a8 	.word	0x200004a8
 80001cc:	0800c3b4 	.word	0x0800c3b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b972 	b.w	8000db8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	4688      	mov	r8, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14b      	bne.n	8000b92 <__udivmoddi4+0xa6>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4615      	mov	r5, r2
 8000afe:	d967      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0720 	rsb	r7, r2, #32
 8000b0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b12:	4095      	lsls	r5, r2
 8000b14:	ea47 0803 	orr.w	r8, r7, r3
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b24:	fa1f fc85 	uxth.w	ip, r5
 8000b28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b30:	fb07 f10c 	mul.w	r1, r7, ip
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18eb      	adds	r3, r5, r3
 8000b3a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b3e:	f080 811b 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8118 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b48:	3f02      	subs	r7, #2
 8000b4a:	442b      	add	r3, r5
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b60:	45a4      	cmp	ip, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	192c      	adds	r4, r5, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8107 	bcs.w	8000d7c <__udivmoddi4+0x290>
 8000b6e:	45a4      	cmp	ip, r4
 8000b70:	f240 8104 	bls.w	8000d7c <__udivmoddi4+0x290>
 8000b74:	3802      	subs	r0, #2
 8000b76:	442c      	add	r4, r5
 8000b78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b7c:	eba4 040c 	sub.w	r4, r4, ip
 8000b80:	2700      	movs	r7, #0
 8000b82:	b11e      	cbz	r6, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c6 4300 	strd	r4, r3, [r6]
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d909      	bls.n	8000baa <__udivmoddi4+0xbe>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	f000 80eb 	beq.w	8000d72 <__udivmoddi4+0x286>
 8000b9c:	2700      	movs	r7, #0
 8000b9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ba2:	4638      	mov	r0, r7
 8000ba4:	4639      	mov	r1, r7
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	fab3 f783 	clz	r7, r3
 8000bae:	2f00      	cmp	r7, #0
 8000bb0:	d147      	bne.n	8000c42 <__udivmoddi4+0x156>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d302      	bcc.n	8000bbc <__udivmoddi4+0xd0>
 8000bb6:	4282      	cmp	r2, r0
 8000bb8:	f200 80fa 	bhi.w	8000db0 <__udivmoddi4+0x2c4>
 8000bbc:	1a84      	subs	r4, r0, r2
 8000bbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	4698      	mov	r8, r3
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d0e0      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000bca:	e9c6 4800 	strd	r4, r8, [r6]
 8000bce:	e7dd      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000bd0:	b902      	cbnz	r2, 8000bd4 <__udivmoddi4+0xe8>
 8000bd2:	deff      	udf	#255	; 0xff
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	f040 808f 	bne.w	8000cfc <__udivmoddi4+0x210>
 8000bde:	1b49      	subs	r1, r1, r5
 8000be0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000be4:	fa1f f885 	uxth.w	r8, r5
 8000be8:	2701      	movs	r7, #1
 8000bea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x124>
 8000c00:	18eb      	adds	r3, r5, r3
 8000c02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x122>
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	f200 80cd 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000c0e:	4684      	mov	ip, r0
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	b2a3      	uxth	r3, r4
 8000c14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c20:	fb08 f800 	mul.w	r8, r8, r0
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x14c>
 8000c28:	192c      	adds	r4, r5, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x14a>
 8000c30:	45a0      	cmp	r8, r4
 8000c32:	f200 80b6 	bhi.w	8000da2 <__udivmoddi4+0x2b6>
 8000c36:	4618      	mov	r0, r3
 8000c38:	eba4 0408 	sub.w	r4, r4, r8
 8000c3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c40:	e79f      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c42:	f1c7 0c20 	rsb	ip, r7, #32
 8000c46:	40bb      	lsls	r3, r7
 8000c48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c50:	fa01 f407 	lsl.w	r4, r1, r7
 8000c54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c60:	4325      	orrs	r5, r4
 8000c62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c66:	0c2c      	lsrs	r4, r5, #16
 8000c68:	fb08 3319 	mls	r3, r8, r9, r3
 8000c6c:	fa1f fa8e 	uxth.w	sl, lr
 8000c70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c74:	fb09 f40a 	mul.w	r4, r9, sl
 8000c78:	429c      	cmp	r4, r3
 8000c7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b0>
 8000c84:	eb1e 0303 	adds.w	r3, lr, r3
 8000c88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c8c:	f080 8087 	bcs.w	8000d9e <__udivmoddi4+0x2b2>
 8000c90:	429c      	cmp	r4, r3
 8000c92:	f240 8084 	bls.w	8000d9e <__udivmoddi4+0x2b2>
 8000c96:	f1a9 0902 	sub.w	r9, r9, #2
 8000c9a:	4473      	add	r3, lr
 8000c9c:	1b1b      	subs	r3, r3, r4
 8000c9e:	b2ad      	uxth	r5, r5
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb0:	45a2      	cmp	sl, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1da>
 8000cb4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	d26b      	bcs.n	8000d96 <__udivmoddi4+0x2aa>
 8000cbe:	45a2      	cmp	sl, r4
 8000cc0:	d969      	bls.n	8000d96 <__udivmoddi4+0x2aa>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4474      	add	r4, lr
 8000cc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cca:	fba0 8902 	umull	r8, r9, r0, r2
 8000cce:	eba4 040a 	sub.w	r4, r4, sl
 8000cd2:	454c      	cmp	r4, r9
 8000cd4:	46c2      	mov	sl, r8
 8000cd6:	464b      	mov	r3, r9
 8000cd8:	d354      	bcc.n	8000d84 <__udivmoddi4+0x298>
 8000cda:	d051      	beq.n	8000d80 <__udivmoddi4+0x294>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d069      	beq.n	8000db4 <__udivmoddi4+0x2c8>
 8000ce0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ce4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ce8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cec:	40fd      	lsrs	r5, r7
 8000cee:	40fc      	lsrs	r4, r7
 8000cf0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cf4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cf8:	2700      	movs	r7, #0
 8000cfa:	e747      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000cfc:	f1c2 0320 	rsb	r3, r2, #32
 8000d00:	fa20 f703 	lsr.w	r7, r0, r3
 8000d04:	4095      	lsls	r5, r2
 8000d06:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d12:	4338      	orrs	r0, r7
 8000d14:	0c01      	lsrs	r1, r0, #16
 8000d16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d1a:	fa1f f885 	uxth.w	r8, r5
 8000d1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d26:	fb07 f308 	mul.w	r3, r7, r8
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x256>
 8000d32:	1869      	adds	r1, r5, r1
 8000d34:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d38:	d22f      	bcs.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d92d      	bls.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3e:	3f02      	subs	r7, #2
 8000d40:	4429      	add	r1, r5
 8000d42:	1acb      	subs	r3, r1, r3
 8000d44:	b281      	uxth	r1, r0
 8000d46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d52:	fb00 f308 	mul.w	r3, r0, r8
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d907      	bls.n	8000d6a <__udivmoddi4+0x27e>
 8000d5a:	1869      	adds	r1, r5, r1
 8000d5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d60:	d217      	bcs.n	8000d92 <__udivmoddi4+0x2a6>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d915      	bls.n	8000d92 <__udivmoddi4+0x2a6>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4429      	add	r1, r5
 8000d6a:	1ac9      	subs	r1, r1, r3
 8000d6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d70:	e73b      	b.n	8000bea <__udivmoddi4+0xfe>
 8000d72:	4637      	mov	r7, r6
 8000d74:	4630      	mov	r0, r6
 8000d76:	e709      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d78:	4607      	mov	r7, r0
 8000d7a:	e6e7      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	e6fb      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d80:	4541      	cmp	r1, r8
 8000d82:	d2ab      	bcs.n	8000cdc <__udivmoddi4+0x1f0>
 8000d84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d88:	eb69 020e 	sbc.w	r2, r9, lr
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	4613      	mov	r3, r2
 8000d90:	e7a4      	b.n	8000cdc <__udivmoddi4+0x1f0>
 8000d92:	4660      	mov	r0, ip
 8000d94:	e7e9      	b.n	8000d6a <__udivmoddi4+0x27e>
 8000d96:	4618      	mov	r0, r3
 8000d98:	e795      	b.n	8000cc6 <__udivmoddi4+0x1da>
 8000d9a:	4667      	mov	r7, ip
 8000d9c:	e7d1      	b.n	8000d42 <__udivmoddi4+0x256>
 8000d9e:	4681      	mov	r9, r0
 8000da0:	e77c      	b.n	8000c9c <__udivmoddi4+0x1b0>
 8000da2:	3802      	subs	r0, #2
 8000da4:	442c      	add	r4, r5
 8000da6:	e747      	b.n	8000c38 <__udivmoddi4+0x14c>
 8000da8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dac:	442b      	add	r3, r5
 8000dae:	e72f      	b.n	8000c10 <__udivmoddi4+0x124>
 8000db0:	4638      	mov	r0, r7
 8000db2:	e708      	b.n	8000bc6 <__udivmoddi4+0xda>
 8000db4:	4637      	mov	r7, r6
 8000db6:	e6e9      	b.n	8000b8c <__udivmoddi4+0xa0>

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd2:	4b2b      	ldr	r3, [pc, #172]	; (8000e80 <MX_GPIO_Init+0xc4>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	4a2a      	ldr	r2, [pc, #168]	; (8000e80 <MX_GPIO_Init+0xc4>)
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dde:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <MX_GPIO_Init+0xc4>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dea:	4b25      	ldr	r3, [pc, #148]	; (8000e80 <MX_GPIO_Init+0xc4>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	4a24      	ldr	r2, [pc, #144]	; (8000e80 <MX_GPIO_Init+0xc4>)
 8000df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df6:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <MX_GPIO_Init+0xc4>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <MX_GPIO_Init+0xc4>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	4a1e      	ldr	r2, [pc, #120]	; (8000e80 <MX_GPIO_Init+0xc4>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <MX_GPIO_Init+0xc4>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <MX_GPIO_Init+0xc4>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	4a18      	ldr	r2, [pc, #96]	; (8000e80 <MX_GPIO_Init+0xc4>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <MX_GPIO_Init+0xc4>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2120      	movs	r1, #32
 8000e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3a:	f001 f87f 	bl	8001f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_GPIO_Init+0xc8>)
 8000e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	480d      	ldr	r0, [pc, #52]	; (8000e88 <MX_GPIO_Init+0xcc>)
 8000e54:	f000 feca 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e58:	2320      	movs	r3, #32
 8000e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e72:	f000 febb 	bl	8001bec <HAL_GPIO_Init>

}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	; 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000
 8000e84:	10210000 	.word	0x10210000
 8000e88:	48000800 	.word	0x48000800

08000e8c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000e90:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000e92:	4a1c      	ldr	r2, [pc, #112]	; (8000f04 <MX_I2C1_Init+0x78>)
 8000e94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000e98:	4a1b      	ldr	r2, [pc, #108]	; (8000f08 <MX_I2C1_Init+0x7c>)
 8000e9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ec6:	480e      	ldr	r0, [pc, #56]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000ec8:	f001 f850 	bl	8001f6c <HAL_I2C_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ed2:	f000 facf 	bl	8001474 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4809      	ldr	r0, [pc, #36]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000eda:	f001 fca1 	bl	8002820 <HAL_I2CEx_ConfigAnalogFilter>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ee4:	f000 fac6 	bl	8001474 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_I2C1_Init+0x74>)
 8000eec:	f001 fce3 	bl	80028b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ef6:	f000 fabd 	bl	8001474 <Error_Handler>
  }

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200004e0 	.word	0x200004e0
 8000f04:	40005400 	.word	0x40005400
 8000f08:	10909cec 	.word	0x10909cec

08000f0c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <HAL_I2C_MspInit+0x7c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d127      	bne.n	8000f7e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <HAL_I2C_MspInit+0x80>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	4a16      	ldr	r2, [pc, #88]	; (8000f8c <HAL_I2C_MspInit+0x80>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <HAL_I2C_MspInit+0x80>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f46:	23c0      	movs	r3, #192	; 0xc0
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f4a:	2312      	movs	r3, #18
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f56:	2304      	movs	r3, #4
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480b      	ldr	r0, [pc, #44]	; (8000f90 <HAL_I2C_MspInit+0x84>)
 8000f62:	f000 fe43 	bl	8001bec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <HAL_I2C_MspInit+0x80>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6a:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <HAL_I2C_MspInit+0x80>)
 8000f6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f70:	6593      	str	r3, [r2, #88]	; 0x58
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_I2C_MspInit+0x80>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f7e:	bf00      	nop
 8000f80:	3728      	adds	r7, #40	; 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40005400 	.word	0x40005400
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	48000400 	.word	0x48000400
 8000f94:	00000000 	.word	0x00000000

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	ed2d 8b02 	vpush	{d8}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa2:	f000 fc33 	bl	800180c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa6:	f000 f921 	bl	80011ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000faa:	f7ff ff07 	bl	8000dbc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fae:	f000 fb89 	bl	80016c4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fb2:	f7ff ff6b 	bl	8000e8c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  Dev->I2cHandle = &hi2c1;
 8000fb6:	4b7e      	ldr	r3, [pc, #504]	; (80011b0 <main+0x218>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a7e      	ldr	r2, [pc, #504]	; (80011b4 <main+0x21c>)
 8000fbc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  Dev->I2cDevAddr = 0x52;
 8000fc0:	4b7b      	ldr	r3, [pc, #492]	; (80011b0 <main+0x218>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2252      	movs	r2, #82	; 0x52
 8000fc6:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
  //
  // VL53L0X init for Single Measurement
  //

  VL53L0X_WaitDeviceBooted( Dev );
 8000fca:	4b79      	ldr	r3, [pc, #484]	; (80011b0 <main+0x218>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f004 fa84 	bl	80054dc <VL53L0X_WaitDeviceBooted>
  VL53L0X_DataInit( Dev );
 8000fd4:	4b76      	ldr	r3, [pc, #472]	; (80011b0 <main+0x218>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f003 ff99 	bl	8004f10 <VL53L0X_DataInit>
  VL53L0X_StaticInit( Dev );
 8000fde:	4b74      	ldr	r3, [pc, #464]	; (80011b0 <main+0x218>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f004 f8f8 	bl	80051d8 <VL53L0X_StaticInit>
  VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8000fe8:	4b71      	ldr	r3, [pc, #452]	; (80011b0 <main+0x218>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	1c7a      	adds	r2, r7, #1
 8000fee:	1cb9      	adds	r1, r7, #2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f004 ffaf 	bl	8005f54 <VL53L0X_PerformRefCalibration>
  VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8000ff6:	4b6e      	ldr	r3, [pc, #440]	; (80011b0 <main+0x218>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	1cfa      	adds	r2, r7, #3
 8000ffc:	1d39      	adds	r1, r7, #4
 8000ffe:	4618      	mov	r0, r3
 8001000:	f005 fc36 	bl	8006870 <VL53L0X_PerformRefSpadManagement>
  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8001004:	4b6a      	ldr	r3, [pc, #424]	; (80011b0 <main+0x218>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f004 fb04 	bl	8005618 <VL53L0X_SetDeviceMode>

  // Enable/Disable Sigma and Signal check
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8001010:	4b67      	ldr	r3, [pc, #412]	; (80011b0 <main+0x218>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f004 fd95 	bl	8005b48 <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 800101e:	4b64      	ldr	r3, [pc, #400]	; (80011b0 <main+0x218>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2201      	movs	r2, #1
 8001024:	2101      	movs	r1, #1
 8001026:	4618      	mov	r0, r3
 8001028:	f004 fd8e 	bl	8005b48 <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 800102c:	4b60      	ldr	r3, [pc, #384]	; (80011b0 <main+0x218>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f641 1299 	movw	r2, #6553	; 0x1999
 8001034:	2101      	movs	r1, #1
 8001036:	4618      	mov	r0, r3
 8001038:	f004 fe36 	bl	8005ca8 <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 800103c:	4b5c      	ldr	r3, [pc, #368]	; (80011b0 <main+0x218>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f004 fe2e 	bl	8005ca8 <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 800104c:	4b58      	ldr	r3, [pc, #352]	; (80011b0 <main+0x218>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8001054:	4618      	mov	r0, r3
 8001056:	f004 fb59 	bl	800570c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 800105a:	4b55      	ldr	r3, [pc, #340]	; (80011b0 <main+0x218>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2212      	movs	r2, #18
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f004 fb78 	bl	8005758 <VL53L0X_SetVcselPulsePeriod>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8001068:	4b51      	ldr	r3, [pc, #324]	; (80011b0 <main+0x218>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	220e      	movs	r2, #14
 800106e:	2101      	movs	r1, #1
 8001070:	4618      	mov	r0, r3
 8001072:	f004 fb71 	bl	8005758 <VL53L0X_SetVcselPulsePeriod>

  __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 8001076:	4b50      	ldr	r3, [pc, #320]	; (80011b8 <main+0x220>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b4e      	ldr	r3, [pc, #312]	; (80011b8 <main+0x220>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f042 0220 	orr.w	r2, r2, #32
 8001084:	601a      	str	r2, [r3, #0]


  printf("\r\n Rozpoczeto skanowanie \r\n");
 8001086:	484d      	ldr	r0, [pc, #308]	; (80011bc <main+0x224>)
 8001088:	f009 f804 	bl	800a094 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 800108c:	4b48      	ldr	r3, [pc, #288]	; (80011b0 <main+0x218>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	494b      	ldr	r1, [pc, #300]	; (80011c0 <main+0x228>)
 8001092:	4618      	mov	r0, r3
 8001094:	f005 fa00 	bl	8006498 <VL53L0X_PerformSingleRangingMeasurement>

	  	if(RangingData.RangeStatus == 0){
 8001098:	4b49      	ldr	r3, [pc, #292]	; (80011c0 <main+0x228>)
 800109a:	7e1b      	ldrb	r3, [r3, #24]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d106      	bne.n	80010ae <main+0x116>
	  		pomiar = RangingData.RangeMilliMeter-20;
 80010a0:	4b47      	ldr	r3, [pc, #284]	; (80011c0 <main+0x228>)
 80010a2:	891b      	ldrh	r3, [r3, #8]
 80010a4:	3b14      	subs	r3, #20
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <main+0x22c>)
 80010ac:	801a      	strh	r2, [r3, #0]
	  	}

	  	//if(pomiar<prom){								// Odrzucanie błędnych pomiarów
	  		licznik = 0;
 80010ae:	4b46      	ldr	r3, [pc, #280]	; (80011c8 <main+0x230>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	801a      	strh	r2, [r3, #0]
	  		kat = (2*M_PI*a*8)/512;					// Oblicza kąt w radianach
 80010b4:	4b45      	ldr	r3, [pc, #276]	; (80011cc <main+0x234>)
 80010b6:	f993 3000 	ldrsb.w	r3, [r3]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa32 	bl	8000524 <__aeabi_i2d>
 80010c0:	a339      	add	r3, pc, #228	; (adr r3, 80011a8 <main+0x210>)
 80010c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c6:	f7ff fa97 	bl	80005f8 <__aeabi_dmul>
 80010ca:	4603      	mov	r3, r0
 80010cc:	460c      	mov	r4, r1
 80010ce:	4618      	mov	r0, r3
 80010d0:	4621      	mov	r1, r4
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	4b3e      	ldr	r3, [pc, #248]	; (80011d0 <main+0x238>)
 80010d8:	f7ff fa8e 	bl	80005f8 <__aeabi_dmul>
 80010dc:	4603      	mov	r3, r0
 80010de:	460c      	mov	r4, r1
 80010e0:	4618      	mov	r0, r3
 80010e2:	4621      	mov	r1, r4
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80010ec:	f7ff fbae 	bl	800084c <__aeabi_ddiv>
 80010f0:	4603      	mov	r3, r0
 80010f2:	460c      	mov	r4, r1
 80010f4:	4618      	mov	r0, r3
 80010f6:	4621      	mov	r1, r4
 80010f8:	f7ff fc90 	bl	8000a1c <__aeabi_d2f>
 80010fc:	4602      	mov	r2, r0
 80010fe:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <main+0x23c>)
 8001100:	601a      	str	r2, [r3, #0]
	  		Ppros = prom - pomiar;						// Oblicza odległosc od srodka silnika krokowego
 8001102:	4b35      	ldr	r3, [pc, #212]	; (80011d8 <main+0x240>)
 8001104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001108:	b29a      	uxth	r2, r3
 800110a:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <main+0x22c>)
 800110c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001110:	b29b      	uxth	r3, r3
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	b29b      	uxth	r3, r3
 8001116:	b21a      	sxth	r2, r3
 8001118:	4b30      	ldr	r3, [pc, #192]	; (80011dc <main+0x244>)
 800111a:	801a      	strh	r2, [r3, #0]

	  		xs = Ppros*cosf(kat);					// Wspolrzedna X
 800111c:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <main+0x244>)
 800111e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800112a:	4b2a      	ldr	r3, [pc, #168]	; (80011d4 <main+0x23c>)
 800112c:	edd3 7a00 	vldr	s15, [r3]
 8001130:	eeb0 0a67 	vmov.f32	s0, s15
 8001134:	f00a fbb2 	bl	800b89c <cosf>
 8001138:	eef0 7a40 	vmov.f32	s15, s0
 800113c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001144:	ee17 3a90 	vmov	r3, s15
 8001148:	b21a      	sxth	r2, r3
 800114a:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <main+0x248>)
 800114c:	801a      	strh	r2, [r3, #0]
	  		ys= Ppros*sinf(kat);					// Wspolrzedna Y
 800114e:	4b23      	ldr	r3, [pc, #140]	; (80011dc <main+0x244>)
 8001150:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001154:	ee07 3a90 	vmov	s15, r3
 8001158:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <main+0x23c>)
 800115e:	edd3 7a00 	vldr	s15, [r3]
 8001162:	eeb0 0a67 	vmov.f32	s0, s15
 8001166:	f00a fbd9 	bl	800b91c <sinf>
 800116a:	eef0 7a40 	vmov.f32	s15, s0
 800116e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001172:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001176:	ee17 3a90 	vmov	r3, s15
 800117a:	b21a      	sxth	r2, r3
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <main+0x24c>)
 800117e:	801a      	strh	r2, [r3, #0]


	  		send(pomiar,ys,zs);	// Zapisanie wspolrzednych do bufora
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <main+0x22c>)
 8001182:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <main+0x24c>)
 8001188:	f9b3 1000 	ldrsh.w	r1, [r3]
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <main+0x250>)
 800118e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001192:	461a      	mov	r2, r3
 8001194:	f000 f8bc 	bl	8001310 <send>
	  		//  MessageLen = sprintf((char*)Message, "Measured distance: %i\n\r", RangingData.RangeMilliMeter-20);
	  		//  HAL_UART_Transmit(&huart2, Message, MessageLen, 100);
	  		  //printf(Message);
	  	  //}

	  HAL_Delay(500);
 8001198:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800119c:	f000 fbb2 	bl	8001904 <HAL_Delay>
	  VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 80011a0:	e774      	b.n	800108c <main+0xf4>
 80011a2:	bf00      	nop
 80011a4:	f3af 8000 	nop.w
 80011a8:	54442d18 	.word	0x54442d18
 80011ac:	401921fb 	.word	0x401921fb
 80011b0:	20000004 	.word	0x20000004
 80011b4:	200004e0 	.word	0x200004e0
 80011b8:	2000076c 	.word	0x2000076c
 80011bc:	0800c3cc 	.word	0x0800c3cc
 80011c0:	20000534 	.word	0x20000534
 80011c4:	200004c2 	.word	0x200004c2
 80011c8:	200004c4 	.word	0x200004c4
 80011cc:	200004c0 	.word	0x200004c0
 80011d0:	40200000 	.word	0x40200000
 80011d4:	200004d0 	.word	0x200004d0
 80011d8:	20000008 	.word	0x20000008
 80011dc:	200004c6 	.word	0x200004c6
 80011e0:	200004c8 	.word	0x200004c8
 80011e4:	200004ca 	.word	0x200004ca
 80011e8:	200004cc 	.word	0x200004cc

080011ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0b8      	sub	sp, #224	; 0xe0
 80011f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011f6:	2244      	movs	r2, #68	; 0x44
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f008 fecd 	bl	8009f9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001200:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001210:	463b      	mov	r3, r7
 8001212:	2288      	movs	r2, #136	; 0x88
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f008 febf 	bl	8009f9a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800121c:	2302      	movs	r3, #2
 800121e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001222:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001226:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122a:	2310      	movs	r3, #16
 800122c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001230:	2302      	movs	r3, #2
 8001232:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800123c:	2301      	movs	r3, #1
 800123e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001242:	230a      	movs	r3, #10
 8001244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001248:	2307      	movs	r3, #7
 800124a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800124e:	2302      	movs	r3, #2
 8001250:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001254:	2302      	movs	r3, #2
 8001256:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800125e:	4618      	mov	r0, r3
 8001260:	f001 fbda 	bl	8002a18 <HAL_RCC_OscConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800126a:	f000 f903 	bl	8001474 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126e:	230f      	movs	r3, #15
 8001270:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001274:	2303      	movs	r3, #3
 8001276:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800128c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001290:	2104      	movs	r1, #4
 8001292:	4618      	mov	r0, r3
 8001294:	f001 ffa6 	bl	80031e4 <HAL_RCC_ClockConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800129e:	f000 f8e9 	bl	8001474 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80012a2:	2342      	movs	r3, #66	; 0x42
 80012a4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ae:	463b      	mov	r3, r7
 80012b0:	4618      	mov	r0, r3
 80012b2:	f002 f99b 	bl	80035ec <HAL_RCCEx_PeriphCLKConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80012bc:	f000 f8da 	bl	8001474 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012c4:	f001 fb52 	bl	800296c <HAL_PWREx_ControlVoltageScaling>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80012ce:	f000 f8d1 	bl	8001474 <Error_Handler>
  }
}
 80012d2:	bf00      	nop
 80012d4:	37e0      	adds	r7, #224	; 0xe0
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]

	  if(HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, 100) != HAL_OK){
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	2364      	movs	r3, #100	; 0x64
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	4806      	ldr	r0, [pc, #24]	; (800130c <_write+0x30>)
 80012f2:	f002 fe79 	bl	8003fe8 <HAL_UART_Transmit>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <_write+0x24>
		  Error_Handler();
 80012fc:	f000 f8ba 	bl	8001474 <Error_Handler>
	  }

	return len;
 8001300:	687b      	ldr	r3, [r7, #4]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000076c 	.word	0x2000076c

08001310 <send>:

void send(int16_t xs, int16_t ys, int16_t zs){
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
 800131a:	460b      	mov	r3, r1
 800131c:	80bb      	strh	r3, [r7, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	807b      	strh	r3, [r7, #2]

	 	// Zapisanie wspolrzednych do bufora
	printf("X %d %d %d\n\r",xs,ys,3*zs );
 8001322:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001326:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 800132a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	4602      	mov	r2, r0
 8001336:	4803      	ldr	r0, [pc, #12]	; (8001344 <send+0x34>)
 8001338:	f008 fe38 	bl	8009fac <iprintf>

}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	0800c3e8 	.word	0x0800c3e8

08001348 <resetuj>:

void resetuj(char *tab){
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

	int8_t k = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]

	k = strlen(tab);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7fe ff3b 	bl	80001d0 <strlen>
 800135a:	4603      	mov	r3, r0
 800135c:	73fb      	strb	r3, [r7, #15]

	while(k>=-1){
 800135e:	e00b      	b.n	8001378 <resetuj+0x30>
		tab[k] = '\0';
 8001360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
		k--;
 800136c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	3b01      	subs	r3, #1
 8001374:	b2db      	uxtb	r3, r3
 8001376:	73fb      	strb	r3, [r7, #15]
	while(k>=-1){
 8001378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001380:	daee      	bge.n	8001360 <resetuj+0x18>
	}

}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

	//resetuj();


	switch(r){
 8001394:	4b2c      	ldr	r3, [pc, #176]	; (8001448 <HAL_UART_RxCpltCallback+0xbc>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b20      	cmp	r3, #32
 800139a:	d002      	beq.n	80013a2 <HAL_UART_RxCpltCallback+0x16>
 800139c:	2b40      	cmp	r3, #64	; 0x40
 800139e:	d02d      	beq.n	80013fc <HAL_UART_RxCpltCallback+0x70>
 80013a0:	e042      	b.n	8001428 <HAL_UART_RxCpltCallback+0x9c>



	case ' ':

		if(flaga_1){
 80013a2:	4b2a      	ldr	r3, [pc, #168]	; (800144c <HAL_UART_RxCpltCallback+0xc0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d015      	beq.n	80013d6 <HAL_UART_RxCpltCallback+0x4a>
			strncpy(s1,Rx,i);
 80013aa:	4b29      	ldr	r3, [pc, #164]	; (8001450 <HAL_UART_RxCpltCallback+0xc4>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4928      	ldr	r1, [pc, #160]	; (8001454 <HAL_UART_RxCpltCallback+0xc8>)
 80013b2:	4829      	ldr	r0, [pc, #164]	; (8001458 <HAL_UART_RxCpltCallback+0xcc>)
 80013b4:	f008 feed 	bl	800a192 <strncpy>
			sscanf(s1, "%d", &x);
 80013b8:	4a28      	ldr	r2, [pc, #160]	; (800145c <HAL_UART_RxCpltCallback+0xd0>)
 80013ba:	4929      	ldr	r1, [pc, #164]	; (8001460 <HAL_UART_RxCpltCallback+0xd4>)
 80013bc:	4826      	ldr	r0, [pc, #152]	; (8001458 <HAL_UART_RxCpltCallback+0xcc>)
 80013be:	f008 fe71 	bl	800a0a4 <siscanf>
			flaga_1 = 0;
 80013c2:	4b22      	ldr	r3, [pc, #136]	; (800144c <HAL_UART_RxCpltCallback+0xc0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
			i=0;
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <HAL_UART_RxCpltCallback+0xc4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	801a      	strh	r2, [r3, #0]
			resetuj(s1);
 80013ce:	4822      	ldr	r0, [pc, #136]	; (8001458 <HAL_UART_RxCpltCallback+0xcc>)
 80013d0:	f7ff ffba 	bl	8001348 <resetuj>
			break;
 80013d4:	e033      	b.n	800143e <HAL_UART_RxCpltCallback+0xb2>
		}else{
			strncpy(s2,Rx,i);
 80013d6:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <HAL_UART_RxCpltCallback+0xc4>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	491d      	ldr	r1, [pc, #116]	; (8001454 <HAL_UART_RxCpltCallback+0xc8>)
 80013de:	4821      	ldr	r0, [pc, #132]	; (8001464 <HAL_UART_RxCpltCallback+0xd8>)
 80013e0:	f008 fed7 	bl	800a192 <strncpy>
			sscanf(Rx, "%d", &y);
 80013e4:	4a20      	ldr	r2, [pc, #128]	; (8001468 <HAL_UART_RxCpltCallback+0xdc>)
 80013e6:	491e      	ldr	r1, [pc, #120]	; (8001460 <HAL_UART_RxCpltCallback+0xd4>)
 80013e8:	481a      	ldr	r0, [pc, #104]	; (8001454 <HAL_UART_RxCpltCallback+0xc8>)
 80013ea:	f008 fe5b 	bl	800a0a4 <siscanf>
			i=0;
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <HAL_UART_RxCpltCallback+0xc4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	801a      	strh	r2, [r3, #0]
			resetuj(s2);
 80013f4:	481b      	ldr	r0, [pc, #108]	; (8001464 <HAL_UART_RxCpltCallback+0xd8>)
 80013f6:	f7ff ffa7 	bl	8001348 <resetuj>
			break;
 80013fa:	e020      	b.n	800143e <HAL_UART_RxCpltCallback+0xb2>
		}

		break;

	case '@':
		strncpy(s3,Rx,i);
 80013fc:	4b14      	ldr	r3, [pc, #80]	; (8001450 <HAL_UART_RxCpltCallback+0xc4>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4914      	ldr	r1, [pc, #80]	; (8001454 <HAL_UART_RxCpltCallback+0xc8>)
 8001404:	4819      	ldr	r0, [pc, #100]	; (800146c <HAL_UART_RxCpltCallback+0xe0>)
 8001406:	f008 fec4 	bl	800a192 <strncpy>
		sscanf(Rx, "%d", &z);
 800140a:	4a19      	ldr	r2, [pc, #100]	; (8001470 <HAL_UART_RxCpltCallback+0xe4>)
 800140c:	4914      	ldr	r1, [pc, #80]	; (8001460 <HAL_UART_RxCpltCallback+0xd4>)
 800140e:	4811      	ldr	r0, [pc, #68]	; (8001454 <HAL_UART_RxCpltCallback+0xc8>)
 8001410:	f008 fe48 	bl	800a0a4 <siscanf>
		i=0;
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_UART_RxCpltCallback+0xc4>)
 8001416:	2200      	movs	r2, #0
 8001418:	801a      	strh	r2, [r3, #0]
		flaga_1 = 1;
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <HAL_UART_RxCpltCallback+0xc0>)
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]
		resetuj(s3);
 8001420:	4812      	ldr	r0, [pc, #72]	; (800146c <HAL_UART_RxCpltCallback+0xe0>)
 8001422:	f7ff ff91 	bl	8001348 <resetuj>
		break;
 8001426:	e00a      	b.n	800143e <HAL_UART_RxCpltCallback+0xb2>

	default: Rx[i++]=r;
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_UART_RxCpltCallback+0xc4>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	b291      	uxth	r1, r2
 8001430:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_UART_RxCpltCallback+0xc4>)
 8001432:	8011      	strh	r1, [r2, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <HAL_UART_RxCpltCallback+0xbc>)
 8001438:	7819      	ldrb	r1, [r3, #0]
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_UART_RxCpltCallback+0xc8>)
 800143c:	5499      	strb	r1, [r3, r2]

	}



}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200005a0 	.word	0x200005a0
 800144c:	20000000 	.word	0x20000000
 8001450:	200005bc 	.word	0x200005bc
 8001454:	200005a4 	.word	0x200005a4
 8001458:	20000554 	.word	0x20000554
 800145c:	2000052c 	.word	0x2000052c
 8001460:	0800c3f8 	.word	0x0800c3f8
 8001464:	200005c4 	.word	0x200005c4
 8001468:	200005c0 	.word	0x200005c0
 800146c:	20000760 	.word	0x20000760
 8001470:	200005b8 	.word	0x200005b8

08001474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <HAL_MspInit+0x44>)
 800148c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148e:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <HAL_MspInit+0x44>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6613      	str	r3, [r2, #96]	; 0x60
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_MspInit+0x44>)
 8001498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_MspInit+0x44>)
 80014a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a6:	4a08      	ldr	r2, [pc, #32]	; (80014c8 <HAL_MspInit+0x44>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ac:	6593      	str	r3, [r2, #88]	; 0x58
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_MspInit+0x44>)
 80014b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <HardFault_Handler+0x4>

080014e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <MemManage_Handler+0x4>

080014e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <BusFault_Handler+0x4>

080014ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <UsageFault_Handler+0x4>

080014f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001520:	f000 f9d0 	bl	80018c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800152c:	4804      	ldr	r0, [pc, #16]	; (8001540 <USART2_IRQHandler+0x18>)
 800152e:	f002 fe91 	bl	8004254 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, &r, 1);
 8001532:	2201      	movs	r2, #1
 8001534:	4903      	ldr	r1, [pc, #12]	; (8001544 <USART2_IRQHandler+0x1c>)
 8001536:	4802      	ldr	r0, [pc, #8]	; (8001540 <USART2_IRQHandler+0x18>)
 8001538:	f002 fdea 	bl	8004110 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	2000076c 	.word	0x2000076c
 8001544:	200005a0 	.word	0x200005a0

08001548 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	e00a      	b.n	8001570 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800155a:	f3af 8000 	nop.w
 800155e:	4601      	mov	r1, r0
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	60ba      	str	r2, [r7, #8]
 8001566:	b2ca      	uxtb	r2, r1
 8001568:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3301      	adds	r3, #1
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	429a      	cmp	r2, r3
 8001576:	dbf0      	blt.n	800155a <_read+0x12>
	}

return len;
 8001578:	687b      	ldr	r3, [r7, #4]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
	return -1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015aa:	605a      	str	r2, [r3, #4]
	return 0;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <_isatty>:

int _isatty(int file)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
	return 1;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
	return 0;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f4:	4a14      	ldr	r2, [pc, #80]	; (8001648 <_sbrk+0x5c>)
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <_sbrk+0x60>)
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <_sbrk+0x64>)
 800160a:	4a12      	ldr	r2, [pc, #72]	; (8001654 <_sbrk+0x68>)
 800160c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	d207      	bcs.n	800162c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800161c:	f008 fc88 	bl	8009f30 <__errno>
 8001620:	4602      	mov	r2, r0
 8001622:	230c      	movs	r3, #12
 8001624:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	e009      	b.n	8001640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <_sbrk+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <_sbrk+0x64>)
 800163c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800163e:	68fb      	ldr	r3, [r7, #12]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20018000 	.word	0x20018000
 800164c:	00000400 	.word	0x00000400
 8001650:	200004d4 	.word	0x200004d4
 8001654:	20000838 	.word	0x20000838

08001658 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800165c:	4b17      	ldr	r3, [pc, #92]	; (80016bc <SystemInit+0x64>)
 800165e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001662:	4a16      	ldr	r2, [pc, #88]	; (80016bc <SystemInit+0x64>)
 8001664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <SystemInit+0x68>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a13      	ldr	r2, [pc, #76]	; (80016c0 <SystemInit+0x68>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <SystemInit+0x68>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <SystemInit+0x68>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a0f      	ldr	r2, [pc, #60]	; (80016c0 <SystemInit+0x68>)
 8001684:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001688:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800168c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <SystemInit+0x68>)
 8001690:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001694:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <SystemInit+0x68>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <SystemInit+0x68>)
 800169c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016a2:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <SystemInit+0x68>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <SystemInit+0x64>)
 80016aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ae:	609a      	str	r2, [r3, #8]
#endif
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000ed00 	.word	0xe000ed00
 80016c0:	40021000 	.word	0x40021000

080016c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_USART2_UART_Init+0x58>)
 80016ca:	4a15      	ldr	r2, [pc, #84]	; (8001720 <MX_USART2_UART_Init+0x5c>)
 80016cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <MX_USART2_UART_Init+0x58>)
 80016d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_USART2_UART_Init+0x58>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_USART2_UART_Init+0x58>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_USART2_UART_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_USART2_UART_Init+0x58>)
 80016ea:	220c      	movs	r2, #12
 80016ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <MX_USART2_UART_Init+0x58>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_USART2_UART_Init+0x58>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <MX_USART2_UART_Init+0x58>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_USART2_UART_Init+0x58>)
 8001702:	2200      	movs	r2, #0
 8001704:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_USART2_UART_Init+0x58>)
 8001708:	f002 fc20 	bl	8003f4c <HAL_UART_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001712:	f7ff feaf 	bl	8001474 <Error_Handler>
  }

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2000076c 	.word	0x2000076c
 8001720:	40004400 	.word	0x40004400

08001724 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a1b      	ldr	r2, [pc, #108]	; (80017b0 <HAL_UART_MspInit+0x8c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d130      	bne.n	80017a8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001746:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_UART_MspInit+0x90>)
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	4a1a      	ldr	r2, [pc, #104]	; (80017b4 <HAL_UART_MspInit+0x90>)
 800174c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001750:	6593      	str	r3, [r2, #88]	; 0x58
 8001752:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <HAL_UART_MspInit+0x90>)
 8001754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_UART_MspInit+0x90>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001762:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <HAL_UART_MspInit+0x90>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176a:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_UART_MspInit+0x90>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001776:	230c      	movs	r3, #12
 8001778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001786:	2307      	movs	r3, #7
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001794:	f000 fa2a 	bl	8001bec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2100      	movs	r1, #0
 800179c:	2026      	movs	r0, #38	; 0x26
 800179e:	f000 f9ae 	bl	8001afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017a2:	2026      	movs	r0, #38	; 0x26
 80017a4:	f000 f9c7 	bl	8001b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017a8:	bf00      	nop
 80017aa:	3728      	adds	r7, #40	; 0x28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40004400 	.word	0x40004400
 80017b4:	40021000 	.word	0x40021000

080017b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017bc:	f7ff ff4c 	bl	8001658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017c2:	e003      	b.n	80017cc <LoopCopyDataInit>

080017c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80017c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017ca:	3104      	adds	r1, #4

080017cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017cc:	480a      	ldr	r0, [pc, #40]	; (80017f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80017d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017d4:	d3f6      	bcc.n	80017c4 <CopyDataInit>
	ldr	r2, =_sbss
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <LoopForever+0x12>)
	b	LoopFillZerobss
 80017d8:	e002      	b.n	80017e0 <LoopFillZerobss>

080017da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017dc:	f842 3b04 	str.w	r3, [r2], #4

080017e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <LoopForever+0x16>)
	cmp	r2, r3
 80017e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017e4:	d3f9      	bcc.n	80017da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017e6:	f008 fba9 	bl	8009f3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017ea:	f7ff fbd5 	bl	8000f98 <main>

080017ee <LoopForever>:

LoopForever:
    b LoopForever
 80017ee:	e7fe      	b.n	80017ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017f0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80017f4:	0800c9f0 	.word	0x0800c9f0
	ldr	r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80017fc:	200004a4 	.word	0x200004a4
	ldr	r2, =_sbss
 8001800:	200004a4 	.word	0x200004a4
	ldr	r3, = _ebss
 8001804:	20000834 	.word	0x20000834

08001808 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001808:	e7fe      	b.n	8001808 <ADC1_2_IRQHandler>
	...

0800180c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_Init+0x3c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <HAL_Init+0x3c>)
 800181c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001820:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001822:	2003      	movs	r0, #3
 8001824:	f000 f960 	bl	8001ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001828:	2000      	movs	r0, #0
 800182a:	f000 f80f 	bl	800184c <HAL_InitTick>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	71fb      	strb	r3, [r7, #7]
 8001838:	e001      	b.n	800183e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800183a:	f7ff fe23 	bl	8001484 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800183e:	79fb      	ldrb	r3, [r7, #7]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40022000 	.word	0x40022000

0800184c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <HAL_InitTick+0x6c>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d023      	beq.n	80018a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_InitTick+0x70>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <HAL_InitTick+0x6c>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f96b 	bl	8001b52 <HAL_SYSTICK_Config>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10f      	bne.n	80018a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d809      	bhi.n	800189c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001888:	2200      	movs	r2, #0
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	f04f 30ff 	mov.w	r0, #4294967295
 8001890:	f000 f935 	bl	8001afe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001894:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <HAL_InitTick+0x74>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e007      	b.n	80018ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	73fb      	strb	r3, [r7, #15]
 80018a0:	e004      	b.n	80018ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
 80018a6:	e001      	b.n	80018ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000014 	.word	0x20000014
 80018bc:	2000000c 	.word	0x2000000c
 80018c0:	20000010 	.word	0x20000010

080018c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_IncTick+0x20>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_IncTick+0x24>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <HAL_IncTick+0x24>)
 80018d6:	6013      	str	r3, [r2, #0]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000014 	.word	0x20000014
 80018e8:	200007ec 	.word	0x200007ec

080018ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return uwTick;
 80018f0:	4b03      	ldr	r3, [pc, #12]	; (8001900 <HAL_GetTick+0x14>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	200007ec 	.word	0x200007ec

08001904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800190c:	f7ff ffee 	bl	80018ec <HAL_GetTick>
 8001910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191c:	d005      	beq.n	800192a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_Delay+0x40>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4413      	add	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800192a:	bf00      	nop
 800192c:	f7ff ffde 	bl	80018ec <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	429a      	cmp	r2, r3
 800193a:	d8f7      	bhi.n	800192c <HAL_Delay+0x28>
  {
  }
}
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000014 	.word	0x20000014

08001948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001964:	4013      	ands	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197a:	4a04      	ldr	r2, [pc, #16]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	60d3      	str	r3, [r2, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	f003 0307 	and.w	r3, r3, #7
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db0b      	blt.n	80019d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	4907      	ldr	r1, [pc, #28]	; (80019e4 <__NVIC_EnableIRQ+0x38>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	2001      	movs	r0, #1
 80019ce:	fa00 f202 	lsl.w	r2, r0, r2
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000e100 	.word	0xe000e100

080019e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	6039      	str	r1, [r7, #0]
 80019f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	db0a      	blt.n	8001a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	490c      	ldr	r1, [pc, #48]	; (8001a34 <__NVIC_SetPriority+0x4c>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	0112      	lsls	r2, r2, #4
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a10:	e00a      	b.n	8001a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4908      	ldr	r1, [pc, #32]	; (8001a38 <__NVIC_SetPriority+0x50>)
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	3b04      	subs	r3, #4
 8001a20:	0112      	lsls	r2, r2, #4
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	440b      	add	r3, r1
 8001a26:	761a      	strb	r2, [r3, #24]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000e100 	.word	0xe000e100
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	; 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f1c3 0307 	rsb	r3, r3, #7
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	bf28      	it	cs
 8001a5a:	2304      	movcs	r3, #4
 8001a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3304      	adds	r3, #4
 8001a62:	2b06      	cmp	r3, #6
 8001a64:	d902      	bls.n	8001a6c <NVIC_EncodePriority+0x30>
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3b03      	subs	r3, #3
 8001a6a:	e000      	b.n	8001a6e <NVIC_EncodePriority+0x32>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	f04f 32ff 	mov.w	r2, #4294967295
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	401a      	ands	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8e:	43d9      	mvns	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	4313      	orrs	r3, r2
         );
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3724      	adds	r7, #36	; 0x24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab4:	d301      	bcc.n	8001aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00f      	b.n	8001ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <SysTick_Config+0x40>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac2:	210f      	movs	r1, #15
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f7ff ff8e 	bl	80019e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <SysTick_Config+0x40>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <SysTick_Config+0x40>)
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	e000e010 	.word	0xe000e010

08001ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ff29 	bl	8001948 <__NVIC_SetPriorityGrouping>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b10:	f7ff ff3e 	bl	8001990 <__NVIC_GetPriorityGrouping>
 8001b14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	6978      	ldr	r0, [r7, #20]
 8001b1c:	f7ff ff8e 	bl	8001a3c <NVIC_EncodePriority>
 8001b20:	4602      	mov	r2, r0
 8001b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b26:	4611      	mov	r1, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff5d 	bl	80019e8 <__NVIC_SetPriority>
}
 8001b2e:	bf00      	nop
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff31 	bl	80019ac <__NVIC_EnableIRQ>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ffa2 	bl	8001aa4 <SysTick_Config>
 8001b60:	4603      	mov	r3, r0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b084      	sub	sp, #16
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d005      	beq.n	8001b8e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2204      	movs	r2, #4
 8001b86:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	e029      	b.n	8001be2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 020e 	bic.w	r2, r2, #14
 8001b9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0201 	bic.w	r2, r2, #1
 8001bac:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f003 021c 	and.w	r2, r3, #28
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	2101      	movs	r1, #1
 8001bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	4798      	blx	r3
    }
  }
  return status;
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfa:	e17f      	b.n	8001efc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2101      	movs	r1, #1
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	fa01 f303 	lsl.w	r3, r1, r3
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 8171 	beq.w	8001ef6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d00b      	beq.n	8001c34 <HAL_GPIO_Init+0x48>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d007      	beq.n	8001c34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c28:	2b11      	cmp	r3, #17
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b12      	cmp	r3, #18
 8001c32:	d130      	bne.n	8001c96 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	091b      	lsrs	r3, r3, #4
 8001c80:	f003 0201 	and.w	r2, r3, #1
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d118      	bne.n	8001cd4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ca8:	2201      	movs	r2, #1
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	08db      	lsrs	r3, r3, #3
 8001cbe:	f003 0201 	and.w	r2, r3, #1
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	2203      	movs	r2, #3
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x128>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b12      	cmp	r3, #18
 8001d12:	d123      	bne.n	8001d5c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	08da      	lsrs	r2, r3, #3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3208      	adds	r2, #8
 8001d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d20:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	220f      	movs	r2, #15
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	08da      	lsrs	r2, r3, #3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3208      	adds	r2, #8
 8001d56:	6939      	ldr	r1, [r7, #16]
 8001d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0203 	and.w	r2, r3, #3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80ac 	beq.w	8001ef6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9e:	4b5e      	ldr	r3, [pc, #376]	; (8001f18 <HAL_GPIO_Init+0x32c>)
 8001da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da2:	4a5d      	ldr	r2, [pc, #372]	; (8001f18 <HAL_GPIO_Init+0x32c>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6613      	str	r3, [r2, #96]	; 0x60
 8001daa:	4b5b      	ldr	r3, [pc, #364]	; (8001f18 <HAL_GPIO_Init+0x32c>)
 8001dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001db6:	4a59      	ldr	r2, [pc, #356]	; (8001f1c <HAL_GPIO_Init+0x330>)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	220f      	movs	r2, #15
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001de0:	d025      	beq.n	8001e2e <HAL_GPIO_Init+0x242>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4e      	ldr	r2, [pc, #312]	; (8001f20 <HAL_GPIO_Init+0x334>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d01f      	beq.n	8001e2a <HAL_GPIO_Init+0x23e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4d      	ldr	r2, [pc, #308]	; (8001f24 <HAL_GPIO_Init+0x338>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d019      	beq.n	8001e26 <HAL_GPIO_Init+0x23a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4c      	ldr	r2, [pc, #304]	; (8001f28 <HAL_GPIO_Init+0x33c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_GPIO_Init+0x236>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4b      	ldr	r2, [pc, #300]	; (8001f2c <HAL_GPIO_Init+0x340>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00d      	beq.n	8001e1e <HAL_GPIO_Init+0x232>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4a      	ldr	r2, [pc, #296]	; (8001f30 <HAL_GPIO_Init+0x344>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d007      	beq.n	8001e1a <HAL_GPIO_Init+0x22e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a49      	ldr	r2, [pc, #292]	; (8001f34 <HAL_GPIO_Init+0x348>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_GPIO_Init+0x22a>
 8001e12:	2306      	movs	r3, #6
 8001e14:	e00c      	b.n	8001e30 <HAL_GPIO_Init+0x244>
 8001e16:	2307      	movs	r3, #7
 8001e18:	e00a      	b.n	8001e30 <HAL_GPIO_Init+0x244>
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	e008      	b.n	8001e30 <HAL_GPIO_Init+0x244>
 8001e1e:	2304      	movs	r3, #4
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x244>
 8001e22:	2303      	movs	r3, #3
 8001e24:	e004      	b.n	8001e30 <HAL_GPIO_Init+0x244>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e002      	b.n	8001e30 <HAL_GPIO_Init+0x244>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <HAL_GPIO_Init+0x244>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	f002 0203 	and.w	r2, r2, #3
 8001e36:	0092      	lsls	r2, r2, #2
 8001e38:	4093      	lsls	r3, r2
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e40:	4936      	ldr	r1, [pc, #216]	; (8001f1c <HAL_GPIO_Init+0x330>)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	089b      	lsrs	r3, r3, #2
 8001e46:	3302      	adds	r3, #2
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e4e:	4b3a      	ldr	r3, [pc, #232]	; (8001f38 <HAL_GPIO_Init+0x34c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e72:	4a31      	ldr	r2, [pc, #196]	; (8001f38 <HAL_GPIO_Init+0x34c>)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e78:	4b2f      	ldr	r3, [pc, #188]	; (8001f38 <HAL_GPIO_Init+0x34c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e9c:	4a26      	ldr	r2, [pc, #152]	; (8001f38 <HAL_GPIO_Init+0x34c>)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ea2:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <HAL_GPIO_Init+0x34c>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ec6:	4a1c      	ldr	r2, [pc, #112]	; (8001f38 <HAL_GPIO_Init+0x34c>)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_GPIO_Init+0x34c>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ef0:	4a11      	ldr	r2, [pc, #68]	; (8001f38 <HAL_GPIO_Init+0x34c>)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	fa22 f303 	lsr.w	r3, r2, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f47f ae78 	bne.w	8001bfc <HAL_GPIO_Init+0x10>
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	371c      	adds	r7, #28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40010000 	.word	0x40010000
 8001f20:	48000400 	.word	0x48000400
 8001f24:	48000800 	.word	0x48000800
 8001f28:	48000c00 	.word	0x48000c00
 8001f2c:	48001000 	.word	0x48001000
 8001f30:	48001400 	.word	0x48001400
 8001f34:	48001800 	.word	0x48001800
 8001f38:	40010400 	.word	0x40010400

08001f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f4c:	787b      	ldrb	r3, [r7, #1]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f52:	887a      	ldrh	r2, [r7, #2]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f58:	e002      	b.n	8001f60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f5a:	887a      	ldrh	r2, [r7, #2]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e081      	b.n	8002082 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7fe ffba 	bl	8000f0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2224      	movs	r2, #36	; 0x24
 8001f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fcc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d107      	bne.n	8001fe6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	e006      	b.n	8001ff4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ff2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d104      	bne.n	8002006 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002004:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002018:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002028:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691a      	ldr	r2, [r3, #16]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	ea42 0103 	orr.w	r1, r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	021a      	lsls	r2, r3, #8
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69d9      	ldr	r1, [r3, #28]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1a      	ldr	r2, [r3, #32]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0201 	orr.w	r2, r2, #1
 8002062:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2220      	movs	r2, #32
 800206e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af02      	add	r7, sp, #8
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	461a      	mov	r2, r3
 8002098:	460b      	mov	r3, r1
 800209a:	817b      	strh	r3, [r7, #10]
 800209c:	4613      	mov	r3, r2
 800209e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b20      	cmp	r3, #32
 80020aa:	f040 80da 	bne.w	8002262 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_I2C_Master_Transmit+0x30>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e0d3      	b.n	8002264 <HAL_I2C_Master_Transmit+0x1d8>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020c4:	f7ff fc12 	bl	80018ec <HAL_GetTick>
 80020c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	2319      	movs	r3, #25
 80020d0:	2201      	movs	r2, #1
 80020d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f9e6 	bl	80024a8 <I2C_WaitOnFlagUntilTimeout>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0be      	b.n	8002264 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2221      	movs	r2, #33	; 0x21
 80020ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2210      	movs	r2, #16
 80020f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	893a      	ldrh	r2, [r7, #8]
 8002106:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002112:	b29b      	uxth	r3, r3
 8002114:	2bff      	cmp	r3, #255	; 0xff
 8002116:	d90e      	bls.n	8002136 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	22ff      	movs	r2, #255	; 0xff
 800211c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002122:	b2da      	uxtb	r2, r3
 8002124:	8979      	ldrh	r1, [r7, #10]
 8002126:	4b51      	ldr	r3, [pc, #324]	; (800226c <HAL_I2C_Master_Transmit+0x1e0>)
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 fb48 	bl	80027c4 <I2C_TransferConfig>
 8002134:	e06c      	b.n	8002210 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213a:	b29a      	uxth	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002144:	b2da      	uxtb	r2, r3
 8002146:	8979      	ldrh	r1, [r7, #10]
 8002148:	4b48      	ldr	r3, [pc, #288]	; (800226c <HAL_I2C_Master_Transmit+0x1e0>)
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fb37 	bl	80027c4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002156:	e05b      	b.n	8002210 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	6a39      	ldr	r1, [r7, #32]
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 f9e3 	bl	8002528 <I2C_WaitOnTXISFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e07b      	b.n	8002264 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	781a      	ldrb	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002186:	b29b      	uxth	r3, r3
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002194:	3b01      	subs	r3, #1
 8002196:	b29a      	uxth	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d034      	beq.n	8002210 <HAL_I2C_Master_Transmit+0x184>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d130      	bne.n	8002210 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	2200      	movs	r2, #0
 80021b6:	2180      	movs	r1, #128	; 0x80
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f975 	bl	80024a8 <I2C_WaitOnFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e04d      	b.n	8002264 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2bff      	cmp	r3, #255	; 0xff
 80021d0:	d90e      	bls.n	80021f0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	22ff      	movs	r2, #255	; 0xff
 80021d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	8979      	ldrh	r1, [r7, #10]
 80021e0:	2300      	movs	r3, #0
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 faeb 	bl	80027c4 <I2C_TransferConfig>
 80021ee:	e00f      	b.n	8002210 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	8979      	ldrh	r1, [r7, #10]
 8002202:	2300      	movs	r3, #0
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 fada 	bl	80027c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d19e      	bne.n	8002158 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	6a39      	ldr	r1, [r7, #32]
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f9c2 	bl	80025a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e01a      	b.n	8002264 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2220      	movs	r2, #32
 8002234:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6859      	ldr	r1, [r3, #4]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_I2C_Master_Transmit+0x1e4>)
 8002242:	400b      	ands	r3, r1
 8002244:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2220      	movs	r2, #32
 800224a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	e000      	b.n	8002264 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002262:	2302      	movs	r3, #2
  }
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	80002000 	.word	0x80002000
 8002270:	fe00e800 	.word	0xfe00e800

08002274 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af02      	add	r7, sp, #8
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	461a      	mov	r2, r3
 8002280:	460b      	mov	r3, r1
 8002282:	817b      	strh	r3, [r7, #10]
 8002284:	4613      	mov	r3, r2
 8002286:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b20      	cmp	r3, #32
 8002292:	f040 80db 	bne.w	800244c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_I2C_Master_Receive+0x30>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e0d4      	b.n	800244e <HAL_I2C_Master_Receive+0x1da>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022ac:	f7ff fb1e 	bl	80018ec <HAL_GetTick>
 80022b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	2319      	movs	r3, #25
 80022b8:	2201      	movs	r2, #1
 80022ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f8f2 	bl	80024a8 <I2C_WaitOnFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0bf      	b.n	800244e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2222      	movs	r2, #34	; 0x22
 80022d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2210      	movs	r2, #16
 80022da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	893a      	ldrh	r2, [r7, #8]
 80022ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2bff      	cmp	r3, #255	; 0xff
 80022fe:	d90e      	bls.n	800231e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	22ff      	movs	r2, #255	; 0xff
 8002304:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230a:	b2da      	uxtb	r2, r3
 800230c:	8979      	ldrh	r1, [r7, #10]
 800230e:	4b52      	ldr	r3, [pc, #328]	; (8002458 <HAL_I2C_Master_Receive+0x1e4>)
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fa54 	bl	80027c4 <I2C_TransferConfig>
 800231c:	e06d      	b.n	80023fa <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232c:	b2da      	uxtb	r2, r3
 800232e:	8979      	ldrh	r1, [r7, #10]
 8002330:	4b49      	ldr	r3, [pc, #292]	; (8002458 <HAL_I2C_Master_Receive+0x1e4>)
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 fa43 	bl	80027c4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800233e:	e05c      	b.n	80023fa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	6a39      	ldr	r1, [r7, #32]
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f96b 	bl	8002620 <I2C_WaitOnRXNEFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e07c      	b.n	800244e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237c:	b29b      	uxth	r3, r3
 800237e:	3b01      	subs	r3, #1
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238a:	b29b      	uxth	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d034      	beq.n	80023fa <HAL_I2C_Master_Receive+0x186>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002394:	2b00      	cmp	r3, #0
 8002396:	d130      	bne.n	80023fa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	2200      	movs	r2, #0
 80023a0:	2180      	movs	r1, #128	; 0x80
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f880 	bl	80024a8 <I2C_WaitOnFlagUntilTimeout>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e04d      	b.n	800244e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	2bff      	cmp	r3, #255	; 0xff
 80023ba:	d90e      	bls.n	80023da <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	22ff      	movs	r2, #255	; 0xff
 80023c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	8979      	ldrh	r1, [r7, #10]
 80023ca:	2300      	movs	r3, #0
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f9f6 	bl	80027c4 <I2C_TransferConfig>
 80023d8:	e00f      	b.n	80023fa <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	8979      	ldrh	r1, [r7, #10]
 80023ec:	2300      	movs	r3, #0
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f9e5 	bl	80027c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d19d      	bne.n	8002340 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	6a39      	ldr	r1, [r7, #32]
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f8cd 	bl	80025a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e01a      	b.n	800244e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2220      	movs	r2, #32
 800241e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6859      	ldr	r1, [r3, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	4b0c      	ldr	r3, [pc, #48]	; (800245c <HAL_I2C_Master_Receive+0x1e8>)
 800242c:	400b      	ands	r3, r1
 800242e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	e000      	b.n	800244e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800244c:	2302      	movs	r3, #2
  }
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	80002400 	.word	0x80002400
 800245c:	fe00e800 	.word	0xfe00e800

08002460 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b02      	cmp	r3, #2
 8002474:	d103      	bne.n	800247e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2200      	movs	r2, #0
 800247c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	d007      	beq.n	800249c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699a      	ldr	r2, [r3, #24]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	619a      	str	r2, [r3, #24]
  }
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	4613      	mov	r3, r2
 80024b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024b8:	e022      	b.n	8002500 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c0:	d01e      	beq.n	8002500 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024c2:	f7ff fa13 	bl	80018ec <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d302      	bcc.n	80024d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d113      	bne.n	8002500 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024dc:	f043 0220 	orr.w	r2, r3, #32
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e00f      	b.n	8002520 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	4013      	ands	r3, r2
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	429a      	cmp	r2, r3
 800250e:	bf0c      	ite	eq
 8002510:	2301      	moveq	r3, #1
 8002512:	2300      	movne	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	429a      	cmp	r2, r3
 800251c:	d0cd      	beq.n	80024ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002534:	e02c      	b.n	8002590 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f8dc 	bl	80026f8 <I2C_IsAcknowledgeFailed>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e02a      	b.n	80025a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d01e      	beq.n	8002590 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002552:	f7ff f9cb 	bl	80018ec <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	429a      	cmp	r2, r3
 8002560:	d302      	bcc.n	8002568 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d113      	bne.n	8002590 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	f043 0220 	orr.w	r2, r3, #32
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e007      	b.n	80025a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b02      	cmp	r3, #2
 800259c:	d1cb      	bne.n	8002536 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025b4:	e028      	b.n	8002608 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68b9      	ldr	r1, [r7, #8]
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 f89c 	bl	80026f8 <I2C_IsAcknowledgeFailed>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e026      	b.n	8002618 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ca:	f7ff f98f 	bl	80018ec <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d302      	bcc.n	80025e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d113      	bne.n	8002608 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	f043 0220 	orr.w	r2, r3, #32
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e007      	b.n	8002618 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b20      	cmp	r3, #32
 8002614:	d1cf      	bne.n	80025b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800262c:	e055      	b.n	80026da <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f860 	bl	80026f8 <I2C_IsAcknowledgeFailed>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e053      	b.n	80026ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b20      	cmp	r3, #32
 800264e:	d129      	bne.n	80026a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b04      	cmp	r3, #4
 800265c:	d105      	bne.n	800266a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	e03f      	b.n	80026ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2220      	movs	r2, #32
 8002670:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6859      	ldr	r1, [r3, #4]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800267e:	400b      	ands	r3, r1
 8002680:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e022      	b.n	80026ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a4:	f7ff f922 	bl	80018ec <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d302      	bcc.n	80026ba <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10f      	bne.n	80026da <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	f043 0220 	orr.w	r2, r3, #32
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e007      	b.n	80026ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d1a2      	bne.n	800262e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	fe00e800 	.word	0xfe00e800

080026f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b10      	cmp	r3, #16
 8002710:	d151      	bne.n	80027b6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002712:	e022      	b.n	800275a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271a:	d01e      	beq.n	800275a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271c:	f7ff f8e6 	bl	80018ec <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	429a      	cmp	r2, r3
 800272a:	d302      	bcc.n	8002732 <I2C_IsAcknowledgeFailed+0x3a>
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d113      	bne.n	800275a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	f043 0220 	orr.w	r2, r3, #32
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e02e      	b.n	80027b8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	2b20      	cmp	r3, #32
 8002766:	d1d5      	bne.n	8002714 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2210      	movs	r2, #16
 800276e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2220      	movs	r2, #32
 8002776:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff fe71 	bl	8002460 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6859      	ldr	r1, [r3, #4]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <I2C_IsAcknowledgeFailed+0xc8>)
 800278a:	400b      	ands	r3, r1
 800278c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f043 0204 	orr.w	r2, r3, #4
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	fe00e800 	.word	0xfe00e800

080027c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	460b      	mov	r3, r1
 80027d0:	817b      	strh	r3, [r7, #10]
 80027d2:	4613      	mov	r3, r2
 80027d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	0d5b      	lsrs	r3, r3, #21
 80027e0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80027e4:	4b0d      	ldr	r3, [pc, #52]	; (800281c <I2C_TransferConfig+0x58>)
 80027e6:	430b      	orrs	r3, r1
 80027e8:	43db      	mvns	r3, r3
 80027ea:	ea02 0103 	and.w	r1, r2, r3
 80027ee:	897b      	ldrh	r3, [r7, #10]
 80027f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027f4:	7a7b      	ldrb	r3, [r7, #9]
 80027f6:	041b      	lsls	r3, r3, #16
 80027f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	431a      	orrs	r2, r3
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	431a      	orrs	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	03ff63ff 	.word	0x03ff63ff

08002820 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b20      	cmp	r3, #32
 8002834:	d138      	bne.n	80028a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002840:	2302      	movs	r3, #2
 8002842:	e032      	b.n	80028aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2224      	movs	r2, #36	; 0x24
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002872:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6819      	ldr	r1, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	e000      	b.n	80028aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028a8:	2302      	movs	r3, #2
  }
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b085      	sub	sp, #20
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d139      	bne.n	8002940 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e033      	b.n	8002942 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2224      	movs	r2, #36	; 0x24
 80028e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0201 	bic.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002908:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	021b      	lsls	r3, r3, #8
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4313      	orrs	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	e000      	b.n	8002942 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002940:	2302      	movs	r3, #2
  }
}
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002954:	4b04      	ldr	r3, [pc, #16]	; (8002968 <HAL_PWREx_GetVoltageRange+0x18>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40007000 	.word	0x40007000

0800296c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800297a:	d130      	bne.n	80029de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800297c:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002988:	d038      	beq.n	80029fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002992:	4a1e      	ldr	r2, [pc, #120]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002994:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002998:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800299a:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2232      	movs	r2, #50	; 0x32
 80029a0:	fb02 f303 	mul.w	r3, r2, r3
 80029a4:	4a1b      	ldr	r2, [pc, #108]	; (8002a14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0c9b      	lsrs	r3, r3, #18
 80029ac:	3301      	adds	r3, #1
 80029ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029b0:	e002      	b.n	80029b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	3b01      	subs	r3, #1
 80029b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c4:	d102      	bne.n	80029cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f2      	bne.n	80029b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029cc:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d8:	d110      	bne.n	80029fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e00f      	b.n	80029fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029de:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ea:	d007      	beq.n	80029fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029ec:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029f4:	4a05      	ldr	r2, [pc, #20]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40007000 	.word	0x40007000
 8002a10:	2000000c 	.word	0x2000000c
 8002a14:	431bde83 	.word	0x431bde83

08002a18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e3d4      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a2a:	4ba1      	ldr	r3, [pc, #644]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a34:	4b9e      	ldr	r3, [pc, #632]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 80e4 	beq.w	8002c14 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d007      	beq.n	8002a62 <HAL_RCC_OscConfig+0x4a>
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	2b0c      	cmp	r3, #12
 8002a56:	f040 808b 	bne.w	8002b70 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	f040 8087 	bne.w	8002b70 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a62:	4b93      	ldr	r3, [pc, #588]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_RCC_OscConfig+0x62>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e3ac      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1a      	ldr	r2, [r3, #32]
 8002a7e:	4b8c      	ldr	r3, [pc, #560]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d004      	beq.n	8002a94 <HAL_RCC_OscConfig+0x7c>
 8002a8a:	4b89      	ldr	r3, [pc, #548]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a92:	e005      	b.n	8002aa0 <HAL_RCC_OscConfig+0x88>
 8002a94:	4b86      	ldr	r3, [pc, #536]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d223      	bcs.n	8002aec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 fd3f 	bl	800352c <RCC_SetFlashLatencyFromMSIRange>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e38d      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ab8:	4b7d      	ldr	r3, [pc, #500]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a7c      	ldr	r2, [pc, #496]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002abe:	f043 0308 	orr.w	r3, r3, #8
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	4b7a      	ldr	r3, [pc, #488]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4977      	ldr	r1, [pc, #476]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ad6:	4b76      	ldr	r3, [pc, #472]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	021b      	lsls	r3, r3, #8
 8002ae4:	4972      	ldr	r1, [pc, #456]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]
 8002aea:	e025      	b.n	8002b38 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aec:	4b70      	ldr	r3, [pc, #448]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a6f      	ldr	r2, [pc, #444]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002af2:	f043 0308 	orr.w	r3, r3, #8
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	4b6d      	ldr	r3, [pc, #436]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	496a      	ldr	r1, [pc, #424]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b0a:	4b69      	ldr	r3, [pc, #420]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	021b      	lsls	r3, r3, #8
 8002b18:	4965      	ldr	r1, [pc, #404]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d109      	bne.n	8002b38 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fcff 	bl	800352c <RCC_SetFlashLatencyFromMSIRange>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e34d      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b38:	f000 fc36 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8002b3c:	4601      	mov	r1, r0
 8002b3e:	4b5c      	ldr	r3, [pc, #368]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	091b      	lsrs	r3, r3, #4
 8002b44:	f003 030f 	and.w	r3, r3, #15
 8002b48:	4a5a      	ldr	r2, [pc, #360]	; (8002cb4 <HAL_RCC_OscConfig+0x29c>)
 8002b4a:	5cd3      	ldrb	r3, [r2, r3]
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	fa21 f303 	lsr.w	r3, r1, r3
 8002b54:	4a58      	ldr	r2, [pc, #352]	; (8002cb8 <HAL_RCC_OscConfig+0x2a0>)
 8002b56:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b58:	4b58      	ldr	r3, [pc, #352]	; (8002cbc <HAL_RCC_OscConfig+0x2a4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe fe75 	bl	800184c <HAL_InitTick>
 8002b62:	4603      	mov	r3, r0
 8002b64:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d052      	beq.n	8002c12 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	e331      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d032      	beq.n	8002bde <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b78:	4b4d      	ldr	r3, [pc, #308]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a4c      	ldr	r2, [pc, #304]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b84:	f7fe feb2 	bl	80018ec <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b8c:	f7fe feae 	bl	80018ec <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e31a      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b9e:	4b44      	ldr	r3, [pc, #272]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002baa:	4b41      	ldr	r3, [pc, #260]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a40      	ldr	r2, [pc, #256]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002bb0:	f043 0308 	orr.w	r3, r3, #8
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	4b3e      	ldr	r3, [pc, #248]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	493b      	ldr	r1, [pc, #236]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bc8:	4b39      	ldr	r3, [pc, #228]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	4936      	ldr	r1, [pc, #216]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]
 8002bdc:	e01a      	b.n	8002c14 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bde:	4b34      	ldr	r3, [pc, #208]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a33      	ldr	r2, [pc, #204]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002be4:	f023 0301 	bic.w	r3, r3, #1
 8002be8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bea:	f7fe fe7f 	bl	80018ec <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bf2:	f7fe fe7b 	bl	80018ec <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e2e7      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c04:	4b2a      	ldr	r3, [pc, #168]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1f0      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x1da>
 8002c10:	e000      	b.n	8002c14 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c12:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d074      	beq.n	8002d0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d005      	beq.n	8002c32 <HAL_RCC_OscConfig+0x21a>
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	2b0c      	cmp	r3, #12
 8002c2a:	d10e      	bne.n	8002c4a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d10b      	bne.n	8002c4a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c32:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d064      	beq.n	8002d08 <HAL_RCC_OscConfig+0x2f0>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d160      	bne.n	8002d08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e2c4      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c52:	d106      	bne.n	8002c62 <HAL_RCC_OscConfig+0x24a>
 8002c54:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a15      	ldr	r2, [pc, #84]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	e01d      	b.n	8002c9e <HAL_RCC_OscConfig+0x286>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c6a:	d10c      	bne.n	8002c86 <HAL_RCC_OscConfig+0x26e>
 8002c6c:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a0f      	ldr	r2, [pc, #60]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a0c      	ldr	r2, [pc, #48]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	e00b      	b.n	8002c9e <HAL_RCC_OscConfig+0x286>
 8002c86:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a09      	ldr	r2, [pc, #36]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a06      	ldr	r2, [pc, #24]	; (8002cb0 <HAL_RCC_OscConfig+0x298>)
 8002c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d01c      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca6:	f7fe fe21 	bl	80018ec <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cac:	e011      	b.n	8002cd2 <HAL_RCC_OscConfig+0x2ba>
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	0800c408 	.word	0x0800c408
 8002cb8:	2000000c 	.word	0x2000000c
 8002cbc:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7fe fe14 	bl	80018ec <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	; 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e280      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd2:	4baf      	ldr	r3, [pc, #700]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x2a8>
 8002cde:	e014      	b.n	8002d0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fe fe04 	bl	80018ec <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7fe fe00 	bl	80018ec <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	; 0x64
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e26c      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cfa:	4ba5      	ldr	r3, [pc, #660]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x2d0>
 8002d06:	e000      	b.n	8002d0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d060      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_OscConfig+0x310>
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	d119      	bne.n	8002d56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d116      	bne.n	8002d56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d28:	4b99      	ldr	r3, [pc, #612]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_OscConfig+0x328>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e249      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d40:	4b93      	ldr	r3, [pc, #588]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	061b      	lsls	r3, r3, #24
 8002d4e:	4990      	ldr	r1, [pc, #576]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d54:	e040      	b.n	8002dd8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d023      	beq.n	8002da6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d5e:	4b8c      	ldr	r3, [pc, #560]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a8b      	ldr	r2, [pc, #556]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6a:	f7fe fdbf 	bl	80018ec <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d72:	f7fe fdbb 	bl	80018ec <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e227      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d84:	4b82      	ldr	r3, [pc, #520]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d90:	4b7f      	ldr	r3, [pc, #508]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	061b      	lsls	r3, r3, #24
 8002d9e:	497c      	ldr	r1, [pc, #496]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]
 8002da4:	e018      	b.n	8002dd8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002da6:	4b7a      	ldr	r3, [pc, #488]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a79      	ldr	r2, [pc, #484]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db2:	f7fe fd9b 	bl	80018ec <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dba:	f7fe fd97 	bl	80018ec <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e203      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dcc:	4b70      	ldr	r3, [pc, #448]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f0      	bne.n	8002dba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d03c      	beq.n	8002e5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01c      	beq.n	8002e26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dec:	4b68      	ldr	r3, [pc, #416]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002df2:	4a67      	ldr	r2, [pc, #412]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfc:	f7fe fd76 	bl	80018ec <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e04:	f7fe fd72 	bl	80018ec <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e1de      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e16:	4b5e      	ldr	r3, [pc, #376]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0ef      	beq.n	8002e04 <HAL_RCC_OscConfig+0x3ec>
 8002e24:	e01b      	b.n	8002e5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e26:	4b5a      	ldr	r3, [pc, #360]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e2c:	4a58      	ldr	r2, [pc, #352]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002e2e:	f023 0301 	bic.w	r3, r3, #1
 8002e32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e36:	f7fe fd59 	bl	80018ec <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3e:	f7fe fd55 	bl	80018ec <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e1c1      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e50:	4b4f      	ldr	r3, [pc, #316]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1ef      	bne.n	8002e3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 80a6 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e70:	4b47      	ldr	r3, [pc, #284]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10d      	bne.n	8002e98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e7c:	4b44      	ldr	r3, [pc, #272]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e80:	4a43      	ldr	r2, [pc, #268]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e86:	6593      	str	r3, [r2, #88]	; 0x58
 8002e88:	4b41      	ldr	r3, [pc, #260]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e94:	2301      	movs	r3, #1
 8002e96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e98:	4b3e      	ldr	r3, [pc, #248]	; (8002f94 <HAL_RCC_OscConfig+0x57c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d118      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ea4:	4b3b      	ldr	r3, [pc, #236]	; (8002f94 <HAL_RCC_OscConfig+0x57c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a3a      	ldr	r2, [pc, #232]	; (8002f94 <HAL_RCC_OscConfig+0x57c>)
 8002eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb0:	f7fe fd1c 	bl	80018ec <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb8:	f7fe fd18 	bl	80018ec <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e184      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eca:	4b32      	ldr	r3, [pc, #200]	; (8002f94 <HAL_RCC_OscConfig+0x57c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d108      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4d8>
 8002ede:	4b2c      	ldr	r3, [pc, #176]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee4:	4a2a      	ldr	r2, [pc, #168]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eee:	e024      	b.n	8002f3a <HAL_RCC_OscConfig+0x522>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b05      	cmp	r3, #5
 8002ef6:	d110      	bne.n	8002f1a <HAL_RCC_OscConfig+0x502>
 8002ef8:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efe:	4a24      	ldr	r2, [pc, #144]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002f00:	f043 0304 	orr.w	r3, r3, #4
 8002f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f08:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0e:	4a20      	ldr	r2, [pc, #128]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f18:	e00f      	b.n	8002f3a <HAL_RCC_OscConfig+0x522>
 8002f1a:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f20:	4a1b      	ldr	r2, [pc, #108]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f2a:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f30:	4a17      	ldr	r2, [pc, #92]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002f32:	f023 0304 	bic.w	r3, r3, #4
 8002f36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d016      	beq.n	8002f70 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f42:	f7fe fcd3 	bl	80018ec <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f48:	e00a      	b.n	8002f60 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4a:	f7fe fccf 	bl	80018ec <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e139      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_RCC_OscConfig+0x578>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0ed      	beq.n	8002f4a <HAL_RCC_OscConfig+0x532>
 8002f6e:	e01a      	b.n	8002fa6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7fe fcbc 	bl	80018ec <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f76:	e00f      	b.n	8002f98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f78:	f7fe fcb8 	bl	80018ec <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d906      	bls.n	8002f98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e122      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
 8002f8e:	bf00      	nop
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f98:	4b90      	ldr	r3, [pc, #576]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8002f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1e8      	bne.n	8002f78 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fa6:	7ffb      	ldrb	r3, [r7, #31]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d105      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fac:	4b8b      	ldr	r3, [pc, #556]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8002fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb0:	4a8a      	ldr	r2, [pc, #552]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8002fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 8108 	beq.w	80031d2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	f040 80d0 	bne.w	800316c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fcc:	4b83      	ldr	r3, [pc, #524]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f003 0203 	and.w	r2, r3, #3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d130      	bne.n	8003042 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	3b01      	subs	r3, #1
 8002fec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d127      	bne.n	8003042 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d11f      	bne.n	8003042 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800300c:	2a07      	cmp	r2, #7
 800300e:	bf14      	ite	ne
 8003010:	2201      	movne	r2, #1
 8003012:	2200      	moveq	r2, #0
 8003014:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003016:	4293      	cmp	r3, r2
 8003018:	d113      	bne.n	8003042 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	3b01      	subs	r3, #1
 8003028:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d109      	bne.n	8003042 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	085b      	lsrs	r3, r3, #1
 800303a:	3b01      	subs	r3, #1
 800303c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800303e:	429a      	cmp	r2, r3
 8003040:	d06e      	beq.n	8003120 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	2b0c      	cmp	r3, #12
 8003046:	d069      	beq.n	800311c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003048:	4b64      	ldr	r3, [pc, #400]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d105      	bne.n	8003060 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003054:	4b61      	ldr	r3, [pc, #388]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0b7      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003064:	4b5d      	ldr	r3, [pc, #372]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a5c      	ldr	r2, [pc, #368]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 800306a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800306e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003070:	f7fe fc3c 	bl	80018ec <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003078:	f7fe fc38 	bl	80018ec <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e0a4      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800308a:	4b54      	ldr	r3, [pc, #336]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003096:	4b51      	ldr	r3, [pc, #324]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	4b51      	ldr	r3, [pc, #324]	; (80031e0 <HAL_RCC_OscConfig+0x7c8>)
 800309c:	4013      	ands	r3, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030a6:	3a01      	subs	r2, #1
 80030a8:	0112      	lsls	r2, r2, #4
 80030aa:	4311      	orrs	r1, r2
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030b0:	0212      	lsls	r2, r2, #8
 80030b2:	4311      	orrs	r1, r2
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030b8:	0852      	lsrs	r2, r2, #1
 80030ba:	3a01      	subs	r2, #1
 80030bc:	0552      	lsls	r2, r2, #21
 80030be:	4311      	orrs	r1, r2
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030c4:	0852      	lsrs	r2, r2, #1
 80030c6:	3a01      	subs	r2, #1
 80030c8:	0652      	lsls	r2, r2, #25
 80030ca:	4311      	orrs	r1, r2
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030d0:	0912      	lsrs	r2, r2, #4
 80030d2:	0452      	lsls	r2, r2, #17
 80030d4:	430a      	orrs	r2, r1
 80030d6:	4941      	ldr	r1, [pc, #260]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030dc:	4b3f      	ldr	r3, [pc, #252]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a3e      	ldr	r2, [pc, #248]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 80030e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030e8:	4b3c      	ldr	r3, [pc, #240]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4a3b      	ldr	r2, [pc, #236]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 80030ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030f4:	f7fe fbfa 	bl	80018ec <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fc:	f7fe fbf6 	bl	80018ec <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e062      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800310e:	4b33      	ldr	r3, [pc, #204]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800311a:	e05a      	b.n	80031d2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e059      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003120:	4b2e      	ldr	r3, [pc, #184]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d152      	bne.n	80031d2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800312c:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a2a      	ldr	r2, [pc, #168]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003136:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003138:	4b28      	ldr	r3, [pc, #160]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4a27      	ldr	r2, [pc, #156]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 800313e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003142:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003144:	f7fe fbd2 	bl	80018ec <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314c:	f7fe fbce 	bl	80018ec <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e03a      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800315e:	4b1f      	ldr	r3, [pc, #124]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCC_OscConfig+0x734>
 800316a:	e032      	b.n	80031d2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2b0c      	cmp	r3, #12
 8003170:	d02d      	beq.n	80031ce <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a19      	ldr	r2, [pc, #100]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003178:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800317c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800317e:	4b17      	ldr	r3, [pc, #92]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d105      	bne.n	8003196 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800318a:	4b14      	ldr	r3, [pc, #80]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	4a13      	ldr	r2, [pc, #76]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003190:	f023 0303 	bic.w	r3, r3, #3
 8003194:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003196:	4b11      	ldr	r3, [pc, #68]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	4a10      	ldr	r2, [pc, #64]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 800319c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80031a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a6:	f7fe fba1 	bl	80018ec <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ae:	f7fe fb9d 	bl	80018ec <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e009      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c0:	4b06      	ldr	r3, [pc, #24]	; (80031dc <HAL_RCC_OscConfig+0x7c4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f0      	bne.n	80031ae <HAL_RCC_OscConfig+0x796>
 80031cc:	e001      	b.n	80031d2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3720      	adds	r7, #32
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000
 80031e0:	f99d808c 	.word	0xf99d808c

080031e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0c8      	b.n	800338a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f8:	4b66      	ldr	r3, [pc, #408]	; (8003394 <HAL_RCC_ClockConfig+0x1b0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d910      	bls.n	8003228 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b63      	ldr	r3, [pc, #396]	; (8003394 <HAL_RCC_ClockConfig+0x1b0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 0207 	bic.w	r2, r3, #7
 800320e:	4961      	ldr	r1, [pc, #388]	; (8003394 <HAL_RCC_ClockConfig+0x1b0>)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b5f      	ldr	r3, [pc, #380]	; (8003394 <HAL_RCC_ClockConfig+0x1b0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0b0      	b.n	800338a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d04c      	beq.n	80032ce <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b03      	cmp	r3, #3
 800323a:	d107      	bne.n	800324c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800323c:	4b56      	ldr	r3, [pc, #344]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d121      	bne.n	800328c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e09e      	b.n	800338a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d107      	bne.n	8003264 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003254:	4b50      	ldr	r3, [pc, #320]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d115      	bne.n	800328c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e092      	b.n	800338a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d107      	bne.n	800327c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800326c:	4b4a      	ldr	r3, [pc, #296]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d109      	bne.n	800328c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e086      	b.n	800338a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800327c:	4b46      	ldr	r3, [pc, #280]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e07e      	b.n	800338a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800328c:	4b42      	ldr	r3, [pc, #264]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f023 0203 	bic.w	r2, r3, #3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	493f      	ldr	r1, [pc, #252]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800329e:	f7fe fb25 	bl	80018ec <HAL_GetTick>
 80032a2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a4:	e00a      	b.n	80032bc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a6:	f7fe fb21 	bl	80018ec <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e066      	b.n	800338a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032bc:	4b36      	ldr	r3, [pc, #216]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 020c 	and.w	r2, r3, #12
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d1eb      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d008      	beq.n	80032ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032da:	4b2f      	ldr	r3, [pc, #188]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	492c      	ldr	r1, [pc, #176]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ec:	4b29      	ldr	r3, [pc, #164]	; (8003394 <HAL_RCC_ClockConfig+0x1b0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d210      	bcs.n	800331c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b26      	ldr	r3, [pc, #152]	; (8003394 <HAL_RCC_ClockConfig+0x1b0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 0207 	bic.w	r2, r3, #7
 8003302:	4924      	ldr	r1, [pc, #144]	; (8003394 <HAL_RCC_ClockConfig+0x1b0>)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800330a:	4b22      	ldr	r3, [pc, #136]	; (8003394 <HAL_RCC_ClockConfig+0x1b0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e036      	b.n	800338a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003328:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4918      	ldr	r1, [pc, #96]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 8003336:	4313      	orrs	r3, r2
 8003338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d009      	beq.n	800335a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003346:	4b14      	ldr	r3, [pc, #80]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4910      	ldr	r1, [pc, #64]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800335a:	f000 f825 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 800335e:	4601      	mov	r1, r0
 8003360:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <HAL_RCC_ClockConfig+0x1b4>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	4a0c      	ldr	r2, [pc, #48]	; (800339c <HAL_RCC_ClockConfig+0x1b8>)
 800336c:	5cd3      	ldrb	r3, [r2, r3]
 800336e:	f003 031f 	and.w	r3, r3, #31
 8003372:	fa21 f303 	lsr.w	r3, r1, r3
 8003376:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <HAL_RCC_ClockConfig+0x1c0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fe fa64 	bl	800184c <HAL_InitTick>
 8003384:	4603      	mov	r3, r0
 8003386:	72fb      	strb	r3, [r7, #11]

  return status;
 8003388:	7afb      	ldrb	r3, [r7, #11]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40022000 	.word	0x40022000
 8003398:	40021000 	.word	0x40021000
 800339c:	0800c408 	.word	0x0800c408
 80033a0:	2000000c 	.word	0x2000000c
 80033a4:	20000010 	.word	0x20000010

080033a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b089      	sub	sp, #36	; 0x24
 80033ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	2300      	movs	r3, #0
 80033b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b6:	4b3d      	ldr	r3, [pc, #244]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033c0:	4b3a      	ldr	r3, [pc, #232]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x34>
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	2b0c      	cmp	r3, #12
 80033d4:	d121      	bne.n	800341a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d11e      	bne.n	800341a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033dc:	4b33      	ldr	r3, [pc, #204]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d107      	bne.n	80033f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033e8:	4b30      	ldr	r3, [pc, #192]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 80033ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	f003 030f 	and.w	r3, r3, #15
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	e005      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033f8:	4b2c      	ldr	r3, [pc, #176]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003404:	4a2a      	ldr	r2, [pc, #168]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10d      	bne.n	8003430 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003418:	e00a      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	2b04      	cmp	r3, #4
 800341e:	d102      	bne.n	8003426 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003420:	4b24      	ldr	r3, [pc, #144]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	e004      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	2b08      	cmp	r3, #8
 800342a:	d101      	bne.n	8003430 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800342c:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x110>)
 800342e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	2b0c      	cmp	r3, #12
 8003434:	d133      	bne.n	800349e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003436:	4b1d      	ldr	r3, [pc, #116]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d002      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0xa4>
 8003446:	2b03      	cmp	r3, #3
 8003448:	d003      	beq.n	8003452 <HAL_RCC_GetSysClockFreq+0xaa>
 800344a:	e005      	b.n	8003458 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800344c:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800344e:	617b      	str	r3, [r7, #20]
      break;
 8003450:	e005      	b.n	800345e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003452:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003454:	617b      	str	r3, [r7, #20]
      break;
 8003456:	e002      	b.n	800345e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	617b      	str	r3, [r7, #20]
      break;
 800345c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800345e:	4b13      	ldr	r3, [pc, #76]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	3301      	adds	r3, #1
 800346a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800346c:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	fb02 f203 	mul.w	r2, r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003482:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003484:	4b09      	ldr	r3, [pc, #36]	; (80034ac <HAL_RCC_GetSysClockFreq+0x104>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	0e5b      	lsrs	r3, r3, #25
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	3301      	adds	r3, #1
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	fbb2 f3f3 	udiv	r3, r2, r3
 800349c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800349e:	69bb      	ldr	r3, [r7, #24]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3724      	adds	r7, #36	; 0x24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	40021000 	.word	0x40021000
 80034b0:	0800c420 	.word	0x0800c420
 80034b4:	00f42400 	.word	0x00f42400
 80034b8:	007a1200 	.word	0x007a1200

080034bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	2000000c 	.word	0x2000000c

080034d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034d8:	f7ff fff0 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 80034dc:	4601      	mov	r1, r0
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0a1b      	lsrs	r3, r3, #8
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4a04      	ldr	r2, [pc, #16]	; (80034fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ea:	5cd3      	ldrb	r3, [r2, r3]
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40021000 	.word	0x40021000
 80034fc:	0800c418 	.word	0x0800c418

08003500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003504:	f7ff ffda 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 8003508:	4601      	mov	r1, r0
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <HAL_RCC_GetPCLK2Freq+0x24>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	0adb      	lsrs	r3, r3, #11
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	4a04      	ldr	r2, [pc, #16]	; (8003528 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003516:	5cd3      	ldrb	r3, [r2, r3]
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003520:	4618      	mov	r0, r3
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40021000 	.word	0x40021000
 8003528:	0800c418 	.word	0x0800c418

0800352c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003534:	2300      	movs	r3, #0
 8003536:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003538:	4b2a      	ldr	r3, [pc, #168]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800353a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003544:	f7ff fa04 	bl	8002950 <HAL_PWREx_GetVoltageRange>
 8003548:	6178      	str	r0, [r7, #20]
 800354a:	e014      	b.n	8003576 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800354c:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	4a24      	ldr	r2, [pc, #144]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003556:	6593      	str	r3, [r2, #88]	; 0x58
 8003558:	4b22      	ldr	r3, [pc, #136]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003564:	f7ff f9f4 	bl	8002950 <HAL_PWREx_GetVoltageRange>
 8003568:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800356a:	4b1e      	ldr	r3, [pc, #120]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800356c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356e:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003574:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800357c:	d10b      	bne.n	8003596 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b80      	cmp	r3, #128	; 0x80
 8003582:	d919      	bls.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2ba0      	cmp	r3, #160	; 0xa0
 8003588:	d902      	bls.n	8003590 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800358a:	2302      	movs	r3, #2
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	e013      	b.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003590:	2301      	movs	r3, #1
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	e010      	b.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b80      	cmp	r3, #128	; 0x80
 800359a:	d902      	bls.n	80035a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800359c:	2303      	movs	r3, #3
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	e00a      	b.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b80      	cmp	r3, #128	; 0x80
 80035a6:	d102      	bne.n	80035ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035a8:	2302      	movs	r3, #2
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	e004      	b.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b70      	cmp	r3, #112	; 0x70
 80035b2:	d101      	bne.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035b4:	2301      	movs	r3, #1
 80035b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f023 0207 	bic.w	r2, r3, #7
 80035c0:	4909      	ldr	r1, [pc, #36]	; (80035e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035c8:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d001      	beq.n	80035da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40022000 	.word	0x40022000

080035ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035f4:	2300      	movs	r3, #0
 80035f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035f8:	2300      	movs	r3, #0
 80035fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003604:	2b00      	cmp	r3, #0
 8003606:	d03f      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800360c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003610:	d01c      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003612:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003616:	d802      	bhi.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00e      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800361c:	e01f      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800361e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003622:	d003      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003624:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003628:	d01c      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800362a:	e018      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800362c:	4b85      	ldr	r3, [pc, #532]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a84      	ldr	r2, [pc, #528]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003636:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003638:	e015      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3304      	adds	r3, #4
 800363e:	2100      	movs	r1, #0
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fab9 	bl	8003bb8 <RCCEx_PLLSAI1_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800364a:	e00c      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3320      	adds	r3, #32
 8003650:	2100      	movs	r1, #0
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fba0 	bl	8003d98 <RCCEx_PLLSAI2_Config>
 8003658:	4603      	mov	r3, r0
 800365a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800365c:	e003      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	74fb      	strb	r3, [r7, #19]
      break;
 8003662:	e000      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003664:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003666:	7cfb      	ldrb	r3, [r7, #19]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10b      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800366c:	4b75      	ldr	r3, [pc, #468]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003672:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800367a:	4972      	ldr	r1, [pc, #456]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003682:	e001      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003684:	7cfb      	ldrb	r3, [r7, #19]
 8003686:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d03f      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800369c:	d01c      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800369e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036a2:	d802      	bhi.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00e      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80036a8:	e01f      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80036aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036ae:	d003      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80036b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036b4:	d01c      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80036b6:	e018      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036b8:	4b62      	ldr	r3, [pc, #392]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4a61      	ldr	r2, [pc, #388]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036c4:	e015      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3304      	adds	r3, #4
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fa73 	bl	8003bb8 <RCCEx_PLLSAI1_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036d6:	e00c      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3320      	adds	r3, #32
 80036dc:	2100      	movs	r1, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fb5a 	bl	8003d98 <RCCEx_PLLSAI2_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036e8:	e003      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	74fb      	strb	r3, [r7, #19]
      break;
 80036ee:	e000      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80036f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036f2:	7cfb      	ldrb	r3, [r7, #19]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036f8:	4b52      	ldr	r3, [pc, #328]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003706:	494f      	ldr	r1, [pc, #316]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800370e:	e001      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003710:	7cfb      	ldrb	r3, [r7, #19]
 8003712:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80a0 	beq.w	8003862 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003722:	2300      	movs	r3, #0
 8003724:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003726:	4b47      	ldr	r3, [pc, #284]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003736:	2300      	movs	r3, #0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00d      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373c:	4b41      	ldr	r3, [pc, #260]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800373e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003740:	4a40      	ldr	r2, [pc, #256]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003746:	6593      	str	r3, [r2, #88]	; 0x58
 8003748:	4b3e      	ldr	r3, [pc, #248]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800374a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003754:	2301      	movs	r3, #1
 8003756:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003758:	4b3b      	ldr	r3, [pc, #236]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a3a      	ldr	r2, [pc, #232]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800375e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003762:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003764:	f7fe f8c2 	bl	80018ec <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800376a:	e009      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376c:	f7fe f8be 	bl	80018ec <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d902      	bls.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	74fb      	strb	r3, [r7, #19]
        break;
 800377e:	e005      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003780:	4b31      	ldr	r3, [pc, #196]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ef      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d15c      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003792:	4b2c      	ldr	r3, [pc, #176]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d01f      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d019      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037b0:	4b24      	ldr	r3, [pc, #144]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037bc:	4b21      	ldr	r3, [pc, #132]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c2:	4a20      	ldr	r2, [pc, #128]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037cc:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	4a1c      	ldr	r2, [pc, #112]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037dc:	4a19      	ldr	r2, [pc, #100]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d016      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ee:	f7fe f87d 	bl	80018ec <HAL_GetTick>
 80037f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037f4:	e00b      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f6:	f7fe f879 	bl	80018ec <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	f241 3288 	movw	r2, #5000	; 0x1388
 8003804:	4293      	cmp	r3, r2
 8003806:	d902      	bls.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	74fb      	strb	r3, [r7, #19]
            break;
 800380c:	e006      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800380e:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0ec      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800381c:	7cfb      	ldrb	r3, [r7, #19]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10c      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003832:	4904      	ldr	r1, [pc, #16]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800383a:	e009      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800383c:	7cfb      	ldrb	r3, [r7, #19]
 800383e:	74bb      	strb	r3, [r7, #18]
 8003840:	e006      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003842:	bf00      	nop
 8003844:	40021000 	.word	0x40021000
 8003848:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003850:	7c7b      	ldrb	r3, [r7, #17]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d105      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003856:	4b9e      	ldr	r3, [pc, #632]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385a:	4a9d      	ldr	r2, [pc, #628]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800385c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003860:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800386e:	4b98      	ldr	r3, [pc, #608]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	f023 0203 	bic.w	r2, r3, #3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	4994      	ldr	r1, [pc, #592]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003890:	4b8f      	ldr	r3, [pc, #572]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003896:	f023 020c 	bic.w	r2, r3, #12
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389e:	498c      	ldr	r1, [pc, #560]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038b2:	4b87      	ldr	r3, [pc, #540]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	4983      	ldr	r1, [pc, #524]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038d4:	4b7e      	ldr	r3, [pc, #504]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	497b      	ldr	r1, [pc, #492]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038f6:	4b76      	ldr	r3, [pc, #472]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003904:	4972      	ldr	r1, [pc, #456]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003918:	4b6d      	ldr	r3, [pc, #436]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003926:	496a      	ldr	r1, [pc, #424]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800393a:	4b65      	ldr	r3, [pc, #404]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800393c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003940:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	4961      	ldr	r1, [pc, #388]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800395c:	4b5c      	ldr	r3, [pc, #368]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003962:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800396a:	4959      	ldr	r1, [pc, #356]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800397e:	4b54      	ldr	r3, [pc, #336]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003984:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398c:	4950      	ldr	r1, [pc, #320]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039a0:	4b4b      	ldr	r3, [pc, #300]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	4948      	ldr	r1, [pc, #288]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039c2:	4b43      	ldr	r3, [pc, #268]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d0:	493f      	ldr	r1, [pc, #252]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d028      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039e4:	4b3a      	ldr	r3, [pc, #232]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039f2:	4937      	ldr	r1, [pc, #220]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a02:	d106      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a04:	4b32      	ldr	r3, [pc, #200]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4a31      	ldr	r2, [pc, #196]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a0e:	60d3      	str	r3, [r2, #12]
 8003a10:	e011      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a1a:	d10c      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	2101      	movs	r1, #1
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 f8c8 	bl	8003bb8 <RCCEx_PLLSAI1_Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a2c:	7cfb      	ldrb	r3, [r7, #19]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003a32:	7cfb      	ldrb	r3, [r7, #19]
 8003a34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d028      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a42:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	491f      	ldr	r1, [pc, #124]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a60:	d106      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a62:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	4a1a      	ldr	r2, [pc, #104]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a6c:	60d3      	str	r3, [r2, #12]
 8003a6e:	e011      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a78:	d10c      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	2101      	movs	r1, #1
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 f899 	bl	8003bb8 <RCCEx_PLLSAI1_Config>
 8003a86:	4603      	mov	r3, r0
 8003a88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a8a:	7cfb      	ldrb	r3, [r7, #19]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003a90:	7cfb      	ldrb	r3, [r7, #19]
 8003a92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d02b      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aae:	4908      	ldr	r1, [pc, #32]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003abe:	d109      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ac0:	4b03      	ldr	r3, [pc, #12]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4a02      	ldr	r2, [pc, #8]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aca:	60d3      	str	r3, [r2, #12]
 8003acc:	e014      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003ace:	bf00      	nop
 8003ad0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003adc:	d10c      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 f867 	bl	8003bb8 <RCCEx_PLLSAI1_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aee:	7cfb      	ldrb	r3, [r7, #19]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003af4:	7cfb      	ldrb	r3, [r7, #19]
 8003af6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d02f      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b04:	4b2b      	ldr	r3, [pc, #172]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b12:	4928      	ldr	r1, [pc, #160]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b22:	d10d      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3304      	adds	r3, #4
 8003b28:	2102      	movs	r1, #2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 f844 	bl	8003bb8 <RCCEx_PLLSAI1_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b34:	7cfb      	ldrb	r3, [r7, #19]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d014      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003b3a:	7cfb      	ldrb	r3, [r7, #19]
 8003b3c:	74bb      	strb	r3, [r7, #18]
 8003b3e:	e011      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3320      	adds	r3, #32
 8003b4e:	2102      	movs	r1, #2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 f921 	bl	8003d98 <RCCEx_PLLSAI2_Config>
 8003b56:	4603      	mov	r3, r0
 8003b58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b5a:	7cfb      	ldrb	r3, [r7, #19]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003b60:	7cfb      	ldrb	r3, [r7, #19]
 8003b62:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b70:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b7e:	490d      	ldr	r1, [pc, #52]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00b      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b92:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ba2:	4904      	ldr	r1, [pc, #16]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003baa:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40021000 	.word	0x40021000

08003bb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bc6:	4b73      	ldr	r3, [pc, #460]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d018      	beq.n	8003c04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bd2:	4b70      	ldr	r3, [pc, #448]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f003 0203 	and.w	r2, r3, #3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d10d      	bne.n	8003bfe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
       ||
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003bea:	4b6a      	ldr	r3, [pc, #424]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	091b      	lsrs	r3, r3, #4
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
       ||
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d044      	beq.n	8003c88 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	73fb      	strb	r3, [r7, #15]
 8003c02:	e041      	b.n	8003c88 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d00c      	beq.n	8003c26 <RCCEx_PLLSAI1_Config+0x6e>
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d013      	beq.n	8003c38 <RCCEx_PLLSAI1_Config+0x80>
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d120      	bne.n	8003c56 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c14:	4b5f      	ldr	r3, [pc, #380]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d11d      	bne.n	8003c5c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c24:	e01a      	b.n	8003c5c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c26:	4b5b      	ldr	r3, [pc, #364]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d116      	bne.n	8003c60 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c36:	e013      	b.n	8003c60 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c38:	4b56      	ldr	r3, [pc, #344]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10f      	bne.n	8003c64 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c44:	4b53      	ldr	r3, [pc, #332]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d109      	bne.n	8003c64 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c54:	e006      	b.n	8003c64 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	73fb      	strb	r3, [r7, #15]
      break;
 8003c5a:	e004      	b.n	8003c66 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003c5c:	bf00      	nop
 8003c5e:	e002      	b.n	8003c66 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003c60:	bf00      	nop
 8003c62:	e000      	b.n	8003c66 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003c64:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10d      	bne.n	8003c88 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c6c:	4b49      	ldr	r3, [pc, #292]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6819      	ldr	r1, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	430b      	orrs	r3, r1
 8003c82:	4944      	ldr	r1, [pc, #272]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d17d      	bne.n	8003d8a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c8e:	4b41      	ldr	r3, [pc, #260]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a40      	ldr	r2, [pc, #256]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c9a:	f7fd fe27 	bl	80018ec <HAL_GetTick>
 8003c9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ca0:	e009      	b.n	8003cb6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ca2:	f7fd fe23 	bl	80018ec <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d902      	bls.n	8003cb6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	73fb      	strb	r3, [r7, #15]
        break;
 8003cb4:	e005      	b.n	8003cc2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cb6:	4b37      	ldr	r3, [pc, #220]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1ef      	bne.n	8003ca2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d160      	bne.n	8003d8a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d111      	bne.n	8003cf2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cce:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6892      	ldr	r2, [r2, #8]
 8003cde:	0211      	lsls	r1, r2, #8
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	68d2      	ldr	r2, [r2, #12]
 8003ce4:	0912      	lsrs	r2, r2, #4
 8003ce6:	0452      	lsls	r2, r2, #17
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	492a      	ldr	r1, [pc, #168]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	610b      	str	r3, [r1, #16]
 8003cf0:	e027      	b.n	8003d42 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d112      	bne.n	8003d1e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cf8:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6892      	ldr	r2, [r2, #8]
 8003d08:	0211      	lsls	r1, r2, #8
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6912      	ldr	r2, [r2, #16]
 8003d0e:	0852      	lsrs	r2, r2, #1
 8003d10:	3a01      	subs	r2, #1
 8003d12:	0552      	lsls	r2, r2, #21
 8003d14:	430a      	orrs	r2, r1
 8003d16:	491f      	ldr	r1, [pc, #124]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	610b      	str	r3, [r1, #16]
 8003d1c:	e011      	b.n	8003d42 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d1e:	4b1d      	ldr	r3, [pc, #116]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d26:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6892      	ldr	r2, [r2, #8]
 8003d2e:	0211      	lsls	r1, r2, #8
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6952      	ldr	r2, [r2, #20]
 8003d34:	0852      	lsrs	r2, r2, #1
 8003d36:	3a01      	subs	r2, #1
 8003d38:	0652      	lsls	r2, r2, #25
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	4915      	ldr	r1, [pc, #84]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d42:	4b14      	ldr	r3, [pc, #80]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a13      	ldr	r2, [pc, #76]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d4c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4e:	f7fd fdcd 	bl	80018ec <HAL_GetTick>
 8003d52:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d54:	e009      	b.n	8003d6a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d56:	f7fd fdc9 	bl	80018ec <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d902      	bls.n	8003d6a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	73fb      	strb	r3, [r7, #15]
          break;
 8003d68:	e005      	b.n	8003d76 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d6a:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0ef      	beq.n	8003d56 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d106      	bne.n	8003d8a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	4903      	ldr	r1, [pc, #12]	; (8003d94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40021000 	.word	0x40021000

08003d98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003da6:	4b68      	ldr	r3, [pc, #416]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d018      	beq.n	8003de4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003db2:	4b65      	ldr	r3, [pc, #404]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f003 0203 	and.w	r2, r3, #3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d10d      	bne.n	8003dde <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
       ||
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003dca:	4b5f      	ldr	r3, [pc, #380]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
       ||
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d044      	beq.n	8003e68 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
 8003de2:	e041      	b.n	8003e68 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d00c      	beq.n	8003e06 <RCCEx_PLLSAI2_Config+0x6e>
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d013      	beq.n	8003e18 <RCCEx_PLLSAI2_Config+0x80>
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d120      	bne.n	8003e36 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003df4:	4b54      	ldr	r3, [pc, #336]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d11d      	bne.n	8003e3c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e04:	e01a      	b.n	8003e3c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e06:	4b50      	ldr	r3, [pc, #320]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d116      	bne.n	8003e40 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e16:	e013      	b.n	8003e40 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e18:	4b4b      	ldr	r3, [pc, #300]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10f      	bne.n	8003e44 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e24:	4b48      	ldr	r3, [pc, #288]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d109      	bne.n	8003e44 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e34:	e006      	b.n	8003e44 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	73fb      	strb	r3, [r7, #15]
      break;
 8003e3a:	e004      	b.n	8003e46 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003e3c:	bf00      	nop
 8003e3e:	e002      	b.n	8003e46 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003e40:	bf00      	nop
 8003e42:	e000      	b.n	8003e46 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003e44:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10d      	bne.n	8003e68 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e4c:	4b3e      	ldr	r3, [pc, #248]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6819      	ldr	r1, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	430b      	orrs	r3, r1
 8003e62:	4939      	ldr	r1, [pc, #228]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d167      	bne.n	8003f3e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e6e:	4b36      	ldr	r3, [pc, #216]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a35      	ldr	r2, [pc, #212]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e7a:	f7fd fd37 	bl	80018ec <HAL_GetTick>
 8003e7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e80:	e009      	b.n	8003e96 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e82:	f7fd fd33 	bl	80018ec <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d902      	bls.n	8003e96 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	73fb      	strb	r3, [r7, #15]
        break;
 8003e94:	e005      	b.n	8003ea2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e96:	4b2c      	ldr	r3, [pc, #176]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1ef      	bne.n	8003e82 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d14a      	bne.n	8003f3e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d111      	bne.n	8003ed2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003eae:	4b26      	ldr	r3, [pc, #152]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6892      	ldr	r2, [r2, #8]
 8003ebe:	0211      	lsls	r1, r2, #8
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	68d2      	ldr	r2, [r2, #12]
 8003ec4:	0912      	lsrs	r2, r2, #4
 8003ec6:	0452      	lsls	r2, r2, #17
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	491f      	ldr	r1, [pc, #124]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	614b      	str	r3, [r1, #20]
 8003ed0:	e011      	b.n	8003ef6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ed2:	4b1d      	ldr	r3, [pc, #116]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003eda:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6892      	ldr	r2, [r2, #8]
 8003ee2:	0211      	lsls	r1, r2, #8
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6912      	ldr	r2, [r2, #16]
 8003ee8:	0852      	lsrs	r2, r2, #1
 8003eea:	3a01      	subs	r2, #1
 8003eec:	0652      	lsls	r2, r2, #25
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	4915      	ldr	r1, [pc, #84]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ef6:	4b14      	ldr	r3, [pc, #80]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a13      	ldr	r2, [pc, #76]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f00:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f02:	f7fd fcf3 	bl	80018ec <HAL_GetTick>
 8003f06:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f08:	e009      	b.n	8003f1e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f0a:	f7fd fcef 	bl	80018ec <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d902      	bls.n	8003f1e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	73fb      	strb	r3, [r7, #15]
          break;
 8003f1c:	e005      	b.n	8003f2a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0ef      	beq.n	8003f0a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d106      	bne.n	8003f3e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f32:	695a      	ldr	r2, [r3, #20]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	4903      	ldr	r1, [pc, #12]	; (8003f48 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40021000 	.word	0x40021000

08003f4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e040      	b.n	8003fe0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fd fbd8 	bl	8001724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2224      	movs	r2, #36	; 0x24
 8003f78:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0201 	bic.w	r2, r2, #1
 8003f88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 fabe 	bl	800450c <UART_SetConfig>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e022      	b.n	8003fe0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fd3c 	bl	8004a20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0201 	orr.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fdc3 	bl	8004b64 <UART_CheckIdleState>
 8003fde:	4603      	mov	r3, r0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08a      	sub	sp, #40	; 0x28
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffc:	2b20      	cmp	r3, #32
 8003ffe:	f040 8081 	bne.w	8004104 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <HAL_UART_Transmit+0x26>
 8004008:	88fb      	ldrh	r3, [r7, #6]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e079      	b.n	8004106 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_UART_Transmit+0x38>
 800401c:	2302      	movs	r3, #2
 800401e:	e072      	b.n	8004106 <HAL_UART_Transmit+0x11e>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2221      	movs	r2, #33	; 0x21
 8004032:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004034:	f7fd fc5a 	bl	80018ec <HAL_GetTick>
 8004038:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	88fa      	ldrh	r2, [r7, #6]
 800403e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	88fa      	ldrh	r2, [r7, #6]
 8004046:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004052:	d108      	bne.n	8004066 <HAL_UART_Transmit+0x7e>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d104      	bne.n	8004066 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800405c:	2300      	movs	r3, #0
 800405e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	61bb      	str	r3, [r7, #24]
 8004064:	e003      	b.n	800406e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800406a:	2300      	movs	r3, #0
 800406c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004076:	e02d      	b.n	80040d4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2200      	movs	r2, #0
 8004080:	2180      	movs	r1, #128	; 0x80
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 fdb3 	bl	8004bee <UART_WaitOnFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e039      	b.n	8004106 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10b      	bne.n	80040b0 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	881a      	ldrh	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a4:	b292      	uxth	r2, r2
 80040a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	3302      	adds	r3, #2
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	e008      	b.n	80040c2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	781a      	ldrb	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	b292      	uxth	r2, r2
 80040ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	3301      	adds	r3, #1
 80040c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040da:	b29b      	uxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1cb      	bne.n	8004078 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2200      	movs	r2, #0
 80040e8:	2140      	movs	r1, #64	; 0x40
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 fd7f 	bl	8004bee <UART_WaitOnFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e005      	b.n	8004106 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2220      	movs	r2, #32
 80040fe:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	e000      	b.n	8004106 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004104:	2302      	movs	r3, #2
  }
}
 8004106:	4618      	mov	r0, r3
 8004108:	3720      	adds	r7, #32
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	4613      	mov	r3, r2
 800411c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004122:	2b20      	cmp	r3, #32
 8004124:	f040 808a 	bne.w	800423c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_UART_Receive_IT+0x24>
 800412e:	88fb      	ldrh	r3, [r7, #6]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e082      	b.n	800423e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_UART_Receive_IT+0x36>
 8004142:	2302      	movs	r3, #2
 8004144:	e07b      	b.n	800423e <HAL_UART_Receive_IT+0x12e>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	88fa      	ldrh	r2, [r7, #6]
 8004158:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	88fa      	ldrh	r2, [r7, #6]
 8004160:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004172:	d10e      	bne.n	8004192 <HAL_UART_Receive_IT+0x82>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d105      	bne.n	8004188 <HAL_UART_Receive_IT+0x78>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004182:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004186:	e02d      	b.n	80041e4 <HAL_UART_Receive_IT+0xd4>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	22ff      	movs	r2, #255	; 0xff
 800418c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004190:	e028      	b.n	80041e4 <HAL_UART_Receive_IT+0xd4>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10d      	bne.n	80041b6 <HAL_UART_Receive_IT+0xa6>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d104      	bne.n	80041ac <HAL_UART_Receive_IT+0x9c>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	22ff      	movs	r2, #255	; 0xff
 80041a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041aa:	e01b      	b.n	80041e4 <HAL_UART_Receive_IT+0xd4>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	227f      	movs	r2, #127	; 0x7f
 80041b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041b4:	e016      	b.n	80041e4 <HAL_UART_Receive_IT+0xd4>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041be:	d10d      	bne.n	80041dc <HAL_UART_Receive_IT+0xcc>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d104      	bne.n	80041d2 <HAL_UART_Receive_IT+0xc2>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	227f      	movs	r2, #127	; 0x7f
 80041cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041d0:	e008      	b.n	80041e4 <HAL_UART_Receive_IT+0xd4>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	223f      	movs	r2, #63	; 0x3f
 80041d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041da:	e003      	b.n	80041e4 <HAL_UART_Receive_IT+0xd4>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2222      	movs	r2, #34	; 0x22
 80041ee:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0201 	orr.w	r2, r2, #1
 80041fe:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004208:	d107      	bne.n	800421a <HAL_UART_Receive_IT+0x10a>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d103      	bne.n	800421a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4a0d      	ldr	r2, [pc, #52]	; (800424c <HAL_UART_Receive_IT+0x13c>)
 8004216:	661a      	str	r2, [r3, #96]	; 0x60
 8004218:	e002      	b.n	8004220 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4a0c      	ldr	r2, [pc, #48]	; (8004250 <HAL_UART_Receive_IT+0x140>)
 800421e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004236:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	e000      	b.n	800423e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800423c:	2302      	movs	r3, #2
  }
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	08004e2d 	.word	0x08004e2d
 8004250:	08004d83 	.word	0x08004d83

08004254 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	f640 030f 	movw	r3, #2063	; 0x80f
 800427a:	4013      	ands	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d113      	bne.n	80042ac <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00e      	beq.n	80042ac <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b00      	cmp	r3, #0
 8004296:	d009      	beq.n	80042ac <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8114 	beq.w	80044ca <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	4798      	blx	r3
      }
      return;
 80042aa:	e10e      	b.n	80044ca <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 80d6 	beq.w	8004460 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d105      	bne.n	80042ca <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4b86      	ldr	r3, [pc, #536]	; (80044dc <HAL_UART_IRQHandler+0x288>)
 80042c2:	4013      	ands	r3, r2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80cb 	beq.w	8004460 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00e      	beq.n	80042f2 <HAL_UART_IRQHandler+0x9e>
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d009      	beq.n	80042f2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2201      	movs	r2, #1
 80042e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ea:	f043 0201 	orr.w	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00e      	beq.n	800431a <HAL_UART_IRQHandler+0xc6>
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d009      	beq.n	800431a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2202      	movs	r2, #2
 800430c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004312:	f043 0204 	orr.w	r2, r3, #4
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00e      	beq.n	8004342 <HAL_UART_IRQHandler+0xee>
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d009      	beq.n	8004342 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2204      	movs	r2, #4
 8004334:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800433a:	f043 0202 	orr.w	r2, r3, #2
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d013      	beq.n	8004374 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b00      	cmp	r3, #0
 8004354:	d104      	bne.n	8004360 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800435c:	2b00      	cmp	r3, #0
 800435e:	d009      	beq.n	8004374 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2208      	movs	r2, #8
 8004366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800436c:	f043 0208 	orr.w	r2, r3, #8
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00f      	beq.n	800439e <HAL_UART_IRQHandler+0x14a>
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004390:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004396:	f043 0220 	orr.w	r2, r3, #32
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 8093 	beq.w	80044ce <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00c      	beq.n	80043cc <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d007      	beq.n	80043cc <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043d0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043dc:	2b40      	cmp	r3, #64	; 0x40
 80043de:	d004      	beq.n	80043ea <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d031      	beq.n	800444e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fc7a 	bl	8004ce4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fa:	2b40      	cmp	r3, #64	; 0x40
 80043fc:	d123      	bne.n	8004446 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800440c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d013      	beq.n	800443e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800441a:	4a31      	ldr	r2, [pc, #196]	; (80044e0 <HAL_UART_IRQHandler+0x28c>)
 800441c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004422:	4618      	mov	r0, r3
 8004424:	f7fd fba1 	bl	8001b6a <HAL_DMA_Abort_IT>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d016      	beq.n	800445c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004438:	4610      	mov	r0, r2
 800443a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800443c:	e00e      	b.n	800445c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f85a 	bl	80044f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004444:	e00a      	b.n	800445c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f856 	bl	80044f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800444c:	e006      	b.n	800445c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f852 	bl	80044f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800445a:	e038      	b.n	80044ce <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800445c:	bf00      	nop
    return;
 800445e:	e036      	b.n	80044ce <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00d      	beq.n	8004486 <HAL_UART_IRQHandler+0x232>
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d008      	beq.n	8004486 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800447c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fd29 	bl	8004ed6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004484:	e026      	b.n	80044d4 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00d      	beq.n	80044ac <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004496:	2b00      	cmp	r3, #0
 8004498:	d008      	beq.n	80044ac <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d017      	beq.n	80044d2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	4798      	blx	r3
    }
    return;
 80044aa:	e012      	b.n	80044d2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00e      	beq.n	80044d4 <HAL_UART_IRQHandler+0x280>
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d009      	beq.n	80044d4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fc45 	bl	8004d50 <UART_EndTransmit_IT>
    return;
 80044c6:	bf00      	nop
 80044c8:	e004      	b.n	80044d4 <HAL_UART_IRQHandler+0x280>
      return;
 80044ca:	bf00      	nop
 80044cc:	e002      	b.n	80044d4 <HAL_UART_IRQHandler+0x280>
    return;
 80044ce:	bf00      	nop
 80044d0:	e000      	b.n	80044d4 <HAL_UART_IRQHandler+0x280>
    return;
 80044d2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80044d4:	3720      	adds	r7, #32
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	04000120 	.word	0x04000120
 80044e0:	08004d25 	.word	0x08004d25

080044e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800450c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004510:	b088      	sub	sp, #32
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	4313      	orrs	r3, r2
 8004530:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	4bac      	ldr	r3, [pc, #688]	; (80047ec <UART_SetConfig+0x2e0>)
 800453a:	4013      	ands	r3, r2
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	69f9      	ldr	r1, [r7, #28]
 8004542:	430b      	orrs	r3, r1
 8004544:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4aa2      	ldr	r2, [pc, #648]	; (80047f0 <UART_SetConfig+0x2e4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d004      	beq.n	8004576 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	69fa      	ldr	r2, [r7, #28]
 8004572:	4313      	orrs	r3, r2
 8004574:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	69fa      	ldr	r2, [r7, #28]
 8004586:	430a      	orrs	r2, r1
 8004588:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a99      	ldr	r2, [pc, #612]	; (80047f4 <UART_SetConfig+0x2e8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d121      	bne.n	80045d8 <UART_SetConfig+0xcc>
 8004594:	4b98      	ldr	r3, [pc, #608]	; (80047f8 <UART_SetConfig+0x2ec>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d816      	bhi.n	80045d0 <UART_SetConfig+0xc4>
 80045a2:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <UART_SetConfig+0x9c>)
 80045a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a8:	080045b9 	.word	0x080045b9
 80045ac:	080045c5 	.word	0x080045c5
 80045b0:	080045bf 	.word	0x080045bf
 80045b4:	080045cb 	.word	0x080045cb
 80045b8:	2301      	movs	r3, #1
 80045ba:	76fb      	strb	r3, [r7, #27]
 80045bc:	e0e8      	b.n	8004790 <UART_SetConfig+0x284>
 80045be:	2302      	movs	r3, #2
 80045c0:	76fb      	strb	r3, [r7, #27]
 80045c2:	e0e5      	b.n	8004790 <UART_SetConfig+0x284>
 80045c4:	2304      	movs	r3, #4
 80045c6:	76fb      	strb	r3, [r7, #27]
 80045c8:	e0e2      	b.n	8004790 <UART_SetConfig+0x284>
 80045ca:	2308      	movs	r3, #8
 80045cc:	76fb      	strb	r3, [r7, #27]
 80045ce:	e0df      	b.n	8004790 <UART_SetConfig+0x284>
 80045d0:	2310      	movs	r3, #16
 80045d2:	76fb      	strb	r3, [r7, #27]
 80045d4:	bf00      	nop
 80045d6:	e0db      	b.n	8004790 <UART_SetConfig+0x284>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a87      	ldr	r2, [pc, #540]	; (80047fc <UART_SetConfig+0x2f0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d134      	bne.n	800464c <UART_SetConfig+0x140>
 80045e2:	4b85      	ldr	r3, [pc, #532]	; (80047f8 <UART_SetConfig+0x2ec>)
 80045e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e8:	f003 030c 	and.w	r3, r3, #12
 80045ec:	2b0c      	cmp	r3, #12
 80045ee:	d829      	bhi.n	8004644 <UART_SetConfig+0x138>
 80045f0:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <UART_SetConfig+0xec>)
 80045f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f6:	bf00      	nop
 80045f8:	0800462d 	.word	0x0800462d
 80045fc:	08004645 	.word	0x08004645
 8004600:	08004645 	.word	0x08004645
 8004604:	08004645 	.word	0x08004645
 8004608:	08004639 	.word	0x08004639
 800460c:	08004645 	.word	0x08004645
 8004610:	08004645 	.word	0x08004645
 8004614:	08004645 	.word	0x08004645
 8004618:	08004633 	.word	0x08004633
 800461c:	08004645 	.word	0x08004645
 8004620:	08004645 	.word	0x08004645
 8004624:	08004645 	.word	0x08004645
 8004628:	0800463f 	.word	0x0800463f
 800462c:	2300      	movs	r3, #0
 800462e:	76fb      	strb	r3, [r7, #27]
 8004630:	e0ae      	b.n	8004790 <UART_SetConfig+0x284>
 8004632:	2302      	movs	r3, #2
 8004634:	76fb      	strb	r3, [r7, #27]
 8004636:	e0ab      	b.n	8004790 <UART_SetConfig+0x284>
 8004638:	2304      	movs	r3, #4
 800463a:	76fb      	strb	r3, [r7, #27]
 800463c:	e0a8      	b.n	8004790 <UART_SetConfig+0x284>
 800463e:	2308      	movs	r3, #8
 8004640:	76fb      	strb	r3, [r7, #27]
 8004642:	e0a5      	b.n	8004790 <UART_SetConfig+0x284>
 8004644:	2310      	movs	r3, #16
 8004646:	76fb      	strb	r3, [r7, #27]
 8004648:	bf00      	nop
 800464a:	e0a1      	b.n	8004790 <UART_SetConfig+0x284>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a6b      	ldr	r2, [pc, #428]	; (8004800 <UART_SetConfig+0x2f4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d120      	bne.n	8004698 <UART_SetConfig+0x18c>
 8004656:	4b68      	ldr	r3, [pc, #416]	; (80047f8 <UART_SetConfig+0x2ec>)
 8004658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004660:	2b10      	cmp	r3, #16
 8004662:	d00f      	beq.n	8004684 <UART_SetConfig+0x178>
 8004664:	2b10      	cmp	r3, #16
 8004666:	d802      	bhi.n	800466e <UART_SetConfig+0x162>
 8004668:	2b00      	cmp	r3, #0
 800466a:	d005      	beq.n	8004678 <UART_SetConfig+0x16c>
 800466c:	e010      	b.n	8004690 <UART_SetConfig+0x184>
 800466e:	2b20      	cmp	r3, #32
 8004670:	d005      	beq.n	800467e <UART_SetConfig+0x172>
 8004672:	2b30      	cmp	r3, #48	; 0x30
 8004674:	d009      	beq.n	800468a <UART_SetConfig+0x17e>
 8004676:	e00b      	b.n	8004690 <UART_SetConfig+0x184>
 8004678:	2300      	movs	r3, #0
 800467a:	76fb      	strb	r3, [r7, #27]
 800467c:	e088      	b.n	8004790 <UART_SetConfig+0x284>
 800467e:	2302      	movs	r3, #2
 8004680:	76fb      	strb	r3, [r7, #27]
 8004682:	e085      	b.n	8004790 <UART_SetConfig+0x284>
 8004684:	2304      	movs	r3, #4
 8004686:	76fb      	strb	r3, [r7, #27]
 8004688:	e082      	b.n	8004790 <UART_SetConfig+0x284>
 800468a:	2308      	movs	r3, #8
 800468c:	76fb      	strb	r3, [r7, #27]
 800468e:	e07f      	b.n	8004790 <UART_SetConfig+0x284>
 8004690:	2310      	movs	r3, #16
 8004692:	76fb      	strb	r3, [r7, #27]
 8004694:	bf00      	nop
 8004696:	e07b      	b.n	8004790 <UART_SetConfig+0x284>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a59      	ldr	r2, [pc, #356]	; (8004804 <UART_SetConfig+0x2f8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d120      	bne.n	80046e4 <UART_SetConfig+0x1d8>
 80046a2:	4b55      	ldr	r3, [pc, #340]	; (80047f8 <UART_SetConfig+0x2ec>)
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046ac:	2b40      	cmp	r3, #64	; 0x40
 80046ae:	d00f      	beq.n	80046d0 <UART_SetConfig+0x1c4>
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	d802      	bhi.n	80046ba <UART_SetConfig+0x1ae>
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <UART_SetConfig+0x1b8>
 80046b8:	e010      	b.n	80046dc <UART_SetConfig+0x1d0>
 80046ba:	2b80      	cmp	r3, #128	; 0x80
 80046bc:	d005      	beq.n	80046ca <UART_SetConfig+0x1be>
 80046be:	2bc0      	cmp	r3, #192	; 0xc0
 80046c0:	d009      	beq.n	80046d6 <UART_SetConfig+0x1ca>
 80046c2:	e00b      	b.n	80046dc <UART_SetConfig+0x1d0>
 80046c4:	2300      	movs	r3, #0
 80046c6:	76fb      	strb	r3, [r7, #27]
 80046c8:	e062      	b.n	8004790 <UART_SetConfig+0x284>
 80046ca:	2302      	movs	r3, #2
 80046cc:	76fb      	strb	r3, [r7, #27]
 80046ce:	e05f      	b.n	8004790 <UART_SetConfig+0x284>
 80046d0:	2304      	movs	r3, #4
 80046d2:	76fb      	strb	r3, [r7, #27]
 80046d4:	e05c      	b.n	8004790 <UART_SetConfig+0x284>
 80046d6:	2308      	movs	r3, #8
 80046d8:	76fb      	strb	r3, [r7, #27]
 80046da:	e059      	b.n	8004790 <UART_SetConfig+0x284>
 80046dc:	2310      	movs	r3, #16
 80046de:	76fb      	strb	r3, [r7, #27]
 80046e0:	bf00      	nop
 80046e2:	e055      	b.n	8004790 <UART_SetConfig+0x284>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a47      	ldr	r2, [pc, #284]	; (8004808 <UART_SetConfig+0x2fc>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d124      	bne.n	8004738 <UART_SetConfig+0x22c>
 80046ee:	4b42      	ldr	r3, [pc, #264]	; (80047f8 <UART_SetConfig+0x2ec>)
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046fc:	d012      	beq.n	8004724 <UART_SetConfig+0x218>
 80046fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004702:	d802      	bhi.n	800470a <UART_SetConfig+0x1fe>
 8004704:	2b00      	cmp	r3, #0
 8004706:	d007      	beq.n	8004718 <UART_SetConfig+0x20c>
 8004708:	e012      	b.n	8004730 <UART_SetConfig+0x224>
 800470a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800470e:	d006      	beq.n	800471e <UART_SetConfig+0x212>
 8004710:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004714:	d009      	beq.n	800472a <UART_SetConfig+0x21e>
 8004716:	e00b      	b.n	8004730 <UART_SetConfig+0x224>
 8004718:	2300      	movs	r3, #0
 800471a:	76fb      	strb	r3, [r7, #27]
 800471c:	e038      	b.n	8004790 <UART_SetConfig+0x284>
 800471e:	2302      	movs	r3, #2
 8004720:	76fb      	strb	r3, [r7, #27]
 8004722:	e035      	b.n	8004790 <UART_SetConfig+0x284>
 8004724:	2304      	movs	r3, #4
 8004726:	76fb      	strb	r3, [r7, #27]
 8004728:	e032      	b.n	8004790 <UART_SetConfig+0x284>
 800472a:	2308      	movs	r3, #8
 800472c:	76fb      	strb	r3, [r7, #27]
 800472e:	e02f      	b.n	8004790 <UART_SetConfig+0x284>
 8004730:	2310      	movs	r3, #16
 8004732:	76fb      	strb	r3, [r7, #27]
 8004734:	bf00      	nop
 8004736:	e02b      	b.n	8004790 <UART_SetConfig+0x284>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a2c      	ldr	r2, [pc, #176]	; (80047f0 <UART_SetConfig+0x2e4>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d124      	bne.n	800478c <UART_SetConfig+0x280>
 8004742:	4b2d      	ldr	r3, [pc, #180]	; (80047f8 <UART_SetConfig+0x2ec>)
 8004744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004748:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800474c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004750:	d012      	beq.n	8004778 <UART_SetConfig+0x26c>
 8004752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004756:	d802      	bhi.n	800475e <UART_SetConfig+0x252>
 8004758:	2b00      	cmp	r3, #0
 800475a:	d007      	beq.n	800476c <UART_SetConfig+0x260>
 800475c:	e012      	b.n	8004784 <UART_SetConfig+0x278>
 800475e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004762:	d006      	beq.n	8004772 <UART_SetConfig+0x266>
 8004764:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004768:	d009      	beq.n	800477e <UART_SetConfig+0x272>
 800476a:	e00b      	b.n	8004784 <UART_SetConfig+0x278>
 800476c:	2300      	movs	r3, #0
 800476e:	76fb      	strb	r3, [r7, #27]
 8004770:	e00e      	b.n	8004790 <UART_SetConfig+0x284>
 8004772:	2302      	movs	r3, #2
 8004774:	76fb      	strb	r3, [r7, #27]
 8004776:	e00b      	b.n	8004790 <UART_SetConfig+0x284>
 8004778:	2304      	movs	r3, #4
 800477a:	76fb      	strb	r3, [r7, #27]
 800477c:	e008      	b.n	8004790 <UART_SetConfig+0x284>
 800477e:	2308      	movs	r3, #8
 8004780:	76fb      	strb	r3, [r7, #27]
 8004782:	e005      	b.n	8004790 <UART_SetConfig+0x284>
 8004784:	2310      	movs	r3, #16
 8004786:	76fb      	strb	r3, [r7, #27]
 8004788:	bf00      	nop
 800478a:	e001      	b.n	8004790 <UART_SetConfig+0x284>
 800478c:	2310      	movs	r3, #16
 800478e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a16      	ldr	r2, [pc, #88]	; (80047f0 <UART_SetConfig+0x2e4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	f040 8087 	bne.w	80048aa <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800479c:	7efb      	ldrb	r3, [r7, #27]
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d836      	bhi.n	8004810 <UART_SetConfig+0x304>
 80047a2:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <UART_SetConfig+0x29c>)
 80047a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	08004811 	.word	0x08004811
 80047b0:	080047d5 	.word	0x080047d5
 80047b4:	08004811 	.word	0x08004811
 80047b8:	080047db 	.word	0x080047db
 80047bc:	08004811 	.word	0x08004811
 80047c0:	08004811 	.word	0x08004811
 80047c4:	08004811 	.word	0x08004811
 80047c8:	080047e3 	.word	0x080047e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047cc:	f7fe fe82 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 80047d0:	6178      	str	r0, [r7, #20]
        break;
 80047d2:	e022      	b.n	800481a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047d4:	4b0d      	ldr	r3, [pc, #52]	; (800480c <UART_SetConfig+0x300>)
 80047d6:	617b      	str	r3, [r7, #20]
        break;
 80047d8:	e01f      	b.n	800481a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047da:	f7fe fde5 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 80047de:	6178      	str	r0, [r7, #20]
        break;
 80047e0:	e01b      	b.n	800481a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047e6:	617b      	str	r3, [r7, #20]
        break;
 80047e8:	e017      	b.n	800481a <UART_SetConfig+0x30e>
 80047ea:	bf00      	nop
 80047ec:	efff69f3 	.word	0xefff69f3
 80047f0:	40008000 	.word	0x40008000
 80047f4:	40013800 	.word	0x40013800
 80047f8:	40021000 	.word	0x40021000
 80047fc:	40004400 	.word	0x40004400
 8004800:	40004800 	.word	0x40004800
 8004804:	40004c00 	.word	0x40004c00
 8004808:	40005000 	.word	0x40005000
 800480c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	76bb      	strb	r3, [r7, #26]
        break;
 8004818:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 80f1 	beq.w	8004a04 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	4413      	add	r3, r2
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	429a      	cmp	r2, r3
 8004830:	d305      	bcc.n	800483e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	429a      	cmp	r2, r3
 800483c:	d902      	bls.n	8004844 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	76bb      	strb	r3, [r7, #26]
 8004842:	e0df      	b.n	8004a04 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	4619      	mov	r1, r3
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	f04f 0400 	mov.w	r4, #0
 8004854:	0214      	lsls	r4, r2, #8
 8004856:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800485a:	020b      	lsls	r3, r1, #8
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6852      	ldr	r2, [r2, #4]
 8004860:	0852      	lsrs	r2, r2, #1
 8004862:	4611      	mov	r1, r2
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	eb13 0b01 	adds.w	fp, r3, r1
 800486c:	eb44 0c02 	adc.w	ip, r4, r2
 8004870:	4658      	mov	r0, fp
 8004872:	4661      	mov	r1, ip
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f04f 0400 	mov.w	r4, #0
 800487c:	461a      	mov	r2, r3
 800487e:	4623      	mov	r3, r4
 8004880:	f7fc f91c 	bl	8000abc <__aeabi_uldivmod>
 8004884:	4603      	mov	r3, r0
 8004886:	460c      	mov	r4, r1
 8004888:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004890:	d308      	bcc.n	80048a4 <UART_SetConfig+0x398>
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004898:	d204      	bcs.n	80048a4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	60da      	str	r2, [r3, #12]
 80048a2:	e0af      	b.n	8004a04 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	76bb      	strb	r3, [r7, #26]
 80048a8:	e0ac      	b.n	8004a04 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b2:	d15b      	bne.n	800496c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80048b4:	7efb      	ldrb	r3, [r7, #27]
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d827      	bhi.n	800490a <UART_SetConfig+0x3fe>
 80048ba:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <UART_SetConfig+0x3b4>)
 80048bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c0:	080048e5 	.word	0x080048e5
 80048c4:	080048ed 	.word	0x080048ed
 80048c8:	080048f5 	.word	0x080048f5
 80048cc:	0800490b 	.word	0x0800490b
 80048d0:	080048fb 	.word	0x080048fb
 80048d4:	0800490b 	.word	0x0800490b
 80048d8:	0800490b 	.word	0x0800490b
 80048dc:	0800490b 	.word	0x0800490b
 80048e0:	08004903 	.word	0x08004903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048e4:	f7fe fdf6 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 80048e8:	6178      	str	r0, [r7, #20]
        break;
 80048ea:	e013      	b.n	8004914 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048ec:	f7fe fe08 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 80048f0:	6178      	str	r0, [r7, #20]
        break;
 80048f2:	e00f      	b.n	8004914 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048f4:	4b49      	ldr	r3, [pc, #292]	; (8004a1c <UART_SetConfig+0x510>)
 80048f6:	617b      	str	r3, [r7, #20]
        break;
 80048f8:	e00c      	b.n	8004914 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048fa:	f7fe fd55 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 80048fe:	6178      	str	r0, [r7, #20]
        break;
 8004900:	e008      	b.n	8004914 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004906:	617b      	str	r3, [r7, #20]
        break;
 8004908:	e004      	b.n	8004914 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	76bb      	strb	r3, [r7, #26]
        break;
 8004912:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d074      	beq.n	8004a04 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	005a      	lsls	r2, r3, #1
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	085b      	lsrs	r3, r3, #1
 8004924:	441a      	add	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	fbb2 f3f3 	udiv	r3, r2, r3
 800492e:	b29b      	uxth	r3, r3
 8004930:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b0f      	cmp	r3, #15
 8004936:	d916      	bls.n	8004966 <UART_SetConfig+0x45a>
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800493e:	d212      	bcs.n	8004966 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	b29b      	uxth	r3, r3
 8004944:	f023 030f 	bic.w	r3, r3, #15
 8004948:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	085b      	lsrs	r3, r3, #1
 800494e:	b29b      	uxth	r3, r3
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	b29a      	uxth	r2, r3
 8004956:	89fb      	ldrh	r3, [r7, #14]
 8004958:	4313      	orrs	r3, r2
 800495a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	89fa      	ldrh	r2, [r7, #14]
 8004962:	60da      	str	r2, [r3, #12]
 8004964:	e04e      	b.n	8004a04 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	76bb      	strb	r3, [r7, #26]
 800496a:	e04b      	b.n	8004a04 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800496c:	7efb      	ldrb	r3, [r7, #27]
 800496e:	2b08      	cmp	r3, #8
 8004970:	d827      	bhi.n	80049c2 <UART_SetConfig+0x4b6>
 8004972:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <UART_SetConfig+0x46c>)
 8004974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004978:	0800499d 	.word	0x0800499d
 800497c:	080049a5 	.word	0x080049a5
 8004980:	080049ad 	.word	0x080049ad
 8004984:	080049c3 	.word	0x080049c3
 8004988:	080049b3 	.word	0x080049b3
 800498c:	080049c3 	.word	0x080049c3
 8004990:	080049c3 	.word	0x080049c3
 8004994:	080049c3 	.word	0x080049c3
 8004998:	080049bb 	.word	0x080049bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800499c:	f7fe fd9a 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 80049a0:	6178      	str	r0, [r7, #20]
        break;
 80049a2:	e013      	b.n	80049cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049a4:	f7fe fdac 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 80049a8:	6178      	str	r0, [r7, #20]
        break;
 80049aa:	e00f      	b.n	80049cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049ac:	4b1b      	ldr	r3, [pc, #108]	; (8004a1c <UART_SetConfig+0x510>)
 80049ae:	617b      	str	r3, [r7, #20]
        break;
 80049b0:	e00c      	b.n	80049cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049b2:	f7fe fcf9 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 80049b6:	6178      	str	r0, [r7, #20]
        break;
 80049b8:	e008      	b.n	80049cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049be:	617b      	str	r3, [r7, #20]
        break;
 80049c0:	e004      	b.n	80049cc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	76bb      	strb	r3, [r7, #26]
        break;
 80049ca:	bf00      	nop
    }

    if (pclk != 0U)
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d018      	beq.n	8004a04 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	085a      	lsrs	r2, r3, #1
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	441a      	add	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b0f      	cmp	r3, #15
 80049ec:	d908      	bls.n	8004a00 <UART_SetConfig+0x4f4>
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049f4:	d204      	bcs.n	8004a00 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	60da      	str	r2, [r3, #12]
 80049fe:	e001      	b.n	8004a04 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004a10:	7ebb      	ldrb	r3, [r7, #26]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3720      	adds	r7, #32
 8004a16:	46bd      	mov	sp, r7
 8004a18:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004a1c:	00f42400 	.word	0x00f42400

08004a20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	f003 0310 	and.w	r3, r3, #16
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	f003 0320 	and.w	r3, r3, #32
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01a      	beq.n	8004b36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b1e:	d10a      	bne.n	8004b36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	605a      	str	r2, [r3, #4]
  }
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af02      	add	r7, sp, #8
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004b72:	f7fc febb 	bl	80018ec <HAL_GetTick>
 8004b76:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d10e      	bne.n	8004ba4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f82a 	bl	8004bee <UART_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e020      	b.n	8004be6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d10e      	bne.n	8004bd0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f814 	bl	8004bee <UART_WaitOnFlagUntilTimeout>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e00a      	b.n	8004be6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	603b      	str	r3, [r7, #0]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bfe:	e05d      	b.n	8004cbc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c06:	d059      	beq.n	8004cbc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c08:	f7fc fe70 	bl	80018ec <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d302      	bcc.n	8004c1e <UART_WaitOnFlagUntilTimeout+0x30>
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d11b      	bne.n	8004c56 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c2c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0201 	bic.w	r2, r2, #1
 8004c3c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2220      	movs	r2, #32
 8004c48:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e042      	b.n	8004cdc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d02b      	beq.n	8004cbc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c72:	d123      	bne.n	8004cbc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c8c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0201 	bic.w	r2, r2, #1
 8004c9c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2220      	movs	r2, #32
 8004cae:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e00f      	b.n	8004cdc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69da      	ldr	r2, [r3, #28]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	bf0c      	ite	eq
 8004ccc:	2301      	moveq	r3, #1
 8004cce:	2300      	movne	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	79fb      	ldrb	r3, [r7, #7]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d092      	beq.n	8004c00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004cfa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0201 	bic.w	r2, r2, #1
 8004d0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f7ff fbd8 	bl	80044f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d48:	bf00      	nop
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d66:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff fbb5 	bl	80044e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d90:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d96:	2b22      	cmp	r3, #34	; 0x22
 8004d98:	d13a      	bne.n	8004e10 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004da0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004da2:	89bb      	ldrh	r3, [r7, #12]
 8004da4:	b2d9      	uxtb	r1, r3
 8004da6:	89fb      	ldrh	r3, [r7, #14]
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dae:	400a      	ands	r2, r1
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d123      	bne.n	8004e24 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004dea:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0201 	bic.w	r2, r2, #1
 8004dfa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7fc fabf 	bl	800138c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e0e:	e009      	b.n	8004e24 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	8b1b      	ldrh	r3, [r3, #24]
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f042 0208 	orr.w	r2, r2, #8
 8004e20:	b292      	uxth	r2, r2
 8004e22:	831a      	strh	r2, [r3, #24]
}
 8004e24:	bf00      	nop
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e3a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e40:	2b22      	cmp	r3, #34	; 0x22
 8004e42:	d13a      	bne.n	8004eba <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e4a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e50:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004e52:	89ba      	ldrh	r2, [r7, #12]
 8004e54:	89fb      	ldrh	r3, [r7, #14]
 8004e56:	4013      	ands	r3, r2
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e62:	1c9a      	adds	r2, r3, #2
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d123      	bne.n	8004ece <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e94:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0201 	bic.w	r2, r2, #1
 8004ea4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7fc fa6a 	bl	800138c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004eb8:	e009      	b.n	8004ece <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	8b1b      	ldrh	r3, [r3, #24]
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0208 	orr.w	r2, r2, #8
 8004eca:	b292      	uxth	r2, r2
 8004ecc:	831a      	strh	r2, [r3, #24]
}
 8004ece:	bf00      	nop
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8004ef8:	6839      	ldr	r1, [r7, #0]
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f001 fccd 	bl	800689a <VL53L0X_get_offset_calibration_data_micro_meter>
 8004f00:	4603      	mov	r3, r0
 8004f02:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8004f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8004f10:	b5b0      	push	{r4, r5, r7, lr}
 8004f12:	b096      	sub	sp, #88	; 0x58
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8004f1e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d107      	bne.n	8004f36 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8004f26:	2200      	movs	r2, #0
 8004f28:	2188      	movs	r1, #136	; 0x88
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f004 fed0 	bl	8009cd0 <VL53L0X_WrByte>
 8004f30:	4603      	mov	r3, r0
 8004f32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f44:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004f4e:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a9e      	ldr	r2, [pc, #632]	; (80051d0 <VL53L0X_DataInit+0x2c0>)
 8004f56:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a9d      	ldr	r2, [pc, #628]	; (80051d4 <VL53L0X_DataInit+0x2c4>)
 8004f5e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004f68:	f107 0310 	add.w	r3, r7, #16
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fac2 	bl	80054f8 <VL53L0X_GetDeviceParameters>
 8004f74:	4603      	mov	r3, r0
 8004f76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8004f7a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d112      	bne.n	8004fa8 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8004f82:	2300      	movs	r3, #0
 8004f84:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8004f86:	2300      	movs	r3, #0
 8004f88:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f103 0410 	add.w	r4, r3, #16
 8004f90:	f107 0510 	add.w	r5, r7, #16
 8004f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fa0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004fa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2264      	movs	r2, #100	; 0x64
 8004fac:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004fb6:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004fc0:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004fca:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	2180      	movs	r1, #128	; 0x80
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f004 fe78 	bl	8009cd0 <VL53L0X_WrByte>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004fee:	2201      	movs	r2, #1
 8004ff0:	21ff      	movs	r1, #255	; 0xff
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f004 fe6c 	bl	8009cd0 <VL53L0X_WrByte>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005000:	4313      	orrs	r3, r2
 8005002:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005006:	2200      	movs	r2, #0
 8005008:	2100      	movs	r1, #0
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f004 fe60 	bl	8009cd0 <VL53L0X_WrByte>
 8005010:	4603      	mov	r3, r0
 8005012:	461a      	mov	r2, r3
 8005014:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005018:	4313      	orrs	r3, r2
 800501a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800501e:	f107 030f 	add.w	r3, r7, #15
 8005022:	461a      	mov	r2, r3
 8005024:	2191      	movs	r1, #145	; 0x91
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f004 fed4 	bl	8009dd4 <VL53L0X_RdByte>
 800502c:	4603      	mov	r3, r0
 800502e:	461a      	mov	r2, r3
 8005030:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005034:	4313      	orrs	r3, r2
 8005036:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800503a:	7bfa      	ldrb	r2, [r7, #15]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005042:	2201      	movs	r2, #1
 8005044:	2100      	movs	r1, #0
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f004 fe42 	bl	8009cd0 <VL53L0X_WrByte>
 800504c:	4603      	mov	r3, r0
 800504e:	461a      	mov	r2, r3
 8005050:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005054:	4313      	orrs	r3, r2
 8005056:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800505a:	2200      	movs	r2, #0
 800505c:	21ff      	movs	r1, #255	; 0xff
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f004 fe36 	bl	8009cd0 <VL53L0X_WrByte>
 8005064:	4603      	mov	r3, r0
 8005066:	461a      	mov	r2, r3
 8005068:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800506c:	4313      	orrs	r3, r2
 800506e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005072:	2200      	movs	r2, #0
 8005074:	2180      	movs	r1, #128	; 0x80
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f004 fe2a 	bl	8009cd0 <VL53L0X_WrByte>
 800507c:	4603      	mov	r3, r0
 800507e:	461a      	mov	r2, r3
 8005080:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005084:	4313      	orrs	r3, r2
 8005086:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800508a:	2300      	movs	r3, #0
 800508c:	653b      	str	r3, [r7, #80]	; 0x50
 800508e:	e014      	b.n	80050ba <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8005090:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005094:	2b00      	cmp	r3, #0
 8005096:	d114      	bne.n	80050c2 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800509a:	b29b      	uxth	r3, r3
 800509c:	2201      	movs	r2, #1
 800509e:	4619      	mov	r1, r3
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fd51 	bl	8005b48 <VL53L0X_SetLimitCheckEnable>
 80050a6:	4603      	mov	r3, r0
 80050a8:	461a      	mov	r2, r3
 80050aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80050b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050b6:	3301      	adds	r3, #1
 80050b8:	653b      	str	r3, [r7, #80]	; 0x50
 80050ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050bc:	2b05      	cmp	r3, #5
 80050be:	dde7      	ble.n	8005090 <VL53L0X_DataInit+0x180>
 80050c0:	e000      	b.n	80050c4 <VL53L0X_DataInit+0x1b4>
		else
			break;
 80050c2:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80050c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d107      	bne.n	80050dc <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80050cc:	2200      	movs	r2, #0
 80050ce:	2102      	movs	r1, #2
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fd39 	bl	8005b48 <VL53L0X_SetLimitCheckEnable>
 80050d6:	4603      	mov	r3, r0
 80050d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80050dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d107      	bne.n	80050f4 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80050e4:	2200      	movs	r2, #0
 80050e6:	2103      	movs	r1, #3
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fd2d 	bl	8005b48 <VL53L0X_SetLimitCheckEnable>
 80050ee:	4603      	mov	r3, r0
 80050f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80050f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d107      	bne.n	800510c <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80050fc:	2200      	movs	r2, #0
 80050fe:	2104      	movs	r1, #4
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 fd21 	bl	8005b48 <VL53L0X_SetLimitCheckEnable>
 8005106:	4603      	mov	r3, r0
 8005108:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800510c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005110:	2b00      	cmp	r3, #0
 8005112:	d107      	bne.n	8005124 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005114:	2200      	movs	r2, #0
 8005116:	2105      	movs	r1, #5
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fd15 	bl	8005b48 <VL53L0X_SetLimitCheckEnable>
 800511e:	4603      	mov	r3, r0
 8005120:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8005124:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005128:	2b00      	cmp	r3, #0
 800512a:	d108      	bne.n	800513e <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800512c:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8005130:	2100      	movs	r1, #0
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fdb8 	bl	8005ca8 <VL53L0X_SetLimitCheckValue>
 8005138:	4603      	mov	r3, r0
 800513a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800513e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005142:	2b00      	cmp	r3, #0
 8005144:	d108      	bne.n	8005158 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005146:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800514a:	2101      	movs	r1, #1
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 fdab 	bl	8005ca8 <VL53L0X_SetLimitCheckValue>
 8005152:	4603      	mov	r3, r0
 8005154:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005158:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800515c:	2b00      	cmp	r3, #0
 800515e:	d108      	bne.n	8005172 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005160:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8005164:	2102      	movs	r1, #2
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fd9e 	bl	8005ca8 <VL53L0X_SetLimitCheckValue>
 800516c:	4603      	mov	r3, r0
 800516e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005172:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005176:	2b00      	cmp	r3, #0
 8005178:	d107      	bne.n	800518a <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800517a:	2200      	movs	r2, #0
 800517c:	2103      	movs	r1, #3
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fd92 	bl	8005ca8 <VL53L0X_SetLimitCheckValue>
 8005184:	4603      	mov	r3, r0
 8005186:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800518a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10f      	bne.n	80051b2 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	22ff      	movs	r2, #255	; 0xff
 8005196:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800519a:	22ff      	movs	r2, #255	; 0xff
 800519c:	2101      	movs	r1, #1
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f004 fd96 	bl	8009cd0 <VL53L0X_WrByte>
 80051a4:	4603      	mov	r3, r0
 80051a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80051b2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d103      	bne.n	80051c2 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80051c2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3758      	adds	r7, #88	; 0x58
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bdb0      	pop	{r4, r5, r7, pc}
 80051ce:	bf00      	nop
 80051d0:	00016b85 	.word	0x00016b85
 80051d4:	000970a4 	.word	0x000970a4

080051d8 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80051d8:	b5b0      	push	{r4, r5, r7, lr}
 80051da:	b09e      	sub	sp, #120	; 0x78
 80051dc:	af02      	add	r7, sp, #8
 80051de:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051e0:	2300      	movs	r3, #0
 80051e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80051e6:	f107 031c 	add.w	r3, r7, #28
 80051ea:	2240      	movs	r2, #64	; 0x40
 80051ec:	2100      	movs	r1, #0
 80051ee:	4618      	mov	r0, r3
 80051f0:	f004 fed3 	bl	8009f9a <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80051f4:	2300      	movs	r3, #0
 80051f6:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80051f8:	2300      	movs	r3, #0
 80051fa:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80051fc:	2300      	movs	r3, #0
 80051fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8005202:	2300      	movs	r3, #0
 8005204:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8005206:	2300      	movs	r3, #0
 8005208:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800520e:	2300      	movs	r3, #0
 8005210:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8005214:	2101      	movs	r1, #1
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f002 fa95 	bl	8007746 <VL53L0X_get_info_from_device>
 800521c:	4603      	mov	r3, r0
 800521e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8005228:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8005230:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8005234:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005238:	2b01      	cmp	r3, #1
 800523a:	d80d      	bhi.n	8005258 <VL53L0X_StaticInit+0x80>
 800523c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005240:	2b01      	cmp	r3, #1
 8005242:	d102      	bne.n	800524a <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8005244:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005246:	2b20      	cmp	r3, #32
 8005248:	d806      	bhi.n	8005258 <VL53L0X_StaticInit+0x80>
 800524a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10e      	bne.n	8005270 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8005252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005254:	2b0c      	cmp	r3, #12
 8005256:	d90b      	bls.n	8005270 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8005258:	f107 0218 	add.w	r2, r7, #24
 800525c:	f107 0314 	add.w	r3, r7, #20
 8005260:	4619      	mov	r1, r3
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f001 fd14 	bl	8006c90 <VL53L0X_perform_ref_spad_management>
 8005268:	4603      	mov	r3, r0
 800526a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800526e:	e009      	b.n	8005284 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8005270:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005274:	461a      	mov	r2, r3
 8005276:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f001 ff15 	bl	80070a8 <VL53L0X_set_reference_spads>
 800527e:	4603      	mov	r3, r0
 8005280:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8005284:	4b94      	ldr	r3, [pc, #592]	; (80054d8 <VL53L0X_StaticInit+0x300>)
 8005286:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8005288:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10f      	bne.n	80052b0 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005296:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800529a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d104      	bne.n	80052ac <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80052a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80052aa:	e001      	b.n	80052b0 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80052ac:	4b8a      	ldr	r3, [pc, #552]	; (80054d8 <VL53L0X_StaticInit+0x300>)
 80052ae:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80052b0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d106      	bne.n	80052c6 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80052b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f003 fde8 	bl	8008e90 <VL53L0X_load_tuning_settings>
 80052c0:	4603      	mov	r3, r0
 80052c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80052c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10a      	bne.n	80052e4 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80052ce:	2300      	movs	r3, #0
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	2304      	movs	r3, #4
 80052d4:	2200      	movs	r2, #0
 80052d6:	2100      	movs	r1, #0
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f001 f90d 	bl	80064f8 <VL53L0X_SetGpioConfig>
 80052de:	4603      	mov	r3, r0
 80052e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80052e4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d121      	bne.n	8005330 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80052ec:	2201      	movs	r2, #1
 80052ee:	21ff      	movs	r1, #255	; 0xff
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f004 fced 	bl	8009cd0 <VL53L0X_WrByte>
 80052f6:	4603      	mov	r3, r0
 80052f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80052fc:	f107 031a 	add.w	r3, r7, #26
 8005300:	461a      	mov	r2, r3
 8005302:	2184      	movs	r1, #132	; 0x84
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f004 fd8f 	bl	8009e28 <VL53L0X_RdWord>
 800530a:	4603      	mov	r3, r0
 800530c:	461a      	mov	r2, r3
 800530e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005312:	4313      	orrs	r3, r2
 8005314:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005318:	2200      	movs	r2, #0
 800531a:	21ff      	movs	r1, #255	; 0xff
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f004 fcd7 	bl	8009cd0 <VL53L0X_WrByte>
 8005322:	4603      	mov	r3, r0
 8005324:	461a      	mov	r2, r3
 8005326:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800532a:	4313      	orrs	r3, r2
 800532c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005330:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005334:	2b00      	cmp	r3, #0
 8005336:	d105      	bne.n	8005344 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8005338:	8b7b      	ldrh	r3, [r7, #26]
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	461a      	mov	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8005344:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005348:	2b00      	cmp	r3, #0
 800534a:	d108      	bne.n	800535e <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800534c:	f107 031c 	add.w	r3, r7, #28
 8005350:	4619      	mov	r1, r3
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f8d0 	bl	80054f8 <VL53L0X_GetDeviceParameters>
 8005358:	4603      	mov	r3, r0
 800535a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800535e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005362:	2b00      	cmp	r3, #0
 8005364:	d110      	bne.n	8005388 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8005366:	f107 0319 	add.w	r3, r7, #25
 800536a:	4619      	mov	r1, r3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f9ae 	bl	80056ce <VL53L0X_GetFractionEnable>
 8005372:	4603      	mov	r3, r0
 8005374:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8005378:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800537c:	2b00      	cmp	r3, #0
 800537e:	d103      	bne.n	8005388 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8005380:	7e7a      	ldrb	r2, [r7, #25]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8005388:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10e      	bne.n	80053ae <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f103 0410 	add.w	r4, r3, #16
 8005396:	f107 051c 	add.w	r5, r7, #28
 800539a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800539c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800539e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80053aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80053ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d111      	bne.n	80053da <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80053b6:	f107 0319 	add.w	r3, r7, #25
 80053ba:	461a      	mov	r2, r3
 80053bc:	2101      	movs	r1, #1
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f004 fd08 	bl	8009dd4 <VL53L0X_RdByte>
 80053c4:	4603      	mov	r3, r0
 80053c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80053ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d103      	bne.n	80053da <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80053d2:	7e7a      	ldrb	r2, [r7, #25]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80053da:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d107      	bne.n	80053f2 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80053e2:	2200      	movs	r2, #0
 80053e4:	2100      	movs	r1, #0
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f9e6 	bl	80057b8 <VL53L0X_SetSequenceStepEnable>
 80053ec:	4603      	mov	r3, r0
 80053ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80053f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d107      	bne.n	800540a <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80053fa:	2200      	movs	r2, #0
 80053fc:	2102      	movs	r1, #2
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f9da 	bl	80057b8 <VL53L0X_SetSequenceStepEnable>
 8005404:	4603      	mov	r3, r0
 8005406:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800540a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800540e:	2b00      	cmp	r3, #0
 8005410:	d103      	bne.n	800541a <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2203      	movs	r2, #3
 8005416:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800541a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800541e:	2b00      	cmp	r3, #0
 8005420:	d109      	bne.n	8005436 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8005422:	f107 0313 	add.w	r3, r7, #19
 8005426:	461a      	mov	r2, r3
 8005428:	2100      	movs	r1, #0
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f9ac 	bl	8005788 <VL53L0X_GetVcselPulsePeriod>
 8005430:	4603      	mov	r3, r0
 8005432:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005436:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800543a:	2b00      	cmp	r3, #0
 800543c:	d103      	bne.n	8005446 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800543e:	7cfa      	ldrb	r2, [r7, #19]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8005446:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800544a:	2b00      	cmp	r3, #0
 800544c:	d109      	bne.n	8005462 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800544e:	f107 0313 	add.w	r3, r7, #19
 8005452:	461a      	mov	r2, r3
 8005454:	2101      	movs	r1, #1
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f996 	bl	8005788 <VL53L0X_GetVcselPulsePeriod>
 800545c:	4603      	mov	r3, r0
 800545e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005462:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005466:	2b00      	cmp	r3, #0
 8005468:	d103      	bne.n	8005472 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800546a:	7cfa      	ldrb	r2, [r7, #19]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8005472:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005476:	2b00      	cmp	r3, #0
 8005478:	d109      	bne.n	800548e <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800547a:	f107 030c 	add.w	r3, r7, #12
 800547e:	461a      	mov	r2, r3
 8005480:	2103      	movs	r1, #3
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f002 fee0 	bl	8008248 <get_sequence_step_timeout>
 8005488:	4603      	mov	r3, r0
 800548a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800548e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005492:	2b00      	cmp	r3, #0
 8005494:	d103      	bne.n	800549e <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800549e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d109      	bne.n	80054ba <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 80054a6:	f107 030c 	add.w	r3, r7, #12
 80054aa:	461a      	mov	r2, r3
 80054ac:	2104      	movs	r1, #4
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f002 feca 	bl	8008248 <get_sequence_step_timeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80054ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d103      	bne.n	80054ca <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80054ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3770      	adds	r7, #112	; 0x70
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bdb0      	pop	{r4, r5, r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20000018 	.word	0x20000018

080054dc <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80054e4:	239d      	movs	r3, #157	; 0x9d
 80054e6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 80054e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005502:	2300      	movs	r3, #0
 8005504:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	4619      	mov	r1, r3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f8cc 	bl	80056a8 <VL53L0X_GetDeviceMode>
 8005510:	4603      	mov	r3, r0
 8005512:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d107      	bne.n	800552c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	3308      	adds	r3, #8
 8005520:	4619      	mov	r1, r3
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fa94 	bl	8005a50 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8005528:	4603      	mov	r3, r0
 800552a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800552c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d102      	bne.n	800553a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2200      	movs	r2, #0
 8005538:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800553a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d107      	bne.n	8005552 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	3310      	adds	r3, #16
 8005546:	4619      	mov	r1, r3
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 faca 	bl	8005ae2 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800554e:	4603      	mov	r3, r0
 8005550:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8005552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d107      	bne.n	800556a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	3314      	adds	r3, #20
 800555e:	4619      	mov	r1, r3
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7ff fcc2 	bl	8004eea <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8005566:	4603      	mov	r3, r0
 8005568:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800556a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d134      	bne.n	80055dc <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005572:	2300      	movs	r3, #0
 8005574:	60bb      	str	r3, [r7, #8]
 8005576:	e02a      	b.n	80055ce <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d12a      	bne.n	80055d6 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	b299      	uxth	r1, r3
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	3308      	adds	r3, #8
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	4413      	add	r3, r2
 800558e:	3304      	adds	r3, #4
 8005590:	461a      	mov	r2, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fbea 	bl	8005d6c <VL53L0X_GetLimitCheckValue>
 8005598:	4603      	mov	r3, r0
 800559a:	461a      	mov	r2, r3
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	4313      	orrs	r3, r2
 80055a0:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80055a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d117      	bne.n	80055da <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	b299      	uxth	r1, r3
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	3318      	adds	r3, #24
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	4413      	add	r3, r2
 80055b6:	461a      	mov	r2, r3
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fb51 	bl	8005c60 <VL53L0X_GetLimitCheckEnable>
 80055be:	4603      	mov	r3, r0
 80055c0:	461a      	mov	r2, r3
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	3301      	adds	r3, #1
 80055cc:	60bb      	str	r3, [r7, #8]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2b05      	cmp	r3, #5
 80055d2:	ddd1      	ble.n	8005578 <VL53L0X_GetDeviceParameters+0x80>
 80055d4:	e002      	b.n	80055dc <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80055d6:	bf00      	nop
 80055d8:	e000      	b.n	80055dc <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80055da:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80055dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d107      	bne.n	80055f4 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	333c      	adds	r3, #60	; 0x3c
 80055e8:	4619      	mov	r1, r3
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fc4c 	bl	8005e88 <VL53L0X_GetWrapAroundCheckEnable>
 80055f0:	4603      	mov	r3, r0
 80055f2:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80055f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d107      	bne.n	800560c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	3304      	adds	r3, #4
 8005600:	4619      	mov	r1, r3
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f895 	bl	8005732 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8005608:	4603      	mov	r3, r0
 800560a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800560c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	460b      	mov	r3, r1
 8005622:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005624:	2300      	movs	r3, #0
 8005626:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8005628:	78fb      	ldrb	r3, [r7, #3]
 800562a:	2b15      	cmp	r3, #21
 800562c:	d832      	bhi.n	8005694 <VL53L0X_SetDeviceMode+0x7c>
 800562e:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <VL53L0X_SetDeviceMode+0x1c>)
 8005630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005634:	0800568d 	.word	0x0800568d
 8005638:	0800568d 	.word	0x0800568d
 800563c:	08005695 	.word	0x08005695
 8005640:	0800568d 	.word	0x0800568d
 8005644:	08005695 	.word	0x08005695
 8005648:	08005695 	.word	0x08005695
 800564c:	08005695 	.word	0x08005695
 8005650:	08005695 	.word	0x08005695
 8005654:	08005695 	.word	0x08005695
 8005658:	08005695 	.word	0x08005695
 800565c:	08005695 	.word	0x08005695
 8005660:	08005695 	.word	0x08005695
 8005664:	08005695 	.word	0x08005695
 8005668:	08005695 	.word	0x08005695
 800566c:	08005695 	.word	0x08005695
 8005670:	08005695 	.word	0x08005695
 8005674:	08005695 	.word	0x08005695
 8005678:	08005695 	.word	0x08005695
 800567c:	08005695 	.word	0x08005695
 8005680:	08005695 	.word	0x08005695
 8005684:	0800568d 	.word	0x0800568d
 8005688:	0800568d 	.word	0x0800568d
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	741a      	strb	r2, [r3, #16]
		break;
 8005692:	e001      	b.n	8005698 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005694:	23f8      	movs	r3, #248	; 0xf8
 8005696:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005698:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056b2:	2300      	movs	r3, #0
 80056b4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	7c1a      	ldrb	r2, [r3, #16]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80056be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056d8:	2300      	movs	r3, #0
 80056da:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	2109      	movs	r1, #9
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f004 fb77 	bl	8009dd4 <VL53L0X_RdByte>
 80056e6:	4603      	mov	r3, r0
 80056e8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80056ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d106      	bne.n	8005700 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005700:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005716:	2300      	movs	r3, #0
 8005718:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800571a:	6839      	ldr	r1, [r7, #0]
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f003 fa26 	bl	8008b6e <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8005722:	4603      	mov	r3, r0
 8005724:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8005726:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b084      	sub	sp, #16
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800573c:	2300      	movs	r3, #0
 800573e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005740:	6839      	ldr	r1, [r7, #0]
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f003 faf3 	bl	8008d2e <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8005748:	4603      	mov	r3, r0
 800574a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800574c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	460b      	mov	r3, r1
 8005762:	70fb      	strb	r3, [r7, #3]
 8005764:	4613      	mov	r3, r2
 8005766:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005768:	2300      	movs	r3, #0
 800576a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800576c:	78ba      	ldrb	r2, [r7, #2]
 800576e:	78fb      	ldrb	r3, [r7, #3]
 8005770:	4619      	mov	r1, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f002 ff3b 	bl	80085ee <VL53L0X_set_vcsel_pulse_period>
 8005778:	4603      	mov	r3, r0
 800577a:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800577c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	460b      	mov	r3, r1
 8005792:	607a      	str	r2, [r7, #4]
 8005794:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005796:	2300      	movs	r3, #0
 8005798:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800579a:	7afb      	ldrb	r3, [r7, #11]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	4619      	mov	r1, r3
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f003 f9ad 	bl	8008b00 <VL53L0X_get_vcsel_pulse_period>
 80057a6:	4603      	mov	r3, r0
 80057a8:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80057aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	70fb      	strb	r3, [r7, #3]
 80057c4:	4613      	mov	r3, r2
 80057c6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057c8:	2300      	movs	r3, #0
 80057ca:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80057cc:	2300      	movs	r3, #0
 80057ce:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80057d0:	2300      	movs	r3, #0
 80057d2:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80057d4:	f107 030f 	add.w	r3, r7, #15
 80057d8:	461a      	mov	r2, r3
 80057da:	2101      	movs	r1, #1
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f004 faf9 	bl	8009dd4 <VL53L0X_RdByte>
 80057e2:	4603      	mov	r3, r0
 80057e4:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80057e6:	7bfb      	ldrb	r3, [r7, #15]
 80057e8:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80057ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d15a      	bne.n	80058a8 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80057f2:	78bb      	ldrb	r3, [r7, #2]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d12b      	bne.n	8005850 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80057f8:	78fb      	ldrb	r3, [r7, #3]
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d825      	bhi.n	800584a <VL53L0X_SetSequenceStepEnable+0x92>
 80057fe:	a201      	add	r2, pc, #4	; (adr r2, 8005804 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8005800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005804:	08005819 	.word	0x08005819
 8005808:	08005823 	.word	0x08005823
 800580c:	0800582d 	.word	0x0800582d
 8005810:	08005837 	.word	0x08005837
 8005814:	08005841 	.word	0x08005841
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8005818:	7dbb      	ldrb	r3, [r7, #22]
 800581a:	f043 0310 	orr.w	r3, r3, #16
 800581e:	75bb      	strb	r3, [r7, #22]
				break;
 8005820:	e043      	b.n	80058aa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8005822:	7dbb      	ldrb	r3, [r7, #22]
 8005824:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8005828:	75bb      	strb	r3, [r7, #22]
				break;
 800582a:	e03e      	b.n	80058aa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800582c:	7dbb      	ldrb	r3, [r7, #22]
 800582e:	f043 0304 	orr.w	r3, r3, #4
 8005832:	75bb      	strb	r3, [r7, #22]
				break;
 8005834:	e039      	b.n	80058aa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8005836:	7dbb      	ldrb	r3, [r7, #22]
 8005838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800583c:	75bb      	strb	r3, [r7, #22]
				break;
 800583e:	e034      	b.n	80058aa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8005840:	7dbb      	ldrb	r3, [r7, #22]
 8005842:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005846:	75bb      	strb	r3, [r7, #22]
				break;
 8005848:	e02f      	b.n	80058aa <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800584a:	23fc      	movs	r3, #252	; 0xfc
 800584c:	75fb      	strb	r3, [r7, #23]
 800584e:	e02c      	b.n	80058aa <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	2b04      	cmp	r3, #4
 8005854:	d825      	bhi.n	80058a2 <VL53L0X_SetSequenceStepEnable+0xea>
 8005856:	a201      	add	r2, pc, #4	; (adr r2, 800585c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8005858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585c:	08005871 	.word	0x08005871
 8005860:	0800587b 	.word	0x0800587b
 8005864:	08005885 	.word	0x08005885
 8005868:	0800588f 	.word	0x0800588f
 800586c:	08005899 	.word	0x08005899
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8005870:	7dbb      	ldrb	r3, [r7, #22]
 8005872:	f023 0310 	bic.w	r3, r3, #16
 8005876:	75bb      	strb	r3, [r7, #22]
				break;
 8005878:	e017      	b.n	80058aa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800587a:	7dbb      	ldrb	r3, [r7, #22]
 800587c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8005880:	75bb      	strb	r3, [r7, #22]
				break;
 8005882:	e012      	b.n	80058aa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8005884:	7dbb      	ldrb	r3, [r7, #22]
 8005886:	f023 0304 	bic.w	r3, r3, #4
 800588a:	75bb      	strb	r3, [r7, #22]
				break;
 800588c:	e00d      	b.n	80058aa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800588e:	7dbb      	ldrb	r3, [r7, #22]
 8005890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005894:	75bb      	strb	r3, [r7, #22]
				break;
 8005896:	e008      	b.n	80058aa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8005898:	7dbb      	ldrb	r3, [r7, #22]
 800589a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800589e:	75bb      	strb	r3, [r7, #22]
				break;
 80058a0:	e003      	b.n	80058aa <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80058a2:	23fc      	movs	r3, #252	; 0xfc
 80058a4:	75fb      	strb	r3, [r7, #23]
 80058a6:	e000      	b.n	80058aa <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80058a8:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	7dba      	ldrb	r2, [r7, #22]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d01e      	beq.n	80058f0 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80058b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d107      	bne.n	80058ca <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80058ba:	7dbb      	ldrb	r3, [r7, #22]
 80058bc:	461a      	mov	r2, r3
 80058be:	2101      	movs	r1, #1
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f004 fa05 	bl	8009cd0 <VL53L0X_WrByte>
 80058c6:	4603      	mov	r3, r0
 80058c8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80058ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d103      	bne.n	80058da <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	7dba      	ldrb	r2, [r7, #22]
 80058d6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80058da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d106      	bne.n	80058f0 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80058e8:	6939      	ldr	r1, [r7, #16]
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7ff ff0e 	bl	800570c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80058f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	607b      	str	r3, [r7, #4]
 8005906:	460b      	mov	r3, r1
 8005908:	72fb      	strb	r3, [r7, #11]
 800590a:	4613      	mov	r3, r2
 800590c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800590e:	2300      	movs	r3, #0
 8005910:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8005918:	7afb      	ldrb	r3, [r7, #11]
 800591a:	2b04      	cmp	r3, #4
 800591c:	d836      	bhi.n	800598c <sequence_step_enabled+0x90>
 800591e:	a201      	add	r2, pc, #4	; (adr r2, 8005924 <sequence_step_enabled+0x28>)
 8005920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005924:	08005939 	.word	0x08005939
 8005928:	0800594b 	.word	0x0800594b
 800592c:	0800595d 	.word	0x0800595d
 8005930:	0800596f 	.word	0x0800596f
 8005934:	08005981 	.word	0x08005981
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8005938:	7abb      	ldrb	r3, [r7, #10]
 800593a:	111b      	asrs	r3, r3, #4
 800593c:	b2db      	uxtb	r3, r3
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	b2da      	uxtb	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	701a      	strb	r2, [r3, #0]
		break;
 8005948:	e022      	b.n	8005990 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800594a:	7abb      	ldrb	r3, [r7, #10]
 800594c:	10db      	asrs	r3, r3, #3
 800594e:	b2db      	uxtb	r3, r3
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	b2da      	uxtb	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	701a      	strb	r2, [r3, #0]
		break;
 800595a:	e019      	b.n	8005990 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800595c:	7abb      	ldrb	r3, [r7, #10]
 800595e:	109b      	asrs	r3, r3, #2
 8005960:	b2db      	uxtb	r3, r3
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	b2da      	uxtb	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	701a      	strb	r2, [r3, #0]
		break;
 800596c:	e010      	b.n	8005990 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800596e:	7abb      	ldrb	r3, [r7, #10]
 8005970:	119b      	asrs	r3, r3, #6
 8005972:	b2db      	uxtb	r3, r3
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	b2da      	uxtb	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	701a      	strb	r2, [r3, #0]
		break;
 800597e:	e007      	b.n	8005990 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8005980:	7abb      	ldrb	r3, [r7, #10]
 8005982:	09db      	lsrs	r3, r3, #7
 8005984:	b2da      	uxtb	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	701a      	strb	r2, [r3, #0]
		break;
 800598a:	e001      	b.n	8005990 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800598c:	23fc      	movs	r3, #252	; 0xfc
 800598e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005990:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005994:	4618      	mov	r0, r3
 8005996:	371c      	adds	r7, #28
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059aa:	2300      	movs	r3, #0
 80059ac:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80059b2:	f107 030e 	add.w	r3, r7, #14
 80059b6:	461a      	mov	r2, r3
 80059b8:	2101      	movs	r1, #1
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f004 fa0a 	bl	8009dd4 <VL53L0X_RdByte>
 80059c0:	4603      	mov	r3, r0
 80059c2:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80059c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d107      	bne.n	80059dc <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80059cc:	7bba      	ldrb	r2, [r7, #14]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2100      	movs	r1, #0
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7ff ff92 	bl	80058fc <sequence_step_enabled>
 80059d8:	4603      	mov	r3, r0
 80059da:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80059dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d108      	bne.n	80059f6 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80059e4:	7bba      	ldrb	r2, [r7, #14]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	3302      	adds	r3, #2
 80059ea:	2101      	movs	r1, #1
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7ff ff85 	bl	80058fc <sequence_step_enabled>
 80059f2:	4603      	mov	r3, r0
 80059f4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80059f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d108      	bne.n	8005a10 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80059fe:	7bba      	ldrb	r2, [r7, #14]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	3301      	adds	r3, #1
 8005a04:	2102      	movs	r1, #2
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7ff ff78 	bl	80058fc <sequence_step_enabled>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d108      	bne.n	8005a2a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8005a18:	7bba      	ldrb	r2, [r7, #14]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	3303      	adds	r3, #3
 8005a1e:	2103      	movs	r1, #3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7ff ff6b 	bl	80058fc <sequence_step_enabled>
 8005a26:	4603      	mov	r3, r0
 8005a28:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d108      	bne.n	8005a44 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8005a32:	7bba      	ldrb	r2, [r7, #14]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	3304      	adds	r3, #4
 8005a38:	2104      	movs	r1, #4
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7ff ff5e 	bl	80058fc <sequence_step_enabled>
 8005a40:	4603      	mov	r3, r0
 8005a42:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8005a5e:	f107 030c 	add.w	r3, r7, #12
 8005a62:	461a      	mov	r2, r3
 8005a64:	21f8      	movs	r1, #248	; 0xf8
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f004 f9de 	bl	8009e28 <VL53L0X_RdWord>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8005a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d108      	bne.n	8005a8a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8005a78:	f107 0308 	add.w	r3, r7, #8
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	2104      	movs	r1, #4
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f004 fa09 	bl	8009e98 <VL53L0X_RdDWord>
 8005a86:	4603      	mov	r3, r0
 8005a88:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10c      	bne.n	8005aac <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8005a92:	89bb      	ldrh	r3, [r7, #12]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d005      	beq.n	8005aa4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	89ba      	ldrh	r2, [r7, #12]
 8005a9c:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	7f1b      	ldrb	r3, [r3, #28]
 8005aca:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	7bba      	ldrb	r2, [r7, #14]
 8005ad0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b086      	sub	sp, #24
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005aec:	2300      	movs	r3, #0
 8005aee:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8005af0:	f107 030e 	add.w	r3, r7, #14
 8005af4:	461a      	mov	r2, r3
 8005af6:	2120      	movs	r1, #32
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f004 f995 	bl	8009e28 <VL53L0X_RdWord>
 8005afe:	4603      	mov	r3, r0
 8005b00:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8005b02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d118      	bne.n	8005b3c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8005b0a:	89fb      	ldrh	r3, [r7, #14]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d109      	bne.n	8005b24 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	771a      	strb	r2, [r3, #28]
 8005b22:	e00b      	b.n	8005b3c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8005b24:	89fb      	ldrh	r3, [r7, #14]
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005b3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3718      	adds	r7, #24
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	807b      	strh	r3, [r7, #2]
 8005b54:	4613      	mov	r3, r2
 8005b56:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005b68:	887b      	ldrh	r3, [r7, #2]
 8005b6a:	2b05      	cmp	r3, #5
 8005b6c:	d902      	bls.n	8005b74 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005b6e:	23fc      	movs	r3, #252	; 0xfc
 8005b70:	75fb      	strb	r3, [r7, #23]
 8005b72:	e05b      	b.n	8005c2c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8005b74:	787b      	ldrb	r3, [r7, #1]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d106      	bne.n	8005b88 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8005b82:	2301      	movs	r3, #1
 8005b84:	73bb      	strb	r3, [r7, #14]
 8005b86:	e00a      	b.n	8005b9e <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005b88:	887b      	ldrh	r3, [r7, #2]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	330c      	adds	r3, #12
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8005b96:	2300      	movs	r3, #0
 8005b98:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8005b9e:	887b      	ldrh	r3, [r7, #2]
 8005ba0:	2b05      	cmp	r3, #5
 8005ba2:	d841      	bhi.n	8005c28 <VL53L0X_SetLimitCheckEnable+0xe0>
 8005ba4:	a201      	add	r2, pc, #4	; (adr r2, 8005bac <VL53L0X_SetLimitCheckEnable+0x64>)
 8005ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005baa:	bf00      	nop
 8005bac:	08005bc5 	.word	0x08005bc5
 8005bb0:	08005bcf 	.word	0x08005bcf
 8005bb4:	08005be5 	.word	0x08005be5
 8005bb8:	08005bef 	.word	0x08005bef
 8005bbc:	08005bf9 	.word	0x08005bf9
 8005bc0:	08005c11 	.word	0x08005c11

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	7bfa      	ldrb	r2, [r7, #15]
 8005bc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8005bcc:	e02e      	b.n	8005c2c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	2144      	movs	r1, #68	; 0x44
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f004 f89d 	bl	8009d18 <VL53L0X_WrWord>
 8005bde:	4603      	mov	r3, r0
 8005be0:	75fb      	strb	r3, [r7, #23]

			break;
 8005be2:	e023      	b.n	8005c2c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	7bfa      	ldrb	r2, [r7, #15]
 8005be8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8005bec:	e01e      	b.n	8005c2c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	7bfa      	ldrb	r2, [r7, #15]
 8005bf2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8005bf6:	e019      	b.n	8005c2c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8005bf8:	7bbb      	ldrb	r3, [r7, #14]
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005bfe:	7b7b      	ldrb	r3, [r7, #13]
 8005c00:	22fe      	movs	r2, #254	; 0xfe
 8005c02:	2160      	movs	r1, #96	; 0x60
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f004 f8b1 	bl	8009d6c <VL53L0X_UpdateByte>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8005c0e:	e00d      	b.n	8005c2c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8005c10:	7bbb      	ldrb	r3, [r7, #14]
 8005c12:	011b      	lsls	r3, r3, #4
 8005c14:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005c16:	7b7b      	ldrb	r3, [r7, #13]
 8005c18:	22ef      	movs	r2, #239	; 0xef
 8005c1a:	2160      	movs	r1, #96	; 0x60
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f004 f8a5 	bl	8009d6c <VL53L0X_UpdateByte>
 8005c22:	4603      	mov	r3, r0
 8005c24:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8005c26:	e001      	b.n	8005c2c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005c28:	23fc      	movs	r3, #252	; 0xfc
 8005c2a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005c2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10f      	bne.n	8005c54 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8005c34:	787b      	ldrb	r3, [r7, #1]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005c3a:	887b      	ldrh	r3, [r7, #2]
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	4413      	add	r3, r2
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005c46:	e005      	b.n	8005c54 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005c48:	887b      	ldrh	r3, [r7, #2]
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005c54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005c72:	897b      	ldrh	r3, [r7, #10]
 8005c74:	2b05      	cmp	r3, #5
 8005c76:	d905      	bls.n	8005c84 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005c78:	23fc      	movs	r3, #252	; 0xfc
 8005c7a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	701a      	strb	r2, [r3, #0]
 8005c82:	e008      	b.n	8005c96 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005c84:	897b      	ldrh	r3, [r7, #10]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c8e:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	7dba      	ldrb	r2, [r7, #22]
 8005c94:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005c96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
	...

08005ca8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	607a      	str	r2, [r7, #4]
 8005cb4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8005cba:	897b      	ldrh	r3, [r7, #10]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cc4:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8005cc6:	7dbb      	ldrb	r3, [r7, #22]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d107      	bne.n	8005cdc <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005ccc:	897b      	ldrh	r3, [r7, #10]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	330c      	adds	r3, #12
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	605a      	str	r2, [r3, #4]
 8005cda:	e040      	b.n	8005d5e <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8005cdc:	897b      	ldrh	r3, [r7, #10]
 8005cde:	2b05      	cmp	r3, #5
 8005ce0:	d830      	bhi.n	8005d44 <VL53L0X_SetLimitCheckValue+0x9c>
 8005ce2:	a201      	add	r2, pc, #4	; (adr r2, 8005ce8 <VL53L0X_SetLimitCheckValue+0x40>)
 8005ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce8:	08005d01 	.word	0x08005d01
 8005cec:	08005d09 	.word	0x08005d09
 8005cf0:	08005d1f 	.word	0x08005d1f
 8005cf4:	08005d27 	.word	0x08005d27
 8005cf8:	08005d2f 	.word	0x08005d2f
 8005cfc:	08005d2f 	.word	0x08005d2f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8005d06:	e01f      	b.n	8005d48 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	461a      	mov	r2, r3
 8005d10:	2144      	movs	r1, #68	; 0x44
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f004 f800 	bl	8009d18 <VL53L0X_WrWord>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005d1c:	e014      	b.n	8005d48 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8005d24:	e010      	b.n	8005d48 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8005d2c:	e00c      	b.n	8005d48 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	2164      	movs	r1, #100	; 0x64
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f003 ffed 	bl	8009d18 <VL53L0X_WrWord>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005d42:	e001      	b.n	8005d48 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005d44:	23fc      	movs	r3, #252	; 0xfc
 8005d46:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005d48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d106      	bne.n	8005d5e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005d50:	897b      	ldrh	r3, [r7, #10]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	330c      	adds	r3, #12
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005d5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3718      	adds	r7, #24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop

08005d6c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	460b      	mov	r3, r1
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8005d82:	897b      	ldrh	r3, [r7, #10]
 8005d84:	2b05      	cmp	r3, #5
 8005d86:	d847      	bhi.n	8005e18 <VL53L0X_GetLimitCheckValue+0xac>
 8005d88:	a201      	add	r2, pc, #4	; (adr r2, 8005d90 <VL53L0X_GetLimitCheckValue+0x24>)
 8005d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8e:	bf00      	nop
 8005d90:	08005da9 	.word	0x08005da9
 8005d94:	08005db5 	.word	0x08005db5
 8005d98:	08005ddb 	.word	0x08005ddb
 8005d9c:	08005de7 	.word	0x08005de7
 8005da0:	08005df3 	.word	0x08005df3
 8005da4:	08005df3 	.word	0x08005df3

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dac:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	77bb      	strb	r3, [r7, #30]
		break;
 8005db2:	e033      	b.n	8005e1c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8005db4:	f107 0316 	add.w	r3, r7, #22
 8005db8:	461a      	mov	r2, r3
 8005dba:	2144      	movs	r1, #68	; 0x44
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f004 f833 	bl	8009e28 <VL53L0X_RdWord>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005dc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d102      	bne.n	8005dd4 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005dce:	8afb      	ldrh	r3, [r7, #22]
 8005dd0:	025b      	lsls	r3, r3, #9
 8005dd2:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	77bb      	strb	r3, [r7, #30]
		break;
 8005dd8:	e020      	b.n	8005e1c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dde:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8005de0:	2300      	movs	r3, #0
 8005de2:	77bb      	strb	r3, [r7, #30]
		break;
 8005de4:	e01a      	b.n	8005e1c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8005dec:	2300      	movs	r3, #0
 8005dee:	77bb      	strb	r3, [r7, #30]
		break;
 8005df0:	e014      	b.n	8005e1c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8005df2:	f107 0316 	add.w	r3, r7, #22
 8005df6:	461a      	mov	r2, r3
 8005df8:	2164      	movs	r1, #100	; 0x64
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f004 f814 	bl	8009e28 <VL53L0X_RdWord>
 8005e00:	4603      	mov	r3, r0
 8005e02:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005e04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d102      	bne.n	8005e12 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005e0c:	8afb      	ldrh	r3, [r7, #22]
 8005e0e:	025b      	lsls	r3, r3, #9
 8005e10:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8005e12:	2300      	movs	r3, #0
 8005e14:	77bb      	strb	r3, [r7, #30]
		break;
 8005e16:	e001      	b.n	8005e1c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005e18:	23fc      	movs	r3, #252	; 0xfc
 8005e1a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005e1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d12a      	bne.n	8005e7a <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8005e24:	7fbb      	ldrb	r3, [r7, #30]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d124      	bne.n	8005e74 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d110      	bne.n	8005e52 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8005e30:	897b      	ldrh	r3, [r7, #10]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	330c      	adds	r3, #12
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005e44:	897b      	ldrh	r3, [r7, #10]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	4413      	add	r3, r2
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005e50:	e013      	b.n	8005e7a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005e58:	897b      	ldrh	r3, [r7, #10]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	330c      	adds	r3, #12
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005e66:	897b      	ldrh	r3, [r7, #10]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005e72:	e002      	b.n	8005e7a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005e7a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3720      	adds	r7, #32
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop

08005e88 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e92:	2300      	movs	r3, #0
 8005e94:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8005e96:	f107 030e 	add.w	r3, r7, #14
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f003 ff98 	bl	8009dd4 <VL53L0X_RdByte>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8005ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10e      	bne.n	8005ece <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8005eb0:	7bba      	ldrb	r2, [r7, #14]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8005eb8:	7bbb      	ldrb	r3, [r7, #14]
 8005eba:	b25b      	sxtb	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	da03      	bge.n	8005ec8 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	701a      	strb	r2, [r3, #0]
 8005ec6:	e002      	b.n	8005ece <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d104      	bne.n	8005ee0 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781a      	ldrb	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005ef8:	f107 030e 	add.w	r3, r7, #14
 8005efc:	4619      	mov	r1, r3
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7ff fbd2 	bl	80056a8 <VL53L0X_GetDeviceMode>
 8005f04:	4603      	mov	r3, r0
 8005f06:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d107      	bne.n	8005f20 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005f10:	7bbb      	ldrb	r3, [r7, #14]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d104      	bne.n	8005f20 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f898 	bl	800604c <VL53L0X_StartMeasurement>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d104      	bne.n	8005f32 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f001 fb3f 	bl	80075ac <VL53L0X_measurement_poll_for_completion>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d106      	bne.n	8005f48 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005f3a:	7bbb      	ldrb	r3, [r7, #14]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d103      	bne.n	8005f48 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2203      	movs	r2, #3
 8005f44:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8005f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f60:	2300      	movs	r3, #0
 8005f62:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8005f64:	2301      	movs	r3, #1
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f001 fae1 	bl	8007532 <VL53L0X_perform_ref_calibration>
 8005f70:	4603      	mov	r3, r0
 8005f72:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8005f74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005f96:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8005f98:	7dbb      	ldrb	r3, [r7, #22]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d005      	beq.n	8005faa <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8005f9e:	7dbb      	ldrb	r3, [r7, #22]
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d002      	beq.n	8005faa <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8005fa4:	7dbb      	ldrb	r3, [r7, #22]
 8005fa6:	2b03      	cmp	r3, #3
 8005fa8:	d147      	bne.n	800603a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005faa:	f107 030c 	add.w	r3, r7, #12
 8005fae:	f107 0210 	add.w	r2, r7, #16
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fbc3 	bl	8006740 <VL53L0X_GetInterruptThresholds>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005fc4:	d803      	bhi.n	8005fce <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8005fc6:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8005fc8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005fcc:	d935      	bls.n	800603a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8005fce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d131      	bne.n	800603a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8005fd6:	78fb      	ldrb	r3, [r7, #3]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d006      	beq.n	8005fea <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005fdc:	491a      	ldr	r1, [pc, #104]	; (8006048 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f002 ff56 	bl	8008e90 <VL53L0X_load_tuning_settings>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	75fb      	strb	r3, [r7, #23]
 8005fe8:	e027      	b.n	800603a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005fea:	2204      	movs	r2, #4
 8005fec:	21ff      	movs	r1, #255	; 0xff
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f003 fe6e 	bl	8009cd0 <VL53L0X_WrByte>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	7dfb      	ldrb	r3, [r7, #23]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005ffe:	2200      	movs	r2, #0
 8006000:	2170      	movs	r1, #112	; 0x70
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f003 fe64 	bl	8009cd0 <VL53L0X_WrByte>
 8006008:	4603      	mov	r3, r0
 800600a:	461a      	mov	r2, r3
 800600c:	7dfb      	ldrb	r3, [r7, #23]
 800600e:	4313      	orrs	r3, r2
 8006010:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006012:	2200      	movs	r2, #0
 8006014:	21ff      	movs	r1, #255	; 0xff
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f003 fe5a 	bl	8009cd0 <VL53L0X_WrByte>
 800601c:	4603      	mov	r3, r0
 800601e:	461a      	mov	r2, r3
 8006020:	7dfb      	ldrb	r3, [r7, #23]
 8006022:	4313      	orrs	r3, r2
 8006024:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006026:	2200      	movs	r2, #0
 8006028:	2180      	movs	r1, #128	; 0x80
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f003 fe50 	bl	8009cd0 <VL53L0X_WrByte>
 8006030:	4603      	mov	r3, r0
 8006032:	461a      	mov	r2, r3
 8006034:	7dfb      	ldrb	r3, [r7, #23]
 8006036:	4313      	orrs	r3, r2
 8006038:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800603a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800603e:	4618      	mov	r0, r3
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	2000010c 	.word	0x2000010c

0800604c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006054:	2300      	movs	r3, #0
 8006056:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8006058:	2301      	movs	r3, #1
 800605a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800605c:	f107 030e 	add.w	r3, r7, #14
 8006060:	4619      	mov	r1, r3
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7ff fb20 	bl	80056a8 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006068:	2201      	movs	r2, #1
 800606a:	2180      	movs	r1, #128	; 0x80
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f003 fe2f 	bl	8009cd0 <VL53L0X_WrByte>
 8006072:	4603      	mov	r3, r0
 8006074:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006076:	2201      	movs	r2, #1
 8006078:	21ff      	movs	r1, #255	; 0xff
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f003 fe28 	bl	8009cd0 <VL53L0X_WrByte>
 8006080:	4603      	mov	r3, r0
 8006082:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006084:	2200      	movs	r2, #0
 8006086:	2100      	movs	r1, #0
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f003 fe21 	bl	8009cd0 <VL53L0X_WrByte>
 800608e:	4603      	mov	r3, r0
 8006090:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8006098:	461a      	mov	r2, r3
 800609a:	2191      	movs	r1, #145	; 0x91
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f003 fe17 	bl	8009cd0 <VL53L0X_WrByte>
 80060a2:	4603      	mov	r3, r0
 80060a4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80060a6:	2201      	movs	r2, #1
 80060a8:	2100      	movs	r1, #0
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f003 fe10 	bl	8009cd0 <VL53L0X_WrByte>
 80060b0:	4603      	mov	r3, r0
 80060b2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80060b4:	2200      	movs	r2, #0
 80060b6:	21ff      	movs	r1, #255	; 0xff
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f003 fe09 	bl	8009cd0 <VL53L0X_WrByte>
 80060be:	4603      	mov	r3, r0
 80060c0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80060c2:	2200      	movs	r2, #0
 80060c4:	2180      	movs	r1, #128	; 0x80
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f003 fe02 	bl	8009cd0 <VL53L0X_WrByte>
 80060cc:	4603      	mov	r3, r0
 80060ce:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80060d0:	7bbb      	ldrb	r3, [r7, #14]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d037      	beq.n	8006146 <VL53L0X_StartMeasurement+0xfa>
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d04f      	beq.n	800617a <VL53L0X_StartMeasurement+0x12e>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d167      	bne.n	80061ae <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80060de:	2201      	movs	r2, #1
 80060e0:	2100      	movs	r1, #0
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f003 fdf4 	bl	8009cd0 <VL53L0X_WrByte>
 80060e8:	4603      	mov	r3, r0
 80060ea:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80060f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d15d      	bne.n	80061b4 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80060f8:	2300      	movs	r3, #0
 80060fa:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d008      	beq.n	8006114 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8006102:	f107 030d 	add.w	r3, r7, #13
 8006106:	461a      	mov	r2, r3
 8006108:	2100      	movs	r1, #0
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f003 fe62 	bl	8009dd4 <VL53L0X_RdByte>
 8006110:	4603      	mov	r3, r0
 8006112:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	3301      	adds	r3, #1
 8006118:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800611a:	7b7a      	ldrb	r2, [r7, #13]
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	4013      	ands	r3, r2
 8006120:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006122:	7bfa      	ldrb	r2, [r7, #15]
 8006124:	429a      	cmp	r2, r3
 8006126:	d107      	bne.n	8006138 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8006128:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d103      	bne.n	8006138 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006136:	d3e1      	bcc.n	80060fc <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800613e:	d339      	bcc.n	80061b4 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8006140:	23f9      	movs	r3, #249	; 0xf9
 8006142:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8006144:	e036      	b.n	80061b4 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006146:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d105      	bne.n	800615a <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800614e:	2101      	movs	r1, #1
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff ff15 	bl	8005f80 <VL53L0X_CheckAndLoadInterruptSettings>
 8006156:	4603      	mov	r3, r0
 8006158:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800615a:	2202      	movs	r2, #2
 800615c:	2100      	movs	r1, #0
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f003 fdb6 	bl	8009cd0 <VL53L0X_WrByte>
 8006164:	4603      	mov	r3, r0
 8006166:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8006168:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d123      	bne.n	80061b8 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2204      	movs	r2, #4
 8006174:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006178:	e01e      	b.n	80061b8 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800617a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d105      	bne.n	800618e <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006182:	2101      	movs	r1, #1
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7ff fefb 	bl	8005f80 <VL53L0X_CheckAndLoadInterruptSettings>
 800618a:	4603      	mov	r3, r0
 800618c:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800618e:	2204      	movs	r2, #4
 8006190:	2100      	movs	r1, #0
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f003 fd9c 	bl	8009cd0 <VL53L0X_WrByte>
 8006198:	4603      	mov	r3, r0
 800619a:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800619c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10b      	bne.n	80061bc <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2204      	movs	r2, #4
 80061a8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80061ac:	e006      	b.n	80061bc <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80061ae:	23f8      	movs	r3, #248	; 0xf8
 80061b0:	75fb      	strb	r3, [r7, #23]
 80061b2:	e004      	b.n	80061be <VL53L0X_StartMeasurement+0x172>
		break;
 80061b4:	bf00      	nop
 80061b6:	e002      	b.n	80061be <VL53L0X_StartMeasurement+0x172>
		break;
 80061b8:	bf00      	nop
 80061ba:	e000      	b.n	80061be <VL53L0X_StartMeasurement+0x172>
		break;
 80061bc:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80061be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b084      	sub	sp, #16
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061d4:	2300      	movs	r3, #0
 80061d6:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80061de:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80061e0:	7bbb      	ldrb	r3, [r7, #14]
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d112      	bne.n	800620c <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80061e6:	f107 0308 	add.w	r3, r7, #8
 80061ea:	4619      	mov	r1, r3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 fb1d 	bl	800682c <VL53L0X_GetInterruptMaskStatus>
 80061f2:	4603      	mov	r3, r0
 80061f4:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d103      	bne.n	8006204 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2201      	movs	r2, #1
 8006200:	701a      	strb	r2, [r3, #0]
 8006202:	e01c      	b.n	800623e <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2200      	movs	r2, #0
 8006208:	701a      	strb	r2, [r3, #0]
 800620a:	e018      	b.n	800623e <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800620c:	f107 030d 	add.w	r3, r7, #13
 8006210:	461a      	mov	r2, r3
 8006212:	2114      	movs	r1, #20
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f003 fddd 	bl	8009dd4 <VL53L0X_RdByte>
 800621a:	4603      	mov	r3, r0
 800621c:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800621e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10b      	bne.n	800623e <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8006226:	7b7b      	ldrb	r3, [r7, #13]
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2201      	movs	r2, #1
 8006234:	701a      	strb	r2, [r3, #0]
 8006236:	e002      	b.n	800623e <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2200      	movs	r2, #0
 800623c:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800623e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800624c:	b5b0      	push	{r4, r5, r7, lr}
 800624e:	b096      	sub	sp, #88	; 0x58
 8006250:	af02      	add	r7, sp, #8
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006256:	2300      	movs	r3, #0
 8006258:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800625c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006260:	230c      	movs	r3, #12
 8006262:	2114      	movs	r1, #20
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f003 fd07 	bl	8009c78 <VL53L0X_ReadMulti>
 800626a:	4603      	mov	r3, r0
 800626c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8006270:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006274:	2b00      	cmp	r3, #0
 8006276:	f040 80d2 	bne.w	800641e <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2200      	movs	r2, #0
 800627e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8006286:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800628a:	b29b      	uxth	r3, r3
 800628c:	021b      	lsls	r3, r3, #8
 800628e:	b29a      	uxth	r2, r3
 8006290:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006294:	b29b      	uxth	r3, r3
 8006296:	4413      	add	r3, r2
 8006298:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	2200      	movs	r2, #0
 80062a0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80062a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	021b      	lsls	r3, r3, #8
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	4413      	add	r3, r2
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	025b      	lsls	r3, r3, #9
 80062b8:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062be:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80062c0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	021b      	lsls	r3, r3, #8
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	4413      	add	r3, r2
 80062d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80062d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80062da:	025b      	lsls	r3, r3, #9
 80062dc:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80062e2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	021b      	lsls	r3, r3, #8
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	4413      	add	r3, r2
 80062f4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80062fe:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8006300:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006304:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800630e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8006316:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800631a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800631c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006320:	d047      	beq.n	80063b2 <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8006322:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006324:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006328:	fb02 f303 	mul.w	r3, r2, r3
 800632c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006330:	4a58      	ldr	r2, [pc, #352]	; (8006494 <VL53L0X_GetRangingMeasurementData+0x248>)
 8006332:	fb82 1203 	smull	r1, r2, r2, r3
 8006336:	1192      	asrs	r2, r2, #6
 8006338:	17db      	asrs	r3, r3, #31
 800633a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800633c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	7f1b      	ldrb	r3, [r3, #28]
 800634a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800634e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006352:	2b00      	cmp	r3, #0
 8006354:	d02d      	beq.n	80063b2 <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8006356:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006358:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800635c:	fb02 f303 	mul.w	r3, r2, r3
 8006360:	121b      	asrs	r3, r3, #8
 8006362:	461a      	mov	r2, r3
				if ((SignalRate
 8006364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006366:	4293      	cmp	r3, r2
 8006368:	d10d      	bne.n	8006386 <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 800636a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800636e:	2b00      	cmp	r3, #0
 8006370:	d004      	beq.n	800637c <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8006372:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8006376:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800637a:	e016      	b.n	80063aa <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 800637c:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8006380:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006384:	e011      	b.n	80063aa <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8006386:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800638a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800638c:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8006390:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006392:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8006396:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800639a:	121b      	asrs	r3, r3, #8
 800639c:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800639e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063a0:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80063a2:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80063a6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80063aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80063ae:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80063b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00d      	beq.n	80063d6 <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80063ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80063be:	089b      	lsrs	r3, r3, #2
 80063c0:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80063c6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	019b      	lsls	r3, r3, #6
 80063ce:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	75da      	strb	r2, [r3, #23]
 80063d4:	e006      	b.n	80063e4 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80063dc:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2200      	movs	r2, #0
 80063e2:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80063e4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80063e8:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80063ec:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80063f0:	9301      	str	r3, [sp, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	4613      	mov	r3, r2
 80063f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f003 f9f0 	bl	80097e0 <VL53L0X_get_pal_range_status>
 8006400:	4603      	mov	r3, r0
 8006402:	461a      	mov	r2, r3
 8006404:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006408:	4313      	orrs	r3, r2
 800640a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800640e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006412:	2b00      	cmp	r3, #0
 8006414:	d103      	bne.n	800641e <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8006416:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800641e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006422:	2b00      	cmp	r3, #0
 8006424:	d12f      	bne.n	8006486 <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f107 040c 	add.w	r4, r7, #12
 800642c:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8006430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006434:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006438:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8006440:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8006446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800644e:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8006454:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800645a:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8006460:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8006466:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800646c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8006476:	f107 050c 	add.w	r5, r7, #12
 800647a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800647c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800647e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006482:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006486:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800648a:	4618      	mov	r0, r3
 800648c:	3750      	adds	r7, #80	; 0x50
 800648e:	46bd      	mov	sp, r7
 8006490:	bdb0      	pop	{r4, r5, r7, pc}
 8006492:	bf00      	nop
 8006494:	10624dd3 	.word	0x10624dd3

08006498 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064a2:	2300      	movs	r3, #0
 80064a4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80064a6:	2100      	movs	r1, #0
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff f8b5 	bl	8005618 <VL53L0X_SetDeviceMode>
 80064ae:	4603      	mov	r3, r0
 80064b0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80064b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d104      	bne.n	80064c4 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff fd16 	bl	8005eec <VL53L0X_PerformSingleMeasurement>
 80064c0:	4603      	mov	r3, r0
 80064c2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80064c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d105      	bne.n	80064d8 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7ff febc 	bl	800624c <VL53L0X_GetRangingMeasurementData>
 80064d4:	4603      	mov	r3, r0
 80064d6:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80064d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d105      	bne.n	80064ec <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80064e0:	2100      	movs	r1, #0
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f962 	bl	80067ac <VL53L0X_ClearInterruptMask>
 80064e8:	4603      	mov	r3, r0
 80064ea:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80064ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	4608      	mov	r0, r1
 8006502:	4611      	mov	r1, r2
 8006504:	461a      	mov	r2, r3
 8006506:	4603      	mov	r3, r0
 8006508:	70fb      	strb	r3, [r7, #3]
 800650a:	460b      	mov	r3, r1
 800650c:	70bb      	strb	r3, [r7, #2]
 800650e:	4613      	mov	r3, r2
 8006510:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006512:	2300      	movs	r3, #0
 8006514:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8006516:	78fb      	ldrb	r3, [r7, #3]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800651c:	23f6      	movs	r3, #246	; 0xf6
 800651e:	73fb      	strb	r3, [r7, #15]
 8006520:	e107      	b.n	8006732 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8006522:	78bb      	ldrb	r3, [r7, #2]
 8006524:	2b14      	cmp	r3, #20
 8006526:	d110      	bne.n	800654a <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8006528:	7e3b      	ldrb	r3, [r7, #24]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d102      	bne.n	8006534 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800652e:	2310      	movs	r3, #16
 8006530:	73bb      	strb	r3, [r7, #14]
 8006532:	e001      	b.n	8006538 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8006534:	2301      	movs	r3, #1
 8006536:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8006538:	7bbb      	ldrb	r3, [r7, #14]
 800653a:	461a      	mov	r2, r3
 800653c:	2184      	movs	r1, #132	; 0x84
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f003 fbc6 	bl	8009cd0 <VL53L0X_WrByte>
 8006544:	4603      	mov	r3, r0
 8006546:	73fb      	strb	r3, [r7, #15]
 8006548:	e0f3      	b.n	8006732 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800654a:	78bb      	ldrb	r3, [r7, #2]
 800654c:	2b15      	cmp	r3, #21
 800654e:	f040 8097 	bne.w	8006680 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006552:	2201      	movs	r2, #1
 8006554:	21ff      	movs	r1, #255	; 0xff
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f003 fbba 	bl	8009cd0 <VL53L0X_WrByte>
 800655c:	4603      	mov	r3, r0
 800655e:	461a      	mov	r2, r3
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	4313      	orrs	r3, r2
 8006564:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006566:	2200      	movs	r2, #0
 8006568:	2100      	movs	r1, #0
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f003 fbb0 	bl	8009cd0 <VL53L0X_WrByte>
 8006570:	4603      	mov	r3, r0
 8006572:	461a      	mov	r2, r3
 8006574:	7bfb      	ldrb	r3, [r7, #15]
 8006576:	4313      	orrs	r3, r2
 8006578:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800657a:	2200      	movs	r2, #0
 800657c:	21ff      	movs	r1, #255	; 0xff
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f003 fba6 	bl	8009cd0 <VL53L0X_WrByte>
 8006584:	4603      	mov	r3, r0
 8006586:	461a      	mov	r2, r3
 8006588:	7bfb      	ldrb	r3, [r7, #15]
 800658a:	4313      	orrs	r3, r2
 800658c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800658e:	2201      	movs	r2, #1
 8006590:	2180      	movs	r1, #128	; 0x80
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f003 fb9c 	bl	8009cd0 <VL53L0X_WrByte>
 8006598:	4603      	mov	r3, r0
 800659a:	461a      	mov	r2, r3
 800659c:	7bfb      	ldrb	r3, [r7, #15]
 800659e:	4313      	orrs	r3, r2
 80065a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80065a2:	2202      	movs	r2, #2
 80065a4:	2185      	movs	r1, #133	; 0x85
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f003 fb92 	bl	8009cd0 <VL53L0X_WrByte>
 80065ac:	4603      	mov	r3, r0
 80065ae:	461a      	mov	r2, r3
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80065b6:	2204      	movs	r2, #4
 80065b8:	21ff      	movs	r1, #255	; 0xff
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f003 fb88 	bl	8009cd0 <VL53L0X_WrByte>
 80065c0:	4603      	mov	r3, r0
 80065c2:	461a      	mov	r2, r3
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80065ca:	2200      	movs	r2, #0
 80065cc:	21cd      	movs	r1, #205	; 0xcd
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f003 fb7e 	bl	8009cd0 <VL53L0X_WrByte>
 80065d4:	4603      	mov	r3, r0
 80065d6:	461a      	mov	r2, r3
 80065d8:	7bfb      	ldrb	r3, [r7, #15]
 80065da:	4313      	orrs	r3, r2
 80065dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80065de:	2211      	movs	r2, #17
 80065e0:	21cc      	movs	r1, #204	; 0xcc
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f003 fb74 	bl	8009cd0 <VL53L0X_WrByte>
 80065e8:	4603      	mov	r3, r0
 80065ea:	461a      	mov	r2, r3
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80065f2:	2207      	movs	r2, #7
 80065f4:	21ff      	movs	r1, #255	; 0xff
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f003 fb6a 	bl	8009cd0 <VL53L0X_WrByte>
 80065fc:	4603      	mov	r3, r0
 80065fe:	461a      	mov	r2, r3
 8006600:	7bfb      	ldrb	r3, [r7, #15]
 8006602:	4313      	orrs	r3, r2
 8006604:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8006606:	2200      	movs	r2, #0
 8006608:	21be      	movs	r1, #190	; 0xbe
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f003 fb60 	bl	8009cd0 <VL53L0X_WrByte>
 8006610:	4603      	mov	r3, r0
 8006612:	461a      	mov	r2, r3
 8006614:	7bfb      	ldrb	r3, [r7, #15]
 8006616:	4313      	orrs	r3, r2
 8006618:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800661a:	2206      	movs	r2, #6
 800661c:	21ff      	movs	r1, #255	; 0xff
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f003 fb56 	bl	8009cd0 <VL53L0X_WrByte>
 8006624:	4603      	mov	r3, r0
 8006626:	461a      	mov	r2, r3
 8006628:	7bfb      	ldrb	r3, [r7, #15]
 800662a:	4313      	orrs	r3, r2
 800662c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800662e:	2209      	movs	r2, #9
 8006630:	21cc      	movs	r1, #204	; 0xcc
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f003 fb4c 	bl	8009cd0 <VL53L0X_WrByte>
 8006638:	4603      	mov	r3, r0
 800663a:	461a      	mov	r2, r3
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	4313      	orrs	r3, r2
 8006640:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006642:	2200      	movs	r2, #0
 8006644:	21ff      	movs	r1, #255	; 0xff
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f003 fb42 	bl	8009cd0 <VL53L0X_WrByte>
 800664c:	4603      	mov	r3, r0
 800664e:	461a      	mov	r2, r3
 8006650:	7bfb      	ldrb	r3, [r7, #15]
 8006652:	4313      	orrs	r3, r2
 8006654:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006656:	2201      	movs	r2, #1
 8006658:	21ff      	movs	r1, #255	; 0xff
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f003 fb38 	bl	8009cd0 <VL53L0X_WrByte>
 8006660:	4603      	mov	r3, r0
 8006662:	461a      	mov	r2, r3
 8006664:	7bfb      	ldrb	r3, [r7, #15]
 8006666:	4313      	orrs	r3, r2
 8006668:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800666a:	2200      	movs	r2, #0
 800666c:	2100      	movs	r1, #0
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f003 fb2e 	bl	8009cd0 <VL53L0X_WrByte>
 8006674:	4603      	mov	r3, r0
 8006676:	461a      	mov	r2, r3
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	4313      	orrs	r3, r2
 800667c:	73fb      	strb	r3, [r7, #15]
 800667e:	e058      	b.n	8006732 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8006680:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d121      	bne.n	80066cc <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8006688:	787b      	ldrb	r3, [r7, #1]
 800668a:	2b04      	cmp	r3, #4
 800668c:	d81b      	bhi.n	80066c6 <VL53L0X_SetGpioConfig+0x1ce>
 800668e:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <VL53L0X_SetGpioConfig+0x19c>)
 8006690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006694:	080066a9 	.word	0x080066a9
 8006698:	080066af 	.word	0x080066af
 800669c:	080066b5 	.word	0x080066b5
 80066a0:	080066bb 	.word	0x080066bb
 80066a4:	080066c1 	.word	0x080066c1
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80066a8:	2300      	movs	r3, #0
 80066aa:	73bb      	strb	r3, [r7, #14]
				break;
 80066ac:	e00f      	b.n	80066ce <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80066ae:	2301      	movs	r3, #1
 80066b0:	73bb      	strb	r3, [r7, #14]
				break;
 80066b2:	e00c      	b.n	80066ce <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80066b4:	2302      	movs	r3, #2
 80066b6:	73bb      	strb	r3, [r7, #14]
				break;
 80066b8:	e009      	b.n	80066ce <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80066ba:	2303      	movs	r3, #3
 80066bc:	73bb      	strb	r3, [r7, #14]
				break;
 80066be:	e006      	b.n	80066ce <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80066c0:	2304      	movs	r3, #4
 80066c2:	73bb      	strb	r3, [r7, #14]
				break;
 80066c4:	e003      	b.n	80066ce <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80066c6:	23f5      	movs	r3, #245	; 0xf5
 80066c8:	73fb      	strb	r3, [r7, #15]
 80066ca:	e000      	b.n	80066ce <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80066cc:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80066ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d107      	bne.n	80066e6 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80066d6:	7bbb      	ldrb	r3, [r7, #14]
 80066d8:	461a      	mov	r2, r3
 80066da:	210a      	movs	r1, #10
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f003 faf7 	bl	8009cd0 <VL53L0X_WrByte>
 80066e2:	4603      	mov	r3, r0
 80066e4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80066e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10f      	bne.n	800670e <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80066ee:	7e3b      	ldrb	r3, [r7, #24]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d102      	bne.n	80066fa <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80066f4:	2300      	movs	r3, #0
 80066f6:	73bb      	strb	r3, [r7, #14]
 80066f8:	e001      	b.n	80066fe <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80066fa:	2310      	movs	r3, #16
 80066fc:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	22ef      	movs	r2, #239	; 0xef
 8006702:	2184      	movs	r1, #132	; 0x84
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f003 fb31 	bl	8009d6c <VL53L0X_UpdateByte>
 800670a:	4603      	mov	r3, r0
 800670c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800670e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d103      	bne.n	800671e <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	787a      	ldrb	r2, [r7, #1]
 800671a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800671e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d105      	bne.n	8006732 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006726:	2100      	movs	r1, #0
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f83f 	bl	80067ac <VL53L0X_ClearInterruptMask>
 800672e:	4603      	mov	r3, r0
 8006730:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006732:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop

08006740 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	607a      	str	r2, [r7, #4]
 800674a:	603b      	str	r3, [r7, #0]
 800674c:	460b      	mov	r3, r1
 800674e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006750:	2300      	movs	r3, #0
 8006752:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8006754:	f107 0314 	add.w	r3, r7, #20
 8006758:	461a      	mov	r2, r3
 800675a:	210e      	movs	r1, #14
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f003 fb63 	bl	8009e28 <VL53L0X_RdWord>
 8006762:	4603      	mov	r3, r0
 8006764:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006766:	8abb      	ldrh	r3, [r7, #20]
 8006768:	045b      	lsls	r3, r3, #17
 800676a:	461a      	mov	r2, r3
 800676c:	4b0e      	ldr	r3, [pc, #56]	; (80067a8 <VL53L0X_GetInterruptThresholds+0x68>)
 800676e:	4013      	ands	r3, r2
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8006774:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10f      	bne.n	800679c <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800677c:	f107 0314 	add.w	r3, r7, #20
 8006780:	461a      	mov	r2, r3
 8006782:	210c      	movs	r1, #12
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f003 fb4f 	bl	8009e28 <VL53L0X_RdWord>
 800678a:	4603      	mov	r3, r0
 800678c:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800678e:	8abb      	ldrh	r3, [r7, #20]
 8006790:	045b      	lsls	r3, r3, #17
 8006792:	461a      	mov	r2, r3
 8006794:	4b04      	ldr	r3, [pc, #16]	; (80067a8 <VL53L0X_GetInterruptThresholds+0x68>)
 8006796:	4013      	ands	r3, r2
		*pThresholdHigh =
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800679c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	1ffe0000 	.word	0x1ffe0000

080067ac <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067b6:	2300      	movs	r3, #0
 80067b8:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80067ba:	2300      	movs	r3, #0
 80067bc:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80067be:	2201      	movs	r2, #1
 80067c0:	210b      	movs	r1, #11
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f003 fa84 	bl	8009cd0 <VL53L0X_WrByte>
 80067c8:	4603      	mov	r3, r0
 80067ca:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80067cc:	2200      	movs	r2, #0
 80067ce:	210b      	movs	r1, #11
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f003 fa7d 	bl	8009cd0 <VL53L0X_WrByte>
 80067d6:	4603      	mov	r3, r0
 80067d8:	461a      	mov	r2, r3
 80067da:	7bfb      	ldrb	r3, [r7, #15]
 80067dc:	4313      	orrs	r3, r2
 80067de:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80067e0:	f107 030d 	add.w	r3, r7, #13
 80067e4:	461a      	mov	r2, r3
 80067e6:	2113      	movs	r1, #19
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f003 faf3 	bl	8009dd4 <VL53L0X_RdByte>
 80067ee:	4603      	mov	r3, r0
 80067f0:	461a      	mov	r2, r3
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
 80067fa:	3301      	adds	r3, #1
 80067fc:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80067fe:	7b7b      	ldrb	r3, [r7, #13]
 8006800:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8006804:	2b00      	cmp	r3, #0
 8006806:	d006      	beq.n	8006816 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8006808:	7bbb      	ldrb	r3, [r7, #14]
 800680a:	2b02      	cmp	r3, #2
 800680c:	d803      	bhi.n	8006816 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800680e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0d3      	beq.n	80067be <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8006816:	7bbb      	ldrb	r3, [r7, #14]
 8006818:	2b02      	cmp	r3, #2
 800681a:	d901      	bls.n	8006820 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800681c:	23f4      	movs	r3, #244	; 0xf4
 800681e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006820:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006836:	2300      	movs	r3, #0
 8006838:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800683a:	f107 030e 	add.w	r3, r7, #14
 800683e:	461a      	mov	r2, r3
 8006840:	2113      	movs	r1, #19
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f003 fac6 	bl	8009dd4 <VL53L0X_RdByte>
 8006848:	4603      	mov	r3, r0
 800684a:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800684c:	7bbb      	ldrb	r3, [r7, #14]
 800684e:	f003 0207 	and.w	r2, r3, #7
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8006856:	7bbb      	ldrb	r3, [r7, #14]
 8006858:	f003 0318 	and.w	r3, r3, #24
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8006860:	23fa      	movs	r3, #250	; 0xfa
 8006862:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006864:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800687c:	2300      	movs	r3, #0
 800687e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	68b9      	ldr	r1, [r7, #8]
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 fa03 	bl	8006c90 <VL53L0X_perform_ref_spad_management>
 800688a:	4603      	mov	r3, r0
 800688c:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800688e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068a4:	2300      	movs	r3, #0
 80068a6:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80068a8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80068ac:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80068ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068b2:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80068b4:	f107 0308 	add.w	r3, r7, #8
 80068b8:	461a      	mov	r2, r3
 80068ba:	2128      	movs	r1, #40	; 0x28
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f003 fab3 	bl	8009e28 <VL53L0X_RdWord>
 80068c2:	4603      	mov	r3, r0
 80068c4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80068c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d11e      	bne.n	800690c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80068ce:	893b      	ldrh	r3, [r7, #8]
 80068d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80068d8:	893b      	ldrh	r3, [r7, #8]
 80068da:	461a      	mov	r2, r3
 80068dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	dd0b      	ble.n	80068fc <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80068e4:	893a      	ldrh	r2, [r7, #8]
 80068e6:	897b      	ldrh	r3, [r7, #10]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	b21b      	sxth	r3, r3
 80068ee:	461a      	mov	r2, r3
					* 250;
 80068f0:	23fa      	movs	r3, #250	; 0xfa
 80068f2:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	e007      	b.n	800690c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80068fc:	893b      	ldrh	r3, [r7, #8]
 80068fe:	b21b      	sxth	r3, r3
 8006900:	461a      	mov	r2, r3
 8006902:	23fa      	movs	r3, #250	; 0xfa
 8006904:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800690c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8006918:	b480      	push	{r7}
 800691a:	b08b      	sub	sp, #44	; 0x2c
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
 8006924:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8006926:	2308      	movs	r3, #8
 8006928:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800692a:	2300      	movs	r3, #0
 800692c:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	f04f 32ff 	mov.w	r2, #4294967295
 8006934:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	fbb2 f3f3 	udiv	r3, r2, r3
 800693e:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	69ba      	ldr	r2, [r7, #24]
 8006944:	fbb3 f2f2 	udiv	r2, r3, r2
 8006948:	69b9      	ldr	r1, [r7, #24]
 800694a:	fb01 f202 	mul.w	r2, r1, r2
 800694e:	1a9b      	subs	r3, r3, r2
 8006950:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	627b      	str	r3, [r7, #36]	; 0x24
 8006956:	e030      	b.n	80069ba <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8006958:	2300      	movs	r3, #0
 800695a:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	4413      	add	r3, r2
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8006966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	429a      	cmp	r2, r3
 800696c:	d11e      	bne.n	80069ac <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800696e:	7ffa      	ldrb	r2, [r7, #31]
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	fa42 f303 	asr.w	r3, r2, r3
 8006976:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800697c:	e016      	b.n	80069ac <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800697e:	7ffb      	ldrb	r3, [r7, #31]
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00b      	beq.n	80069a0 <get_next_good_spad+0x88>
				success = 1;
 8006988:	2301      	movs	r3, #1
 800698a:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	fb02 f203 	mul.w	r2, r2, r3
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	4413      	add	r3, r2
 8006998:	461a      	mov	r2, r3
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	601a      	str	r2, [r3, #0]
				break;
 800699e:	e009      	b.n	80069b4 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80069a0:	7ffb      	ldrb	r3, [r7, #31]
 80069a2:	085b      	lsrs	r3, r3, #1
 80069a4:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	3301      	adds	r3, #1
 80069aa:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80069ac:	6a3a      	ldr	r2, [r7, #32]
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d3e4      	bcc.n	800697e <get_next_good_spad+0x66>
				coarseIndex++) {
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	3301      	adds	r3, #1
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80069ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d202      	bcs.n	80069c8 <get_next_good_spad+0xb0>
 80069c2:	7fbb      	ldrb	r3, [r7, #30]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0c7      	beq.n	8006958 <get_next_good_spad+0x40>
		}
	}
}
 80069c8:	bf00      	nop
 80069ca:	372c      	adds	r7, #44	; 0x2c
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80069dc:	2301      	movs	r3, #1
 80069de:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	099b      	lsrs	r3, r3, #6
 80069e4:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80069e6:	4a07      	ldr	r2, [pc, #28]	; (8006a04 <is_aperture+0x30>)
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <is_aperture+0x22>
		isAperture = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	200002c4 	.word	0x200002c4

08006a08 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b089      	sub	sp, #36	; 0x24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006a14:	2300      	movs	r3, #0
 8006a16:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8006a18:	2308      	movs	r3, #8
 8006a1a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a24:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a2e:	69b9      	ldr	r1, [r7, #24]
 8006a30:	fb01 f202 	mul.w	r2, r1, r2
 8006a34:	1a9b      	subs	r3, r3, r2
 8006a36:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d302      	bcc.n	8006a46 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006a40:	23ce      	movs	r3, #206	; 0xce
 8006a42:	77fb      	strb	r3, [r7, #31]
 8006a44:	e010      	b.n	8006a68 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	b25a      	sxtb	r2, r3
 8006a50:	2101      	movs	r1, #1
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	fa01 f303 	lsl.w	r3, r1, r3
 8006a58:	b25b      	sxtb	r3, r3
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	b259      	sxtb	r1, r3
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	4413      	add	r3, r2
 8006a64:	b2ca      	uxtb	r2, r1
 8006a66:	701a      	strb	r2, [r3, #0]

	return status;
 8006a68:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3724      	adds	r7, #36	; 0x24
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8006a82:	2306      	movs	r3, #6
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	21b0      	movs	r1, #176	; 0xb0
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f003 f8c5 	bl	8009c18 <VL53L0X_WriteMulti>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8006a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b084      	sub	sp, #16
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8006aa8:	2306      	movs	r3, #6
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	21b0      	movs	r1, #176	; 0xb0
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f003 f8e2 	bl	8009c78 <VL53L0X_ReadMulti>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8006ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08c      	sub	sp, #48	; 0x30
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	607a      	str	r2, [r7, #4]
 8006ace:	603b      	str	r3, [r7, #0]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8006ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006adc:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8006ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ae0:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ae6:	e02b      	b.n	8006b40 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8006ae8:	f107 031c 	add.w	r3, r7, #28
 8006aec:	6a3a      	ldr	r2, [r7, #32]
 8006aee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7ff ff11 	bl	8006918 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afc:	d103      	bne.n	8006b06 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006afe:	23ce      	movs	r3, #206	; 0xce
 8006b00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006b04:	e020      	b.n	8006b48 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b0c:	4413      	add	r3, r2
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7ff ff60 	bl	80069d4 <is_aperture>
 8006b14:	4603      	mov	r3, r0
 8006b16:	461a      	mov	r2, r3
 8006b18:	7afb      	ldrb	r3, [r7, #11]
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d003      	beq.n	8006b26 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006b1e:	23ce      	movs	r3, #206	; 0xce
 8006b20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006b24:	e010      	b.n	8006b48 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8006b2a:	6a3a      	ldr	r2, [r7, #32]
 8006b2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b2e:	6838      	ldr	r0, [r7, #0]
 8006b30:	f7ff ff6a 	bl	8006a08 <enable_spad_bit>
		currentSpad++;
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	3301      	adds	r3, #1
 8006b38:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d3cf      	bcc.n	8006ae8 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8006b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b4a:	6a3a      	ldr	r2, [r7, #32]
 8006b4c:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8006b4e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d106      	bne.n	8006b64 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f7ff ff8d 	bl	8006a78 <set_ref_spad_map>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8006b64:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d121      	bne.n	8006bb0 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8006b6c:	f107 0314 	add.w	r3, r7, #20
 8006b70:	4619      	mov	r1, r3
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f7ff ff93 	bl	8006a9e <get_ref_spad_map>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8006b82:	e011      	b.n	8006ba8 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	4413      	add	r3, r2
 8006b8a:	781a      	ldrb	r2, [r3, #0]
 8006b8c:	f107 0114 	add.w	r1, r7, #20
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	440b      	add	r3, r1
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d003      	beq.n	8006ba2 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006b9a:	23ce      	movs	r3, #206	; 0xce
 8006b9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8006ba0:	e006      	b.n	8006bb0 <enable_ref_spads+0xec>
			}
			i++;
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8006ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d3e9      	bcc.n	8006b84 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8006bb0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3730      	adds	r7, #48	; 0x30
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08a      	sub	sp, #40	; 0x28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006bd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8006bdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d107      	bne.n	8006bf4 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8006be4:	22c0      	movs	r2, #192	; 0xc0
 8006be6:	2101      	movs	r1, #1
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f003 f871 	bl	8009cd0 <VL53L0X_WrByte>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8006bf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d108      	bne.n	8006c0e <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8006bfc:	f107 0308 	add.w	r3, r7, #8
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff fc48 	bl	8006498 <VL53L0X_PerformSingleRangingMeasurement>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8006c0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d107      	bne.n	8006c26 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006c16:	2201      	movs	r2, #1
 8006c18:	21ff      	movs	r1, #255	; 0xff
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f003 f858 	bl	8009cd0 <VL53L0X_WrByte>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8006c26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d107      	bne.n	8006c3e <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	21b6      	movs	r1, #182	; 0xb6
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f003 f8f8 	bl	8009e28 <VL53L0X_RdWord>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8006c3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d107      	bne.n	8006c56 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006c46:	2200      	movs	r2, #0
 8006c48:	21ff      	movs	r1, #255	; 0xff
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f003 f840 	bl	8009cd0 <VL53L0X_WrByte>
 8006c50:	4603      	mov	r3, r0
 8006c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8006c56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d112      	bne.n	8006c84 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006c5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c62:	461a      	mov	r2, r3
 8006c64:	2101      	movs	r1, #1
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f003 f832 	bl	8009cd0 <VL53L0X_WrByte>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8006c72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d104      	bne.n	8006c84 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006c80:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8006c84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3728      	adds	r7, #40	; 0x28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8006c90:	b590      	push	{r4, r7, lr}
 8006c92:	b09d      	sub	sp, #116	; 0x74
 8006c94:	af06      	add	r7, sp, #24
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8006ca2:	23b4      	movs	r3, #180	; 0xb4
 8006ca4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8006cac:	232c      	movs	r3, #44	; 0x2c
 8006cae:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8006cbc:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006cc0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8006cca:	2306      	movs	r3, #6
 8006ccc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8006cf4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cfa:	e009      	b.n	8006d10 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006d06:	2200      	movs	r2, #0
 8006d08:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d3f1      	bcc.n	8006cfc <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006d18:	2201      	movs	r2, #1
 8006d1a:	21ff      	movs	r1, #255	; 0xff
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f002 ffd7 	bl	8009cd0 <VL53L0X_WrByte>
 8006d22:	4603      	mov	r3, r0
 8006d24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006d28:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d107      	bne.n	8006d40 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8006d30:	2200      	movs	r2, #0
 8006d32:	214f      	movs	r1, #79	; 0x4f
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f002 ffcb 	bl	8009cd0 <VL53L0X_WrByte>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006d40:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d107      	bne.n	8006d58 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8006d48:	222c      	movs	r2, #44	; 0x2c
 8006d4a:	214e      	movs	r1, #78	; 0x4e
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f002 ffbf 	bl	8009cd0 <VL53L0X_WrByte>
 8006d52:	4603      	mov	r3, r0
 8006d54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006d58:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d107      	bne.n	8006d70 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006d60:	2200      	movs	r2, #0
 8006d62:	21ff      	movs	r1, #255	; 0xff
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f002 ffb3 	bl	8009cd0 <VL53L0X_WrByte>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006d70:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d109      	bne.n	8006d8c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8006d78:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	21b6      	movs	r1, #182	; 0xb6
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f002 ffa5 	bl	8009cd0 <VL53L0X_WrByte>
 8006d86:	4603      	mov	r3, r0
 8006d88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8006d8c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d107      	bne.n	8006da4 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8006d94:	2200      	movs	r2, #0
 8006d96:	2180      	movs	r1, #128	; 0x80
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f002 ff99 	bl	8009cd0 <VL53L0X_WrByte>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8006da4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10a      	bne.n	8006dc2 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8006dac:	f107 0210 	add.w	r2, r7, #16
 8006db0:	f107 0111 	add.w	r1, r7, #17
 8006db4:	2300      	movs	r3, #0
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f000 fbbb 	bl	8007532 <VL53L0X_perform_ref_calibration>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8006dc2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d121      	bne.n	8006e0e <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8006dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dd0:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8006dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd8:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8006de6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006dea:	f107 0218 	add.w	r2, r7, #24
 8006dee:	9204      	str	r2, [sp, #16]
 8006df0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006df2:	9203      	str	r2, [sp, #12]
 8006df4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006df6:	9202      	str	r2, [sp, #8]
 8006df8:	9301      	str	r3, [sp, #4]
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	4623      	mov	r3, r4
 8006e00:	4602      	mov	r2, r0
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f7ff fe5e 	bl	8006ac4 <enable_ref_spads>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006e0e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d174      	bne.n	8006f00 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8006e1a:	f107 0312 	add.w	r3, r7, #18
 8006e1e:	4619      	mov	r1, r3
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f7ff fecb 	bl	8006bbc <perform_ref_signal_measurement>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006e2c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d161      	bne.n	8006ef8 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8006e34:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006e36:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d25d      	bcs.n	8006ef8 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e40:	e009      	b.n	8006e56 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8006e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e52:	3301      	adds	r3, #1
 8006e54:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d3f1      	bcc.n	8006e42 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8006e5e:	e002      	b.n	8006e66 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8006e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e62:	3301      	adds	r3, #1
 8006e64:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8006e66:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8006e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e6c:	4413      	add	r3, r2
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff fdb0 	bl	80069d4 <is_aperture>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d103      	bne.n	8006e82 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8006e7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d3ee      	bcc.n	8006e60 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8006e82:	2301      	movs	r3, #1
 8006e84:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8006e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e88:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8006e96:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006e9a:	f107 0218 	add.w	r2, r7, #24
 8006e9e:	9204      	str	r2, [sp, #16]
 8006ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ea2:	9203      	str	r2, [sp, #12]
 8006ea4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ea6:	9202      	str	r2, [sp, #8]
 8006ea8:	9301      	str	r3, [sp, #4]
 8006eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	4623      	mov	r3, r4
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f7ff fe06 	bl	8006ac4 <enable_ref_spads>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006ebe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d11b      	bne.n	8006efe <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8006eca:	f107 0312 	add.w	r3, r7, #18
 8006ece:	4619      	mov	r1, r3
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f7ff fe73 	bl	8006bbc <perform_ref_signal_measurement>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8006edc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10c      	bne.n	8006efe <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8006ee4:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8006ee6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d208      	bcs.n	8006efe <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8006eec:	2301      	movs	r3, #1
 8006eee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8006ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8006ef6:	e002      	b.n	8006efe <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006efc:	e000      	b.n	8006f00 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8006efe:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006f00:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f040 80af 	bne.w	8007068 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8006f0a:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8006f0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	f240 80aa 	bls.w	8007068 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8006f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f16:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8006f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1c:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8006f24:	f107 031c 	add.w	r3, r7, #28
 8006f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f003 f82a 	bl	8009f84 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006f30:	8a7b      	ldrh	r3, [r7, #18]
 8006f32:	461a      	mov	r2, r3
 8006f34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	bfb8      	it	lt
 8006f3c:	425b      	neglt	r3, r3
 8006f3e:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8006f40:	2300      	movs	r3, #0
 8006f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8006f46:	e086      	b.n	8007056 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8006f4e:	f107 0314 	add.w	r3, r7, #20
 8006f52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f56:	f7ff fcdf 	bl	8006918 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f60:	d103      	bne.n	8006f6a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006f62:	23ce      	movs	r3, #206	; 0xce
 8006f64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8006f68:	e07e      	b.n	8007068 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006f6a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	4413      	add	r3, r2
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff fd2e 	bl	80069d4 <is_aperture>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d003      	beq.n	8006f8a <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8006f82:	2301      	movs	r3, #1
 8006f84:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8006f88:	e06e      	b.n	8007068 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8006f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8006f9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7ff fd32 	bl	8006a08 <enable_spad_bit>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006faa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10c      	bne.n	8006fcc <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8006fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f7ff fd59 	bl	8006a78 <set_ref_spad_map>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8006fcc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d146      	bne.n	8007062 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8006fd4:	f107 0312 	add.w	r3, r7, #18
 8006fd8:	4619      	mov	r1, r3
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f7ff fdee 	bl	8006bbc <perform_ref_signal_measurement>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8006fe6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d13b      	bne.n	8007066 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006fee:	8a7b      	ldrh	r3, [r7, #18]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	bfb8      	it	lt
 8006ffa:	425b      	neglt	r3, r3
 8006ffc:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8006ffe:	8a7b      	ldrh	r3, [r7, #18]
 8007000:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007002:	429a      	cmp	r2, r3
 8007004:	d21c      	bcs.n	8007040 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8007006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800700a:	429a      	cmp	r2, r3
 800700c:	d914      	bls.n	8007038 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800700e:	f107 031c 	add.w	r3, r7, #28
 8007012:	4619      	mov	r1, r3
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f7ff fd2f 	bl	8006a78 <set_ref_spad_map>
 800701a:	4603      	mov	r3, r0
 800701c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8007026:	f107 011c 	add.w	r1, r7, #28
 800702a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800702c:	4618      	mov	r0, r3
 800702e:	f002 ffa9 	bl	8009f84 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8007032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007034:	3b01      	subs	r3, #1
 8007036:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8007038:	2301      	movs	r3, #1
 800703a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800703e:	e00a      	b.n	8007056 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800704a:	f107 031c 	add.w	r3, r7, #28
 800704e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007050:	4618      	mov	r0, r3
 8007052:	f002 ff97 	bl	8009f84 <memcpy>
		while (!complete) {
 8007056:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800705a:	2b00      	cmp	r3, #0
 800705c:	f43f af74 	beq.w	8006f48 <VL53L0X_perform_ref_spad_management+0x2b8>
 8007060:	e002      	b.n	8007068 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007062:	bf00      	nop
 8007064:	e000      	b.n	8007068 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007066:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007068:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800706c:	2b00      	cmp	r3, #0
 800706e:	d115      	bne.n	800709c <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007074:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800707c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	b2da      	uxtb	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	781a      	ldrb	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800709c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	375c      	adds	r7, #92	; 0x5c
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd90      	pop	{r4, r7, pc}

080070a8 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80070a8:	b590      	push	{r4, r7, lr}
 80070aa:	b093      	sub	sp, #76	; 0x4c
 80070ac:	af06      	add	r7, sp, #24
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	4613      	mov	r3, r2
 80070b4:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070b6:	2300      	movs	r3, #0
 80070b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80070bc:	2300      	movs	r3, #0
 80070be:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 80070c0:	23b4      	movs	r3, #180	; 0xb4
 80070c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 80070c6:	2306      	movs	r3, #6
 80070c8:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80070ca:	232c      	movs	r3, #44	; 0x2c
 80070cc:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80070ce:	2201      	movs	r2, #1
 80070d0:	21ff      	movs	r1, #255	; 0xff
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f002 fdfc 	bl	8009cd0 <VL53L0X_WrByte>
 80070d8:	4603      	mov	r3, r0
 80070da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80070de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d107      	bne.n	80070f6 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 80070e6:	2200      	movs	r2, #0
 80070e8:	214f      	movs	r1, #79	; 0x4f
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f002 fdf0 	bl	8009cd0 <VL53L0X_WrByte>
 80070f0:	4603      	mov	r3, r0
 80070f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80070f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d107      	bne.n	800710e <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 80070fe:	222c      	movs	r2, #44	; 0x2c
 8007100:	214e      	movs	r1, #78	; 0x4e
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f002 fde4 	bl	8009cd0 <VL53L0X_WrByte>
 8007108:	4603      	mov	r3, r0
 800710a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800710e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007112:	2b00      	cmp	r3, #0
 8007114:	d107      	bne.n	8007126 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007116:	2200      	movs	r2, #0
 8007118:	21ff      	movs	r1, #255	; 0xff
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f002 fdd8 	bl	8009cd0 <VL53L0X_WrByte>
 8007120:	4603      	mov	r3, r0
 8007122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007126:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800712a:	2b00      	cmp	r3, #0
 800712c:	d109      	bne.n	8007142 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800712e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007132:	461a      	mov	r2, r3
 8007134:	21b6      	movs	r1, #182	; 0xb6
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f002 fdca 	bl	8009cd0 <VL53L0X_WrByte>
 800713c:	4603      	mov	r3, r0
 800713e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8007142:	2300      	movs	r3, #0
 8007144:	627b      	str	r3, [r7, #36]	; 0x24
 8007146:	e009      	b.n	800715c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	4413      	add	r3, r2
 800714e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007152:	2200      	movs	r2, #0
 8007154:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007158:	3301      	adds	r3, #1
 800715a:	627b      	str	r3, [r7, #36]	; 0x24
 800715c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	429a      	cmp	r2, r3
 8007162:	d3f1      	bcc.n	8007148 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8007164:	79fb      	ldrb	r3, [r7, #7]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d011      	beq.n	800718e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800716a:	e002      	b.n	8007172 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	3301      	adds	r3, #1
 8007170:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007172:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007178:	4413      	add	r3, r2
 800717a:	4618      	mov	r0, r3
 800717c:	f7ff fc2a 	bl	80069d4 <is_aperture>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d103      	bne.n	800718e <VL53L0X_set_reference_spads+0xe6>
 8007186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	429a      	cmp	r2, r3
 800718c:	d3ee      	bcc.n	800716c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800719a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800719e:	79f9      	ldrb	r1, [r7, #7]
 80071a0:	f107 0214 	add.w	r2, r7, #20
 80071a4:	9204      	str	r2, [sp, #16]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	9203      	str	r2, [sp, #12]
 80071aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071ac:	9202      	str	r2, [sp, #8]
 80071ae:	9301      	str	r3, [sp, #4]
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	4623      	mov	r3, r4
 80071b6:	4602      	mov	r2, r0
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f7ff fc83 	bl	8006ac4 <enable_ref_spads>
 80071be:	4603      	mov	r3, r0
 80071c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80071c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10c      	bne.n	80071e6 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	79fa      	ldrb	r2, [r7, #7]
 80071e2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80071e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3734      	adds	r7, #52	; 0x34
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd90      	pop	{r4, r7, pc}

080071f2 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b084      	sub	sp, #16
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	460b      	mov	r3, r1
 80071fc:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071fe:	2300      	movs	r3, #0
 8007200:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10a      	bne.n	8007220 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800720a:	78fb      	ldrb	r3, [r7, #3]
 800720c:	f043 0301 	orr.w	r3, r3, #1
 8007210:	b2db      	uxtb	r3, r3
 8007212:	461a      	mov	r2, r3
 8007214:	2100      	movs	r1, #0
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f002 fd5a 	bl	8009cd0 <VL53L0X_WrByte>
 800721c:	4603      	mov	r3, r0
 800721e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8007220:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d104      	bne.n	8007232 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f9bf 	bl	80075ac <VL53L0X_measurement_poll_for_completion>
 800722e:	4603      	mov	r3, r0
 8007230:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d105      	bne.n	8007246 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800723a:	2100      	movs	r1, #0
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff fab5 	bl	80067ac <VL53L0X_ClearInterruptMask>
 8007242:	4603      	mov	r3, r0
 8007244:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d106      	bne.n	800725c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800724e:	2200      	movs	r2, #0
 8007250:	2100      	movs	r1, #0
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f002 fd3c 	bl	8009cd0 <VL53L0X_WrByte>
 8007258:	4603      	mov	r3, r0
 800725a:	73fb      	strb	r3, [r7, #15]

	return Status;
 800725c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	4608      	mov	r0, r1
 8007272:	4611      	mov	r1, r2
 8007274:	461a      	mov	r2, r3
 8007276:	4603      	mov	r3, r0
 8007278:	70fb      	strb	r3, [r7, #3]
 800727a:	460b      	mov	r3, r1
 800727c:	70bb      	strb	r3, [r7, #2]
 800727e:	4613      	mov	r3, r2
 8007280:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007282:	2300      	movs	r3, #0
 8007284:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800728a:	2201      	movs	r2, #1
 800728c:	21ff      	movs	r1, #255	; 0xff
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f002 fd1e 	bl	8009cd0 <VL53L0X_WrByte>
 8007294:	4603      	mov	r3, r0
 8007296:	461a      	mov	r2, r3
 8007298:	7bfb      	ldrb	r3, [r7, #15]
 800729a:	4313      	orrs	r3, r2
 800729c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800729e:	2200      	movs	r2, #0
 80072a0:	2100      	movs	r1, #0
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f002 fd14 	bl	8009cd0 <VL53L0X_WrByte>
 80072a8:	4603      	mov	r3, r0
 80072aa:	461a      	mov	r2, r3
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80072b2:	2200      	movs	r2, #0
 80072b4:	21ff      	movs	r1, #255	; 0xff
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f002 fd0a 	bl	8009cd0 <VL53L0X_WrByte>
 80072bc:	4603      	mov	r3, r0
 80072be:	461a      	mov	r2, r3
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80072c6:	78fb      	ldrb	r3, [r7, #3]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d01e      	beq.n	800730a <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80072cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d009      	beq.n	80072e8 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	21cb      	movs	r1, #203	; 0xcb
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f002 fd7b 	bl	8009dd4 <VL53L0X_RdByte>
 80072de:	4603      	mov	r3, r0
 80072e0:	461a      	mov	r2, r3
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80072e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d02a      	beq.n	8007346 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80072f0:	f107 030e 	add.w	r3, r7, #14
 80072f4:	461a      	mov	r2, r3
 80072f6:	21ee      	movs	r1, #238	; 0xee
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f002 fd6b 	bl	8009dd4 <VL53L0X_RdByte>
 80072fe:	4603      	mov	r3, r0
 8007300:	461a      	mov	r2, r3
 8007302:	7bfb      	ldrb	r3, [r7, #15]
 8007304:	4313      	orrs	r3, r2
 8007306:	73fb      	strb	r3, [r7, #15]
 8007308:	e01d      	b.n	8007346 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800730a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8007312:	78bb      	ldrb	r3, [r7, #2]
 8007314:	461a      	mov	r2, r3
 8007316:	21cb      	movs	r1, #203	; 0xcb
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f002 fcd9 	bl	8009cd0 <VL53L0X_WrByte>
 800731e:	4603      	mov	r3, r0
 8007320:	461a      	mov	r2, r3
 8007322:	7bfb      	ldrb	r3, [r7, #15]
 8007324:	4313      	orrs	r3, r2
 8007326:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007328:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00a      	beq.n	8007346 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8007330:	787b      	ldrb	r3, [r7, #1]
 8007332:	2280      	movs	r2, #128	; 0x80
 8007334:	21ee      	movs	r1, #238	; 0xee
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f002 fd18 	bl	8009d6c <VL53L0X_UpdateByte>
 800733c:	4603      	mov	r3, r0
 800733e:	461a      	mov	r2, r3
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	4313      	orrs	r3, r2
 8007344:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007346:	2201      	movs	r2, #1
 8007348:	21ff      	movs	r1, #255	; 0xff
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f002 fcc0 	bl	8009cd0 <VL53L0X_WrByte>
 8007350:	4603      	mov	r3, r0
 8007352:	461a      	mov	r2, r3
 8007354:	7bfb      	ldrb	r3, [r7, #15]
 8007356:	4313      	orrs	r3, r2
 8007358:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800735a:	2201      	movs	r2, #1
 800735c:	2100      	movs	r1, #0
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f002 fcb6 	bl	8009cd0 <VL53L0X_WrByte>
 8007364:	4603      	mov	r3, r0
 8007366:	461a      	mov	r2, r3
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	4313      	orrs	r3, r2
 800736c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800736e:	2200      	movs	r2, #0
 8007370:	21ff      	movs	r1, #255	; 0xff
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f002 fcac 	bl	8009cd0 <VL53L0X_WrByte>
 8007378:	4603      	mov	r3, r0
 800737a:	461a      	mov	r2, r3
 800737c:	7bfb      	ldrb	r3, [r7, #15]
 800737e:	4313      	orrs	r3, r2
 8007380:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8007382:	7bbb      	ldrb	r3, [r7, #14]
 8007384:	f023 0310 	bic.w	r3, r3, #16
 8007388:	b2da      	uxtb	r2, r3
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	701a      	strb	r2, [r3, #0]

	return Status;
 800738e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b08a      	sub	sp, #40	; 0x28
 800739e:	af04      	add	r7, sp, #16
 80073a0:	60f8      	str	r0, [r7, #12]
 80073a2:	60b9      	str	r1, [r7, #8]
 80073a4:	4611      	mov	r1, r2
 80073a6:	461a      	mov	r2, r3
 80073a8:	460b      	mov	r3, r1
 80073aa:	71fb      	strb	r3, [r7, #7]
 80073ac:	4613      	mov	r3, r2
 80073ae:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073b0:	2300      	movs	r3, #0
 80073b2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80073b4:	2300      	movs	r3, #0
 80073b6:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80073b8:	2300      	movs	r3, #0
 80073ba:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80073bc:	2300      	movs	r3, #0
 80073be:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80073c0:	2300      	movs	r3, #0
 80073c2:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80073c4:	79bb      	ldrb	r3, [r7, #6]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80073d0:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80073d2:	2201      	movs	r2, #1
 80073d4:	2101      	movs	r1, #1
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f002 fc7a 	bl	8009cd0 <VL53L0X_WrByte>
 80073dc:	4603      	mov	r3, r0
 80073de:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80073e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d105      	bne.n	80073f4 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80073e8:	2140      	movs	r1, #64	; 0x40
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f7ff ff01 	bl	80071f2 <VL53L0X_perform_single_ref_calibration>
 80073f0:	4603      	mov	r3, r0
 80073f2:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80073f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d115      	bne.n	8007428 <VL53L0X_perform_vhv_calibration+0x8e>
 80073fc:	79fb      	ldrb	r3, [r7, #7]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d112      	bne.n	8007428 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007402:	7d39      	ldrb	r1, [r7, #20]
 8007404:	7d7a      	ldrb	r2, [r7, #21]
 8007406:	2300      	movs	r3, #0
 8007408:	9303      	str	r3, [sp, #12]
 800740a:	2301      	movs	r3, #1
 800740c:	9302      	str	r3, [sp, #8]
 800740e:	f107 0313 	add.w	r3, r7, #19
 8007412:	9301      	str	r3, [sp, #4]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	460b      	mov	r3, r1
 800741a:	2101      	movs	r1, #1
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f7ff ff23 	bl	8007268 <VL53L0X_ref_calibration_io>
 8007422:	4603      	mov	r3, r0
 8007424:	75fb      	strb	r3, [r7, #23]
 8007426:	e002      	b.n	800742e <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2200      	movs	r2, #0
 800742c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800742e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d112      	bne.n	800745c <VL53L0X_perform_vhv_calibration+0xc2>
 8007436:	79bb      	ldrb	r3, [r7, #6]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00f      	beq.n	800745c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800743c:	7dbb      	ldrb	r3, [r7, #22]
 800743e:	461a      	mov	r2, r3
 8007440:	2101      	movs	r1, #1
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f002 fc44 	bl	8009cd0 <VL53L0X_WrByte>
 8007448:	4603      	mov	r3, r0
 800744a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800744c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d103      	bne.n	800745c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	7dba      	ldrb	r2, [r7, #22]
 8007458:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800745c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3718      	adds	r7, #24
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b08a      	sub	sp, #40	; 0x28
 800746c:	af04      	add	r7, sp, #16
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	4611      	mov	r1, r2
 8007474:	461a      	mov	r2, r3
 8007476:	460b      	mov	r3, r1
 8007478:	71fb      	strb	r3, [r7, #7]
 800747a:	4613      	mov	r3, r2
 800747c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800747e:	2300      	movs	r3, #0
 8007480:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007482:	2300      	movs	r3, #0
 8007484:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800748e:	79bb      	ldrb	r3, [r7, #6]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d003      	beq.n	800749c <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800749a:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800749c:	2202      	movs	r2, #2
 800749e:	2101      	movs	r1, #1
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f002 fc15 	bl	8009cd0 <VL53L0X_WrByte>
 80074a6:	4603      	mov	r3, r0
 80074a8:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80074aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d105      	bne.n	80074be <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80074b2:	2100      	movs	r1, #0
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f7ff fe9c 	bl	80071f2 <VL53L0X_perform_single_ref_calibration>
 80074ba:	4603      	mov	r3, r0
 80074bc:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80074be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d115      	bne.n	80074f2 <VL53L0X_perform_phase_calibration+0x8a>
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d112      	bne.n	80074f2 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80074cc:	7d39      	ldrb	r1, [r7, #20]
 80074ce:	7d7a      	ldrb	r2, [r7, #21]
 80074d0:	2301      	movs	r3, #1
 80074d2:	9303      	str	r3, [sp, #12]
 80074d4:	2300      	movs	r3, #0
 80074d6:	9302      	str	r3, [sp, #8]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	9301      	str	r3, [sp, #4]
 80074dc:	f107 0313 	add.w	r3, r7, #19
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	460b      	mov	r3, r1
 80074e4:	2101      	movs	r1, #1
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f7ff febe 	bl	8007268 <VL53L0X_ref_calibration_io>
 80074ec:	4603      	mov	r3, r0
 80074ee:	75fb      	strb	r3, [r7, #23]
 80074f0:	e002      	b.n	80074f8 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80074f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d112      	bne.n	8007526 <VL53L0X_perform_phase_calibration+0xbe>
 8007500:	79bb      	ldrb	r3, [r7, #6]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00f      	beq.n	8007526 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007506:	7dbb      	ldrb	r3, [r7, #22]
 8007508:	461a      	mov	r2, r3
 800750a:	2101      	movs	r1, #1
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f002 fbdf 	bl	8009cd0 <VL53L0X_WrByte>
 8007512:	4603      	mov	r3, r0
 8007514:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007516:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d103      	bne.n	8007526 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	7dba      	ldrb	r2, [r7, #22]
 8007522:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007526:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3718      	adds	r7, #24
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b086      	sub	sp, #24
 8007536:	af00      	add	r7, sp, #0
 8007538:	60f8      	str	r0, [r7, #12]
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	607a      	str	r2, [r7, #4]
 800753e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007540:	2300      	movs	r3, #0
 8007542:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007544:	2300      	movs	r3, #0
 8007546:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800754e:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8007550:	78fa      	ldrb	r2, [r7, #3]
 8007552:	2300      	movs	r3, #0
 8007554:	68b9      	ldr	r1, [r7, #8]
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f7ff ff1f 	bl	800739a <VL53L0X_perform_vhv_calibration>
 800755c:	4603      	mov	r3, r0
 800755e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007560:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d107      	bne.n	8007578 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8007568:	78fa      	ldrb	r2, [r7, #3]
 800756a:	2300      	movs	r3, #0
 800756c:	6879      	ldr	r1, [r7, #4]
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f7ff ff7a 	bl	8007468 <VL53L0X_perform_phase_calibration>
 8007574:	4603      	mov	r3, r0
 8007576:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8007578:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10f      	bne.n	80075a0 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007580:	7dbb      	ldrb	r3, [r7, #22]
 8007582:	461a      	mov	r2, r3
 8007584:	2101      	movs	r1, #1
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f002 fba2 	bl	8009cd0 <VL53L0X_WrByte>
 800758c:	4603      	mov	r3, r0
 800758e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007590:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d103      	bne.n	80075a0 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	7dba      	ldrb	r2, [r7, #22]
 800759c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80075a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3718      	adds	r7, #24
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075b4:	2300      	movs	r3, #0
 80075b6:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80075b8:	2300      	movs	r3, #0
 80075ba:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80075bc:	2300      	movs	r3, #0
 80075be:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80075c0:	f107 030f 	add.w	r3, r7, #15
 80075c4:	4619      	mov	r1, r3
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f7fe fdff 	bl	80061ca <VL53L0X_GetMeasurementDataReady>
 80075cc:	4603      	mov	r3, r0
 80075ce:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80075d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d110      	bne.n	80075fa <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d00f      	beq.n	80075fe <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	3301      	adds	r3, #1
 80075e2:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80075ea:	d302      	bcc.n	80075f2 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80075ec:	23f9      	movs	r3, #249	; 0xf9
 80075ee:	75fb      	strb	r3, [r7, #23]
			break;
 80075f0:	e006      	b.n	8007600 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f002 fc8c 	bl	8009f10 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80075f8:	e7e2      	b.n	80075c0 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80075fa:	bf00      	nop
 80075fc:	e000      	b.n	8007600 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80075fe:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8007600:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3718      	adds	r7, #24
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	4603      	mov	r3, r0
 8007614:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8007616:	2300      	movs	r3, #0
 8007618:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800761a:	79fb      	ldrb	r3, [r7, #7]
 800761c:	3301      	adds	r3, #1
 800761e:	b2db      	uxtb	r3, r3
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8007624:	7bfb      	ldrb	r3, [r7, #15]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8007632:	b480      	push	{r7}
 8007634:	b085      	sub	sp, #20
 8007636:	af00      	add	r7, sp, #0
 8007638:	4603      	mov	r3, r0
 800763a:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800763c:	2300      	movs	r3, #0
 800763e:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8007640:	79fb      	ldrb	r3, [r7, #7]
 8007642:	085b      	lsrs	r3, r3, #1
 8007644:	b2db      	uxtb	r3, r3
 8007646:	3b01      	subs	r3, #1
 8007648:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800764a:	7bfb      	ldrb	r3, [r7, #15]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8007660:	2300      	movs	r3, #0
 8007662:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8007664:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007668:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800766a:	e002      	b.n	8007672 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	089b      	lsrs	r3, r3, #2
 8007670:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	429a      	cmp	r2, r3
 8007678:	d8f8      	bhi.n	800766c <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800767a:	e017      	b.n	80076ac <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	4413      	add	r3, r2
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	429a      	cmp	r2, r3
 8007686:	d30b      	bcc.n	80076a0 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	4413      	add	r3, r2
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	085b      	lsrs	r3, r3, #1
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	4413      	add	r3, r2
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	e002      	b.n	80076a6 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	085b      	lsrs	r3, r3, #1
 80076a4:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	089b      	lsrs	r3, r3, #2
 80076aa:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1e4      	bne.n	800767c <VL53L0X_isqrt+0x24>
	}

	return res;
 80076b2:	68fb      	ldr	r3, [r7, #12]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076c8:	2300      	movs	r3, #0
 80076ca:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80076cc:	2200      	movs	r2, #0
 80076ce:	2183      	movs	r1, #131	; 0x83
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f002 fafd 	bl	8009cd0 <VL53L0X_WrByte>
 80076d6:	4603      	mov	r3, r0
 80076d8:	461a      	mov	r2, r3
 80076da:	7dfb      	ldrb	r3, [r7, #23]
 80076dc:	4313      	orrs	r3, r2
 80076de:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80076e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d11e      	bne.n	8007726 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80076e8:	2300      	movs	r3, #0
 80076ea:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80076ec:	f107 030f 	add.w	r3, r7, #15
 80076f0:	461a      	mov	r2, r3
 80076f2:	2183      	movs	r1, #131	; 0x83
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f002 fb6d 	bl	8009dd4 <VL53L0X_RdByte>
 80076fa:	4603      	mov	r3, r0
 80076fc:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10a      	bne.n	800771a <VL53L0X_device_read_strobe+0x5a>
 8007704:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d106      	bne.n	800771a <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	3301      	adds	r3, #1
 8007710:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007718:	d3e8      	bcc.n	80076ec <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007720:	d301      	bcc.n	8007726 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8007722:	23f9      	movs	r3, #249	; 0xf9
 8007724:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8007726:	2201      	movs	r2, #1
 8007728:	2183      	movs	r1, #131	; 0x83
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f002 fad0 	bl	8009cd0 <VL53L0X_WrByte>
 8007730:	4603      	mov	r3, r0
 8007732:	461a      	mov	r2, r3
 8007734:	7dfb      	ldrb	r3, [r7, #23]
 8007736:	4313      	orrs	r3, r2
 8007738:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800773a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800773e:	4618      	mov	r0, r3
 8007740:	3718      	adds	r7, #24
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b098      	sub	sp, #96	; 0x60
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	460b      	mov	r3, r1
 8007750:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007752:	2300      	movs	r3, #0
 8007754:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8007758:	2300      	movs	r3, #0
 800775a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8007764:	2300      	movs	r3, #0
 8007766:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8007768:	2300      	movs	r3, #0
 800776a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800776c:	2300      	movs	r3, #0
 800776e:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8007770:	2300      	movs	r3, #0
 8007772:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8007776:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800777a:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800777c:	2300      	movs	r3, #0
 800777e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8007780:	2300      	movs	r3, #0
 8007782:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8007784:	2300      	movs	r3, #0
 8007786:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800778e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8007792:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007796:	2b07      	cmp	r3, #7
 8007798:	f000 8408 	beq.w	8007fac <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800779c:	2201      	movs	r2, #1
 800779e:	2180      	movs	r1, #128	; 0x80
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f002 fa95 	bl	8009cd0 <VL53L0X_WrByte>
 80077a6:	4603      	mov	r3, r0
 80077a8:	461a      	mov	r2, r3
 80077aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077ae:	4313      	orrs	r3, r2
 80077b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80077b4:	2201      	movs	r2, #1
 80077b6:	21ff      	movs	r1, #255	; 0xff
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f002 fa89 	bl	8009cd0 <VL53L0X_WrByte>
 80077be:	4603      	mov	r3, r0
 80077c0:	461a      	mov	r2, r3
 80077c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077c6:	4313      	orrs	r3, r2
 80077c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80077cc:	2200      	movs	r2, #0
 80077ce:	2100      	movs	r1, #0
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f002 fa7d 	bl	8009cd0 <VL53L0X_WrByte>
 80077d6:	4603      	mov	r3, r0
 80077d8:	461a      	mov	r2, r3
 80077da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077de:	4313      	orrs	r3, r2
 80077e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80077e4:	2206      	movs	r2, #6
 80077e6:	21ff      	movs	r1, #255	; 0xff
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f002 fa71 	bl	8009cd0 <VL53L0X_WrByte>
 80077ee:	4603      	mov	r3, r0
 80077f0:	461a      	mov	r2, r3
 80077f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077f6:	4313      	orrs	r3, r2
 80077f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80077fc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007800:	461a      	mov	r2, r3
 8007802:	2183      	movs	r1, #131	; 0x83
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f002 fae5 	bl	8009dd4 <VL53L0X_RdByte>
 800780a:	4603      	mov	r3, r0
 800780c:	461a      	mov	r2, r3
 800780e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007812:	4313      	orrs	r3, r2
 8007814:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8007818:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800781c:	f043 0304 	orr.w	r3, r3, #4
 8007820:	b2db      	uxtb	r3, r3
 8007822:	461a      	mov	r2, r3
 8007824:	2183      	movs	r1, #131	; 0x83
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f002 fa52 	bl	8009cd0 <VL53L0X_WrByte>
 800782c:	4603      	mov	r3, r0
 800782e:	461a      	mov	r2, r3
 8007830:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007834:	4313      	orrs	r3, r2
 8007836:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800783a:	2207      	movs	r2, #7
 800783c:	21ff      	movs	r1, #255	; 0xff
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f002 fa46 	bl	8009cd0 <VL53L0X_WrByte>
 8007844:	4603      	mov	r3, r0
 8007846:	461a      	mov	r2, r3
 8007848:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800784c:	4313      	orrs	r3, r2
 800784e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8007852:	2201      	movs	r2, #1
 8007854:	2181      	movs	r1, #129	; 0x81
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f002 fa3a 	bl	8009cd0 <VL53L0X_WrByte>
 800785c:	4603      	mov	r3, r0
 800785e:	461a      	mov	r2, r3
 8007860:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007864:	4313      	orrs	r3, r2
 8007866:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f002 fb50 	bl	8009f10 <VL53L0X_PollingDelay>
 8007870:	4603      	mov	r3, r0
 8007872:	461a      	mov	r2, r3
 8007874:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007878:	4313      	orrs	r3, r2
 800787a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800787e:	2201      	movs	r2, #1
 8007880:	2180      	movs	r1, #128	; 0x80
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f002 fa24 	bl	8009cd0 <VL53L0X_WrByte>
 8007888:	4603      	mov	r3, r0
 800788a:	461a      	mov	r2, r3
 800788c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007890:	4313      	orrs	r3, r2
 8007892:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8007896:	78fb      	ldrb	r3, [r7, #3]
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	2b00      	cmp	r3, #0
 800789e:	f000 8098 	beq.w	80079d2 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80078a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80078a6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f040 8091 	bne.w	80079d2 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80078b0:	226b      	movs	r2, #107	; 0x6b
 80078b2:	2194      	movs	r1, #148	; 0x94
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f002 fa0b 	bl	8009cd0 <VL53L0X_WrByte>
 80078ba:	4603      	mov	r3, r0
 80078bc:	461a      	mov	r2, r3
 80078be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078c2:	4313      	orrs	r3, r2
 80078c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7ff fef9 	bl	80076c0 <VL53L0X_device_read_strobe>
 80078ce:	4603      	mov	r3, r0
 80078d0:	461a      	mov	r2, r3
 80078d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078d6:	4313      	orrs	r3, r2
 80078d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80078dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078e0:	461a      	mov	r2, r3
 80078e2:	2190      	movs	r1, #144	; 0x90
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f002 fad7 	bl	8009e98 <VL53L0X_RdDWord>
 80078ea:	4603      	mov	r3, r0
 80078ec:	461a      	mov	r2, r3
 80078ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078f2:	4313      	orrs	r3, r2
 80078f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80078f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fa:	0a1b      	lsrs	r3, r3, #8
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007902:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8007906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007908:	0bdb      	lsrs	r3, r3, #15
 800790a:	b2db      	uxtb	r3, r3
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8007914:	2224      	movs	r2, #36	; 0x24
 8007916:	2194      	movs	r1, #148	; 0x94
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f002 f9d9 	bl	8009cd0 <VL53L0X_WrByte>
 800791e:	4603      	mov	r3, r0
 8007920:	461a      	mov	r2, r3
 8007922:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007926:	4313      	orrs	r3, r2
 8007928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7ff fec7 	bl	80076c0 <VL53L0X_device_read_strobe>
 8007932:	4603      	mov	r3, r0
 8007934:	461a      	mov	r2, r3
 8007936:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800793a:	4313      	orrs	r3, r2
 800793c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007940:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007944:	461a      	mov	r2, r3
 8007946:	2190      	movs	r1, #144	; 0x90
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f002 faa5 	bl	8009e98 <VL53L0X_RdDWord>
 800794e:	4603      	mov	r3, r0
 8007950:	461a      	mov	r2, r3
 8007952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007956:	4313      	orrs	r3, r2
 8007958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795e:	0e1b      	lsrs	r3, r3, #24
 8007960:	b2db      	uxtb	r3, r3
 8007962:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8007964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007966:	0c1b      	lsrs	r3, r3, #16
 8007968:	b2db      	uxtb	r3, r3
 800796a:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800796c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796e:	0a1b      	lsrs	r3, r3, #8
 8007970:	b2db      	uxtb	r3, r3
 8007972:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	b2db      	uxtb	r3, r3
 8007978:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800797a:	2225      	movs	r2, #37	; 0x25
 800797c:	2194      	movs	r1, #148	; 0x94
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f002 f9a6 	bl	8009cd0 <VL53L0X_WrByte>
 8007984:	4603      	mov	r3, r0
 8007986:	461a      	mov	r2, r3
 8007988:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800798c:	4313      	orrs	r3, r2
 800798e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f7ff fe94 	bl	80076c0 <VL53L0X_device_read_strobe>
 8007998:	4603      	mov	r3, r0
 800799a:	461a      	mov	r2, r3
 800799c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079a0:	4313      	orrs	r3, r2
 80079a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80079a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80079aa:	461a      	mov	r2, r3
 80079ac:	2190      	movs	r1, #144	; 0x90
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f002 fa72 	bl	8009e98 <VL53L0X_RdDWord>
 80079b4:	4603      	mov	r3, r0
 80079b6:	461a      	mov	r2, r3
 80079b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079bc:	4313      	orrs	r3, r2
 80079be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	0e1b      	lsrs	r3, r3, #24
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80079ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079cc:	0c1b      	lsrs	r3, r3, #16
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80079d2:	78fb      	ldrb	r3, [r7, #3]
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 8189 	beq.w	8007cf0 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80079de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80079e2:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f040 8182 	bne.w	8007cf0 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80079ec:	2202      	movs	r2, #2
 80079ee:	2194      	movs	r1, #148	; 0x94
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f002 f96d 	bl	8009cd0 <VL53L0X_WrByte>
 80079f6:	4603      	mov	r3, r0
 80079f8:	461a      	mov	r2, r3
 80079fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079fe:	4313      	orrs	r3, r2
 8007a00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff fe5b 	bl	80076c0 <VL53L0X_device_read_strobe>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a12:	4313      	orrs	r3, r2
 8007a14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8007a18:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	2190      	movs	r1, #144	; 0x90
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f002 f9d7 	bl	8009dd4 <VL53L0X_RdByte>
 8007a26:	4603      	mov	r3, r0
 8007a28:	461a      	mov	r2, r3
 8007a2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007a34:	227b      	movs	r2, #123	; 0x7b
 8007a36:	2194      	movs	r1, #148	; 0x94
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f002 f949 	bl	8009cd0 <VL53L0X_WrByte>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	461a      	mov	r2, r3
 8007a42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a46:	4313      	orrs	r3, r2
 8007a48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7ff fe37 	bl	80076c0 <VL53L0X_device_read_strobe>
 8007a52:	4603      	mov	r3, r0
 8007a54:	461a      	mov	r2, r3
 8007a56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8007a60:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8007a64:	461a      	mov	r2, r3
 8007a66:	2190      	movs	r1, #144	; 0x90
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f002 f9b3 	bl	8009dd4 <VL53L0X_RdByte>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	461a      	mov	r2, r3
 8007a72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a76:	4313      	orrs	r3, r2
 8007a78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8007a7c:	2277      	movs	r2, #119	; 0x77
 8007a7e:	2194      	movs	r1, #148	; 0x94
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f002 f925 	bl	8009cd0 <VL53L0X_WrByte>
 8007a86:	4603      	mov	r3, r0
 8007a88:	461a      	mov	r2, r3
 8007a8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f7ff fe13 	bl	80076c0 <VL53L0X_device_read_strobe>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007aa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007aac:	461a      	mov	r2, r3
 8007aae:	2190      	movs	r1, #144	; 0x90
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f002 f9f1 	bl	8009e98 <VL53L0X_RdDWord>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	461a      	mov	r2, r3
 8007aba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac6:	0e5b      	lsrs	r3, r3, #25
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad4:	0c9b      	lsrs	r3, r3, #18
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae2:	0adb      	lsrs	r3, r3, #11
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	091b      	lsrs	r3, r3, #4
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8007afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	00db      	lsls	r3, r3, #3
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8007b0e:	2278      	movs	r2, #120	; 0x78
 8007b10:	2194      	movs	r1, #148	; 0x94
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f002 f8dc 	bl	8009cd0 <VL53L0X_WrByte>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b20:	4313      	orrs	r3, r2
 8007b22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7ff fdca 	bl	80076c0 <VL53L0X_device_read_strobe>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	461a      	mov	r2, r3
 8007b30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b34:	4313      	orrs	r3, r2
 8007b36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007b3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007b3e:	461a      	mov	r2, r3
 8007b40:	2190      	movs	r1, #144	; 0x90
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f002 f9a8 	bl	8009e98 <VL53L0X_RdDWord>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b50:	4313      	orrs	r3, r2
 8007b52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	0f5b      	lsrs	r3, r3, #29
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b60:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8007b62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b66:	4413      	add	r3, r2
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	0d9b      	lsrs	r3, r3, #22
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	0bdb      	lsrs	r3, r3, #15
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8007b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8a:	0a1b      	lsrs	r3, r3, #8
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8007b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b98:	085b      	lsrs	r3, r3, #1
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8007ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	019b      	lsls	r3, r3, #6
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8007bb6:	2279      	movs	r2, #121	; 0x79
 8007bb8:	2194      	movs	r1, #148	; 0x94
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f002 f888 	bl	8009cd0 <VL53L0X_WrByte>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7ff fd76 	bl	80076c0 <VL53L0X_device_read_strobe>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007be2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007be6:	461a      	mov	r2, r3
 8007be8:	2190      	movs	r1, #144	; 0x90
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f002 f954 	bl	8009e98 <VL53L0X_RdDWord>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8007bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c00:	0e9b      	lsrs	r3, r3, #26
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c08:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8007c0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c0e:	4413      	add	r3, r2
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8007c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c16:	0cdb      	lsrs	r3, r3, #19
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8007c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c24:	0b1b      	lsrs	r3, r3, #12
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8007c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c32:	095b      	lsrs	r3, r3, #5
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8007c50:	227a      	movs	r2, #122	; 0x7a
 8007c52:	2194      	movs	r1, #148	; 0x94
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f002 f83b 	bl	8009cd0 <VL53L0X_WrByte>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c62:	4313      	orrs	r3, r2
 8007c64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7ff fd29 	bl	80076c0 <VL53L0X_device_read_strobe>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	461a      	mov	r2, r3
 8007c72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c76:	4313      	orrs	r3, r2
 8007c78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007c7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007c80:	461a      	mov	r2, r3
 8007c82:	2190      	movs	r1, #144	; 0x90
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f002 f907 	bl	8009e98 <VL53L0X_RdDWord>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c92:	4313      	orrs	r3, r2
 8007c94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8007c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9a:	0f9b      	lsrs	r3, r3, #30
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ca2:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8007ca4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ca8:	4413      	add	r3, r2
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8007cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb0:	0ddb      	lsrs	r3, r3, #23
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbe:	0c1b      	lsrs	r3, r3, #16
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8007cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ccc:	0a5b      	lsrs	r3, r3, #9
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	089b      	lsrs	r3, r3, #2
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8007cea:	2300      	movs	r3, #0
 8007cec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	f003 0304 	and.w	r3, r3, #4
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 80f1 	beq.w	8007ede <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007cfc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007d00:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f040 80ea 	bne.w	8007ede <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007d0a:	227b      	movs	r2, #123	; 0x7b
 8007d0c:	2194      	movs	r1, #148	; 0x94
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f001 ffde 	bl	8009cd0 <VL53L0X_WrByte>
 8007d14:	4603      	mov	r3, r0
 8007d16:	461a      	mov	r2, r3
 8007d18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7ff fccc 	bl	80076c0 <VL53L0X_device_read_strobe>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d30:	4313      	orrs	r3, r2
 8007d32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8007d36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	2190      	movs	r1, #144	; 0x90
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f002 f8aa 	bl	8009e98 <VL53L0X_RdDWord>
 8007d44:	4603      	mov	r3, r0
 8007d46:	461a      	mov	r2, r3
 8007d48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8007d52:	227c      	movs	r2, #124	; 0x7c
 8007d54:	2194      	movs	r1, #148	; 0x94
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f001 ffba 	bl	8009cd0 <VL53L0X_WrByte>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	461a      	mov	r2, r3
 8007d60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d64:	4313      	orrs	r3, r2
 8007d66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7ff fca8 	bl	80076c0 <VL53L0X_device_read_strobe>
 8007d70:	4603      	mov	r3, r0
 8007d72:	461a      	mov	r2, r3
 8007d74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8007d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d82:	461a      	mov	r2, r3
 8007d84:	2190      	movs	r1, #144	; 0x90
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f002 f886 	bl	8009e98 <VL53L0X_RdDWord>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d94:	4313      	orrs	r3, r2
 8007d96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8007d9a:	2273      	movs	r2, #115	; 0x73
 8007d9c:	2194      	movs	r1, #148	; 0x94
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f001 ff96 	bl	8009cd0 <VL53L0X_WrByte>
 8007da4:	4603      	mov	r3, r0
 8007da6:	461a      	mov	r2, r3
 8007da8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007dac:	4313      	orrs	r3, r2
 8007dae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f7ff fc84 	bl	80076c0 <VL53L0X_device_read_strobe>
 8007db8:	4603      	mov	r3, r0
 8007dba:	461a      	mov	r2, r3
 8007dbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007dc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007dca:	461a      	mov	r2, r3
 8007dcc:	2190      	movs	r1, #144	; 0x90
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f002 f862 	bl	8009e98 <VL53L0X_RdDWord>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8007de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de4:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8007dea:	2274      	movs	r2, #116	; 0x74
 8007dec:	2194      	movs	r1, #148	; 0x94
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f001 ff6e 	bl	8009cd0 <VL53L0X_WrByte>
 8007df4:	4603      	mov	r3, r0
 8007df6:	461a      	mov	r2, r3
 8007df8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7ff fc5c 	bl	80076c0 <VL53L0X_device_read_strobe>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e10:	4313      	orrs	r3, r2
 8007e12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007e16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	2190      	movs	r1, #144	; 0x90
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f002 f83a 	bl	8009e98 <VL53L0X_RdDWord>
 8007e24:	4603      	mov	r3, r0
 8007e26:	461a      	mov	r2, r3
 8007e28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8007e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e34:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8007e36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8007e3c:	2275      	movs	r2, #117	; 0x75
 8007e3e:	2194      	movs	r1, #148	; 0x94
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f001 ff45 	bl	8009cd0 <VL53L0X_WrByte>
 8007e46:	4603      	mov	r3, r0
 8007e48:	461a      	mov	r2, r3
 8007e4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f7ff fc33 	bl	80076c0 <VL53L0X_device_read_strobe>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e62:	4313      	orrs	r3, r2
 8007e64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007e68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	2190      	movs	r1, #144	; 0x90
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f002 f811 	bl	8009e98 <VL53L0X_RdDWord>
 8007e76:	4603      	mov	r3, r0
 8007e78:	461a      	mov	r2, r3
 8007e7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8007e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e86:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8007e8c:	2276      	movs	r2, #118	; 0x76
 8007e8e:	2194      	movs	r1, #148	; 0x94
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f001 ff1d 	bl	8009cd0 <VL53L0X_WrByte>
 8007e96:	4603      	mov	r3, r0
 8007e98:	461a      	mov	r2, r3
 8007e9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff fc0b 	bl	80076c0 <VL53L0X_device_read_strobe>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	461a      	mov	r2, r3
 8007eae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007eb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	2190      	movs	r1, #144	; 0x90
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f001 ffe9 	bl	8009e98 <VL53L0X_RdDWord>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	461a      	mov	r2, r3
 8007eca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed6:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8007ed8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007eda:	4313      	orrs	r3, r2
 8007edc:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2181      	movs	r1, #129	; 0x81
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f001 fef4 	bl	8009cd0 <VL53L0X_WrByte>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	461a      	mov	r2, r3
 8007eec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007ef6:	2206      	movs	r2, #6
 8007ef8:	21ff      	movs	r1, #255	; 0xff
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f001 fee8 	bl	8009cd0 <VL53L0X_WrByte>
 8007f00:	4603      	mov	r3, r0
 8007f02:	461a      	mov	r2, r3
 8007f04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007f0e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007f12:	461a      	mov	r2, r3
 8007f14:	2183      	movs	r1, #131	; 0x83
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f001 ff5c 	bl	8009dd4 <VL53L0X_RdByte>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	461a      	mov	r2, r3
 8007f20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f24:	4313      	orrs	r3, r2
 8007f26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8007f2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f2e:	f023 0304 	bic.w	r3, r3, #4
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	461a      	mov	r2, r3
 8007f36:	2183      	movs	r1, #131	; 0x83
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f001 fec9 	bl	8009cd0 <VL53L0X_WrByte>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	461a      	mov	r2, r3
 8007f42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f46:	4313      	orrs	r3, r2
 8007f48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	21ff      	movs	r1, #255	; 0xff
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 febd 	bl	8009cd0 <VL53L0X_WrByte>
 8007f56:	4603      	mov	r3, r0
 8007f58:	461a      	mov	r2, r3
 8007f5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007f64:	2201      	movs	r2, #1
 8007f66:	2100      	movs	r1, #0
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f001 feb1 	bl	8009cd0 <VL53L0X_WrByte>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	461a      	mov	r2, r3
 8007f72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f76:	4313      	orrs	r3, r2
 8007f78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	21ff      	movs	r1, #255	; 0xff
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f001 fea5 	bl	8009cd0 <VL53L0X_WrByte>
 8007f86:	4603      	mov	r3, r0
 8007f88:	461a      	mov	r2, r3
 8007f8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007f94:	2200      	movs	r2, #0
 8007f96:	2180      	movs	r1, #128	; 0x80
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f001 fe99 	bl	8009cd0 <VL53L0X_WrByte>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007fac:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f040 808f 	bne.w	80080d4 <VL53L0X_get_info_from_device+0x98e>
 8007fb6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007fba:	2b07      	cmp	r3, #7
 8007fbc:	f000 808a 	beq.w	80080d4 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d024      	beq.n	8008014 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8007fca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007fce:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d11e      	bne.n	8008014 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8007fdc:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8007fe6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007fea:	2300      	movs	r3, #0
 8007fec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fee:	e00e      	b.n	800800e <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8007ff0:	f107 0208 	add.w	r2, r7, #8
 8007ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ff6:	4413      	add	r3, r2
 8007ff8:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008004:	460a      	mov	r2, r1
 8008006:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800800a:	3301      	adds	r3, #1
 800800c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800800e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008010:	2b05      	cmp	r3, #5
 8008012:	dded      	ble.n	8007ff0 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8008014:	78fb      	ldrb	r3, [r7, #3]
 8008016:	f003 0302 	and.w	r3, r3, #2
 800801a:	2b00      	cmp	r3, #0
 800801c:	d018      	beq.n	8008050 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800801e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008022:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008026:	2b00      	cmp	r3, #0
 8008028:	d112      	bne.n	8008050 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800802a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008034:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	33f3      	adds	r3, #243	; 0xf3
 8008042:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8008044:	f107 0310 	add.w	r3, r7, #16
 8008048:	4619      	mov	r1, r3
 800804a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800804c:	f002 f899 	bl	800a182 <strcpy>

		}

		if (((option & 4) == 4) &&
 8008050:	78fb      	ldrb	r3, [r7, #3]
 8008052:	f003 0304 	and.w	r3, r3, #4
 8008056:	2b00      	cmp	r3, #0
 8008058:	d030      	beq.n	80080bc <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800805a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800805e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008062:	2b00      	cmp	r3, #0
 8008064:	d12a      	bne.n	80080bc <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800806e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8008076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008078:	025b      	lsls	r3, r3, #9
 800807a:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008080:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800808a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800808c:	2b00      	cmp	r3, #0
 800808e:	d011      	beq.n	80080b4 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8008090:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8008098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800809a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800809e:	fb02 f303 	mul.w	r3, r2, r3
 80080a2:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 80080a4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 80080a8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80080ac:	425b      	negs	r3, r3
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 80080b4:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80080bc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80080c0:	78fb      	ldrb	r3, [r7, #3]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80080ca:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80080d4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3760      	adds	r7, #96	; 0x60
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 80080e0:	b490      	push	{r4, r7}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	460b      	mov	r3, r1
 80080ea:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 80080ec:	f240 6377 	movw	r3, #1655	; 0x677
 80080f0:	f04f 0400 	mov.w	r4, #0
 80080f4:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 80080f8:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80080fc:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 80080fe:	78fb      	ldrb	r3, [r7, #3]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	fb02 f303 	mul.w	r3, r2, r3
 800810c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800810e:	68bb      	ldr	r3, [r7, #8]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bc90      	pop	{r4, r7}
 8008118:	4770      	bx	lr

0800811a <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800811a:	b480      	push	{r7}
 800811c:	b087      	sub	sp, #28
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8008122:	2300      	movs	r3, #0
 8008124:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8008126:	2300      	movs	r3, #0
 8008128:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800812a:	2300      	movs	r3, #0
 800812c:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d017      	beq.n	8008164 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	3b01      	subs	r3, #1
 8008138:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800813a:	e005      	b.n	8008148 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	085b      	lsrs	r3, r3, #1
 8008140:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8008142:	89fb      	ldrh	r3, [r7, #14]
 8008144:	3301      	adds	r3, #1
 8008146:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1f4      	bne.n	800813c <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8008152:	89fb      	ldrh	r3, [r7, #14]
 8008154:	021b      	lsls	r3, r3, #8
 8008156:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	b29b      	uxth	r3, r3
 800815c:	b2db      	uxtb	r3, r3
 800815e:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8008160:	4413      	add	r3, r2
 8008162:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8008164:	8afb      	ldrh	r3, [r7, #22]

}
 8008166:	4618      	mov	r0, r3
 8008168:	371c      	adds	r7, #28
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8008172:	b480      	push	{r7}
 8008174:	b085      	sub	sp, #20
 8008176:	af00      	add	r7, sp, #0
 8008178:	4603      	mov	r3, r0
 800817a:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800817c:	2300      	movs	r3, #0
 800817e:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008180:	88fb      	ldrh	r3, [r7, #6]
 8008182:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8008184:	88fa      	ldrh	r2, [r7, #6]
 8008186:	0a12      	lsrs	r2, r2, #8
 8008188:	b292      	uxth	r2, r2
 800818a:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800818c:	3301      	adds	r3, #1
 800818e:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8008190:	68fb      	ldr	r3, [r7, #12]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
	...

080081a0 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b088      	sub	sp, #32
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	4613      	mov	r3, r2
 80081ac:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 80081ae:	2300      	movs	r3, #0
 80081b0:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80081b2:	79fb      	ldrb	r3, [r7, #7]
 80081b4:	4619      	mov	r1, r3
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f7ff ff92 	bl	80080e0 <VL53L0X_calc_macro_period_ps>
 80081bc:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80081c4:	4a0a      	ldr	r2, [pc, #40]	; (80081f0 <VL53L0X_calc_timeout_mclks+0x50>)
 80081c6:	fba2 2303 	umull	r2, r3, r2, r3
 80081ca:	099b      	lsrs	r3, r3, #6
 80081cc:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80081d4:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	085b      	lsrs	r3, r3, #1
 80081dc:	441a      	add	r2, r3
	timeout_period_mclks =
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e4:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 80081e6:	69fb      	ldr	r3, [r7, #28]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3720      	adds	r7, #32
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	10624dd3 	.word	0x10624dd3

080081f4 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	807b      	strh	r3, [r7, #2]
 8008200:	4613      	mov	r3, r2
 8008202:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008208:	787b      	ldrb	r3, [r7, #1]
 800820a:	4619      	mov	r1, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f7ff ff67 	bl	80080e0 <VL53L0X_calc_macro_period_ps>
 8008212:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800821a:	4a0a      	ldr	r2, [pc, #40]	; (8008244 <VL53L0X_calc_timeout_us+0x50>)
 800821c:	fba2 2303 	umull	r2, r3, r2, r3
 8008220:	099b      	lsrs	r3, r3, #6
 8008222:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8008224:	887b      	ldrh	r3, [r7, #2]
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	fb02 f303 	mul.w	r3, r2, r3
 800822c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8008230:	4a04      	ldr	r2, [pc, #16]	; (8008244 <VL53L0X_calc_timeout_us+0x50>)
 8008232:	fba2 2303 	umull	r2, r3, r2, r3
 8008236:	099b      	lsrs	r3, r3, #6
 8008238:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800823a:	697b      	ldr	r3, [r7, #20]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3718      	adds	r7, #24
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	10624dd3 	.word	0x10624dd3

08008248 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b08c      	sub	sp, #48	; 0x30
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	460b      	mov	r3, r1
 8008252:	607a      	str	r2, [r7, #4]
 8008254:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008256:	2300      	movs	r3, #0
 8008258:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800825c:	2300      	movs	r3, #0
 800825e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8008262:	2300      	movs	r3, #0
 8008264:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8008266:	2300      	movs	r3, #0
 8008268:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800826e:	7afb      	ldrb	r3, [r7, #11]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d005      	beq.n	8008280 <get_sequence_step_timeout+0x38>
 8008274:	7afb      	ldrb	r3, [r7, #11]
 8008276:	2b01      	cmp	r3, #1
 8008278:	d002      	beq.n	8008280 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800827a:	7afb      	ldrb	r3, [r7, #11]
 800827c:	2b02      	cmp	r3, #2
 800827e:	d128      	bne.n	80082d2 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008280:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008284:	461a      	mov	r2, r3
 8008286:	2100      	movs	r1, #0
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f7fd fa7d 	bl	8005788 <VL53L0X_GetVcselPulsePeriod>
 800828e:	4603      	mov	r3, r0
 8008290:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8008294:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008298:	2b00      	cmp	r3, #0
 800829a:	d109      	bne.n	80082b0 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800829c:	f107 0320 	add.w	r3, r7, #32
 80082a0:	461a      	mov	r2, r3
 80082a2:	2146      	movs	r1, #70	; 0x46
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f001 fd95 	bl	8009dd4 <VL53L0X_RdByte>
 80082aa:	4603      	mov	r3, r0
 80082ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80082b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7ff ff5b 	bl	8008172 <VL53L0X_decode_timeout>
 80082bc:	4603      	mov	r3, r0
 80082be:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80082c0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80082c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80082c6:	4619      	mov	r1, r3
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f7ff ff93 	bl	80081f4 <VL53L0X_calc_timeout_us>
 80082ce:	62b8      	str	r0, [r7, #40]	; 0x28
 80082d0:	e092      	b.n	80083f8 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80082d2:	7afb      	ldrb	r3, [r7, #11]
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d135      	bne.n	8008344 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80082d8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80082dc:	461a      	mov	r2, r3
 80082de:	2100      	movs	r1, #0
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f7fd fa51 	bl	8005788 <VL53L0X_GetVcselPulsePeriod>
 80082e6:	4603      	mov	r3, r0
 80082e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80082ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f040 8081 	bne.w	80083f8 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80082f6:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80082fa:	461a      	mov	r2, r3
 80082fc:	2100      	movs	r1, #0
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f7fd fa42 	bl	8005788 <VL53L0X_GetVcselPulsePeriod>
 8008304:	4603      	mov	r3, r0
 8008306:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800830a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800830e:	2b00      	cmp	r3, #0
 8008310:	d109      	bne.n	8008326 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8008312:	f107 031e 	add.w	r3, r7, #30
 8008316:	461a      	mov	r2, r3
 8008318:	2151      	movs	r1, #81	; 0x51
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f001 fd84 	bl	8009e28 <VL53L0X_RdWord>
 8008320:	4603      	mov	r3, r0
 8008322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008326:	8bfb      	ldrh	r3, [r7, #30]
 8008328:	4618      	mov	r0, r3
 800832a:	f7ff ff22 	bl	8008172 <VL53L0X_decode_timeout>
 800832e:	4603      	mov	r3, r0
 8008330:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008332:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008336:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008338:	4619      	mov	r1, r3
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f7ff ff5a 	bl	80081f4 <VL53L0X_calc_timeout_us>
 8008340:	62b8      	str	r0, [r7, #40]	; 0x28
 8008342:	e059      	b.n	80083f8 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008344:	7afb      	ldrb	r3, [r7, #11]
 8008346:	2b04      	cmp	r3, #4
 8008348:	d156      	bne.n	80083f8 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800834a:	f107 0314 	add.w	r3, r7, #20
 800834e:	4619      	mov	r1, r3
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f7fd fb25 	bl	80059a0 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8008356:	2300      	movs	r3, #0
 8008358:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800835a:	7dfb      	ldrb	r3, [r7, #23]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d01d      	beq.n	800839c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008360:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008364:	461a      	mov	r2, r3
 8008366:	2100      	movs	r1, #0
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f7fd fa0d 	bl	8005788 <VL53L0X_GetVcselPulsePeriod>
 800836e:	4603      	mov	r3, r0
 8008370:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8008374:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10f      	bne.n	800839c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800837c:	f107 031e 	add.w	r3, r7, #30
 8008380:	461a      	mov	r2, r3
 8008382:	2151      	movs	r1, #81	; 0x51
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f001 fd4f 	bl	8009e28 <VL53L0X_RdWord>
 800838a:	4603      	mov	r3, r0
 800838c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008390:	8bfb      	ldrh	r3, [r7, #30]
 8008392:	4618      	mov	r0, r3
 8008394:	f7ff feed 	bl	8008172 <VL53L0X_decode_timeout>
 8008398:	4603      	mov	r3, r0
 800839a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800839c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d109      	bne.n	80083b8 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80083a4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80083a8:	461a      	mov	r2, r3
 80083aa:	2101      	movs	r1, #1
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f7fd f9eb 	bl	8005788 <VL53L0X_GetVcselPulsePeriod>
 80083b2:	4603      	mov	r3, r0
 80083b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80083b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10f      	bne.n	80083e0 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80083c0:	f107 031c 	add.w	r3, r7, #28
 80083c4:	461a      	mov	r2, r3
 80083c6:	2171      	movs	r1, #113	; 0x71
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f001 fd2d 	bl	8009e28 <VL53L0X_RdWord>
 80083ce:	4603      	mov	r3, r0
 80083d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80083d4:	8bbb      	ldrh	r3, [r7, #28]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7ff fecb 	bl	8008172 <VL53L0X_decode_timeout>
 80083dc:	4603      	mov	r3, r0
 80083de:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80083e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80083e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80083e8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80083ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083ee:	4619      	mov	r1, r3
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f7ff feff 	bl	80081f4 <VL53L0X_calc_timeout_us>
 80083f6:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083fc:	601a      	str	r2, [r3, #0]

	return Status;
 80083fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008402:	4618      	mov	r0, r3
 8008404:	3730      	adds	r7, #48	; 0x30
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b08a      	sub	sp, #40	; 0x28
 800840e:	af00      	add	r7, sp, #0
 8008410:	60f8      	str	r0, [r7, #12]
 8008412:	460b      	mov	r3, r1
 8008414:	607a      	str	r2, [r7, #4]
 8008416:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008418:	2300      	movs	r3, #0
 800841a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800841e:	7afb      	ldrb	r3, [r7, #11]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d005      	beq.n	8008430 <set_sequence_step_timeout+0x26>
 8008424:	7afb      	ldrb	r3, [r7, #11]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d002      	beq.n	8008430 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800842a:	7afb      	ldrb	r3, [r7, #11]
 800842c:	2b02      	cmp	r3, #2
 800842e:	d138      	bne.n	80084a2 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008430:	f107 031b 	add.w	r3, r7, #27
 8008434:	461a      	mov	r2, r3
 8008436:	2100      	movs	r1, #0
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f7fd f9a5 	bl	8005788 <VL53L0X_GetVcselPulsePeriod>
 800843e:	4603      	mov	r3, r0
 8008440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8008444:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008448:	2b00      	cmp	r3, #0
 800844a:	d11a      	bne.n	8008482 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800844c:	7efb      	ldrb	r3, [r7, #27]
 800844e:	461a      	mov	r2, r3
 8008450:	6879      	ldr	r1, [r7, #4]
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f7ff fea4 	bl	80081a0 <VL53L0X_calc_timeout_mclks>
 8008458:	4603      	mov	r3, r0
 800845a:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800845c:	8bbb      	ldrh	r3, [r7, #28]
 800845e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008462:	d903      	bls.n	800846c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8008464:	23ff      	movs	r3, #255	; 0xff
 8008466:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800846a:	e004      	b.n	8008476 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800846c:	8bbb      	ldrh	r3, [r7, #28]
 800846e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8008470:	3b01      	subs	r3, #1
 8008472:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008476:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800847a:	b29a      	uxth	r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008482:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008486:	2b00      	cmp	r3, #0
 8008488:	f040 80ab 	bne.w	80085e2 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800848c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008490:	461a      	mov	r2, r3
 8008492:	2146      	movs	r1, #70	; 0x46
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f001 fc1b 	bl	8009cd0 <VL53L0X_WrByte>
 800849a:	4603      	mov	r3, r0
 800849c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80084a0:	e09f      	b.n	80085e2 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80084a2:	7afb      	ldrb	r3, [r7, #11]
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d135      	bne.n	8008514 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 80084a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d11b      	bne.n	80084e8 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80084b0:	f107 031b 	add.w	r3, r7, #27
 80084b4:	461a      	mov	r2, r3
 80084b6:	2100      	movs	r1, #0
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f7fd f965 	bl	8005788 <VL53L0X_GetVcselPulsePeriod>
 80084be:	4603      	mov	r3, r0
 80084c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80084c4:	7efb      	ldrb	r3, [r7, #27]
 80084c6:	461a      	mov	r2, r3
 80084c8:	6879      	ldr	r1, [r7, #4]
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f7ff fe68 	bl	80081a0 <VL53L0X_calc_timeout_mclks>
 80084d0:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80084d2:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80084d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7ff fe1f 	bl	800811a <VL53L0X_encode_timeout>
 80084dc:	4603      	mov	r3, r0
 80084de:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80084e0:	8b3a      	ldrh	r2, [r7, #24]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80084e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d108      	bne.n	8008502 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80084f0:	8b3b      	ldrh	r3, [r7, #24]
 80084f2:	461a      	mov	r2, r3
 80084f4:	2151      	movs	r1, #81	; 0x51
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f001 fc0e 	bl	8009d18 <VL53L0X_WrWord>
 80084fc:	4603      	mov	r3, r0
 80084fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008502:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008506:	2b00      	cmp	r3, #0
 8008508:	d16b      	bne.n	80085e2 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8008512:	e066      	b.n	80085e2 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008514:	7afb      	ldrb	r3, [r7, #11]
 8008516:	2b04      	cmp	r3, #4
 8008518:	d160      	bne.n	80085dc <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800851a:	f107 0310 	add.w	r3, r7, #16
 800851e:	4619      	mov	r1, r3
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f7fd fa3d 	bl	80059a0 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8008526:	2300      	movs	r3, #0
 8008528:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800852a:	7cfb      	ldrb	r3, [r7, #19]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d01d      	beq.n	800856c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008530:	f107 031b 	add.w	r3, r7, #27
 8008534:	461a      	mov	r2, r3
 8008536:	2100      	movs	r1, #0
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f7fd f925 	bl	8005788 <VL53L0X_GetVcselPulsePeriod>
 800853e:	4603      	mov	r3, r0
 8008540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8008544:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10f      	bne.n	800856c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800854c:	f107 0318 	add.w	r3, r7, #24
 8008550:	461a      	mov	r2, r3
 8008552:	2151      	movs	r1, #81	; 0x51
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f001 fc67 	bl	8009e28 <VL53L0X_RdWord>
 800855a:	4603      	mov	r3, r0
 800855c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8008560:	8b3b      	ldrh	r3, [r7, #24]
 8008562:	4618      	mov	r0, r3
 8008564:	f7ff fe05 	bl	8008172 <VL53L0X_decode_timeout>
 8008568:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800856a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800856c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008570:	2b00      	cmp	r3, #0
 8008572:	d109      	bne.n	8008588 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008574:	f107 031b 	add.w	r3, r7, #27
 8008578:	461a      	mov	r2, r3
 800857a:	2101      	movs	r1, #1
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f7fd f903 	bl	8005788 <VL53L0X_GetVcselPulsePeriod>
 8008582:	4603      	mov	r3, r0
 8008584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8008588:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800858c:	2b00      	cmp	r3, #0
 800858e:	d128      	bne.n	80085e2 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008590:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 8008592:	461a      	mov	r2, r3
 8008594:	6879      	ldr	r1, [r7, #4]
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f7ff fe02 	bl	80081a0 <VL53L0X_calc_timeout_mclks>
 800859c:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800859e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085a0:	6a3a      	ldr	r2, [r7, #32]
 80085a2:	4413      	add	r3, r2
 80085a4:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 80085a6:	6a38      	ldr	r0, [r7, #32]
 80085a8:	f7ff fdb7 	bl	800811a <VL53L0X_encode_timeout>
 80085ac:	4603      	mov	r3, r0
 80085ae:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 80085b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d108      	bne.n	80085ca <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80085b8:	8bfb      	ldrh	r3, [r7, #30]
 80085ba:	461a      	mov	r2, r3
 80085bc:	2171      	movs	r1, #113	; 0x71
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f001 fbaa 	bl	8009d18 <VL53L0X_WrWord>
 80085c4:	4603      	mov	r3, r0
 80085c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80085ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d107      	bne.n	80085e2 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80085da:	e002      	b.n	80085e2 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80085dc:	23fc      	movs	r3, #252	; 0xfc
 80085de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80085e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3728      	adds	r7, #40	; 0x28
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b08a      	sub	sp, #40	; 0x28
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	460b      	mov	r3, r1
 80085f8:	70fb      	strb	r3, [r7, #3]
 80085fa:	4613      	mov	r3, r2
 80085fc:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085fe:	2300      	movs	r3, #0
 8008600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8008604:	230c      	movs	r3, #12
 8008606:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800860a:	2312      	movs	r3, #18
 800860c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8008610:	2308      	movs	r3, #8
 8008612:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8008616:	230e      	movs	r3, #14
 8008618:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800861c:	2300      	movs	r3, #0
 800861e:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8008620:	78bb      	ldrb	r3, [r7, #2]
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	b2db      	uxtb	r3, r3
 8008628:	2b00      	cmp	r3, #0
 800862a:	d003      	beq.n	8008634 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800862c:	23fc      	movs	r3, #252	; 0xfc
 800862e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008632:	e020      	b.n	8008676 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8008634:	78fb      	ldrb	r3, [r7, #3]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d10d      	bne.n	8008656 <VL53L0X_set_vcsel_pulse_period+0x68>
 800863a:	78ba      	ldrb	r2, [r7, #2]
 800863c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008640:	429a      	cmp	r2, r3
 8008642:	d304      	bcc.n	800864e <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8008644:	78ba      	ldrb	r2, [r7, #2]
 8008646:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800864a:	429a      	cmp	r2, r3
 800864c:	d903      	bls.n	8008656 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800864e:	23fc      	movs	r3, #252	; 0xfc
 8008650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008654:	e00f      	b.n	8008676 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8008656:	78fb      	ldrb	r3, [r7, #3]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d10c      	bne.n	8008676 <VL53L0X_set_vcsel_pulse_period+0x88>
 800865c:	78ba      	ldrb	r2, [r7, #2]
 800865e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008662:	429a      	cmp	r2, r3
 8008664:	d304      	bcc.n	8008670 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8008666:	78ba      	ldrb	r2, [r7, #2]
 8008668:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800866c:	429a      	cmp	r2, r3
 800866e:	d902      	bls.n	8008676 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008670:	23fc      	movs	r3, #252	; 0xfc
 8008672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8008676:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800867a:	2b00      	cmp	r3, #0
 800867c:	d002      	beq.n	8008684 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800867e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008682:	e239      	b.n	8008af8 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8008684:	78fb      	ldrb	r3, [r7, #3]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d150      	bne.n	800872c <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800868a:	78bb      	ldrb	r3, [r7, #2]
 800868c:	2b0c      	cmp	r3, #12
 800868e:	d110      	bne.n	80086b2 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8008690:	2218      	movs	r2, #24
 8008692:	2157      	movs	r1, #87	; 0x57
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f001 fb1b 	bl	8009cd0 <VL53L0X_WrByte>
 800869a:	4603      	mov	r3, r0
 800869c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80086a0:	2208      	movs	r2, #8
 80086a2:	2156      	movs	r1, #86	; 0x56
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f001 fb13 	bl	8009cd0 <VL53L0X_WrByte>
 80086aa:	4603      	mov	r3, r0
 80086ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80086b0:	e17f      	b.n	80089b2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80086b2:	78bb      	ldrb	r3, [r7, #2]
 80086b4:	2b0e      	cmp	r3, #14
 80086b6:	d110      	bne.n	80086da <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80086b8:	2230      	movs	r2, #48	; 0x30
 80086ba:	2157      	movs	r1, #87	; 0x57
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f001 fb07 	bl	8009cd0 <VL53L0X_WrByte>
 80086c2:	4603      	mov	r3, r0
 80086c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80086c8:	2208      	movs	r2, #8
 80086ca:	2156      	movs	r1, #86	; 0x56
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f001 faff 	bl	8009cd0 <VL53L0X_WrByte>
 80086d2:	4603      	mov	r3, r0
 80086d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80086d8:	e16b      	b.n	80089b2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80086da:	78bb      	ldrb	r3, [r7, #2]
 80086dc:	2b10      	cmp	r3, #16
 80086de:	d110      	bne.n	8008702 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80086e0:	2240      	movs	r2, #64	; 0x40
 80086e2:	2157      	movs	r1, #87	; 0x57
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 faf3 	bl	8009cd0 <VL53L0X_WrByte>
 80086ea:	4603      	mov	r3, r0
 80086ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80086f0:	2208      	movs	r2, #8
 80086f2:	2156      	movs	r1, #86	; 0x56
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f001 faeb 	bl	8009cd0 <VL53L0X_WrByte>
 80086fa:	4603      	mov	r3, r0
 80086fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008700:	e157      	b.n	80089b2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8008702:	78bb      	ldrb	r3, [r7, #2]
 8008704:	2b12      	cmp	r3, #18
 8008706:	f040 8154 	bne.w	80089b2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800870a:	2250      	movs	r2, #80	; 0x50
 800870c:	2157      	movs	r1, #87	; 0x57
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f001 fade 	bl	8009cd0 <VL53L0X_WrByte>
 8008714:	4603      	mov	r3, r0
 8008716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800871a:	2208      	movs	r2, #8
 800871c:	2156      	movs	r1, #86	; 0x56
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f001 fad6 	bl	8009cd0 <VL53L0X_WrByte>
 8008724:	4603      	mov	r3, r0
 8008726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800872a:	e142      	b.n	80089b2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800872c:	78fb      	ldrb	r3, [r7, #3]
 800872e:	2b01      	cmp	r3, #1
 8008730:	f040 813f 	bne.w	80089b2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8008734:	78bb      	ldrb	r3, [r7, #2]
 8008736:	2b08      	cmp	r3, #8
 8008738:	d14c      	bne.n	80087d4 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800873a:	2210      	movs	r2, #16
 800873c:	2148      	movs	r1, #72	; 0x48
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f001 fac6 	bl	8009cd0 <VL53L0X_WrByte>
 8008744:	4603      	mov	r3, r0
 8008746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800874a:	2208      	movs	r2, #8
 800874c:	2147      	movs	r1, #71	; 0x47
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f001 fabe 	bl	8009cd0 <VL53L0X_WrByte>
 8008754:	4603      	mov	r3, r0
 8008756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800875a:	2202      	movs	r2, #2
 800875c:	2132      	movs	r1, #50	; 0x32
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f001 fab6 	bl	8009cd0 <VL53L0X_WrByte>
 8008764:	4603      	mov	r3, r0
 8008766:	461a      	mov	r2, r3
 8008768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800876c:	4313      	orrs	r3, r2
 800876e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8008772:	220c      	movs	r2, #12
 8008774:	2130      	movs	r1, #48	; 0x30
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f001 faaa 	bl	8009cd0 <VL53L0X_WrByte>
 800877c:	4603      	mov	r3, r0
 800877e:	461a      	mov	r2, r3
 8008780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008784:	4313      	orrs	r3, r2
 8008786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800878a:	2201      	movs	r2, #1
 800878c:	21ff      	movs	r1, #255	; 0xff
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f001 fa9e 	bl	8009cd0 <VL53L0X_WrByte>
 8008794:	4603      	mov	r3, r0
 8008796:	461a      	mov	r2, r3
 8008798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800879c:	4313      	orrs	r3, r2
 800879e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80087a2:	2230      	movs	r2, #48	; 0x30
 80087a4:	2130      	movs	r1, #48	; 0x30
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f001 fa92 	bl	8009cd0 <VL53L0X_WrByte>
 80087ac:	4603      	mov	r3, r0
 80087ae:	461a      	mov	r2, r3
 80087b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087b4:	4313      	orrs	r3, r2
 80087b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80087ba:	2200      	movs	r2, #0
 80087bc:	21ff      	movs	r1, #255	; 0xff
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f001 fa86 	bl	8009cd0 <VL53L0X_WrByte>
 80087c4:	4603      	mov	r3, r0
 80087c6:	461a      	mov	r2, r3
 80087c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087cc:	4313      	orrs	r3, r2
 80087ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80087d2:	e0ee      	b.n	80089b2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80087d4:	78bb      	ldrb	r3, [r7, #2]
 80087d6:	2b0a      	cmp	r3, #10
 80087d8:	d14c      	bne.n	8008874 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80087da:	2228      	movs	r2, #40	; 0x28
 80087dc:	2148      	movs	r1, #72	; 0x48
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f001 fa76 	bl	8009cd0 <VL53L0X_WrByte>
 80087e4:	4603      	mov	r3, r0
 80087e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80087ea:	2208      	movs	r2, #8
 80087ec:	2147      	movs	r1, #71	; 0x47
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f001 fa6e 	bl	8009cd0 <VL53L0X_WrByte>
 80087f4:	4603      	mov	r3, r0
 80087f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80087fa:	2203      	movs	r2, #3
 80087fc:	2132      	movs	r1, #50	; 0x32
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f001 fa66 	bl	8009cd0 <VL53L0X_WrByte>
 8008804:	4603      	mov	r3, r0
 8008806:	461a      	mov	r2, r3
 8008808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800880c:	4313      	orrs	r3, r2
 800880e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8008812:	2209      	movs	r2, #9
 8008814:	2130      	movs	r1, #48	; 0x30
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f001 fa5a 	bl	8009cd0 <VL53L0X_WrByte>
 800881c:	4603      	mov	r3, r0
 800881e:	461a      	mov	r2, r3
 8008820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008824:	4313      	orrs	r3, r2
 8008826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800882a:	2201      	movs	r2, #1
 800882c:	21ff      	movs	r1, #255	; 0xff
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f001 fa4e 	bl	8009cd0 <VL53L0X_WrByte>
 8008834:	4603      	mov	r3, r0
 8008836:	461a      	mov	r2, r3
 8008838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800883c:	4313      	orrs	r3, r2
 800883e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8008842:	2220      	movs	r2, #32
 8008844:	2130      	movs	r1, #48	; 0x30
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f001 fa42 	bl	8009cd0 <VL53L0X_WrByte>
 800884c:	4603      	mov	r3, r0
 800884e:	461a      	mov	r2, r3
 8008850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008854:	4313      	orrs	r3, r2
 8008856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800885a:	2200      	movs	r2, #0
 800885c:	21ff      	movs	r1, #255	; 0xff
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f001 fa36 	bl	8009cd0 <VL53L0X_WrByte>
 8008864:	4603      	mov	r3, r0
 8008866:	461a      	mov	r2, r3
 8008868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800886c:	4313      	orrs	r3, r2
 800886e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008872:	e09e      	b.n	80089b2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8008874:	78bb      	ldrb	r3, [r7, #2]
 8008876:	2b0c      	cmp	r3, #12
 8008878:	d14c      	bne.n	8008914 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800887a:	2238      	movs	r2, #56	; 0x38
 800887c:	2148      	movs	r1, #72	; 0x48
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f001 fa26 	bl	8009cd0 <VL53L0X_WrByte>
 8008884:	4603      	mov	r3, r0
 8008886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800888a:	2208      	movs	r2, #8
 800888c:	2147      	movs	r1, #71	; 0x47
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f001 fa1e 	bl	8009cd0 <VL53L0X_WrByte>
 8008894:	4603      	mov	r3, r0
 8008896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800889a:	2203      	movs	r2, #3
 800889c:	2132      	movs	r1, #50	; 0x32
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f001 fa16 	bl	8009cd0 <VL53L0X_WrByte>
 80088a4:	4603      	mov	r3, r0
 80088a6:	461a      	mov	r2, r3
 80088a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088ac:	4313      	orrs	r3, r2
 80088ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80088b2:	2208      	movs	r2, #8
 80088b4:	2130      	movs	r1, #48	; 0x30
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f001 fa0a 	bl	8009cd0 <VL53L0X_WrByte>
 80088bc:	4603      	mov	r3, r0
 80088be:	461a      	mov	r2, r3
 80088c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088c4:	4313      	orrs	r3, r2
 80088c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80088ca:	2201      	movs	r2, #1
 80088cc:	21ff      	movs	r1, #255	; 0xff
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f001 f9fe 	bl	8009cd0 <VL53L0X_WrByte>
 80088d4:	4603      	mov	r3, r0
 80088d6:	461a      	mov	r2, r3
 80088d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088dc:	4313      	orrs	r3, r2
 80088de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80088e2:	2220      	movs	r2, #32
 80088e4:	2130      	movs	r1, #48	; 0x30
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f001 f9f2 	bl	8009cd0 <VL53L0X_WrByte>
 80088ec:	4603      	mov	r3, r0
 80088ee:	461a      	mov	r2, r3
 80088f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088f4:	4313      	orrs	r3, r2
 80088f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80088fa:	2200      	movs	r2, #0
 80088fc:	21ff      	movs	r1, #255	; 0xff
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f001 f9e6 	bl	8009cd0 <VL53L0X_WrByte>
 8008904:	4603      	mov	r3, r0
 8008906:	461a      	mov	r2, r3
 8008908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800890c:	4313      	orrs	r3, r2
 800890e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008912:	e04e      	b.n	80089b2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8008914:	78bb      	ldrb	r3, [r7, #2]
 8008916:	2b0e      	cmp	r3, #14
 8008918:	d14b      	bne.n	80089b2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800891a:	2248      	movs	r2, #72	; 0x48
 800891c:	2148      	movs	r1, #72	; 0x48
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f001 f9d6 	bl	8009cd0 <VL53L0X_WrByte>
 8008924:	4603      	mov	r3, r0
 8008926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800892a:	2208      	movs	r2, #8
 800892c:	2147      	movs	r1, #71	; 0x47
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f001 f9ce 	bl	8009cd0 <VL53L0X_WrByte>
 8008934:	4603      	mov	r3, r0
 8008936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800893a:	2203      	movs	r2, #3
 800893c:	2132      	movs	r1, #50	; 0x32
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f001 f9c6 	bl	8009cd0 <VL53L0X_WrByte>
 8008944:	4603      	mov	r3, r0
 8008946:	461a      	mov	r2, r3
 8008948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800894c:	4313      	orrs	r3, r2
 800894e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8008952:	2207      	movs	r2, #7
 8008954:	2130      	movs	r1, #48	; 0x30
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f001 f9ba 	bl	8009cd0 <VL53L0X_WrByte>
 800895c:	4603      	mov	r3, r0
 800895e:	461a      	mov	r2, r3
 8008960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008964:	4313      	orrs	r3, r2
 8008966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800896a:	2201      	movs	r2, #1
 800896c:	21ff      	movs	r1, #255	; 0xff
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 f9ae 	bl	8009cd0 <VL53L0X_WrByte>
 8008974:	4603      	mov	r3, r0
 8008976:	461a      	mov	r2, r3
 8008978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800897c:	4313      	orrs	r3, r2
 800897e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8008982:	2220      	movs	r2, #32
 8008984:	2130      	movs	r1, #48	; 0x30
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f001 f9a2 	bl	8009cd0 <VL53L0X_WrByte>
 800898c:	4603      	mov	r3, r0
 800898e:	461a      	mov	r2, r3
 8008990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008994:	4313      	orrs	r3, r2
 8008996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800899a:	2200      	movs	r2, #0
 800899c:	21ff      	movs	r1, #255	; 0xff
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f001 f996 	bl	8009cd0 <VL53L0X_WrByte>
 80089a4:	4603      	mov	r3, r0
 80089a6:	461a      	mov	r2, r3
 80089a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089ac:	4313      	orrs	r3, r2
 80089ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80089b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d17f      	bne.n	8008aba <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80089ba:	78bb      	ldrb	r3, [r7, #2]
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fe fe38 	bl	8007632 <VL53L0X_encode_vcsel_period>
 80089c2:	4603      	mov	r3, r0
 80089c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80089c8:	78fb      	ldrb	r3, [r7, #3]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d002      	beq.n	80089d4 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d045      	beq.n	8008a5e <VL53L0X_set_vcsel_pulse_period+0x470>
 80089d2:	e06e      	b.n	8008ab2 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80089d4:	f107 0314 	add.w	r3, r7, #20
 80089d8:	461a      	mov	r2, r3
 80089da:	2103      	movs	r1, #3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7ff fc33 	bl	8008248 <get_sequence_step_timeout>
 80089e2:	4603      	mov	r3, r0
 80089e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80089e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d109      	bne.n	8008a04 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 80089f0:	f107 0310 	add.w	r3, r7, #16
 80089f4:	461a      	mov	r2, r3
 80089f6:	2102      	movs	r1, #2
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f7ff fc25 	bl	8008248 <get_sequence_step_timeout>
 80089fe:	4603      	mov	r3, r0
 8008a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8008a04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d109      	bne.n	8008a20 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8008a0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008a10:	461a      	mov	r2, r3
 8008a12:	2150      	movs	r1, #80	; 0x50
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f001 f95b 	bl	8009cd0 <VL53L0X_WrByte>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8008a20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d108      	bne.n	8008a3a <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	2103      	movs	r1, #3
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7ff fceb 	bl	800840a <set_sequence_step_timeout>
 8008a34:	4603      	mov	r3, r0
 8008a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8008a3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d108      	bne.n	8008a54 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	461a      	mov	r2, r3
 8008a46:	2102      	movs	r1, #2
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f7ff fcde 	bl	800840a <set_sequence_step_timeout>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	78ba      	ldrb	r2, [r7, #2]
 8008a58:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8008a5c:	e02e      	b.n	8008abc <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8008a5e:	f107 0318 	add.w	r3, r7, #24
 8008a62:	461a      	mov	r2, r3
 8008a64:	2104      	movs	r1, #4
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7ff fbee 	bl	8008248 <get_sequence_step_timeout>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8008a72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d109      	bne.n	8008a8e <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8008a7a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008a7e:	461a      	mov	r2, r3
 8008a80:	2170      	movs	r1, #112	; 0x70
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f001 f924 	bl	8009cd0 <VL53L0X_WrByte>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8008a8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d108      	bne.n	8008aa8 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	2104      	movs	r1, #4
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7ff fcb4 	bl	800840a <set_sequence_step_timeout>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	78ba      	ldrb	r2, [r7, #2]
 8008aac:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8008ab0:	e004      	b.n	8008abc <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008ab2:	23fc      	movs	r3, #252	; 0xfc
 8008ab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008ab8:	e000      	b.n	8008abc <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8008aba:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8008abc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d109      	bne.n	8008ad8 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	695b      	ldr	r3, [r3, #20]
 8008ac8:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8008aca:	69f9      	ldr	r1, [r7, #28]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f7fc fe1d 	bl	800570c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8008ad8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d109      	bne.n	8008af4 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8008ae0:	f107 010f 	add.w	r1, r7, #15
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f7fe fcbd 	bl	8007468 <VL53L0X_perform_phase_calibration>
 8008aee:	4603      	mov	r3, r0
 8008af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8008af4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3728      	adds	r7, #40	; 0x28
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b086      	sub	sp, #24
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	607a      	str	r2, [r7, #4]
 8008b0c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8008b12:	7afb      	ldrb	r3, [r7, #11]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d002      	beq.n	8008b1e <VL53L0X_get_vcsel_pulse_period+0x1e>
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d00a      	beq.n	8008b32 <VL53L0X_get_vcsel_pulse_period+0x32>
 8008b1c:	e013      	b.n	8008b46 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008b1e:	f107 0316 	add.w	r3, r7, #22
 8008b22:	461a      	mov	r2, r3
 8008b24:	2150      	movs	r1, #80	; 0x50
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f001 f954 	bl	8009dd4 <VL53L0X_RdByte>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008b30:	e00b      	b.n	8008b4a <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008b32:	f107 0316 	add.w	r3, r7, #22
 8008b36:	461a      	mov	r2, r3
 8008b38:	2170      	movs	r1, #112	; 0x70
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f001 f94a 	bl	8009dd4 <VL53L0X_RdByte>
 8008b40:	4603      	mov	r3, r0
 8008b42:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008b44:	e001      	b.n	8008b4a <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008b46:	23fc      	movs	r3, #252	; 0xfc
 8008b48:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8008b4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d107      	bne.n	8008b62 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8008b52:	7dbb      	ldrb	r3, [r7, #22]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7fe fd59 	bl	800760c <VL53L0X_decode_vcsel_period>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	701a      	strb	r2, [r3, #0]

	return Status;
 8008b62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3718      	adds	r7, #24
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b092      	sub	sp, #72	; 0x48
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008b7e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008b82:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008b84:	f240 7376 	movw	r3, #1910	; 0x776
 8008b88:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8008b8a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008b8e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008b90:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008b94:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8008b96:	f240 234e 	movw	r3, #590	; 0x24e
 8008b9a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8008b9c:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008ba2:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008ba6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8008ba8:	f240 2326 	movw	r3, #550	; 0x226
 8008bac:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8008bb2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8008bb6:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8008bbc:	683a      	ldr	r2, [r7, #0]
 8008bbe:	6a3b      	ldr	r3, [r7, #32]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d205      	bcs.n	8008bd0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008bc4:	23fc      	movs	r3, #252	; 0xfc
 8008bc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8008bca:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008bce:	e0aa      	b.n	8008d26 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8008bd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd4:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8008bd6:	683a      	ldr	r2, [r7, #0]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008bdc:	f107 0314 	add.w	r3, r7, #20
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7fc fedc 	bl	80059a0 <VL53L0X_GetSequenceStepEnables>
 8008be8:	4603      	mov	r3, r0
 8008bea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8008bee:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d15b      	bne.n	8008cae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8008bf6:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d105      	bne.n	8008c08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8008bfc:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d102      	bne.n	8008c08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8008c02:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d052      	beq.n	8008cae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8008c08:	f107 0310 	add.w	r3, r7, #16
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	2102      	movs	r1, #2
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f7ff fb19 	bl	8008248 <get_sequence_step_timeout>
 8008c16:	4603      	mov	r3, r0
 8008c18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8008c1c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d002      	beq.n	8008c2a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8008c24:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008c28:	e07d      	b.n	8008d26 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8008c2a:	7d3b      	ldrb	r3, [r7, #20]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00f      	beq.n	8008c50 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8008c30:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8008c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c34:	4413      	add	r3, r2
 8008c36:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8008c38:	69fa      	ldr	r2, [r7, #28]
 8008c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d204      	bcs.n	8008c4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8008c40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	643b      	str	r3, [r7, #64]	; 0x40
 8008c48:	e002      	b.n	8008c50 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008c4a:	23fc      	movs	r3, #252	; 0xfc
 8008c4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8008c50:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d002      	beq.n	8008c5e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8008c58:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008c5c:	e063      	b.n	8008d26 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8008c5e:	7dbb      	ldrb	r3, [r7, #22]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d011      	beq.n	8008c88 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c68:	4413      	add	r3, r2
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008c6e:	69fa      	ldr	r2, [r7, #28]
 8008c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d204      	bcs.n	8008c80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008c76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	1ad3      	subs	r3, r2, r3
 8008c7c:	643b      	str	r3, [r7, #64]	; 0x40
 8008c7e:	e016      	b.n	8008cae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008c80:	23fc      	movs	r3, #252	; 0xfc
 8008c82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008c86:	e012      	b.n	8008cae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8008c88:	7d7b      	ldrb	r3, [r7, #21]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00f      	beq.n	8008cae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c92:	4413      	add	r3, r2
 8008c94:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008c96:	69fa      	ldr	r2, [r7, #28]
 8008c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d204      	bcs.n	8008ca8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008c9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	643b      	str	r3, [r7, #64]	; 0x40
 8008ca6:	e002      	b.n	8008cae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008ca8:	23fc      	movs	r3, #252	; 0xfc
 8008caa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8008cae:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8008cb6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008cba:	e034      	b.n	8008d26 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8008cbc:	7dfb      	ldrb	r3, [r7, #23]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d019      	beq.n	8008cf6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8008cc2:	f107 030c 	add.w	r3, r7, #12
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	2103      	movs	r1, #3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7ff fabc 	bl	8008248 <get_sequence_step_timeout>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cda:	4413      	add	r3, r2
 8008cdc:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008cde:	69fa      	ldr	r2, [r7, #28]
 8008ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d204      	bcs.n	8008cf0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8008ce6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	1ad3      	subs	r3, r2, r3
 8008cec:	643b      	str	r3, [r7, #64]	; 0x40
 8008cee:	e002      	b.n	8008cf6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008cf0:	23fc      	movs	r3, #252	; 0xfc
 8008cf2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8008cf6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d111      	bne.n	8008d22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8008cfe:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00e      	beq.n	8008d22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8008d04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8008d0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d0e:	2104      	movs	r1, #4
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7ff fb7a 	bl	800840a <set_sequence_step_timeout>
 8008d16:	4603      	mov	r3, r0
 8008d18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8008d22:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3748      	adds	r7, #72	; 0x48
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b090      	sub	sp, #64	; 0x40
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008d3e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008d42:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008d44:	f240 7376 	movw	r3, #1910	; 0x776
 8008d48:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8008d4a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008d4e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008d50:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008d54:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8008d56:	f240 234e 	movw	r3, #590	; 0x24e
 8008d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8008d5c:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008d60:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008d62:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008d66:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8008d68:	f240 2326 	movw	r3, #550	; 0x226
 8008d6c:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8008d72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d76:	441a      	add	r2, r3
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008d7c:	f107 0318 	add.w	r3, r7, #24
 8008d80:	4619      	mov	r1, r3
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7fc fe0c 	bl	80059a0 <VL53L0X_GetSequenceStepEnables>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8008d8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d002      	beq.n	8008d9c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8008d96:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d9a:	e075      	b.n	8008e88 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8008d9c:	7e3b      	ldrb	r3, [r7, #24]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d105      	bne.n	8008dae <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8008da2:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d102      	bne.n	8008dae <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8008da8:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d030      	beq.n	8008e10 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8008dae:	f107 0310 	add.w	r3, r7, #16
 8008db2:	461a      	mov	r2, r3
 8008db4:	2102      	movs	r1, #2
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7ff fa46 	bl	8008248 <get_sequence_step_timeout>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8008dc2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d122      	bne.n	8008e10 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8008dca:	7e3b      	ldrb	r3, [r7, #24]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d007      	beq.n	8008de0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8008dd4:	6939      	ldr	r1, [r7, #16]
 8008dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd8:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008dda:	441a      	add	r2, r3
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8008de0:	7ebb      	ldrb	r3, [r7, #26]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d009      	beq.n	8008dfa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8008dea:	6939      	ldr	r1, [r7, #16]
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	440b      	add	r3, r1
 8008df0:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008df2:	441a      	add	r2, r3
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	e00a      	b.n	8008e10 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8008dfa:	7e7b      	ldrb	r3, [r7, #25]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d007      	beq.n	8008e10 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8008e04:	6939      	ldr	r1, [r7, #16]
 8008e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e08:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008e0a:	441a      	add	r2, r3
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008e10:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d114      	bne.n	8008e42 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8008e18:	7efb      	ldrb	r3, [r7, #27]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d011      	beq.n	8008e42 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8008e1e:	f107 030c 	add.w	r3, r7, #12
 8008e22:	461a      	mov	r2, r3
 8008e24:	2103      	movs	r1, #3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7ff fa0e 	bl	8008248 <get_sequence_step_timeout>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8008e36:	68f9      	ldr	r1, [r7, #12]
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008e3c:	441a      	add	r2, r3
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008e42:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d114      	bne.n	8008e74 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8008e4a:	7f3b      	ldrb	r3, [r7, #28]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d011      	beq.n	8008e74 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8008e50:	f107 0314 	add.w	r3, r7, #20
 8008e54:	461a      	mov	r2, r3
 8008e56:	2104      	movs	r1, #4
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7ff f9f5 	bl	8008248 <get_sequence_step_timeout>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8008e68:	6979      	ldr	r1, [r7, #20]
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008e6e:	441a      	add	r2, r3
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008e74:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d103      	bne.n	8008e84 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008e84:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3740      	adds	r7, #64	; 0x40
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b088      	sub	sp, #32
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008ea2:	e0c6      	b.n	8009032 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	74fb      	strb	r3, [r7, #19]
		Index++;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8008eb4:	7cfb      	ldrb	r3, [r7, #19]
 8008eb6:	2bff      	cmp	r3, #255	; 0xff
 8008eb8:	f040 808d 	bne.w	8008fd6 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	747b      	strb	r3, [r7, #17]
			Index++;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8008ecc:	7c7b      	ldrb	r3, [r7, #17]
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d87e      	bhi.n	8008fd0 <VL53L0X_load_tuning_settings+0x140>
 8008ed2:	a201      	add	r2, pc, #4	; (adr r2, 8008ed8 <VL53L0X_load_tuning_settings+0x48>)
 8008ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed8:	08008ee9 	.word	0x08008ee9
 8008edc:	08008f23 	.word	0x08008f23
 8008ee0:	08008f5d 	.word	0x08008f5d
 8008ee4:	08008f97 	.word	0x08008f97
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	4413      	add	r3, r2
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	743b      	strb	r3, [r7, #16]
				Index++;
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	4413      	add	r3, r2
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	3301      	adds	r3, #1
 8008f06:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008f08:	7c3b      	ldrb	r3, [r7, #16]
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	021b      	lsls	r3, r3, #8
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	4413      	add	r3, r2
 8008f16:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	89ba      	ldrh	r2, [r7, #12]
 8008f1c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8008f20:	e087      	b.n	8009032 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	4413      	add	r3, r2
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	743b      	strb	r3, [r7, #16]
				Index++;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	683a      	ldr	r2, [r7, #0]
 8008f36:	4413      	add	r3, r2
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008f42:	7c3b      	ldrb	r3, [r7, #16]
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	021b      	lsls	r3, r3, #8
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	7bfb      	ldrb	r3, [r7, #15]
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	4413      	add	r3, r2
 8008f50:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	89ba      	ldrh	r2, [r7, #12]
 8008f56:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8008f5a:	e06a      	b.n	8009032 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	4413      	add	r3, r2
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	743b      	strb	r3, [r7, #16]
				Index++;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	683a      	ldr	r2, [r7, #0]
 8008f70:	4413      	add	r3, r2
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008f7c:	7c3b      	ldrb	r3, [r7, #16]
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	021b      	lsls	r3, r3, #8
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	4413      	add	r3, r2
 8008f8a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	89ba      	ldrh	r2, [r7, #12]
 8008f90:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8008f94:	e04d      	b.n	8009032 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	743b      	strb	r3, [r7, #16]
				Index++;
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	683a      	ldr	r2, [r7, #0]
 8008faa:	4413      	add	r3, r2
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008fb6:	7c3b      	ldrb	r3, [r7, #16]
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	021b      	lsls	r3, r3, #8
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	4413      	add	r3, r2
 8008fc4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	89ba      	ldrh	r2, [r7, #12]
 8008fca:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8008fce:	e030      	b.n	8009032 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008fd0:	23fc      	movs	r3, #252	; 0xfc
 8008fd2:	77fb      	strb	r3, [r7, #31]
 8008fd4:	e02d      	b.n	8009032 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8008fd6:	7cfb      	ldrb	r3, [r7, #19]
 8008fd8:	2b04      	cmp	r3, #4
 8008fda:	d828      	bhi.n	800902e <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	74bb      	strb	r3, [r7, #18]
			Index++;
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8008fec:	2300      	movs	r3, #0
 8008fee:	61bb      	str	r3, [r7, #24]
 8008ff0:	e00f      	b.n	8009012 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	683a      	ldr	r2, [r7, #0]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	7819      	ldrb	r1, [r3, #0]
 8008ffa:	f107 0208 	add.w	r2, r7, #8
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	4413      	add	r3, r2
 8009002:	460a      	mov	r2, r1
 8009004:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	3301      	adds	r3, #1
 800900a:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	3301      	adds	r3, #1
 8009010:	61bb      	str	r3, [r7, #24]
 8009012:	7cfb      	ldrb	r3, [r7, #19]
 8009014:	69ba      	ldr	r2, [r7, #24]
 8009016:	429a      	cmp	r2, r3
 8009018:	dbeb      	blt.n	8008ff2 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800901a:	7cfb      	ldrb	r3, [r7, #19]
 800901c:	f107 0208 	add.w	r2, r7, #8
 8009020:	7cb9      	ldrb	r1, [r7, #18]
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fdf8 	bl	8009c18 <VL53L0X_WriteMulti>
 8009028:	4603      	mov	r3, r0
 800902a:	77fb      	strb	r3, [r7, #31]
 800902c:	e001      	b.n	8009032 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800902e:	23fc      	movs	r3, #252	; 0xfc
 8009030:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	4413      	add	r3, r2
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d004      	beq.n	8009048 <VL53L0X_load_tuning_settings+0x1b8>
 800903e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009042:	2b00      	cmp	r3, #0
 8009044:	f43f af2e 	beq.w	8008ea4 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009048:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3720      	adds	r7, #32
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b088      	sub	sp, #32
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009060:	2300      	movs	r3, #0
 8009062:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800906a:	f107 0313 	add.w	r3, r7, #19
 800906e:	4619      	mov	r1, r3
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f7fc fd21 	bl	8005ab8 <VL53L0X_GetXTalkCompensationEnable>
 8009076:	4603      	mov	r3, r0
 8009078:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800907a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d111      	bne.n	80090a6 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8009082:	7cfb      	ldrb	r3, [r7, #19]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d00e      	beq.n	80090a6 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6a1b      	ldr	r3, [r3, #32]
 800908c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	8a9b      	ldrh	r3, [r3, #20]
 8009092:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	fb02 f303 	mul.w	r3, r2, r3
 800909a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	3380      	adds	r3, #128	; 0x80
 80090a0:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 80090a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3720      	adds	r7, #32
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b086      	sub	sp, #24
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	60f8      	str	r0, [r7, #12]
 80090ba:	60b9      	str	r1, [r7, #8]
 80090bc:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80090be:	2300      	movs	r3, #0
 80090c0:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 80090ca:	f107 0310 	add.w	r3, r7, #16
 80090ce:	461a      	mov	r2, r3
 80090d0:	68b9      	ldr	r1, [r7, #8]
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f7ff ffbe 	bl	8009054 <VL53L0X_get_total_xtalk_rate>
 80090d8:	4603      	mov	r3, r0
 80090da:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80090dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d105      	bne.n	80090f0 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	441a      	add	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	601a      	str	r2, [r3, #0]

	return Status;
 80090f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3718      	adds	r7, #24
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b09a      	sub	sp, #104	; 0x68
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
 8009108:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800910a:	2312      	movs	r3, #18
 800910c:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800910e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009112:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8009114:	2342      	movs	r3, #66	; 0x42
 8009116:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8009118:	2306      	movs	r3, #6
 800911a:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800911c:	2307      	movs	r3, #7
 800911e:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009120:	2300      	movs	r3, #0
 8009122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800912c:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8009134:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8009136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800913a:	fb02 f303 	mul.w	r3, r2, r3
 800913e:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8009140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009142:	3380      	adds	r3, #128	; 0x80
 8009144:	0a1b      	lsrs	r3, r3, #8
 8009146:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8009148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800914a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800914c:	fb02 f303 	mul.w	r3, r2, r3
 8009150:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8009152:	2300      	movs	r3, #0
 8009154:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d01b      	beq.n	8009194 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	029b      	lsls	r3, r3, #10
 8009160:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8009166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009168:	4413      	add	r3, r2
 800916a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800916c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	fbb2 f3f3 	udiv	r3, r2, r3
 8009174:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8009176:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009178:	4613      	mov	r3, r2
 800917a:	005b      	lsls	r3, r3, #1
 800917c:	4413      	add	r3, r2
 800917e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8009180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009182:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009184:	fb02 f303 	mul.w	r3, r2, r3
 8009188:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800918a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800918c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009190:	0c1b      	lsrs	r3, r3, #16
 8009192:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009198:	fb02 f303 	mul.w	r3, r2, r3
 800919c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800919e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80091a4:	0c1b      	lsrs	r3, r3, #16
 80091a6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 80091a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ac:	fb02 f303 	mul.w	r3, r2, r3
 80091b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80091b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091b4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80091b8:	0c1b      	lsrs	r3, r3, #16
 80091ba:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80091bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091be:	085a      	lsrs	r2, r3, #1
 80091c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c2:	441a      	add	r2, r3
 80091c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ca:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80091cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091d0:	fb02 f303 	mul.w	r3, r2, r3
 80091d4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 80091d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091dc:	d302      	bcc.n	80091e4 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 80091de:	4b55      	ldr	r3, [pc, #340]	; (8009334 <VL53L0X_calc_dmax+0x238>)
 80091e0:	663b      	str	r3, [r7, #96]	; 0x60
 80091e2:	e016      	b.n	8009212 <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80091e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091e6:	085a      	lsrs	r2, r3, #1
 80091e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091ea:	441a      	add	r2, r3
 80091ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80091f2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80091f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091f8:	fb02 f303 	mul.w	r3, r2, r3
 80091fc:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80091fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009200:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009204:	0c1b      	lsrs	r3, r3, #16
 8009206:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8009208:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800920a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800920c:	fb02 f303 	mul.w	r3, r2, r3
 8009210:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8009212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009214:	039b      	lsls	r3, r3, #14
 8009216:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800921a:	4a47      	ldr	r2, [pc, #284]	; (8009338 <VL53L0X_calc_dmax+0x23c>)
 800921c:	fba2 2303 	umull	r2, r3, r2, r3
 8009220:	099b      	lsrs	r3, r3, #6
 8009222:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8009224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009228:	fb02 f303 	mul.w	r3, r2, r3
 800922c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800922e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009230:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009232:	fb02 f303 	mul.w	r3, r2, r3
 8009236:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8009238:	6a3b      	ldr	r3, [r7, #32]
 800923a:	3308      	adds	r3, #8
 800923c:	091b      	lsrs	r3, r3, #4
 800923e:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8009240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009242:	6a3b      	ldr	r3, [r7, #32]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8009248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800924a:	4613      	mov	r3, r2
 800924c:	005b      	lsls	r3, r3, #1
 800924e:	4413      	add	r3, r2
 8009250:	011b      	lsls	r3, r3, #4
 8009252:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800925a:	0b9b      	lsrs	r3, r3, #14
 800925c:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800925e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009260:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009262:	4413      	add	r3, r2
 8009264:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8009266:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009268:	085b      	lsrs	r3, r3, #1
 800926a:	69ba      	ldr	r2, [r7, #24]
 800926c:	4413      	add	r3, r2
 800926e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8009270:	69ba      	ldr	r2, [r7, #24]
 8009272:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009274:	fbb2 f3f3 	udiv	r3, r2, r3
 8009278:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	039b      	lsls	r3, r3, #14
 800927e:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	085b      	lsrs	r3, r3, #1
 8009284:	69ba      	ldr	r2, [r7, #24]
 8009286:	4413      	add	r3, r2
 8009288:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800928a:	69ba      	ldr	r2, [r7, #24]
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009292:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009298:	fb02 f303 	mul.w	r3, r2, r3
 800929c:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80092a4:	4a24      	ldr	r2, [pc, #144]	; (8009338 <VL53L0X_calc_dmax+0x23c>)
 80092a6:	fba2 2303 	umull	r2, r3, r2, r3
 80092aa:	099b      	lsrs	r3, r3, #6
 80092ac:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	011b      	lsls	r3, r3, #4
 80092b2:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80092ba:	4a1f      	ldr	r2, [pc, #124]	; (8009338 <VL53L0X_calc_dmax+0x23c>)
 80092bc:	fba2 2303 	umull	r2, r3, r2, r3
 80092c0:	099b      	lsrs	r3, r3, #6
 80092c2:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 80092c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092c6:	3380      	adds	r3, #128	; 0x80
 80092c8:	0a1b      	lsrs	r3, r3, #8
 80092ca:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d008      	beq.n	80092e4 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	085a      	lsrs	r2, r3, #1
 80092d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d8:	441a      	add	r2, r3
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80092e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80092e2:	e001      	b.n	80092e8 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 80092e4:	2300      	movs	r3, #0
 80092e6:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80092e8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80092ea:	f7fe f9b5 	bl	8007658 <VL53L0X_isqrt>
 80092ee:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d008      	beq.n	8009308 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	085a      	lsrs	r2, r3, #1
 80092fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092fc:	441a      	add	r2, r3
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	fbb2 f3f3 	udiv	r3, r2, r3
 8009304:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009306:	e001      	b.n	800930c <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8009308:	2300      	movs	r3, #0
 800930a:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800930c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800930e:	f7fe f9a3 	bl	8007658 <VL53L0X_isqrt>
 8009312:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8009314:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800931a:	693a      	ldr	r2, [r7, #16]
 800931c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800931e:	429a      	cmp	r2, r3
 8009320:	d902      	bls.n	8009328 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 8009322:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009324:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009326:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8009328:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800932c:	4618      	mov	r0, r3
 800932e:	3768      	adds	r7, #104	; 0x68
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	fff00000 	.word	0xfff00000
 8009338:	10624dd3 	.word	0x10624dd3

0800933c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b0b4      	sub	sp, #208	; 0xd0
 8009340:	af04      	add	r7, sp, #16
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
 8009348:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800934a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800934e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8009352:	f44f 7316 	mov.w	r3, #600	; 0x258
 8009356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800935a:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800935e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8009362:	f241 235c 	movw	r3, #4700	; 0x125c
 8009366:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800936a:	4b9e      	ldr	r3, [pc, #632]	; (80095e4 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800936c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8009370:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009374:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8009376:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800937a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800937e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009382:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8009384:	4b98      	ldr	r3, [pc, #608]	; (80095e8 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8009386:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8009388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800938c:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800938e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8009392:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8009394:	f240 6377 	movw	r3, #1655	; 0x677
 8009398:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800939a:	2300      	movs	r3, #0
 800939c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6a1b      	ldr	r3, [r3, #32]
 80093a4:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80093ae:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 80093b2:	0c1b      	lsrs	r3, r3, #16
 80093b4:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 80093bc:	f107 0310 	add.w	r3, r7, #16
 80093c0:	461a      	mov	r2, r3
 80093c2:	68b9      	ldr	r1, [r7, #8]
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f7ff fe74 	bl	80090b2 <VL53L0X_get_total_signal_rate>
 80093ca:	4603      	mov	r3, r0
 80093cc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80093d0:	f107 0314 	add.w	r3, r7, #20
 80093d4:	461a      	mov	r2, r3
 80093d6:	68b9      	ldr	r1, [r7, #8]
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f7ff fe3b 	bl	8009054 <VL53L0X_get_total_xtalk_rate>
 80093de:	4603      	mov	r3, r0
 80093e0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80093ea:	fb02 f303 	mul.w	r3, r2, r3
 80093ee:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80093f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093f2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80093f6:	0c1b      	lsrs	r3, r3, #16
 80093f8:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009400:	fb02 f303 	mul.w	r3, r2, r3
 8009404:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8009408:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800940c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800940e:	429a      	cmp	r2, r3
 8009410:	d902      	bls.n	8009418 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8009412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009414:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8009418:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800941c:	2b00      	cmp	r3, #0
 800941e:	d168      	bne.n	80094f2 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009426:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8009430:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8009434:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009438:	461a      	mov	r2, r3
 800943a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f7fe feae 	bl	80081a0 <VL53L0X_calc_timeout_mclks>
 8009444:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800944c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8009456:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800945a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800945e:	461a      	mov	r2, r3
 8009460:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	f7fe fe9b 	bl	80081a0 <VL53L0X_calc_timeout_mclks>
 800946a:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800946c:	2303      	movs	r3, #3
 800946e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8009472:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009476:	2b08      	cmp	r3, #8
 8009478:	d102      	bne.n	8009480 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800947a:	2302      	movs	r3, #2
 800947c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8009480:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009484:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8009486:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800948a:	fb02 f303 	mul.w	r3, r2, r3
 800948e:	02db      	lsls	r3, r3, #11
 8009490:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8009494:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009498:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800949c:	4a53      	ldr	r2, [pc, #332]	; (80095ec <VL53L0X_calc_sigma_estimate+0x2b0>)
 800949e:	fba2 2303 	umull	r2, r3, r2, r3
 80094a2:	099b      	lsrs	r3, r3, #6
 80094a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 80094a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80094ae:	fb02 f303 	mul.w	r3, r2, r3
 80094b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80094b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094ba:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80094be:	4a4b      	ldr	r2, [pc, #300]	; (80095ec <VL53L0X_calc_sigma_estimate+0x2b0>)
 80094c0:	fba2 2303 	umull	r2, r3, r2, r3
 80094c4:	099b      	lsrs	r3, r3, #6
 80094c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	3380      	adds	r3, #128	; 0x80
 80094ce:	0a1b      	lsrs	r3, r3, #8
 80094d0:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80094d2:	693a      	ldr	r2, [r7, #16]
 80094d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094d8:	fb02 f303 	mul.w	r3, r2, r3
 80094dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80094e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80094e4:	3380      	adds	r3, #128	; 0x80
 80094e6:	0a1b      	lsrs	r3, r3, #8
 80094e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	021b      	lsls	r3, r3, #8
 80094f0:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 80094f2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d002      	beq.n	8009500 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 80094fa:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80094fe:	e165      	b.n	80097cc <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 8009500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009502:	2b00      	cmp	r3, #0
 8009504:	d10c      	bne.n	8009520 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800950c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009514:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	2200      	movs	r2, #0
 800951c:	601a      	str	r2, [r3, #0]
 800951e:	e153      	b.n	80097c8 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 8009520:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009524:	2b00      	cmp	r3, #0
 8009526:	d102      	bne.n	800952e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8009528:	2301      	movs	r3, #1
 800952a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800952e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009532:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8009534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009536:	041a      	lsls	r2, r3, #16
 8009538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800953a:	fbb2 f3f3 	udiv	r3, r2, r3
 800953e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8009542:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009548:	429a      	cmp	r2, r3
 800954a:	d902      	bls.n	8009552 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800954c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800954e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8009552:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009556:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800955a:	fb02 f303 	mul.w	r3, r2, r3
 800955e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8009562:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009566:	4613      	mov	r3, r2
 8009568:	005b      	lsls	r3, r3, #1
 800956a:	4413      	add	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4618      	mov	r0, r3
 8009570:	f7fe f872 	bl	8007658 <VL53L0X_isqrt>
 8009574:	4603      	mov	r3, r0
 8009576:	005b      	lsls	r3, r3, #1
 8009578:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	891b      	ldrh	r3, [r3, #8]
 800957e:	461a      	mov	r2, r3
 8009580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009582:	fb02 f303 	mul.w	r3, r2, r3
 8009586:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800958a:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800958c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009590:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009592:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009594:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009598:	4a14      	ldr	r2, [pc, #80]	; (80095ec <VL53L0X_calc_sigma_estimate+0x2b0>)
 800959a:	fba2 2303 	umull	r2, r3, r2, r3
 800959e:	099b      	lsrs	r3, r3, #6
 80095a0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80095a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095a4:	041b      	lsls	r3, r3, #16
 80095a6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80095aa:	4a10      	ldr	r2, [pc, #64]	; (80095ec <VL53L0X_calc_sigma_estimate+0x2b0>)
 80095ac:	fba2 2303 	umull	r2, r3, r2, r3
 80095b0:	099b      	lsrs	r3, r3, #6
 80095b2:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 80095b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095b6:	021b      	lsls	r3, r3, #8
 80095b8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80095ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80095bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095be:	fbb2 f3f3 	udiv	r3, r2, r3
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	bfb8      	it	lt
 80095c6:	425b      	neglt	r3, r3
 80095c8:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 80095ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095cc:	021b      	lsls	r3, r3, #8
 80095ce:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	7e1b      	ldrb	r3, [r3, #24]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00b      	beq.n	80095f0 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 80095d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80095dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80095e0:	e035      	b.n	800964e <VL53L0X_calc_sigma_estimate+0x312>
 80095e2:	bf00      	nop
 80095e4:	028f87ae 	.word	0x028f87ae
 80095e8:	0006999a 	.word	0x0006999a
 80095ec:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 80095f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80095fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 80095fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009600:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8009604:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009608:	fb02 f303 	mul.w	r3, r2, r3
 800960c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8009610:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009614:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009616:	4413      	add	r3, r2
 8009618:	0c1b      	lsrs	r3, r3, #16
 800961a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800961e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009622:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009626:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800962a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800962e:	085b      	lsrs	r3, r3, #1
 8009630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8009634:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009638:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800963c:	fb02 f303 	mul.w	r3, r2, r3
 8009640:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8009644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009648:	0b9b      	lsrs	r3, r3, #14
 800964a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800964e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009652:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009654:	fb02 f303 	mul.w	r3, r2, r3
 8009658:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800965a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009660:	0c1b      	lsrs	r3, r3, #16
 8009662:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8009664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009666:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009668:	fb02 f303 	mul.w	r3, r2, r3
 800966c:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800966e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009672:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8009674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009676:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800967a:	0c1b      	lsrs	r3, r3, #16
 800967c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800967e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009682:	fb02 f303 	mul.w	r3, r2, r3
 8009686:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8009688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800968a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968c:	4413      	add	r3, r2
 800968e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8009690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009692:	f7fd ffe1 	bl	8007658 <VL53L0X_isqrt>
 8009696:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8009698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969a:	041b      	lsls	r3, r3, #16
 800969c:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800969e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a0:	3332      	adds	r3, #50	; 0x32
 80096a2:	4a4c      	ldr	r2, [pc, #304]	; (80097d4 <VL53L0X_calc_sigma_estimate+0x498>)
 80096a4:	fba2 2303 	umull	r2, r3, r2, r3
 80096a8:	095a      	lsrs	r2, r3, #5
 80096aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80096b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80096b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80096b8:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80096bc:	fb02 f303 	mul.w	r3, r2, r3
 80096c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80096c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80096c8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80096cc:	3308      	adds	r3, #8
 80096ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 80096d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80096d6:	4a40      	ldr	r2, [pc, #256]	; (80097d8 <VL53L0X_calc_sigma_estimate+0x49c>)
 80096d8:	fba2 2303 	umull	r2, r3, r2, r3
 80096dc:	0b5b      	lsrs	r3, r3, #13
 80096de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80096e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80096e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d902      	bls.n	80096f2 <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80096ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80096ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 80096f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80096f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80096fa:	4413      	add	r3, r2
 80096fc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8009700:	4a36      	ldr	r2, [pc, #216]	; (80097dc <VL53L0X_calc_sigma_estimate+0x4a0>)
 8009702:	fba2 2303 	umull	r2, r3, r2, r3
 8009706:	099b      	lsrs	r3, r3, #6
 8009708:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800970a:	6a3b      	ldr	r3, [r7, #32]
 800970c:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800970e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009712:	441a      	add	r2, r3
 8009714:	6a3b      	ldr	r3, [r7, #32]
 8009716:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 800971a:	4618      	mov	r0, r3
 800971c:	f7fd ff9c 	bl	8007658 <VL53L0X_isqrt>
 8009720:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	021b      	lsls	r3, r3, #8
 8009726:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800972e:	4a2b      	ldr	r2, [pc, #172]	; (80097dc <VL53L0X_calc_sigma_estimate+0x4a0>)
 8009730:	fba2 2303 	umull	r2, r3, r2, r3
 8009734:	099b      	lsrs	r3, r3, #6
 8009736:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8009738:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800973c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009740:	fb02 f303 	mul.w	r3, r2, r3
 8009744:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	69fa      	ldr	r2, [r7, #28]
 800974a:	fb02 f303 	mul.w	r3, r2, r3
 800974e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8009750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009754:	4413      	add	r3, r2
 8009756:	4618      	mov	r0, r3
 8009758:	f7fd ff7e 	bl	8007658 <VL53L0X_isqrt>
 800975c:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009764:	fb02 f303 	mul.w	r3, r2, r3
 8009768:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800976c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800976e:	2b00      	cmp	r3, #0
 8009770:	d009      	beq.n	8009786 <VL53L0X_calc_sigma_estimate+0x44a>
 8009772:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009776:	2b00      	cmp	r3, #0
 8009778:	d005      	beq.n	8009786 <VL53L0X_calc_sigma_estimate+0x44a>
 800977a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800977e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009782:	429a      	cmp	r2, r3
 8009784:	d903      	bls.n	800978e <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8009786:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800978a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009794:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 80097a0:	6939      	ldr	r1, [r7, #16]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	9303      	str	r3, [sp, #12]
 80097a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80097aa:	9302      	str	r3, [sp, #8]
 80097ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80097b0:	9301      	str	r3, [sp, #4]
 80097b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80097ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f7ff fc9d 	bl	80090fc <VL53L0X_calc_dmax>
 80097c2:	4603      	mov	r3, r0
 80097c4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80097c8:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	37c0      	adds	r7, #192	; 0xc0
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	51eb851f 	.word	0x51eb851f
 80097d8:	d1b71759 	.word	0xd1b71759
 80097dc:	10624dd3 	.word	0x10624dd3

080097e0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b090      	sub	sp, #64	; 0x40
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	607a      	str	r2, [r7, #4]
 80097ea:	461a      	mov	r2, r3
 80097ec:	460b      	mov	r3, r1
 80097ee:	72fb      	strb	r3, [r7, #11]
 80097f0:	4613      	mov	r3, r2
 80097f2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097f4:	2300      	movs	r3, #0
 80097f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80097fa:	2300      	movs	r3, #0
 80097fc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8009800:	2300      	movs	r3, #0
 8009802:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8009806:	2300      	movs	r3, #0
 8009808:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800980c:	2300      	movs	r3, #0
 800980e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8009812:	2300      	movs	r3, #0
 8009814:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8009818:	2300      	movs	r3, #0
 800981a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800981e:	2300      	movs	r3, #0
 8009820:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8009824:	2300      	movs	r3, #0
 8009826:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800982a:	2300      	movs	r3, #0
 800982c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800982e:	2300      	movs	r3, #0
 8009830:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8009832:	7afb      	ldrb	r3, [r7, #11]
 8009834:	10db      	asrs	r3, r3, #3
 8009836:	b2db      	uxtb	r3, r3
 8009838:	f003 030f 	and.w	r3, r3, #15
 800983c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8009840:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009844:	2b00      	cmp	r3, #0
 8009846:	d017      	beq.n	8009878 <VL53L0X_get_pal_range_status+0x98>
 8009848:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800984c:	2b05      	cmp	r3, #5
 800984e:	d013      	beq.n	8009878 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8009850:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009854:	2b07      	cmp	r3, #7
 8009856:	d00f      	beq.n	8009878 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8009858:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800985c:	2b0c      	cmp	r3, #12
 800985e:	d00b      	beq.n	8009878 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8009860:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009864:	2b0d      	cmp	r3, #13
 8009866:	d007      	beq.n	8009878 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8009868:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800986c:	2b0e      	cmp	r3, #14
 800986e:	d003      	beq.n	8009878 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8009870:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009874:	2b0f      	cmp	r3, #15
 8009876:	d103      	bne.n	8009880 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8009878:	2301      	movs	r3, #1
 800987a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800987e:	e002      	b.n	8009886 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8009880:	2300      	movs	r3, #0
 8009882:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009886:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800988a:	2b00      	cmp	r3, #0
 800988c:	d109      	bne.n	80098a2 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800988e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009892:	461a      	mov	r2, r3
 8009894:	2100      	movs	r1, #0
 8009896:	68f8      	ldr	r0, [r7, #12]
 8009898:	f7fc f9e2 	bl	8005c60 <VL53L0X_GetLimitCheckEnable>
 800989c:	4603      	mov	r3, r0
 800989e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80098a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d02e      	beq.n	8009908 <VL53L0X_get_pal_range_status+0x128>
 80098aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d12a      	bne.n	8009908 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80098b2:	f107 0310 	add.w	r3, r7, #16
 80098b6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80098ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f7ff fd3d 	bl	800933c <VL53L0X_calc_sigma_estimate>
 80098c2:	4603      	mov	r3, r0
 80098c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80098c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d103      	bne.n	80098d8 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098d6:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80098d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d113      	bne.n	8009908 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80098e0:	f107 0320 	add.w	r3, r7, #32
 80098e4:	461a      	mov	r2, r3
 80098e6:	2100      	movs	r1, #0
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f7fc fa3f 	bl	8005d6c <VL53L0X_GetLimitCheckValue>
 80098ee:	4603      	mov	r3, r0
 80098f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d006      	beq.n	8009908 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 80098fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098fc:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 80098fe:	429a      	cmp	r2, r3
 8009900:	d902      	bls.n	8009908 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8009902:	2301      	movs	r3, #1
 8009904:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009908:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800990c:	2b00      	cmp	r3, #0
 800990e:	d109      	bne.n	8009924 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009910:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8009914:	461a      	mov	r2, r3
 8009916:	2102      	movs	r1, #2
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f7fc f9a1 	bl	8005c60 <VL53L0X_GetLimitCheckEnable>
 800991e:	4603      	mov	r3, r0
 8009920:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8009924:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009928:	2b00      	cmp	r3, #0
 800992a:	d044      	beq.n	80099b6 <VL53L0X_get_pal_range_status+0x1d6>
 800992c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009930:	2b00      	cmp	r3, #0
 8009932:	d140      	bne.n	80099b6 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8009934:	f107 031c 	add.w	r3, r7, #28
 8009938:	461a      	mov	r2, r3
 800993a:	2102      	movs	r1, #2
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f7fc fa15 	bl	8005d6c <VL53L0X_GetLimitCheckValue>
 8009942:	4603      	mov	r3, r0
 8009944:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8009948:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800994c:	2b00      	cmp	r3, #0
 800994e:	d107      	bne.n	8009960 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009950:	2201      	movs	r2, #1
 8009952:	21ff      	movs	r1, #255	; 0xff
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f000 f9bb 	bl	8009cd0 <VL53L0X_WrByte>
 800995a:	4603      	mov	r3, r0
 800995c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8009960:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009964:	2b00      	cmp	r3, #0
 8009966:	d109      	bne.n	800997c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8009968:	f107 0316 	add.w	r3, r7, #22
 800996c:	461a      	mov	r2, r3
 800996e:	21b6      	movs	r1, #182	; 0xb6
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f000 fa59 	bl	8009e28 <VL53L0X_RdWord>
 8009976:	4603      	mov	r3, r0
 8009978:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800997c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009980:	2b00      	cmp	r3, #0
 8009982:	d107      	bne.n	8009994 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009984:	2200      	movs	r2, #0
 8009986:	21ff      	movs	r1, #255	; 0xff
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f000 f9a1 	bl	8009cd0 <VL53L0X_WrByte>
 800998e:	4603      	mov	r3, r0
 8009990:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8009994:	8afb      	ldrh	r3, [r7, #22]
 8009996:	025b      	lsls	r3, r3, #9
 8009998:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800999e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d006      	beq.n	80099b6 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80099a8:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80099aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d902      	bls.n	80099b6 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80099b0:	2301      	movs	r3, #1
 80099b2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80099b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d109      	bne.n	80099d2 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80099be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80099c2:	461a      	mov	r2, r3
 80099c4:	2103      	movs	r1, #3
 80099c6:	68f8      	ldr	r0, [r7, #12]
 80099c8:	f7fc f94a 	bl	8005c60 <VL53L0X_GetLimitCheckEnable>
 80099cc:	4603      	mov	r3, r0
 80099ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80099d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d023      	beq.n	8009a22 <VL53L0X_get_pal_range_status+0x242>
 80099da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d11f      	bne.n	8009a22 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80099e2:	893b      	ldrh	r3, [r7, #8]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d102      	bne.n	80099ee <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	637b      	str	r3, [r7, #52]	; 0x34
 80099ec:	e005      	b.n	80099fa <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	021a      	lsls	r2, r3, #8
 80099f2:	893b      	ldrh	r3, [r7, #8]
 80099f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80099f8:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80099fa:	f107 0318 	add.w	r3, r7, #24
 80099fe:	461a      	mov	r2, r3
 8009a00:	2103      	movs	r1, #3
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f7fc f9b2 	bl	8005d6c <VL53L0X_GetLimitCheckValue>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d006      	beq.n	8009a22 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8009a14:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8009a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d202      	bcs.n	8009a22 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009a22:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d14a      	bne.n	8009ac0 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8009a2a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d103      	bne.n	8009a3a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8009a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a34:	22ff      	movs	r2, #255	; 0xff
 8009a36:	701a      	strb	r2, [r3, #0]
 8009a38:	e042      	b.n	8009ac0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8009a3a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d007      	beq.n	8009a52 <VL53L0X_get_pal_range_status+0x272>
 8009a42:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d003      	beq.n	8009a52 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8009a4a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009a4e:	2b03      	cmp	r3, #3
 8009a50:	d103      	bne.n	8009a5a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8009a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a54:	2205      	movs	r2, #5
 8009a56:	701a      	strb	r2, [r3, #0]
 8009a58:	e032      	b.n	8009ac0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8009a5a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009a5e:	2b06      	cmp	r3, #6
 8009a60:	d003      	beq.n	8009a6a <VL53L0X_get_pal_range_status+0x28a>
 8009a62:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009a66:	2b09      	cmp	r3, #9
 8009a68:	d103      	bne.n	8009a72 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8009a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a6c:	2204      	movs	r2, #4
 8009a6e:	701a      	strb	r2, [r3, #0]
 8009a70:	e026      	b.n	8009ac0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8009a72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009a76:	2b08      	cmp	r3, #8
 8009a78:	d007      	beq.n	8009a8a <VL53L0X_get_pal_range_status+0x2aa>
 8009a7a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009a7e:	2b0a      	cmp	r3, #10
 8009a80:	d003      	beq.n	8009a8a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8009a82:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d103      	bne.n	8009a92 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8009a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a8c:	2203      	movs	r2, #3
 8009a8e:	701a      	strb	r2, [r3, #0]
 8009a90:	e016      	b.n	8009ac0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8009a92:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009a96:	2b04      	cmp	r3, #4
 8009a98:	d003      	beq.n	8009aa2 <VL53L0X_get_pal_range_status+0x2c2>
 8009a9a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d103      	bne.n	8009aaa <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8009aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aa4:	2202      	movs	r2, #2
 8009aa6:	701a      	strb	r2, [r3, #0]
 8009aa8:	e00a      	b.n	8009ac0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8009aaa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d103      	bne.n	8009aba <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8009ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	701a      	strb	r2, [r3, #0]
 8009ab8:	e002      	b.n	8009ac0 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8009aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009abc:	2200      	movs	r2, #0
 8009abe:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8009ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d102      	bne.n	8009ace <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8009ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009aca:	2200      	movs	r2, #0
 8009acc:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009ace:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	2101      	movs	r1, #1
 8009ad6:	68f8      	ldr	r0, [r7, #12]
 8009ad8:	f7fc f8c2 	bl	8005c60 <VL53L0X_GetLimitCheckEnable>
 8009adc:	4603      	mov	r3, r0
 8009ade:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8009ae2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d14f      	bne.n	8009b8a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8009aea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d003      	beq.n	8009afa <VL53L0X_get_pal_range_status+0x31a>
 8009af2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d103      	bne.n	8009b02 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8009afa:	2301      	movs	r3, #1
 8009afc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b00:	e002      	b.n	8009b08 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8009b02:	2300      	movs	r3, #0
 8009b04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009b0e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8009b12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009b16:	2b04      	cmp	r3, #4
 8009b18:	d003      	beq.n	8009b22 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8009b1a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d103      	bne.n	8009b2a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8009b22:	2301      	movs	r3, #1
 8009b24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b28:	e002      	b.n	8009b30 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009b36:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8009b3a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d003      	beq.n	8009b4a <VL53L0X_get_pal_range_status+0x36a>
 8009b42:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d103      	bne.n	8009b52 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b50:	e002      	b.n	8009b58 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8009b52:	2300      	movs	r3, #0
 8009b54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009b5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8009b62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d003      	beq.n	8009b72 <VL53L0X_get_pal_range_status+0x392>
 8009b6a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d103      	bne.n	8009b7a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8009b72:	2301      	movs	r3, #1
 8009b74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b78:	e002      	b.n	8009b80 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009b86:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009b8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3740      	adds	r7, #64	; 0x40
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b088      	sub	sp, #32
 8009b9a:	af02      	add	r7, sp, #8
 8009b9c:	60f8      	str	r0, [r7, #12]
 8009b9e:	60b9      	str	r1, [r7, #8]
 8009ba0:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	330a      	adds	r3, #10
 8009ba6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8009bb4:	b299      	uxth	r1, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	9300      	str	r3, [sp, #0]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	68ba      	ldr	r2, [r7, #8]
 8009bc2:	f7f8 fa63 	bl	800208c <HAL_I2C_Master_Transmit>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8009bca:	693b      	ldr	r3, [r7, #16]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3718      	adds	r7, #24
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b088      	sub	sp, #32
 8009bd8:	af02      	add	r7, sp, #8
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	330a      	adds	r3, #10
 8009be4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8009bf2:	f043 0301 	orr.w	r3, r3, #1
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	b299      	uxth	r1, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	b29a      	uxth	r2, r3
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	4613      	mov	r3, r2
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	f7f8 fb35 	bl	8002274 <HAL_I2C_Master_Receive>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8009c0e:	693b      	ldr	r3, [r7, #16]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3718      	adds	r7, #24
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b086      	sub	sp, #24
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	607a      	str	r2, [r7, #4]
 8009c22:	603b      	str	r3, [r7, #0]
 8009c24:	460b      	mov	r3, r1
 8009c26:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	2b3f      	cmp	r3, #63	; 0x3f
 8009c30:	d902      	bls.n	8009c38 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8009c32:	f06f 0303 	mvn.w	r3, #3
 8009c36:	e016      	b.n	8009c66 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8009c38:	4a0d      	ldr	r2, [pc, #52]	; (8009c70 <VL53L0X_WriteMulti+0x58>)
 8009c3a:	7afb      	ldrb	r3, [r7, #11]
 8009c3c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8009c3e:	683a      	ldr	r2, [r7, #0]
 8009c40:	6879      	ldr	r1, [r7, #4]
 8009c42:	480c      	ldr	r0, [pc, #48]	; (8009c74 <VL53L0X_WriteMulti+0x5c>)
 8009c44:	f000 f99e 	bl	8009f84 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	4908      	ldr	r1, [pc, #32]	; (8009c70 <VL53L0X_WriteMulti+0x58>)
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f7ff ffa0 	bl	8009b96 <_I2CWrite>
 8009c56:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009c5e:	23ec      	movs	r3, #236	; 0xec
 8009c60:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8009c62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3718      	adds	r7, #24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	200007f0 	.word	0x200007f0
 8009c74:	200007f1 	.word	0x200007f1

08009c78 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b086      	sub	sp, #24
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	607a      	str	r2, [r7, #4]
 8009c82:	603b      	str	r3, [r7, #0]
 8009c84:	460b      	mov	r3, r1
 8009c86:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009c8c:	f107 030b 	add.w	r3, r7, #11
 8009c90:	2201      	movs	r2, #1
 8009c92:	4619      	mov	r1, r3
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f7ff ff7e 	bl	8009b96 <_I2CWrite>
 8009c9a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d002      	beq.n	8009ca8 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009ca2:	23ec      	movs	r3, #236	; 0xec
 8009ca4:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009ca6:	e00c      	b.n	8009cc2 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8009ca8:	683a      	ldr	r2, [r7, #0]
 8009caa:	6879      	ldr	r1, [r7, #4]
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f7ff ff91 	bl	8009bd4 <_I2CRead>
 8009cb2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d002      	beq.n	8009cc0 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009cba:	23ec      	movs	r3, #236	; 0xec
 8009cbc:	75fb      	strb	r3, [r7, #23]
 8009cbe:	e000      	b.n	8009cc2 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8009cc0:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8009cc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3718      	adds	r7, #24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
	...

08009cd0 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	460b      	mov	r3, r1
 8009cda:	70fb      	strb	r3, [r7, #3]
 8009cdc:	4613      	mov	r3, r2
 8009cde:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8009ce4:	4a0b      	ldr	r2, [pc, #44]	; (8009d14 <VL53L0X_WrByte+0x44>)
 8009ce6:	78fb      	ldrb	r3, [r7, #3]
 8009ce8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8009cea:	4a0a      	ldr	r2, [pc, #40]	; (8009d14 <VL53L0X_WrByte+0x44>)
 8009cec:	78bb      	ldrb	r3, [r7, #2]
 8009cee:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8009cf0:	2202      	movs	r2, #2
 8009cf2:	4908      	ldr	r1, [pc, #32]	; (8009d14 <VL53L0X_WrByte+0x44>)
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7ff ff4e 	bl	8009b96 <_I2CWrite>
 8009cfa:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009d02:	23ec      	movs	r3, #236	; 0xec
 8009d04:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8009d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	200007f0 	.word	0x200007f0

08009d18 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	460b      	mov	r3, r1
 8009d22:	70fb      	strb	r3, [r7, #3]
 8009d24:	4613      	mov	r3, r2
 8009d26:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8009d2c:	4a0e      	ldr	r2, [pc, #56]	; (8009d68 <VL53L0X_WrWord+0x50>)
 8009d2e:	78fb      	ldrb	r3, [r7, #3]
 8009d30:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8009d32:	883b      	ldrh	r3, [r7, #0]
 8009d34:	0a1b      	lsrs	r3, r3, #8
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	b2da      	uxtb	r2, r3
 8009d3a:	4b0b      	ldr	r3, [pc, #44]	; (8009d68 <VL53L0X_WrWord+0x50>)
 8009d3c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8009d3e:	883b      	ldrh	r3, [r7, #0]
 8009d40:	b2da      	uxtb	r2, r3
 8009d42:	4b09      	ldr	r3, [pc, #36]	; (8009d68 <VL53L0X_WrWord+0x50>)
 8009d44:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8009d46:	2203      	movs	r2, #3
 8009d48:	4907      	ldr	r1, [pc, #28]	; (8009d68 <VL53L0X_WrWord+0x50>)
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f7ff ff23 	bl	8009b96 <_I2CWrite>
 8009d50:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d001      	beq.n	8009d5c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009d58:	23ec      	movs	r3, #236	; 0xec
 8009d5a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8009d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	200007f0 	.word	0x200007f0

08009d6c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	4608      	mov	r0, r1
 8009d76:	4611      	mov	r1, r2
 8009d78:	461a      	mov	r2, r3
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	70fb      	strb	r3, [r7, #3]
 8009d7e:	460b      	mov	r3, r1
 8009d80:	70bb      	strb	r3, [r7, #2]
 8009d82:	4613      	mov	r3, r2
 8009d84:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d86:	2300      	movs	r3, #0
 8009d88:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8009d8a:	f107 020e 	add.w	r2, r7, #14
 8009d8e:	78fb      	ldrb	r3, [r7, #3]
 8009d90:	4619      	mov	r1, r3
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f81e 	bl	8009dd4 <VL53L0X_RdByte>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8009d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d110      	bne.n	8009dc6 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8009da4:	7bba      	ldrb	r2, [r7, #14]
 8009da6:	78bb      	ldrb	r3, [r7, #2]
 8009da8:	4013      	ands	r3, r2
 8009daa:	b2da      	uxtb	r2, r3
 8009dac:	787b      	ldrb	r3, [r7, #1]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8009db4:	7bba      	ldrb	r2, [r7, #14]
 8009db6:	78fb      	ldrb	r3, [r7, #3]
 8009db8:	4619      	mov	r1, r3
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f7ff ff88 	bl	8009cd0 <VL53L0X_WrByte>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	73fb      	strb	r3, [r7, #15]
 8009dc4:	e000      	b.n	8009dc8 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8009dc6:	bf00      	nop
done:
    return Status;
 8009dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	607a      	str	r2, [r7, #4]
 8009de0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009de2:	2300      	movs	r3, #0
 8009de4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009de6:	f107 030b 	add.w	r3, r7, #11
 8009dea:	2201      	movs	r2, #1
 8009dec:	4619      	mov	r1, r3
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f7ff fed1 	bl	8009b96 <_I2CWrite>
 8009df4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d002      	beq.n	8009e02 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009dfc:	23ec      	movs	r3, #236	; 0xec
 8009dfe:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009e00:	e00c      	b.n	8009e1c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8009e02:	2201      	movs	r2, #1
 8009e04:	6879      	ldr	r1, [r7, #4]
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	f7ff fee4 	bl	8009bd4 <_I2CRead>
 8009e0c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d002      	beq.n	8009e1a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009e14:	23ec      	movs	r3, #236	; 0xec
 8009e16:	75fb      	strb	r3, [r7, #23]
 8009e18:	e000      	b.n	8009e1c <VL53L0X_RdByte+0x48>
    }
done:
 8009e1a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8009e1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3718      	adds	r7, #24
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b086      	sub	sp, #24
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	460b      	mov	r3, r1
 8009e32:	607a      	str	r2, [r7, #4]
 8009e34:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e36:	2300      	movs	r3, #0
 8009e38:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009e3a:	f107 030b 	add.w	r3, r7, #11
 8009e3e:	2201      	movs	r2, #1
 8009e40:	4619      	mov	r1, r3
 8009e42:	68f8      	ldr	r0, [r7, #12]
 8009e44:	f7ff fea7 	bl	8009b96 <_I2CWrite>
 8009e48:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d002      	beq.n	8009e56 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009e50:	23ec      	movs	r3, #236	; 0xec
 8009e52:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009e54:	e017      	b.n	8009e86 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8009e56:	2202      	movs	r2, #2
 8009e58:	490e      	ldr	r1, [pc, #56]	; (8009e94 <VL53L0X_RdWord+0x6c>)
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f7ff feba 	bl	8009bd4 <_I2CRead>
 8009e60:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d002      	beq.n	8009e6e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009e68:	23ec      	movs	r3, #236	; 0xec
 8009e6a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009e6c:	e00b      	b.n	8009e86 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8009e6e:	4b09      	ldr	r3, [pc, #36]	; (8009e94 <VL53L0X_RdWord+0x6c>)
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	021b      	lsls	r3, r3, #8
 8009e76:	b29a      	uxth	r2, r3
 8009e78:	4b06      	ldr	r3, [pc, #24]	; (8009e94 <VL53L0X_RdWord+0x6c>)
 8009e7a:	785b      	ldrb	r3, [r3, #1]
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	4413      	add	r3, r2
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8009e86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3718      	adds	r7, #24
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	200007f0 	.word	0x200007f0

08009e98 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b086      	sub	sp, #24
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	607a      	str	r2, [r7, #4]
 8009ea4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009eaa:	f107 030b 	add.w	r3, r7, #11
 8009eae:	2201      	movs	r2, #1
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f7ff fe6f 	bl	8009b96 <_I2CWrite>
 8009eb8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d002      	beq.n	8009ec6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009ec0:	23ec      	movs	r3, #236	; 0xec
 8009ec2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009ec4:	e01b      	b.n	8009efe <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8009ec6:	2204      	movs	r2, #4
 8009ec8:	4910      	ldr	r1, [pc, #64]	; (8009f0c <VL53L0X_RdDWord+0x74>)
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f7ff fe82 	bl	8009bd4 <_I2CRead>
 8009ed0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009ed8:	23ec      	movs	r3, #236	; 0xec
 8009eda:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009edc:	e00f      	b.n	8009efe <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8009ede:	4b0b      	ldr	r3, [pc, #44]	; (8009f0c <VL53L0X_RdDWord+0x74>)
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	061a      	lsls	r2, r3, #24
 8009ee4:	4b09      	ldr	r3, [pc, #36]	; (8009f0c <VL53L0X_RdDWord+0x74>)
 8009ee6:	785b      	ldrb	r3, [r3, #1]
 8009ee8:	041b      	lsls	r3, r3, #16
 8009eea:	441a      	add	r2, r3
 8009eec:	4b07      	ldr	r3, [pc, #28]	; (8009f0c <VL53L0X_RdDWord+0x74>)
 8009eee:	789b      	ldrb	r3, [r3, #2]
 8009ef0:	021b      	lsls	r3, r3, #8
 8009ef2:	4413      	add	r3, r2
 8009ef4:	4a05      	ldr	r2, [pc, #20]	; (8009f0c <VL53L0X_RdDWord+0x74>)
 8009ef6:	78d2      	ldrb	r2, [r2, #3]
 8009ef8:	441a      	add	r2, r3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8009efe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3718      	adds	r7, #24
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	200007f0 	.word	0x200007f0

08009f10 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8009f1c:	2002      	movs	r0, #2
 8009f1e:	f7f7 fcf1 	bl	8001904 <HAL_Delay>
    return status;
 8009f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
	...

08009f30 <__errno>:
 8009f30:	4b01      	ldr	r3, [pc, #4]	; (8009f38 <__errno+0x8>)
 8009f32:	6818      	ldr	r0, [r3, #0]
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop
 8009f38:	200002d4 	.word	0x200002d4

08009f3c <__libc_init_array>:
 8009f3c:	b570      	push	{r4, r5, r6, lr}
 8009f3e:	4e0d      	ldr	r6, [pc, #52]	; (8009f74 <__libc_init_array+0x38>)
 8009f40:	4c0d      	ldr	r4, [pc, #52]	; (8009f78 <__libc_init_array+0x3c>)
 8009f42:	1ba4      	subs	r4, r4, r6
 8009f44:	10a4      	asrs	r4, r4, #2
 8009f46:	2500      	movs	r5, #0
 8009f48:	42a5      	cmp	r5, r4
 8009f4a:	d109      	bne.n	8009f60 <__libc_init_array+0x24>
 8009f4c:	4e0b      	ldr	r6, [pc, #44]	; (8009f7c <__libc_init_array+0x40>)
 8009f4e:	4c0c      	ldr	r4, [pc, #48]	; (8009f80 <__libc_init_array+0x44>)
 8009f50:	f002 fa30 	bl	800c3b4 <_init>
 8009f54:	1ba4      	subs	r4, r4, r6
 8009f56:	10a4      	asrs	r4, r4, #2
 8009f58:	2500      	movs	r5, #0
 8009f5a:	42a5      	cmp	r5, r4
 8009f5c:	d105      	bne.n	8009f6a <__libc_init_array+0x2e>
 8009f5e:	bd70      	pop	{r4, r5, r6, pc}
 8009f60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f64:	4798      	blx	r3
 8009f66:	3501      	adds	r5, #1
 8009f68:	e7ee      	b.n	8009f48 <__libc_init_array+0xc>
 8009f6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f6e:	4798      	blx	r3
 8009f70:	3501      	adds	r5, #1
 8009f72:	e7f2      	b.n	8009f5a <__libc_init_array+0x1e>
 8009f74:	0800c9e8 	.word	0x0800c9e8
 8009f78:	0800c9e8 	.word	0x0800c9e8
 8009f7c:	0800c9e8 	.word	0x0800c9e8
 8009f80:	0800c9ec 	.word	0x0800c9ec

08009f84 <memcpy>:
 8009f84:	b510      	push	{r4, lr}
 8009f86:	1e43      	subs	r3, r0, #1
 8009f88:	440a      	add	r2, r1
 8009f8a:	4291      	cmp	r1, r2
 8009f8c:	d100      	bne.n	8009f90 <memcpy+0xc>
 8009f8e:	bd10      	pop	{r4, pc}
 8009f90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f98:	e7f7      	b.n	8009f8a <memcpy+0x6>

08009f9a <memset>:
 8009f9a:	4402      	add	r2, r0
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d100      	bne.n	8009fa4 <memset+0xa>
 8009fa2:	4770      	bx	lr
 8009fa4:	f803 1b01 	strb.w	r1, [r3], #1
 8009fa8:	e7f9      	b.n	8009f9e <memset+0x4>
	...

08009fac <iprintf>:
 8009fac:	b40f      	push	{r0, r1, r2, r3}
 8009fae:	4b0a      	ldr	r3, [pc, #40]	; (8009fd8 <iprintf+0x2c>)
 8009fb0:	b513      	push	{r0, r1, r4, lr}
 8009fb2:	681c      	ldr	r4, [r3, #0]
 8009fb4:	b124      	cbz	r4, 8009fc0 <iprintf+0x14>
 8009fb6:	69a3      	ldr	r3, [r4, #24]
 8009fb8:	b913      	cbnz	r3, 8009fc0 <iprintf+0x14>
 8009fba:	4620      	mov	r0, r4
 8009fbc:	f000 fad0 	bl	800a560 <__sinit>
 8009fc0:	ab05      	add	r3, sp, #20
 8009fc2:	9a04      	ldr	r2, [sp, #16]
 8009fc4:	68a1      	ldr	r1, [r4, #8]
 8009fc6:	9301      	str	r3, [sp, #4]
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f000 fe45 	bl	800ac58 <_vfiprintf_r>
 8009fce:	b002      	add	sp, #8
 8009fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fd4:	b004      	add	sp, #16
 8009fd6:	4770      	bx	lr
 8009fd8:	200002d4 	.word	0x200002d4

08009fdc <_puts_r>:
 8009fdc:	b570      	push	{r4, r5, r6, lr}
 8009fde:	460e      	mov	r6, r1
 8009fe0:	4605      	mov	r5, r0
 8009fe2:	b118      	cbz	r0, 8009fec <_puts_r+0x10>
 8009fe4:	6983      	ldr	r3, [r0, #24]
 8009fe6:	b90b      	cbnz	r3, 8009fec <_puts_r+0x10>
 8009fe8:	f000 faba 	bl	800a560 <__sinit>
 8009fec:	69ab      	ldr	r3, [r5, #24]
 8009fee:	68ac      	ldr	r4, [r5, #8]
 8009ff0:	b913      	cbnz	r3, 8009ff8 <_puts_r+0x1c>
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	f000 fab4 	bl	800a560 <__sinit>
 8009ff8:	4b23      	ldr	r3, [pc, #140]	; (800a088 <_puts_r+0xac>)
 8009ffa:	429c      	cmp	r4, r3
 8009ffc:	d117      	bne.n	800a02e <_puts_r+0x52>
 8009ffe:	686c      	ldr	r4, [r5, #4]
 800a000:	89a3      	ldrh	r3, [r4, #12]
 800a002:	071b      	lsls	r3, r3, #28
 800a004:	d51d      	bpl.n	800a042 <_puts_r+0x66>
 800a006:	6923      	ldr	r3, [r4, #16]
 800a008:	b1db      	cbz	r3, 800a042 <_puts_r+0x66>
 800a00a:	3e01      	subs	r6, #1
 800a00c:	68a3      	ldr	r3, [r4, #8]
 800a00e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a012:	3b01      	subs	r3, #1
 800a014:	60a3      	str	r3, [r4, #8]
 800a016:	b9e9      	cbnz	r1, 800a054 <_puts_r+0x78>
 800a018:	2b00      	cmp	r3, #0
 800a01a:	da2e      	bge.n	800a07a <_puts_r+0x9e>
 800a01c:	4622      	mov	r2, r4
 800a01e:	210a      	movs	r1, #10
 800a020:	4628      	mov	r0, r5
 800a022:	f000 f8cb 	bl	800a1bc <__swbuf_r>
 800a026:	3001      	adds	r0, #1
 800a028:	d011      	beq.n	800a04e <_puts_r+0x72>
 800a02a:	200a      	movs	r0, #10
 800a02c:	e011      	b.n	800a052 <_puts_r+0x76>
 800a02e:	4b17      	ldr	r3, [pc, #92]	; (800a08c <_puts_r+0xb0>)
 800a030:	429c      	cmp	r4, r3
 800a032:	d101      	bne.n	800a038 <_puts_r+0x5c>
 800a034:	68ac      	ldr	r4, [r5, #8]
 800a036:	e7e3      	b.n	800a000 <_puts_r+0x24>
 800a038:	4b15      	ldr	r3, [pc, #84]	; (800a090 <_puts_r+0xb4>)
 800a03a:	429c      	cmp	r4, r3
 800a03c:	bf08      	it	eq
 800a03e:	68ec      	ldreq	r4, [r5, #12]
 800a040:	e7de      	b.n	800a000 <_puts_r+0x24>
 800a042:	4621      	mov	r1, r4
 800a044:	4628      	mov	r0, r5
 800a046:	f000 f91d 	bl	800a284 <__swsetup_r>
 800a04a:	2800      	cmp	r0, #0
 800a04c:	d0dd      	beq.n	800a00a <_puts_r+0x2e>
 800a04e:	f04f 30ff 	mov.w	r0, #4294967295
 800a052:	bd70      	pop	{r4, r5, r6, pc}
 800a054:	2b00      	cmp	r3, #0
 800a056:	da04      	bge.n	800a062 <_puts_r+0x86>
 800a058:	69a2      	ldr	r2, [r4, #24]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	dc06      	bgt.n	800a06c <_puts_r+0x90>
 800a05e:	290a      	cmp	r1, #10
 800a060:	d004      	beq.n	800a06c <_puts_r+0x90>
 800a062:	6823      	ldr	r3, [r4, #0]
 800a064:	1c5a      	adds	r2, r3, #1
 800a066:	6022      	str	r2, [r4, #0]
 800a068:	7019      	strb	r1, [r3, #0]
 800a06a:	e7cf      	b.n	800a00c <_puts_r+0x30>
 800a06c:	4622      	mov	r2, r4
 800a06e:	4628      	mov	r0, r5
 800a070:	f000 f8a4 	bl	800a1bc <__swbuf_r>
 800a074:	3001      	adds	r0, #1
 800a076:	d1c9      	bne.n	800a00c <_puts_r+0x30>
 800a078:	e7e9      	b.n	800a04e <_puts_r+0x72>
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	200a      	movs	r0, #10
 800a07e:	1c5a      	adds	r2, r3, #1
 800a080:	6022      	str	r2, [r4, #0]
 800a082:	7018      	strb	r0, [r3, #0]
 800a084:	e7e5      	b.n	800a052 <_puts_r+0x76>
 800a086:	bf00      	nop
 800a088:	0800c474 	.word	0x0800c474
 800a08c:	0800c494 	.word	0x0800c494
 800a090:	0800c454 	.word	0x0800c454

0800a094 <puts>:
 800a094:	4b02      	ldr	r3, [pc, #8]	; (800a0a0 <puts+0xc>)
 800a096:	4601      	mov	r1, r0
 800a098:	6818      	ldr	r0, [r3, #0]
 800a09a:	f7ff bf9f 	b.w	8009fdc <_puts_r>
 800a09e:	bf00      	nop
 800a0a0:	200002d4 	.word	0x200002d4

0800a0a4 <siscanf>:
 800a0a4:	b40e      	push	{r1, r2, r3}
 800a0a6:	b530      	push	{r4, r5, lr}
 800a0a8:	b09c      	sub	sp, #112	; 0x70
 800a0aa:	ac1f      	add	r4, sp, #124	; 0x7c
 800a0ac:	f44f 7201 	mov.w	r2, #516	; 0x204
 800a0b0:	f854 5b04 	ldr.w	r5, [r4], #4
 800a0b4:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a0b8:	9002      	str	r0, [sp, #8]
 800a0ba:	9006      	str	r0, [sp, #24]
 800a0bc:	f7f6 f888 	bl	80001d0 <strlen>
 800a0c0:	4b0b      	ldr	r3, [pc, #44]	; (800a0f0 <siscanf+0x4c>)
 800a0c2:	9003      	str	r0, [sp, #12]
 800a0c4:	9007      	str	r0, [sp, #28]
 800a0c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0c8:	480a      	ldr	r0, [pc, #40]	; (800a0f4 <siscanf+0x50>)
 800a0ca:	9401      	str	r4, [sp, #4]
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0d0:	9314      	str	r3, [sp, #80]	; 0x50
 800a0d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a0d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a0da:	462a      	mov	r2, r5
 800a0dc:	4623      	mov	r3, r4
 800a0de:	a902      	add	r1, sp, #8
 800a0e0:	6800      	ldr	r0, [r0, #0]
 800a0e2:	f000 fc3f 	bl	800a964 <__ssvfiscanf_r>
 800a0e6:	b01c      	add	sp, #112	; 0x70
 800a0e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0ec:	b003      	add	sp, #12
 800a0ee:	4770      	bx	lr
 800a0f0:	0800a11b 	.word	0x0800a11b
 800a0f4:	200002d4 	.word	0x200002d4

0800a0f8 <__sread>:
 800a0f8:	b510      	push	{r4, lr}
 800a0fa:	460c      	mov	r4, r1
 800a0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a100:	f001 f9a0 	bl	800b444 <_read_r>
 800a104:	2800      	cmp	r0, #0
 800a106:	bfab      	itete	ge
 800a108:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a10a:	89a3      	ldrhlt	r3, [r4, #12]
 800a10c:	181b      	addge	r3, r3, r0
 800a10e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a112:	bfac      	ite	ge
 800a114:	6563      	strge	r3, [r4, #84]	; 0x54
 800a116:	81a3      	strhlt	r3, [r4, #12]
 800a118:	bd10      	pop	{r4, pc}

0800a11a <__seofread>:
 800a11a:	2000      	movs	r0, #0
 800a11c:	4770      	bx	lr

0800a11e <__swrite>:
 800a11e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a122:	461f      	mov	r7, r3
 800a124:	898b      	ldrh	r3, [r1, #12]
 800a126:	05db      	lsls	r3, r3, #23
 800a128:	4605      	mov	r5, r0
 800a12a:	460c      	mov	r4, r1
 800a12c:	4616      	mov	r6, r2
 800a12e:	d505      	bpl.n	800a13c <__swrite+0x1e>
 800a130:	2302      	movs	r3, #2
 800a132:	2200      	movs	r2, #0
 800a134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a138:	f000 fa9c 	bl	800a674 <_lseek_r>
 800a13c:	89a3      	ldrh	r3, [r4, #12]
 800a13e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a142:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a146:	81a3      	strh	r3, [r4, #12]
 800a148:	4632      	mov	r2, r6
 800a14a:	463b      	mov	r3, r7
 800a14c:	4628      	mov	r0, r5
 800a14e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a152:	f000 b885 	b.w	800a260 <_write_r>

0800a156 <__sseek>:
 800a156:	b510      	push	{r4, lr}
 800a158:	460c      	mov	r4, r1
 800a15a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a15e:	f000 fa89 	bl	800a674 <_lseek_r>
 800a162:	1c43      	adds	r3, r0, #1
 800a164:	89a3      	ldrh	r3, [r4, #12]
 800a166:	bf15      	itete	ne
 800a168:	6560      	strne	r0, [r4, #84]	; 0x54
 800a16a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a16e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a172:	81a3      	strheq	r3, [r4, #12]
 800a174:	bf18      	it	ne
 800a176:	81a3      	strhne	r3, [r4, #12]
 800a178:	bd10      	pop	{r4, pc}

0800a17a <__sclose>:
 800a17a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a17e:	f000 b8ef 	b.w	800a360 <_close_r>

0800a182 <strcpy>:
 800a182:	4603      	mov	r3, r0
 800a184:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a188:	f803 2b01 	strb.w	r2, [r3], #1
 800a18c:	2a00      	cmp	r2, #0
 800a18e:	d1f9      	bne.n	800a184 <strcpy+0x2>
 800a190:	4770      	bx	lr

0800a192 <strncpy>:
 800a192:	b570      	push	{r4, r5, r6, lr}
 800a194:	3901      	subs	r1, #1
 800a196:	4604      	mov	r4, r0
 800a198:	b902      	cbnz	r2, 800a19c <strncpy+0xa>
 800a19a:	bd70      	pop	{r4, r5, r6, pc}
 800a19c:	4623      	mov	r3, r4
 800a19e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800a1a2:	f803 5b01 	strb.w	r5, [r3], #1
 800a1a6:	1e56      	subs	r6, r2, #1
 800a1a8:	b92d      	cbnz	r5, 800a1b6 <strncpy+0x24>
 800a1aa:	4414      	add	r4, r2
 800a1ac:	42a3      	cmp	r3, r4
 800a1ae:	d0f4      	beq.n	800a19a <strncpy+0x8>
 800a1b0:	f803 5b01 	strb.w	r5, [r3], #1
 800a1b4:	e7fa      	b.n	800a1ac <strncpy+0x1a>
 800a1b6:	461c      	mov	r4, r3
 800a1b8:	4632      	mov	r2, r6
 800a1ba:	e7ed      	b.n	800a198 <strncpy+0x6>

0800a1bc <__swbuf_r>:
 800a1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1be:	460e      	mov	r6, r1
 800a1c0:	4614      	mov	r4, r2
 800a1c2:	4605      	mov	r5, r0
 800a1c4:	b118      	cbz	r0, 800a1ce <__swbuf_r+0x12>
 800a1c6:	6983      	ldr	r3, [r0, #24]
 800a1c8:	b90b      	cbnz	r3, 800a1ce <__swbuf_r+0x12>
 800a1ca:	f000 f9c9 	bl	800a560 <__sinit>
 800a1ce:	4b21      	ldr	r3, [pc, #132]	; (800a254 <__swbuf_r+0x98>)
 800a1d0:	429c      	cmp	r4, r3
 800a1d2:	d12a      	bne.n	800a22a <__swbuf_r+0x6e>
 800a1d4:	686c      	ldr	r4, [r5, #4]
 800a1d6:	69a3      	ldr	r3, [r4, #24]
 800a1d8:	60a3      	str	r3, [r4, #8]
 800a1da:	89a3      	ldrh	r3, [r4, #12]
 800a1dc:	071a      	lsls	r2, r3, #28
 800a1de:	d52e      	bpl.n	800a23e <__swbuf_r+0x82>
 800a1e0:	6923      	ldr	r3, [r4, #16]
 800a1e2:	b363      	cbz	r3, 800a23e <__swbuf_r+0x82>
 800a1e4:	6923      	ldr	r3, [r4, #16]
 800a1e6:	6820      	ldr	r0, [r4, #0]
 800a1e8:	1ac0      	subs	r0, r0, r3
 800a1ea:	6963      	ldr	r3, [r4, #20]
 800a1ec:	b2f6      	uxtb	r6, r6
 800a1ee:	4283      	cmp	r3, r0
 800a1f0:	4637      	mov	r7, r6
 800a1f2:	dc04      	bgt.n	800a1fe <__swbuf_r+0x42>
 800a1f4:	4621      	mov	r1, r4
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	f000 f948 	bl	800a48c <_fflush_r>
 800a1fc:	bb28      	cbnz	r0, 800a24a <__swbuf_r+0x8e>
 800a1fe:	68a3      	ldr	r3, [r4, #8]
 800a200:	3b01      	subs	r3, #1
 800a202:	60a3      	str	r3, [r4, #8]
 800a204:	6823      	ldr	r3, [r4, #0]
 800a206:	1c5a      	adds	r2, r3, #1
 800a208:	6022      	str	r2, [r4, #0]
 800a20a:	701e      	strb	r6, [r3, #0]
 800a20c:	6963      	ldr	r3, [r4, #20]
 800a20e:	3001      	adds	r0, #1
 800a210:	4283      	cmp	r3, r0
 800a212:	d004      	beq.n	800a21e <__swbuf_r+0x62>
 800a214:	89a3      	ldrh	r3, [r4, #12]
 800a216:	07db      	lsls	r3, r3, #31
 800a218:	d519      	bpl.n	800a24e <__swbuf_r+0x92>
 800a21a:	2e0a      	cmp	r6, #10
 800a21c:	d117      	bne.n	800a24e <__swbuf_r+0x92>
 800a21e:	4621      	mov	r1, r4
 800a220:	4628      	mov	r0, r5
 800a222:	f000 f933 	bl	800a48c <_fflush_r>
 800a226:	b190      	cbz	r0, 800a24e <__swbuf_r+0x92>
 800a228:	e00f      	b.n	800a24a <__swbuf_r+0x8e>
 800a22a:	4b0b      	ldr	r3, [pc, #44]	; (800a258 <__swbuf_r+0x9c>)
 800a22c:	429c      	cmp	r4, r3
 800a22e:	d101      	bne.n	800a234 <__swbuf_r+0x78>
 800a230:	68ac      	ldr	r4, [r5, #8]
 800a232:	e7d0      	b.n	800a1d6 <__swbuf_r+0x1a>
 800a234:	4b09      	ldr	r3, [pc, #36]	; (800a25c <__swbuf_r+0xa0>)
 800a236:	429c      	cmp	r4, r3
 800a238:	bf08      	it	eq
 800a23a:	68ec      	ldreq	r4, [r5, #12]
 800a23c:	e7cb      	b.n	800a1d6 <__swbuf_r+0x1a>
 800a23e:	4621      	mov	r1, r4
 800a240:	4628      	mov	r0, r5
 800a242:	f000 f81f 	bl	800a284 <__swsetup_r>
 800a246:	2800      	cmp	r0, #0
 800a248:	d0cc      	beq.n	800a1e4 <__swbuf_r+0x28>
 800a24a:	f04f 37ff 	mov.w	r7, #4294967295
 800a24e:	4638      	mov	r0, r7
 800a250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a252:	bf00      	nop
 800a254:	0800c474 	.word	0x0800c474
 800a258:	0800c494 	.word	0x0800c494
 800a25c:	0800c454 	.word	0x0800c454

0800a260 <_write_r>:
 800a260:	b538      	push	{r3, r4, r5, lr}
 800a262:	4c07      	ldr	r4, [pc, #28]	; (800a280 <_write_r+0x20>)
 800a264:	4605      	mov	r5, r0
 800a266:	4608      	mov	r0, r1
 800a268:	4611      	mov	r1, r2
 800a26a:	2200      	movs	r2, #0
 800a26c:	6022      	str	r2, [r4, #0]
 800a26e:	461a      	mov	r2, r3
 800a270:	f7f7 f834 	bl	80012dc <_write>
 800a274:	1c43      	adds	r3, r0, #1
 800a276:	d102      	bne.n	800a27e <_write_r+0x1e>
 800a278:	6823      	ldr	r3, [r4, #0]
 800a27a:	b103      	cbz	r3, 800a27e <_write_r+0x1e>
 800a27c:	602b      	str	r3, [r5, #0]
 800a27e:	bd38      	pop	{r3, r4, r5, pc}
 800a280:	20000830 	.word	0x20000830

0800a284 <__swsetup_r>:
 800a284:	4b32      	ldr	r3, [pc, #200]	; (800a350 <__swsetup_r+0xcc>)
 800a286:	b570      	push	{r4, r5, r6, lr}
 800a288:	681d      	ldr	r5, [r3, #0]
 800a28a:	4606      	mov	r6, r0
 800a28c:	460c      	mov	r4, r1
 800a28e:	b125      	cbz	r5, 800a29a <__swsetup_r+0x16>
 800a290:	69ab      	ldr	r3, [r5, #24]
 800a292:	b913      	cbnz	r3, 800a29a <__swsetup_r+0x16>
 800a294:	4628      	mov	r0, r5
 800a296:	f000 f963 	bl	800a560 <__sinit>
 800a29a:	4b2e      	ldr	r3, [pc, #184]	; (800a354 <__swsetup_r+0xd0>)
 800a29c:	429c      	cmp	r4, r3
 800a29e:	d10f      	bne.n	800a2c0 <__swsetup_r+0x3c>
 800a2a0:	686c      	ldr	r4, [r5, #4]
 800a2a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	0715      	lsls	r5, r2, #28
 800a2aa:	d42c      	bmi.n	800a306 <__swsetup_r+0x82>
 800a2ac:	06d0      	lsls	r0, r2, #27
 800a2ae:	d411      	bmi.n	800a2d4 <__swsetup_r+0x50>
 800a2b0:	2209      	movs	r2, #9
 800a2b2:	6032      	str	r2, [r6, #0]
 800a2b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2b8:	81a3      	strh	r3, [r4, #12]
 800a2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a2be:	e03e      	b.n	800a33e <__swsetup_r+0xba>
 800a2c0:	4b25      	ldr	r3, [pc, #148]	; (800a358 <__swsetup_r+0xd4>)
 800a2c2:	429c      	cmp	r4, r3
 800a2c4:	d101      	bne.n	800a2ca <__swsetup_r+0x46>
 800a2c6:	68ac      	ldr	r4, [r5, #8]
 800a2c8:	e7eb      	b.n	800a2a2 <__swsetup_r+0x1e>
 800a2ca:	4b24      	ldr	r3, [pc, #144]	; (800a35c <__swsetup_r+0xd8>)
 800a2cc:	429c      	cmp	r4, r3
 800a2ce:	bf08      	it	eq
 800a2d0:	68ec      	ldreq	r4, [r5, #12]
 800a2d2:	e7e6      	b.n	800a2a2 <__swsetup_r+0x1e>
 800a2d4:	0751      	lsls	r1, r2, #29
 800a2d6:	d512      	bpl.n	800a2fe <__swsetup_r+0x7a>
 800a2d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2da:	b141      	cbz	r1, 800a2ee <__swsetup_r+0x6a>
 800a2dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2e0:	4299      	cmp	r1, r3
 800a2e2:	d002      	beq.n	800a2ea <__swsetup_r+0x66>
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	f000 fa3b 	bl	800a760 <_free_r>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	6363      	str	r3, [r4, #52]	; 0x34
 800a2ee:	89a3      	ldrh	r3, [r4, #12]
 800a2f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2f4:	81a3      	strh	r3, [r4, #12]
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	6063      	str	r3, [r4, #4]
 800a2fa:	6923      	ldr	r3, [r4, #16]
 800a2fc:	6023      	str	r3, [r4, #0]
 800a2fe:	89a3      	ldrh	r3, [r4, #12]
 800a300:	f043 0308 	orr.w	r3, r3, #8
 800a304:	81a3      	strh	r3, [r4, #12]
 800a306:	6923      	ldr	r3, [r4, #16]
 800a308:	b94b      	cbnz	r3, 800a31e <__swsetup_r+0x9a>
 800a30a:	89a3      	ldrh	r3, [r4, #12]
 800a30c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a314:	d003      	beq.n	800a31e <__swsetup_r+0x9a>
 800a316:	4621      	mov	r1, r4
 800a318:	4630      	mov	r0, r6
 800a31a:	f000 f9e1 	bl	800a6e0 <__smakebuf_r>
 800a31e:	89a2      	ldrh	r2, [r4, #12]
 800a320:	f012 0301 	ands.w	r3, r2, #1
 800a324:	d00c      	beq.n	800a340 <__swsetup_r+0xbc>
 800a326:	2300      	movs	r3, #0
 800a328:	60a3      	str	r3, [r4, #8]
 800a32a:	6963      	ldr	r3, [r4, #20]
 800a32c:	425b      	negs	r3, r3
 800a32e:	61a3      	str	r3, [r4, #24]
 800a330:	6923      	ldr	r3, [r4, #16]
 800a332:	b953      	cbnz	r3, 800a34a <__swsetup_r+0xc6>
 800a334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a338:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a33c:	d1ba      	bne.n	800a2b4 <__swsetup_r+0x30>
 800a33e:	bd70      	pop	{r4, r5, r6, pc}
 800a340:	0792      	lsls	r2, r2, #30
 800a342:	bf58      	it	pl
 800a344:	6963      	ldrpl	r3, [r4, #20]
 800a346:	60a3      	str	r3, [r4, #8]
 800a348:	e7f2      	b.n	800a330 <__swsetup_r+0xac>
 800a34a:	2000      	movs	r0, #0
 800a34c:	e7f7      	b.n	800a33e <__swsetup_r+0xba>
 800a34e:	bf00      	nop
 800a350:	200002d4 	.word	0x200002d4
 800a354:	0800c474 	.word	0x0800c474
 800a358:	0800c494 	.word	0x0800c494
 800a35c:	0800c454 	.word	0x0800c454

0800a360 <_close_r>:
 800a360:	b538      	push	{r3, r4, r5, lr}
 800a362:	4c06      	ldr	r4, [pc, #24]	; (800a37c <_close_r+0x1c>)
 800a364:	2300      	movs	r3, #0
 800a366:	4605      	mov	r5, r0
 800a368:	4608      	mov	r0, r1
 800a36a:	6023      	str	r3, [r4, #0]
 800a36c:	f7f7 f909 	bl	8001582 <_close>
 800a370:	1c43      	adds	r3, r0, #1
 800a372:	d102      	bne.n	800a37a <_close_r+0x1a>
 800a374:	6823      	ldr	r3, [r4, #0]
 800a376:	b103      	cbz	r3, 800a37a <_close_r+0x1a>
 800a378:	602b      	str	r3, [r5, #0]
 800a37a:	bd38      	pop	{r3, r4, r5, pc}
 800a37c:	20000830 	.word	0x20000830

0800a380 <__sflush_r>:
 800a380:	898a      	ldrh	r2, [r1, #12]
 800a382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a386:	4605      	mov	r5, r0
 800a388:	0710      	lsls	r0, r2, #28
 800a38a:	460c      	mov	r4, r1
 800a38c:	d458      	bmi.n	800a440 <__sflush_r+0xc0>
 800a38e:	684b      	ldr	r3, [r1, #4]
 800a390:	2b00      	cmp	r3, #0
 800a392:	dc05      	bgt.n	800a3a0 <__sflush_r+0x20>
 800a394:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a396:	2b00      	cmp	r3, #0
 800a398:	dc02      	bgt.n	800a3a0 <__sflush_r+0x20>
 800a39a:	2000      	movs	r0, #0
 800a39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3a2:	2e00      	cmp	r6, #0
 800a3a4:	d0f9      	beq.n	800a39a <__sflush_r+0x1a>
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3ac:	682f      	ldr	r7, [r5, #0]
 800a3ae:	6a21      	ldr	r1, [r4, #32]
 800a3b0:	602b      	str	r3, [r5, #0]
 800a3b2:	d032      	beq.n	800a41a <__sflush_r+0x9a>
 800a3b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3b6:	89a3      	ldrh	r3, [r4, #12]
 800a3b8:	075a      	lsls	r2, r3, #29
 800a3ba:	d505      	bpl.n	800a3c8 <__sflush_r+0x48>
 800a3bc:	6863      	ldr	r3, [r4, #4]
 800a3be:	1ac0      	subs	r0, r0, r3
 800a3c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3c2:	b10b      	cbz	r3, 800a3c8 <__sflush_r+0x48>
 800a3c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3c6:	1ac0      	subs	r0, r0, r3
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3ce:	6a21      	ldr	r1, [r4, #32]
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	47b0      	blx	r6
 800a3d4:	1c43      	adds	r3, r0, #1
 800a3d6:	89a3      	ldrh	r3, [r4, #12]
 800a3d8:	d106      	bne.n	800a3e8 <__sflush_r+0x68>
 800a3da:	6829      	ldr	r1, [r5, #0]
 800a3dc:	291d      	cmp	r1, #29
 800a3de:	d848      	bhi.n	800a472 <__sflush_r+0xf2>
 800a3e0:	4a29      	ldr	r2, [pc, #164]	; (800a488 <__sflush_r+0x108>)
 800a3e2:	40ca      	lsrs	r2, r1
 800a3e4:	07d6      	lsls	r6, r2, #31
 800a3e6:	d544      	bpl.n	800a472 <__sflush_r+0xf2>
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	6062      	str	r2, [r4, #4]
 800a3ec:	04d9      	lsls	r1, r3, #19
 800a3ee:	6922      	ldr	r2, [r4, #16]
 800a3f0:	6022      	str	r2, [r4, #0]
 800a3f2:	d504      	bpl.n	800a3fe <__sflush_r+0x7e>
 800a3f4:	1c42      	adds	r2, r0, #1
 800a3f6:	d101      	bne.n	800a3fc <__sflush_r+0x7c>
 800a3f8:	682b      	ldr	r3, [r5, #0]
 800a3fa:	b903      	cbnz	r3, 800a3fe <__sflush_r+0x7e>
 800a3fc:	6560      	str	r0, [r4, #84]	; 0x54
 800a3fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a400:	602f      	str	r7, [r5, #0]
 800a402:	2900      	cmp	r1, #0
 800a404:	d0c9      	beq.n	800a39a <__sflush_r+0x1a>
 800a406:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a40a:	4299      	cmp	r1, r3
 800a40c:	d002      	beq.n	800a414 <__sflush_r+0x94>
 800a40e:	4628      	mov	r0, r5
 800a410:	f000 f9a6 	bl	800a760 <_free_r>
 800a414:	2000      	movs	r0, #0
 800a416:	6360      	str	r0, [r4, #52]	; 0x34
 800a418:	e7c0      	b.n	800a39c <__sflush_r+0x1c>
 800a41a:	2301      	movs	r3, #1
 800a41c:	4628      	mov	r0, r5
 800a41e:	47b0      	blx	r6
 800a420:	1c41      	adds	r1, r0, #1
 800a422:	d1c8      	bne.n	800a3b6 <__sflush_r+0x36>
 800a424:	682b      	ldr	r3, [r5, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d0c5      	beq.n	800a3b6 <__sflush_r+0x36>
 800a42a:	2b1d      	cmp	r3, #29
 800a42c:	d001      	beq.n	800a432 <__sflush_r+0xb2>
 800a42e:	2b16      	cmp	r3, #22
 800a430:	d101      	bne.n	800a436 <__sflush_r+0xb6>
 800a432:	602f      	str	r7, [r5, #0]
 800a434:	e7b1      	b.n	800a39a <__sflush_r+0x1a>
 800a436:	89a3      	ldrh	r3, [r4, #12]
 800a438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a43c:	81a3      	strh	r3, [r4, #12]
 800a43e:	e7ad      	b.n	800a39c <__sflush_r+0x1c>
 800a440:	690f      	ldr	r7, [r1, #16]
 800a442:	2f00      	cmp	r7, #0
 800a444:	d0a9      	beq.n	800a39a <__sflush_r+0x1a>
 800a446:	0793      	lsls	r3, r2, #30
 800a448:	680e      	ldr	r6, [r1, #0]
 800a44a:	bf08      	it	eq
 800a44c:	694b      	ldreq	r3, [r1, #20]
 800a44e:	600f      	str	r7, [r1, #0]
 800a450:	bf18      	it	ne
 800a452:	2300      	movne	r3, #0
 800a454:	eba6 0807 	sub.w	r8, r6, r7
 800a458:	608b      	str	r3, [r1, #8]
 800a45a:	f1b8 0f00 	cmp.w	r8, #0
 800a45e:	dd9c      	ble.n	800a39a <__sflush_r+0x1a>
 800a460:	4643      	mov	r3, r8
 800a462:	463a      	mov	r2, r7
 800a464:	6a21      	ldr	r1, [r4, #32]
 800a466:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a468:	4628      	mov	r0, r5
 800a46a:	47b0      	blx	r6
 800a46c:	2800      	cmp	r0, #0
 800a46e:	dc06      	bgt.n	800a47e <__sflush_r+0xfe>
 800a470:	89a3      	ldrh	r3, [r4, #12]
 800a472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a476:	81a3      	strh	r3, [r4, #12]
 800a478:	f04f 30ff 	mov.w	r0, #4294967295
 800a47c:	e78e      	b.n	800a39c <__sflush_r+0x1c>
 800a47e:	4407      	add	r7, r0
 800a480:	eba8 0800 	sub.w	r8, r8, r0
 800a484:	e7e9      	b.n	800a45a <__sflush_r+0xda>
 800a486:	bf00      	nop
 800a488:	20400001 	.word	0x20400001

0800a48c <_fflush_r>:
 800a48c:	b538      	push	{r3, r4, r5, lr}
 800a48e:	690b      	ldr	r3, [r1, #16]
 800a490:	4605      	mov	r5, r0
 800a492:	460c      	mov	r4, r1
 800a494:	b1db      	cbz	r3, 800a4ce <_fflush_r+0x42>
 800a496:	b118      	cbz	r0, 800a4a0 <_fflush_r+0x14>
 800a498:	6983      	ldr	r3, [r0, #24]
 800a49a:	b90b      	cbnz	r3, 800a4a0 <_fflush_r+0x14>
 800a49c:	f000 f860 	bl	800a560 <__sinit>
 800a4a0:	4b0c      	ldr	r3, [pc, #48]	; (800a4d4 <_fflush_r+0x48>)
 800a4a2:	429c      	cmp	r4, r3
 800a4a4:	d109      	bne.n	800a4ba <_fflush_r+0x2e>
 800a4a6:	686c      	ldr	r4, [r5, #4]
 800a4a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ac:	b17b      	cbz	r3, 800a4ce <_fflush_r+0x42>
 800a4ae:	4621      	mov	r1, r4
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4b6:	f7ff bf63 	b.w	800a380 <__sflush_r>
 800a4ba:	4b07      	ldr	r3, [pc, #28]	; (800a4d8 <_fflush_r+0x4c>)
 800a4bc:	429c      	cmp	r4, r3
 800a4be:	d101      	bne.n	800a4c4 <_fflush_r+0x38>
 800a4c0:	68ac      	ldr	r4, [r5, #8]
 800a4c2:	e7f1      	b.n	800a4a8 <_fflush_r+0x1c>
 800a4c4:	4b05      	ldr	r3, [pc, #20]	; (800a4dc <_fflush_r+0x50>)
 800a4c6:	429c      	cmp	r4, r3
 800a4c8:	bf08      	it	eq
 800a4ca:	68ec      	ldreq	r4, [r5, #12]
 800a4cc:	e7ec      	b.n	800a4a8 <_fflush_r+0x1c>
 800a4ce:	2000      	movs	r0, #0
 800a4d0:	bd38      	pop	{r3, r4, r5, pc}
 800a4d2:	bf00      	nop
 800a4d4:	0800c474 	.word	0x0800c474
 800a4d8:	0800c494 	.word	0x0800c494
 800a4dc:	0800c454 	.word	0x0800c454

0800a4e0 <std>:
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	b510      	push	{r4, lr}
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	e9c0 3300 	strd	r3, r3, [r0]
 800a4ea:	6083      	str	r3, [r0, #8]
 800a4ec:	8181      	strh	r1, [r0, #12]
 800a4ee:	6643      	str	r3, [r0, #100]	; 0x64
 800a4f0:	81c2      	strh	r2, [r0, #14]
 800a4f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4f6:	6183      	str	r3, [r0, #24]
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	2208      	movs	r2, #8
 800a4fc:	305c      	adds	r0, #92	; 0x5c
 800a4fe:	f7ff fd4c 	bl	8009f9a <memset>
 800a502:	4b05      	ldr	r3, [pc, #20]	; (800a518 <std+0x38>)
 800a504:	6263      	str	r3, [r4, #36]	; 0x24
 800a506:	4b05      	ldr	r3, [pc, #20]	; (800a51c <std+0x3c>)
 800a508:	62a3      	str	r3, [r4, #40]	; 0x28
 800a50a:	4b05      	ldr	r3, [pc, #20]	; (800a520 <std+0x40>)
 800a50c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a50e:	4b05      	ldr	r3, [pc, #20]	; (800a524 <std+0x44>)
 800a510:	6224      	str	r4, [r4, #32]
 800a512:	6323      	str	r3, [r4, #48]	; 0x30
 800a514:	bd10      	pop	{r4, pc}
 800a516:	bf00      	nop
 800a518:	0800a0f9 	.word	0x0800a0f9
 800a51c:	0800a11f 	.word	0x0800a11f
 800a520:	0800a157 	.word	0x0800a157
 800a524:	0800a17b 	.word	0x0800a17b

0800a528 <_cleanup_r>:
 800a528:	4901      	ldr	r1, [pc, #4]	; (800a530 <_cleanup_r+0x8>)
 800a52a:	f000 b885 	b.w	800a638 <_fwalk_reent>
 800a52e:	bf00      	nop
 800a530:	0800a48d 	.word	0x0800a48d

0800a534 <__sfmoreglue>:
 800a534:	b570      	push	{r4, r5, r6, lr}
 800a536:	1e4a      	subs	r2, r1, #1
 800a538:	2568      	movs	r5, #104	; 0x68
 800a53a:	4355      	muls	r5, r2
 800a53c:	460e      	mov	r6, r1
 800a53e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a542:	f000 f95b 	bl	800a7fc <_malloc_r>
 800a546:	4604      	mov	r4, r0
 800a548:	b140      	cbz	r0, 800a55c <__sfmoreglue+0x28>
 800a54a:	2100      	movs	r1, #0
 800a54c:	e9c0 1600 	strd	r1, r6, [r0]
 800a550:	300c      	adds	r0, #12
 800a552:	60a0      	str	r0, [r4, #8]
 800a554:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a558:	f7ff fd1f 	bl	8009f9a <memset>
 800a55c:	4620      	mov	r0, r4
 800a55e:	bd70      	pop	{r4, r5, r6, pc}

0800a560 <__sinit>:
 800a560:	6983      	ldr	r3, [r0, #24]
 800a562:	b510      	push	{r4, lr}
 800a564:	4604      	mov	r4, r0
 800a566:	bb33      	cbnz	r3, 800a5b6 <__sinit+0x56>
 800a568:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a56c:	6503      	str	r3, [r0, #80]	; 0x50
 800a56e:	4b12      	ldr	r3, [pc, #72]	; (800a5b8 <__sinit+0x58>)
 800a570:	4a12      	ldr	r2, [pc, #72]	; (800a5bc <__sinit+0x5c>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	6282      	str	r2, [r0, #40]	; 0x28
 800a576:	4298      	cmp	r0, r3
 800a578:	bf04      	itt	eq
 800a57a:	2301      	moveq	r3, #1
 800a57c:	6183      	streq	r3, [r0, #24]
 800a57e:	f000 f81f 	bl	800a5c0 <__sfp>
 800a582:	6060      	str	r0, [r4, #4]
 800a584:	4620      	mov	r0, r4
 800a586:	f000 f81b 	bl	800a5c0 <__sfp>
 800a58a:	60a0      	str	r0, [r4, #8]
 800a58c:	4620      	mov	r0, r4
 800a58e:	f000 f817 	bl	800a5c0 <__sfp>
 800a592:	2200      	movs	r2, #0
 800a594:	60e0      	str	r0, [r4, #12]
 800a596:	2104      	movs	r1, #4
 800a598:	6860      	ldr	r0, [r4, #4]
 800a59a:	f7ff ffa1 	bl	800a4e0 <std>
 800a59e:	2201      	movs	r2, #1
 800a5a0:	2109      	movs	r1, #9
 800a5a2:	68a0      	ldr	r0, [r4, #8]
 800a5a4:	f7ff ff9c 	bl	800a4e0 <std>
 800a5a8:	2202      	movs	r2, #2
 800a5aa:	2112      	movs	r1, #18
 800a5ac:	68e0      	ldr	r0, [r4, #12]
 800a5ae:	f7ff ff97 	bl	800a4e0 <std>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	61a3      	str	r3, [r4, #24]
 800a5b6:	bd10      	pop	{r4, pc}
 800a5b8:	0800c450 	.word	0x0800c450
 800a5bc:	0800a529 	.word	0x0800a529

0800a5c0 <__sfp>:
 800a5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c2:	4b1b      	ldr	r3, [pc, #108]	; (800a630 <__sfp+0x70>)
 800a5c4:	681e      	ldr	r6, [r3, #0]
 800a5c6:	69b3      	ldr	r3, [r6, #24]
 800a5c8:	4607      	mov	r7, r0
 800a5ca:	b913      	cbnz	r3, 800a5d2 <__sfp+0x12>
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	f7ff ffc7 	bl	800a560 <__sinit>
 800a5d2:	3648      	adds	r6, #72	; 0x48
 800a5d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	d503      	bpl.n	800a5e4 <__sfp+0x24>
 800a5dc:	6833      	ldr	r3, [r6, #0]
 800a5de:	b133      	cbz	r3, 800a5ee <__sfp+0x2e>
 800a5e0:	6836      	ldr	r6, [r6, #0]
 800a5e2:	e7f7      	b.n	800a5d4 <__sfp+0x14>
 800a5e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a5e8:	b16d      	cbz	r5, 800a606 <__sfp+0x46>
 800a5ea:	3468      	adds	r4, #104	; 0x68
 800a5ec:	e7f4      	b.n	800a5d8 <__sfp+0x18>
 800a5ee:	2104      	movs	r1, #4
 800a5f0:	4638      	mov	r0, r7
 800a5f2:	f7ff ff9f 	bl	800a534 <__sfmoreglue>
 800a5f6:	6030      	str	r0, [r6, #0]
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d1f1      	bne.n	800a5e0 <__sfp+0x20>
 800a5fc:	230c      	movs	r3, #12
 800a5fe:	603b      	str	r3, [r7, #0]
 800a600:	4604      	mov	r4, r0
 800a602:	4620      	mov	r0, r4
 800a604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a606:	4b0b      	ldr	r3, [pc, #44]	; (800a634 <__sfp+0x74>)
 800a608:	6665      	str	r5, [r4, #100]	; 0x64
 800a60a:	e9c4 5500 	strd	r5, r5, [r4]
 800a60e:	60a5      	str	r5, [r4, #8]
 800a610:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a614:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a618:	2208      	movs	r2, #8
 800a61a:	4629      	mov	r1, r5
 800a61c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a620:	f7ff fcbb 	bl	8009f9a <memset>
 800a624:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a628:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a62c:	e7e9      	b.n	800a602 <__sfp+0x42>
 800a62e:	bf00      	nop
 800a630:	0800c450 	.word	0x0800c450
 800a634:	ffff0001 	.word	0xffff0001

0800a638 <_fwalk_reent>:
 800a638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a63c:	4680      	mov	r8, r0
 800a63e:	4689      	mov	r9, r1
 800a640:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a644:	2600      	movs	r6, #0
 800a646:	b914      	cbnz	r4, 800a64e <_fwalk_reent+0x16>
 800a648:	4630      	mov	r0, r6
 800a64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a64e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a652:	3f01      	subs	r7, #1
 800a654:	d501      	bpl.n	800a65a <_fwalk_reent+0x22>
 800a656:	6824      	ldr	r4, [r4, #0]
 800a658:	e7f5      	b.n	800a646 <_fwalk_reent+0xe>
 800a65a:	89ab      	ldrh	r3, [r5, #12]
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d907      	bls.n	800a670 <_fwalk_reent+0x38>
 800a660:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a664:	3301      	adds	r3, #1
 800a666:	d003      	beq.n	800a670 <_fwalk_reent+0x38>
 800a668:	4629      	mov	r1, r5
 800a66a:	4640      	mov	r0, r8
 800a66c:	47c8      	blx	r9
 800a66e:	4306      	orrs	r6, r0
 800a670:	3568      	adds	r5, #104	; 0x68
 800a672:	e7ee      	b.n	800a652 <_fwalk_reent+0x1a>

0800a674 <_lseek_r>:
 800a674:	b538      	push	{r3, r4, r5, lr}
 800a676:	4c07      	ldr	r4, [pc, #28]	; (800a694 <_lseek_r+0x20>)
 800a678:	4605      	mov	r5, r0
 800a67a:	4608      	mov	r0, r1
 800a67c:	4611      	mov	r1, r2
 800a67e:	2200      	movs	r2, #0
 800a680:	6022      	str	r2, [r4, #0]
 800a682:	461a      	mov	r2, r3
 800a684:	f7f6 ffa4 	bl	80015d0 <_lseek>
 800a688:	1c43      	adds	r3, r0, #1
 800a68a:	d102      	bne.n	800a692 <_lseek_r+0x1e>
 800a68c:	6823      	ldr	r3, [r4, #0]
 800a68e:	b103      	cbz	r3, 800a692 <_lseek_r+0x1e>
 800a690:	602b      	str	r3, [r5, #0]
 800a692:	bd38      	pop	{r3, r4, r5, pc}
 800a694:	20000830 	.word	0x20000830

0800a698 <__swhatbuf_r>:
 800a698:	b570      	push	{r4, r5, r6, lr}
 800a69a:	460e      	mov	r6, r1
 800a69c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a0:	2900      	cmp	r1, #0
 800a6a2:	b096      	sub	sp, #88	; 0x58
 800a6a4:	4614      	mov	r4, r2
 800a6a6:	461d      	mov	r5, r3
 800a6a8:	da07      	bge.n	800a6ba <__swhatbuf_r+0x22>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	602b      	str	r3, [r5, #0]
 800a6ae:	89b3      	ldrh	r3, [r6, #12]
 800a6b0:	061a      	lsls	r2, r3, #24
 800a6b2:	d410      	bmi.n	800a6d6 <__swhatbuf_r+0x3e>
 800a6b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6b8:	e00e      	b.n	800a6d8 <__swhatbuf_r+0x40>
 800a6ba:	466a      	mov	r2, sp
 800a6bc:	f001 f86a 	bl	800b794 <_fstat_r>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	dbf2      	blt.n	800a6aa <__swhatbuf_r+0x12>
 800a6c4:	9a01      	ldr	r2, [sp, #4]
 800a6c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a6ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a6ce:	425a      	negs	r2, r3
 800a6d0:	415a      	adcs	r2, r3
 800a6d2:	602a      	str	r2, [r5, #0]
 800a6d4:	e7ee      	b.n	800a6b4 <__swhatbuf_r+0x1c>
 800a6d6:	2340      	movs	r3, #64	; 0x40
 800a6d8:	2000      	movs	r0, #0
 800a6da:	6023      	str	r3, [r4, #0]
 800a6dc:	b016      	add	sp, #88	; 0x58
 800a6de:	bd70      	pop	{r4, r5, r6, pc}

0800a6e0 <__smakebuf_r>:
 800a6e0:	898b      	ldrh	r3, [r1, #12]
 800a6e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6e4:	079d      	lsls	r5, r3, #30
 800a6e6:	4606      	mov	r6, r0
 800a6e8:	460c      	mov	r4, r1
 800a6ea:	d507      	bpl.n	800a6fc <__smakebuf_r+0x1c>
 800a6ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	6123      	str	r3, [r4, #16]
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	6163      	str	r3, [r4, #20]
 800a6f8:	b002      	add	sp, #8
 800a6fa:	bd70      	pop	{r4, r5, r6, pc}
 800a6fc:	ab01      	add	r3, sp, #4
 800a6fe:	466a      	mov	r2, sp
 800a700:	f7ff ffca 	bl	800a698 <__swhatbuf_r>
 800a704:	9900      	ldr	r1, [sp, #0]
 800a706:	4605      	mov	r5, r0
 800a708:	4630      	mov	r0, r6
 800a70a:	f000 f877 	bl	800a7fc <_malloc_r>
 800a70e:	b948      	cbnz	r0, 800a724 <__smakebuf_r+0x44>
 800a710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a714:	059a      	lsls	r2, r3, #22
 800a716:	d4ef      	bmi.n	800a6f8 <__smakebuf_r+0x18>
 800a718:	f023 0303 	bic.w	r3, r3, #3
 800a71c:	f043 0302 	orr.w	r3, r3, #2
 800a720:	81a3      	strh	r3, [r4, #12]
 800a722:	e7e3      	b.n	800a6ec <__smakebuf_r+0xc>
 800a724:	4b0d      	ldr	r3, [pc, #52]	; (800a75c <__smakebuf_r+0x7c>)
 800a726:	62b3      	str	r3, [r6, #40]	; 0x28
 800a728:	89a3      	ldrh	r3, [r4, #12]
 800a72a:	6020      	str	r0, [r4, #0]
 800a72c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a730:	81a3      	strh	r3, [r4, #12]
 800a732:	9b00      	ldr	r3, [sp, #0]
 800a734:	6163      	str	r3, [r4, #20]
 800a736:	9b01      	ldr	r3, [sp, #4]
 800a738:	6120      	str	r0, [r4, #16]
 800a73a:	b15b      	cbz	r3, 800a754 <__smakebuf_r+0x74>
 800a73c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a740:	4630      	mov	r0, r6
 800a742:	f001 f839 	bl	800b7b8 <_isatty_r>
 800a746:	b128      	cbz	r0, 800a754 <__smakebuf_r+0x74>
 800a748:	89a3      	ldrh	r3, [r4, #12]
 800a74a:	f023 0303 	bic.w	r3, r3, #3
 800a74e:	f043 0301 	orr.w	r3, r3, #1
 800a752:	81a3      	strh	r3, [r4, #12]
 800a754:	89a3      	ldrh	r3, [r4, #12]
 800a756:	431d      	orrs	r5, r3
 800a758:	81a5      	strh	r5, [r4, #12]
 800a75a:	e7cd      	b.n	800a6f8 <__smakebuf_r+0x18>
 800a75c:	0800a529 	.word	0x0800a529

0800a760 <_free_r>:
 800a760:	b538      	push	{r3, r4, r5, lr}
 800a762:	4605      	mov	r5, r0
 800a764:	2900      	cmp	r1, #0
 800a766:	d045      	beq.n	800a7f4 <_free_r+0x94>
 800a768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a76c:	1f0c      	subs	r4, r1, #4
 800a76e:	2b00      	cmp	r3, #0
 800a770:	bfb8      	it	lt
 800a772:	18e4      	addlt	r4, r4, r3
 800a774:	f001 f854 	bl	800b820 <__malloc_lock>
 800a778:	4a1f      	ldr	r2, [pc, #124]	; (800a7f8 <_free_r+0x98>)
 800a77a:	6813      	ldr	r3, [r2, #0]
 800a77c:	4610      	mov	r0, r2
 800a77e:	b933      	cbnz	r3, 800a78e <_free_r+0x2e>
 800a780:	6063      	str	r3, [r4, #4]
 800a782:	6014      	str	r4, [r2, #0]
 800a784:	4628      	mov	r0, r5
 800a786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a78a:	f001 b84a 	b.w	800b822 <__malloc_unlock>
 800a78e:	42a3      	cmp	r3, r4
 800a790:	d90c      	bls.n	800a7ac <_free_r+0x4c>
 800a792:	6821      	ldr	r1, [r4, #0]
 800a794:	1862      	adds	r2, r4, r1
 800a796:	4293      	cmp	r3, r2
 800a798:	bf04      	itt	eq
 800a79a:	681a      	ldreq	r2, [r3, #0]
 800a79c:	685b      	ldreq	r3, [r3, #4]
 800a79e:	6063      	str	r3, [r4, #4]
 800a7a0:	bf04      	itt	eq
 800a7a2:	1852      	addeq	r2, r2, r1
 800a7a4:	6022      	streq	r2, [r4, #0]
 800a7a6:	6004      	str	r4, [r0, #0]
 800a7a8:	e7ec      	b.n	800a784 <_free_r+0x24>
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	685a      	ldr	r2, [r3, #4]
 800a7ae:	b10a      	cbz	r2, 800a7b4 <_free_r+0x54>
 800a7b0:	42a2      	cmp	r2, r4
 800a7b2:	d9fa      	bls.n	800a7aa <_free_r+0x4a>
 800a7b4:	6819      	ldr	r1, [r3, #0]
 800a7b6:	1858      	adds	r0, r3, r1
 800a7b8:	42a0      	cmp	r0, r4
 800a7ba:	d10b      	bne.n	800a7d4 <_free_r+0x74>
 800a7bc:	6820      	ldr	r0, [r4, #0]
 800a7be:	4401      	add	r1, r0
 800a7c0:	1858      	adds	r0, r3, r1
 800a7c2:	4282      	cmp	r2, r0
 800a7c4:	6019      	str	r1, [r3, #0]
 800a7c6:	d1dd      	bne.n	800a784 <_free_r+0x24>
 800a7c8:	6810      	ldr	r0, [r2, #0]
 800a7ca:	6852      	ldr	r2, [r2, #4]
 800a7cc:	605a      	str	r2, [r3, #4]
 800a7ce:	4401      	add	r1, r0
 800a7d0:	6019      	str	r1, [r3, #0]
 800a7d2:	e7d7      	b.n	800a784 <_free_r+0x24>
 800a7d4:	d902      	bls.n	800a7dc <_free_r+0x7c>
 800a7d6:	230c      	movs	r3, #12
 800a7d8:	602b      	str	r3, [r5, #0]
 800a7da:	e7d3      	b.n	800a784 <_free_r+0x24>
 800a7dc:	6820      	ldr	r0, [r4, #0]
 800a7de:	1821      	adds	r1, r4, r0
 800a7e0:	428a      	cmp	r2, r1
 800a7e2:	bf04      	itt	eq
 800a7e4:	6811      	ldreq	r1, [r2, #0]
 800a7e6:	6852      	ldreq	r2, [r2, #4]
 800a7e8:	6062      	str	r2, [r4, #4]
 800a7ea:	bf04      	itt	eq
 800a7ec:	1809      	addeq	r1, r1, r0
 800a7ee:	6021      	streq	r1, [r4, #0]
 800a7f0:	605c      	str	r4, [r3, #4]
 800a7f2:	e7c7      	b.n	800a784 <_free_r+0x24>
 800a7f4:	bd38      	pop	{r3, r4, r5, pc}
 800a7f6:	bf00      	nop
 800a7f8:	200004d8 	.word	0x200004d8

0800a7fc <_malloc_r>:
 800a7fc:	b570      	push	{r4, r5, r6, lr}
 800a7fe:	1ccd      	adds	r5, r1, #3
 800a800:	f025 0503 	bic.w	r5, r5, #3
 800a804:	3508      	adds	r5, #8
 800a806:	2d0c      	cmp	r5, #12
 800a808:	bf38      	it	cc
 800a80a:	250c      	movcc	r5, #12
 800a80c:	2d00      	cmp	r5, #0
 800a80e:	4606      	mov	r6, r0
 800a810:	db01      	blt.n	800a816 <_malloc_r+0x1a>
 800a812:	42a9      	cmp	r1, r5
 800a814:	d903      	bls.n	800a81e <_malloc_r+0x22>
 800a816:	230c      	movs	r3, #12
 800a818:	6033      	str	r3, [r6, #0]
 800a81a:	2000      	movs	r0, #0
 800a81c:	bd70      	pop	{r4, r5, r6, pc}
 800a81e:	f000 ffff 	bl	800b820 <__malloc_lock>
 800a822:	4a21      	ldr	r2, [pc, #132]	; (800a8a8 <_malloc_r+0xac>)
 800a824:	6814      	ldr	r4, [r2, #0]
 800a826:	4621      	mov	r1, r4
 800a828:	b991      	cbnz	r1, 800a850 <_malloc_r+0x54>
 800a82a:	4c20      	ldr	r4, [pc, #128]	; (800a8ac <_malloc_r+0xb0>)
 800a82c:	6823      	ldr	r3, [r4, #0]
 800a82e:	b91b      	cbnz	r3, 800a838 <_malloc_r+0x3c>
 800a830:	4630      	mov	r0, r6
 800a832:	f000 fe19 	bl	800b468 <_sbrk_r>
 800a836:	6020      	str	r0, [r4, #0]
 800a838:	4629      	mov	r1, r5
 800a83a:	4630      	mov	r0, r6
 800a83c:	f000 fe14 	bl	800b468 <_sbrk_r>
 800a840:	1c43      	adds	r3, r0, #1
 800a842:	d124      	bne.n	800a88e <_malloc_r+0x92>
 800a844:	230c      	movs	r3, #12
 800a846:	6033      	str	r3, [r6, #0]
 800a848:	4630      	mov	r0, r6
 800a84a:	f000 ffea 	bl	800b822 <__malloc_unlock>
 800a84e:	e7e4      	b.n	800a81a <_malloc_r+0x1e>
 800a850:	680b      	ldr	r3, [r1, #0]
 800a852:	1b5b      	subs	r3, r3, r5
 800a854:	d418      	bmi.n	800a888 <_malloc_r+0x8c>
 800a856:	2b0b      	cmp	r3, #11
 800a858:	d90f      	bls.n	800a87a <_malloc_r+0x7e>
 800a85a:	600b      	str	r3, [r1, #0]
 800a85c:	50cd      	str	r5, [r1, r3]
 800a85e:	18cc      	adds	r4, r1, r3
 800a860:	4630      	mov	r0, r6
 800a862:	f000 ffde 	bl	800b822 <__malloc_unlock>
 800a866:	f104 000b 	add.w	r0, r4, #11
 800a86a:	1d23      	adds	r3, r4, #4
 800a86c:	f020 0007 	bic.w	r0, r0, #7
 800a870:	1ac3      	subs	r3, r0, r3
 800a872:	d0d3      	beq.n	800a81c <_malloc_r+0x20>
 800a874:	425a      	negs	r2, r3
 800a876:	50e2      	str	r2, [r4, r3]
 800a878:	e7d0      	b.n	800a81c <_malloc_r+0x20>
 800a87a:	428c      	cmp	r4, r1
 800a87c:	684b      	ldr	r3, [r1, #4]
 800a87e:	bf16      	itet	ne
 800a880:	6063      	strne	r3, [r4, #4]
 800a882:	6013      	streq	r3, [r2, #0]
 800a884:	460c      	movne	r4, r1
 800a886:	e7eb      	b.n	800a860 <_malloc_r+0x64>
 800a888:	460c      	mov	r4, r1
 800a88a:	6849      	ldr	r1, [r1, #4]
 800a88c:	e7cc      	b.n	800a828 <_malloc_r+0x2c>
 800a88e:	1cc4      	adds	r4, r0, #3
 800a890:	f024 0403 	bic.w	r4, r4, #3
 800a894:	42a0      	cmp	r0, r4
 800a896:	d005      	beq.n	800a8a4 <_malloc_r+0xa8>
 800a898:	1a21      	subs	r1, r4, r0
 800a89a:	4630      	mov	r0, r6
 800a89c:	f000 fde4 	bl	800b468 <_sbrk_r>
 800a8a0:	3001      	adds	r0, #1
 800a8a2:	d0cf      	beq.n	800a844 <_malloc_r+0x48>
 800a8a4:	6025      	str	r5, [r4, #0]
 800a8a6:	e7db      	b.n	800a860 <_malloc_r+0x64>
 800a8a8:	200004d8 	.word	0x200004d8
 800a8ac:	200004dc 	.word	0x200004dc

0800a8b0 <_sungetc_r>:
 800a8b0:	b538      	push	{r3, r4, r5, lr}
 800a8b2:	1c4b      	adds	r3, r1, #1
 800a8b4:	4614      	mov	r4, r2
 800a8b6:	d103      	bne.n	800a8c0 <_sungetc_r+0x10>
 800a8b8:	f04f 35ff 	mov.w	r5, #4294967295
 800a8bc:	4628      	mov	r0, r5
 800a8be:	bd38      	pop	{r3, r4, r5, pc}
 800a8c0:	8993      	ldrh	r3, [r2, #12]
 800a8c2:	f023 0320 	bic.w	r3, r3, #32
 800a8c6:	8193      	strh	r3, [r2, #12]
 800a8c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8ca:	6852      	ldr	r2, [r2, #4]
 800a8cc:	b2cd      	uxtb	r5, r1
 800a8ce:	b18b      	cbz	r3, 800a8f4 <_sungetc_r+0x44>
 800a8d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	dd08      	ble.n	800a8e8 <_sungetc_r+0x38>
 800a8d6:	6823      	ldr	r3, [r4, #0]
 800a8d8:	1e5a      	subs	r2, r3, #1
 800a8da:	6022      	str	r2, [r4, #0]
 800a8dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a8e0:	6863      	ldr	r3, [r4, #4]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	6063      	str	r3, [r4, #4]
 800a8e6:	e7e9      	b.n	800a8bc <_sungetc_r+0xc>
 800a8e8:	4621      	mov	r1, r4
 800a8ea:	f000 ff19 	bl	800b720 <__submore>
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	d0f1      	beq.n	800a8d6 <_sungetc_r+0x26>
 800a8f2:	e7e1      	b.n	800a8b8 <_sungetc_r+0x8>
 800a8f4:	6921      	ldr	r1, [r4, #16]
 800a8f6:	6823      	ldr	r3, [r4, #0]
 800a8f8:	b151      	cbz	r1, 800a910 <_sungetc_r+0x60>
 800a8fa:	4299      	cmp	r1, r3
 800a8fc:	d208      	bcs.n	800a910 <_sungetc_r+0x60>
 800a8fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a902:	42a9      	cmp	r1, r5
 800a904:	d104      	bne.n	800a910 <_sungetc_r+0x60>
 800a906:	3b01      	subs	r3, #1
 800a908:	3201      	adds	r2, #1
 800a90a:	6023      	str	r3, [r4, #0]
 800a90c:	6062      	str	r2, [r4, #4]
 800a90e:	e7d5      	b.n	800a8bc <_sungetc_r+0xc>
 800a910:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a918:	6363      	str	r3, [r4, #52]	; 0x34
 800a91a:	2303      	movs	r3, #3
 800a91c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a91e:	4623      	mov	r3, r4
 800a920:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a924:	6023      	str	r3, [r4, #0]
 800a926:	2301      	movs	r3, #1
 800a928:	e7dc      	b.n	800a8e4 <_sungetc_r+0x34>

0800a92a <__ssrefill_r>:
 800a92a:	b510      	push	{r4, lr}
 800a92c:	460c      	mov	r4, r1
 800a92e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a930:	b169      	cbz	r1, 800a94e <__ssrefill_r+0x24>
 800a932:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a936:	4299      	cmp	r1, r3
 800a938:	d001      	beq.n	800a93e <__ssrefill_r+0x14>
 800a93a:	f7ff ff11 	bl	800a760 <_free_r>
 800a93e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a940:	6063      	str	r3, [r4, #4]
 800a942:	2000      	movs	r0, #0
 800a944:	6360      	str	r0, [r4, #52]	; 0x34
 800a946:	b113      	cbz	r3, 800a94e <__ssrefill_r+0x24>
 800a948:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a94a:	6023      	str	r3, [r4, #0]
 800a94c:	bd10      	pop	{r4, pc}
 800a94e:	6923      	ldr	r3, [r4, #16]
 800a950:	6023      	str	r3, [r4, #0]
 800a952:	2300      	movs	r3, #0
 800a954:	6063      	str	r3, [r4, #4]
 800a956:	89a3      	ldrh	r3, [r4, #12]
 800a958:	f043 0320 	orr.w	r3, r3, #32
 800a95c:	81a3      	strh	r3, [r4, #12]
 800a95e:	f04f 30ff 	mov.w	r0, #4294967295
 800a962:	e7f3      	b.n	800a94c <__ssrefill_r+0x22>

0800a964 <__ssvfiscanf_r>:
 800a964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a968:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a96c:	460c      	mov	r4, r1
 800a96e:	2100      	movs	r1, #0
 800a970:	9144      	str	r1, [sp, #272]	; 0x110
 800a972:	9145      	str	r1, [sp, #276]	; 0x114
 800a974:	499f      	ldr	r1, [pc, #636]	; (800abf4 <__ssvfiscanf_r+0x290>)
 800a976:	91a0      	str	r1, [sp, #640]	; 0x280
 800a978:	f10d 0804 	add.w	r8, sp, #4
 800a97c:	499e      	ldr	r1, [pc, #632]	; (800abf8 <__ssvfiscanf_r+0x294>)
 800a97e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800abfc <__ssvfiscanf_r+0x298>
 800a982:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a986:	4606      	mov	r6, r0
 800a988:	4692      	mov	sl, r2
 800a98a:	91a1      	str	r1, [sp, #644]	; 0x284
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	270a      	movs	r7, #10
 800a990:	f89a 3000 	ldrb.w	r3, [sl]
 800a994:	2b00      	cmp	r3, #0
 800a996:	f000 812a 	beq.w	800abee <__ssvfiscanf_r+0x28a>
 800a99a:	4655      	mov	r5, sl
 800a99c:	f000 ff20 	bl	800b7e0 <__locale_ctype_ptr>
 800a9a0:	f815 bb01 	ldrb.w	fp, [r5], #1
 800a9a4:	4458      	add	r0, fp
 800a9a6:	7843      	ldrb	r3, [r0, #1]
 800a9a8:	f013 0308 	ands.w	r3, r3, #8
 800a9ac:	d01c      	beq.n	800a9e8 <__ssvfiscanf_r+0x84>
 800a9ae:	6863      	ldr	r3, [r4, #4]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	dd12      	ble.n	800a9da <__ssvfiscanf_r+0x76>
 800a9b4:	f000 ff14 	bl	800b7e0 <__locale_ctype_ptr>
 800a9b8:	6823      	ldr	r3, [r4, #0]
 800a9ba:	781a      	ldrb	r2, [r3, #0]
 800a9bc:	4410      	add	r0, r2
 800a9be:	7842      	ldrb	r2, [r0, #1]
 800a9c0:	0712      	lsls	r2, r2, #28
 800a9c2:	d401      	bmi.n	800a9c8 <__ssvfiscanf_r+0x64>
 800a9c4:	46aa      	mov	sl, r5
 800a9c6:	e7e3      	b.n	800a990 <__ssvfiscanf_r+0x2c>
 800a9c8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a9ca:	3201      	adds	r2, #1
 800a9cc:	9245      	str	r2, [sp, #276]	; 0x114
 800a9ce:	6862      	ldr	r2, [r4, #4]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	3a01      	subs	r2, #1
 800a9d4:	6062      	str	r2, [r4, #4]
 800a9d6:	6023      	str	r3, [r4, #0]
 800a9d8:	e7e9      	b.n	800a9ae <__ssvfiscanf_r+0x4a>
 800a9da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a9dc:	4621      	mov	r1, r4
 800a9de:	4630      	mov	r0, r6
 800a9e0:	4798      	blx	r3
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	d0e6      	beq.n	800a9b4 <__ssvfiscanf_r+0x50>
 800a9e6:	e7ed      	b.n	800a9c4 <__ssvfiscanf_r+0x60>
 800a9e8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800a9ec:	f040 8082 	bne.w	800aaf4 <__ssvfiscanf_r+0x190>
 800a9f0:	9343      	str	r3, [sp, #268]	; 0x10c
 800a9f2:	9341      	str	r3, [sp, #260]	; 0x104
 800a9f4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800a9f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a9fa:	d103      	bne.n	800aa04 <__ssvfiscanf_r+0xa0>
 800a9fc:	2310      	movs	r3, #16
 800a9fe:	9341      	str	r3, [sp, #260]	; 0x104
 800aa00:	f10a 0502 	add.w	r5, sl, #2
 800aa04:	46aa      	mov	sl, r5
 800aa06:	f815 1b01 	ldrb.w	r1, [r5], #1
 800aa0a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800aa0e:	2a09      	cmp	r2, #9
 800aa10:	d922      	bls.n	800aa58 <__ssvfiscanf_r+0xf4>
 800aa12:	2203      	movs	r2, #3
 800aa14:	4879      	ldr	r0, [pc, #484]	; (800abfc <__ssvfiscanf_r+0x298>)
 800aa16:	f7f5 fbe3 	bl	80001e0 <memchr>
 800aa1a:	b138      	cbz	r0, 800aa2c <__ssvfiscanf_r+0xc8>
 800aa1c:	eba0 0309 	sub.w	r3, r0, r9
 800aa20:	2001      	movs	r0, #1
 800aa22:	4098      	lsls	r0, r3
 800aa24:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800aa26:	4318      	orrs	r0, r3
 800aa28:	9041      	str	r0, [sp, #260]	; 0x104
 800aa2a:	46aa      	mov	sl, r5
 800aa2c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa30:	2b67      	cmp	r3, #103	; 0x67
 800aa32:	f10a 0501 	add.w	r5, sl, #1
 800aa36:	d82b      	bhi.n	800aa90 <__ssvfiscanf_r+0x12c>
 800aa38:	2b65      	cmp	r3, #101	; 0x65
 800aa3a:	f080 809f 	bcs.w	800ab7c <__ssvfiscanf_r+0x218>
 800aa3e:	2b47      	cmp	r3, #71	; 0x47
 800aa40:	d810      	bhi.n	800aa64 <__ssvfiscanf_r+0x100>
 800aa42:	2b45      	cmp	r3, #69	; 0x45
 800aa44:	f080 809a 	bcs.w	800ab7c <__ssvfiscanf_r+0x218>
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d06c      	beq.n	800ab26 <__ssvfiscanf_r+0x1c2>
 800aa4c:	2b25      	cmp	r3, #37	; 0x25
 800aa4e:	d051      	beq.n	800aaf4 <__ssvfiscanf_r+0x190>
 800aa50:	2303      	movs	r3, #3
 800aa52:	9347      	str	r3, [sp, #284]	; 0x11c
 800aa54:	9742      	str	r7, [sp, #264]	; 0x108
 800aa56:	e027      	b.n	800aaa8 <__ssvfiscanf_r+0x144>
 800aa58:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800aa5a:	fb07 1303 	mla	r3, r7, r3, r1
 800aa5e:	3b30      	subs	r3, #48	; 0x30
 800aa60:	9343      	str	r3, [sp, #268]	; 0x10c
 800aa62:	e7cf      	b.n	800aa04 <__ssvfiscanf_r+0xa0>
 800aa64:	2b5b      	cmp	r3, #91	; 0x5b
 800aa66:	d06a      	beq.n	800ab3e <__ssvfiscanf_r+0x1da>
 800aa68:	d80c      	bhi.n	800aa84 <__ssvfiscanf_r+0x120>
 800aa6a:	2b58      	cmp	r3, #88	; 0x58
 800aa6c:	d1f0      	bne.n	800aa50 <__ssvfiscanf_r+0xec>
 800aa6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800aa70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa74:	9241      	str	r2, [sp, #260]	; 0x104
 800aa76:	2210      	movs	r2, #16
 800aa78:	9242      	str	r2, [sp, #264]	; 0x108
 800aa7a:	2b6e      	cmp	r3, #110	; 0x6e
 800aa7c:	bf8c      	ite	hi
 800aa7e:	2304      	movhi	r3, #4
 800aa80:	2303      	movls	r3, #3
 800aa82:	e010      	b.n	800aaa6 <__ssvfiscanf_r+0x142>
 800aa84:	2b63      	cmp	r3, #99	; 0x63
 800aa86:	d065      	beq.n	800ab54 <__ssvfiscanf_r+0x1f0>
 800aa88:	2b64      	cmp	r3, #100	; 0x64
 800aa8a:	d1e1      	bne.n	800aa50 <__ssvfiscanf_r+0xec>
 800aa8c:	9742      	str	r7, [sp, #264]	; 0x108
 800aa8e:	e7f4      	b.n	800aa7a <__ssvfiscanf_r+0x116>
 800aa90:	2b70      	cmp	r3, #112	; 0x70
 800aa92:	d04b      	beq.n	800ab2c <__ssvfiscanf_r+0x1c8>
 800aa94:	d826      	bhi.n	800aae4 <__ssvfiscanf_r+0x180>
 800aa96:	2b6e      	cmp	r3, #110	; 0x6e
 800aa98:	d062      	beq.n	800ab60 <__ssvfiscanf_r+0x1fc>
 800aa9a:	d84c      	bhi.n	800ab36 <__ssvfiscanf_r+0x1d2>
 800aa9c:	2b69      	cmp	r3, #105	; 0x69
 800aa9e:	d1d7      	bne.n	800aa50 <__ssvfiscanf_r+0xec>
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	9342      	str	r3, [sp, #264]	; 0x108
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	9347      	str	r3, [sp, #284]	; 0x11c
 800aaa8:	6863      	ldr	r3, [r4, #4]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	dd68      	ble.n	800ab80 <__ssvfiscanf_r+0x21c>
 800aaae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800aab0:	0659      	lsls	r1, r3, #25
 800aab2:	d407      	bmi.n	800aac4 <__ssvfiscanf_r+0x160>
 800aab4:	f000 fe94 	bl	800b7e0 <__locale_ctype_ptr>
 800aab8:	6823      	ldr	r3, [r4, #0]
 800aaba:	781a      	ldrb	r2, [r3, #0]
 800aabc:	4410      	add	r0, r2
 800aabe:	7842      	ldrb	r2, [r0, #1]
 800aac0:	0712      	lsls	r2, r2, #28
 800aac2:	d464      	bmi.n	800ab8e <__ssvfiscanf_r+0x22a>
 800aac4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	dc73      	bgt.n	800abb2 <__ssvfiscanf_r+0x24e>
 800aaca:	466b      	mov	r3, sp
 800aacc:	4622      	mov	r2, r4
 800aace:	a941      	add	r1, sp, #260	; 0x104
 800aad0:	4630      	mov	r0, r6
 800aad2:	f000 fb5f 	bl	800b194 <_scanf_chars>
 800aad6:	2801      	cmp	r0, #1
 800aad8:	f000 8089 	beq.w	800abee <__ssvfiscanf_r+0x28a>
 800aadc:	2802      	cmp	r0, #2
 800aade:	f47f af71 	bne.w	800a9c4 <__ssvfiscanf_r+0x60>
 800aae2:	e01d      	b.n	800ab20 <__ssvfiscanf_r+0x1bc>
 800aae4:	2b75      	cmp	r3, #117	; 0x75
 800aae6:	d0d1      	beq.n	800aa8c <__ssvfiscanf_r+0x128>
 800aae8:	2b78      	cmp	r3, #120	; 0x78
 800aaea:	d0c0      	beq.n	800aa6e <__ssvfiscanf_r+0x10a>
 800aaec:	2b73      	cmp	r3, #115	; 0x73
 800aaee:	d1af      	bne.n	800aa50 <__ssvfiscanf_r+0xec>
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	e7d8      	b.n	800aaa6 <__ssvfiscanf_r+0x142>
 800aaf4:	6863      	ldr	r3, [r4, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	dd0c      	ble.n	800ab14 <__ssvfiscanf_r+0x1b0>
 800aafa:	6823      	ldr	r3, [r4, #0]
 800aafc:	781a      	ldrb	r2, [r3, #0]
 800aafe:	455a      	cmp	r2, fp
 800ab00:	d175      	bne.n	800abee <__ssvfiscanf_r+0x28a>
 800ab02:	3301      	adds	r3, #1
 800ab04:	6862      	ldr	r2, [r4, #4]
 800ab06:	6023      	str	r3, [r4, #0]
 800ab08:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ab0a:	3a01      	subs	r2, #1
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	6062      	str	r2, [r4, #4]
 800ab10:	9345      	str	r3, [sp, #276]	; 0x114
 800ab12:	e757      	b.n	800a9c4 <__ssvfiscanf_r+0x60>
 800ab14:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ab16:	4621      	mov	r1, r4
 800ab18:	4630      	mov	r0, r6
 800ab1a:	4798      	blx	r3
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d0ec      	beq.n	800aafa <__ssvfiscanf_r+0x196>
 800ab20:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ab22:	2800      	cmp	r0, #0
 800ab24:	d159      	bne.n	800abda <__ssvfiscanf_r+0x276>
 800ab26:	f04f 30ff 	mov.w	r0, #4294967295
 800ab2a:	e05c      	b.n	800abe6 <__ssvfiscanf_r+0x282>
 800ab2c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ab2e:	f042 0220 	orr.w	r2, r2, #32
 800ab32:	9241      	str	r2, [sp, #260]	; 0x104
 800ab34:	e79b      	b.n	800aa6e <__ssvfiscanf_r+0x10a>
 800ab36:	2308      	movs	r3, #8
 800ab38:	9342      	str	r3, [sp, #264]	; 0x108
 800ab3a:	2304      	movs	r3, #4
 800ab3c:	e7b3      	b.n	800aaa6 <__ssvfiscanf_r+0x142>
 800ab3e:	4629      	mov	r1, r5
 800ab40:	4640      	mov	r0, r8
 800ab42:	f000 fca1 	bl	800b488 <__sccl>
 800ab46:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ab48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab4c:	9341      	str	r3, [sp, #260]	; 0x104
 800ab4e:	4605      	mov	r5, r0
 800ab50:	2301      	movs	r3, #1
 800ab52:	e7a8      	b.n	800aaa6 <__ssvfiscanf_r+0x142>
 800ab54:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ab56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab5a:	9341      	str	r3, [sp, #260]	; 0x104
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	e7a2      	b.n	800aaa6 <__ssvfiscanf_r+0x142>
 800ab60:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ab62:	06c3      	lsls	r3, r0, #27
 800ab64:	f53f af2e 	bmi.w	800a9c4 <__ssvfiscanf_r+0x60>
 800ab68:	9b00      	ldr	r3, [sp, #0]
 800ab6a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ab6c:	1d19      	adds	r1, r3, #4
 800ab6e:	9100      	str	r1, [sp, #0]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	07c0      	lsls	r0, r0, #31
 800ab74:	bf4c      	ite	mi
 800ab76:	801a      	strhmi	r2, [r3, #0]
 800ab78:	601a      	strpl	r2, [r3, #0]
 800ab7a:	e723      	b.n	800a9c4 <__ssvfiscanf_r+0x60>
 800ab7c:	2305      	movs	r3, #5
 800ab7e:	e792      	b.n	800aaa6 <__ssvfiscanf_r+0x142>
 800ab80:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ab82:	4621      	mov	r1, r4
 800ab84:	4630      	mov	r0, r6
 800ab86:	4798      	blx	r3
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d090      	beq.n	800aaae <__ssvfiscanf_r+0x14a>
 800ab8c:	e7c8      	b.n	800ab20 <__ssvfiscanf_r+0x1bc>
 800ab8e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ab90:	3201      	adds	r2, #1
 800ab92:	9245      	str	r2, [sp, #276]	; 0x114
 800ab94:	6862      	ldr	r2, [r4, #4]
 800ab96:	3a01      	subs	r2, #1
 800ab98:	2a00      	cmp	r2, #0
 800ab9a:	6062      	str	r2, [r4, #4]
 800ab9c:	dd02      	ble.n	800aba4 <__ssvfiscanf_r+0x240>
 800ab9e:	3301      	adds	r3, #1
 800aba0:	6023      	str	r3, [r4, #0]
 800aba2:	e787      	b.n	800aab4 <__ssvfiscanf_r+0x150>
 800aba4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800aba6:	4621      	mov	r1, r4
 800aba8:	4630      	mov	r0, r6
 800abaa:	4798      	blx	r3
 800abac:	2800      	cmp	r0, #0
 800abae:	d081      	beq.n	800aab4 <__ssvfiscanf_r+0x150>
 800abb0:	e7b6      	b.n	800ab20 <__ssvfiscanf_r+0x1bc>
 800abb2:	2b04      	cmp	r3, #4
 800abb4:	dc06      	bgt.n	800abc4 <__ssvfiscanf_r+0x260>
 800abb6:	466b      	mov	r3, sp
 800abb8:	4622      	mov	r2, r4
 800abba:	a941      	add	r1, sp, #260	; 0x104
 800abbc:	4630      	mov	r0, r6
 800abbe:	f000 fb4d 	bl	800b25c <_scanf_i>
 800abc2:	e788      	b.n	800aad6 <__ssvfiscanf_r+0x172>
 800abc4:	4b0e      	ldr	r3, [pc, #56]	; (800ac00 <__ssvfiscanf_r+0x29c>)
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	f43f aefc 	beq.w	800a9c4 <__ssvfiscanf_r+0x60>
 800abcc:	466b      	mov	r3, sp
 800abce:	4622      	mov	r2, r4
 800abd0:	a941      	add	r1, sp, #260	; 0x104
 800abd2:	4630      	mov	r0, r6
 800abd4:	f3af 8000 	nop.w
 800abd8:	e77d      	b.n	800aad6 <__ssvfiscanf_r+0x172>
 800abda:	89a3      	ldrh	r3, [r4, #12]
 800abdc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800abe0:	bf18      	it	ne
 800abe2:	f04f 30ff 	movne.w	r0, #4294967295
 800abe6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800abea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abee:	9844      	ldr	r0, [sp, #272]	; 0x110
 800abf0:	e7f9      	b.n	800abe6 <__ssvfiscanf_r+0x282>
 800abf2:	bf00      	nop
 800abf4:	0800a8b1 	.word	0x0800a8b1
 800abf8:	0800a92b 	.word	0x0800a92b
 800abfc:	0800c4b4 	.word	0x0800c4b4
 800ac00:	00000000 	.word	0x00000000

0800ac04 <__sfputc_r>:
 800ac04:	6893      	ldr	r3, [r2, #8]
 800ac06:	3b01      	subs	r3, #1
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	b410      	push	{r4}
 800ac0c:	6093      	str	r3, [r2, #8]
 800ac0e:	da08      	bge.n	800ac22 <__sfputc_r+0x1e>
 800ac10:	6994      	ldr	r4, [r2, #24]
 800ac12:	42a3      	cmp	r3, r4
 800ac14:	db01      	blt.n	800ac1a <__sfputc_r+0x16>
 800ac16:	290a      	cmp	r1, #10
 800ac18:	d103      	bne.n	800ac22 <__sfputc_r+0x1e>
 800ac1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac1e:	f7ff bacd 	b.w	800a1bc <__swbuf_r>
 800ac22:	6813      	ldr	r3, [r2, #0]
 800ac24:	1c58      	adds	r0, r3, #1
 800ac26:	6010      	str	r0, [r2, #0]
 800ac28:	7019      	strb	r1, [r3, #0]
 800ac2a:	4608      	mov	r0, r1
 800ac2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <__sfputs_r>:
 800ac32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac34:	4606      	mov	r6, r0
 800ac36:	460f      	mov	r7, r1
 800ac38:	4614      	mov	r4, r2
 800ac3a:	18d5      	adds	r5, r2, r3
 800ac3c:	42ac      	cmp	r4, r5
 800ac3e:	d101      	bne.n	800ac44 <__sfputs_r+0x12>
 800ac40:	2000      	movs	r0, #0
 800ac42:	e007      	b.n	800ac54 <__sfputs_r+0x22>
 800ac44:	463a      	mov	r2, r7
 800ac46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	f7ff ffda 	bl	800ac04 <__sfputc_r>
 800ac50:	1c43      	adds	r3, r0, #1
 800ac52:	d1f3      	bne.n	800ac3c <__sfputs_r+0xa>
 800ac54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac58 <_vfiprintf_r>:
 800ac58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5c:	460c      	mov	r4, r1
 800ac5e:	b09d      	sub	sp, #116	; 0x74
 800ac60:	4617      	mov	r7, r2
 800ac62:	461d      	mov	r5, r3
 800ac64:	4606      	mov	r6, r0
 800ac66:	b118      	cbz	r0, 800ac70 <_vfiprintf_r+0x18>
 800ac68:	6983      	ldr	r3, [r0, #24]
 800ac6a:	b90b      	cbnz	r3, 800ac70 <_vfiprintf_r+0x18>
 800ac6c:	f7ff fc78 	bl	800a560 <__sinit>
 800ac70:	4b7c      	ldr	r3, [pc, #496]	; (800ae64 <_vfiprintf_r+0x20c>)
 800ac72:	429c      	cmp	r4, r3
 800ac74:	d158      	bne.n	800ad28 <_vfiprintf_r+0xd0>
 800ac76:	6874      	ldr	r4, [r6, #4]
 800ac78:	89a3      	ldrh	r3, [r4, #12]
 800ac7a:	0718      	lsls	r0, r3, #28
 800ac7c:	d55e      	bpl.n	800ad3c <_vfiprintf_r+0xe4>
 800ac7e:	6923      	ldr	r3, [r4, #16]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d05b      	beq.n	800ad3c <_vfiprintf_r+0xe4>
 800ac84:	2300      	movs	r3, #0
 800ac86:	9309      	str	r3, [sp, #36]	; 0x24
 800ac88:	2320      	movs	r3, #32
 800ac8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac8e:	2330      	movs	r3, #48	; 0x30
 800ac90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac94:	9503      	str	r5, [sp, #12]
 800ac96:	f04f 0b01 	mov.w	fp, #1
 800ac9a:	46b8      	mov	r8, r7
 800ac9c:	4645      	mov	r5, r8
 800ac9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aca2:	b10b      	cbz	r3, 800aca8 <_vfiprintf_r+0x50>
 800aca4:	2b25      	cmp	r3, #37	; 0x25
 800aca6:	d154      	bne.n	800ad52 <_vfiprintf_r+0xfa>
 800aca8:	ebb8 0a07 	subs.w	sl, r8, r7
 800acac:	d00b      	beq.n	800acc6 <_vfiprintf_r+0x6e>
 800acae:	4653      	mov	r3, sl
 800acb0:	463a      	mov	r2, r7
 800acb2:	4621      	mov	r1, r4
 800acb4:	4630      	mov	r0, r6
 800acb6:	f7ff ffbc 	bl	800ac32 <__sfputs_r>
 800acba:	3001      	adds	r0, #1
 800acbc:	f000 80c2 	beq.w	800ae44 <_vfiprintf_r+0x1ec>
 800acc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acc2:	4453      	add	r3, sl
 800acc4:	9309      	str	r3, [sp, #36]	; 0x24
 800acc6:	f898 3000 	ldrb.w	r3, [r8]
 800acca:	2b00      	cmp	r3, #0
 800accc:	f000 80ba 	beq.w	800ae44 <_vfiprintf_r+0x1ec>
 800acd0:	2300      	movs	r3, #0
 800acd2:	f04f 32ff 	mov.w	r2, #4294967295
 800acd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acda:	9304      	str	r3, [sp, #16]
 800acdc:	9307      	str	r3, [sp, #28]
 800acde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ace2:	931a      	str	r3, [sp, #104]	; 0x68
 800ace4:	46a8      	mov	r8, r5
 800ace6:	2205      	movs	r2, #5
 800ace8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800acec:	485e      	ldr	r0, [pc, #376]	; (800ae68 <_vfiprintf_r+0x210>)
 800acee:	f7f5 fa77 	bl	80001e0 <memchr>
 800acf2:	9b04      	ldr	r3, [sp, #16]
 800acf4:	bb78      	cbnz	r0, 800ad56 <_vfiprintf_r+0xfe>
 800acf6:	06d9      	lsls	r1, r3, #27
 800acf8:	bf44      	itt	mi
 800acfa:	2220      	movmi	r2, #32
 800acfc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ad00:	071a      	lsls	r2, r3, #28
 800ad02:	bf44      	itt	mi
 800ad04:	222b      	movmi	r2, #43	; 0x2b
 800ad06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ad0a:	782a      	ldrb	r2, [r5, #0]
 800ad0c:	2a2a      	cmp	r2, #42	; 0x2a
 800ad0e:	d02a      	beq.n	800ad66 <_vfiprintf_r+0x10e>
 800ad10:	9a07      	ldr	r2, [sp, #28]
 800ad12:	46a8      	mov	r8, r5
 800ad14:	2000      	movs	r0, #0
 800ad16:	250a      	movs	r5, #10
 800ad18:	4641      	mov	r1, r8
 800ad1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad1e:	3b30      	subs	r3, #48	; 0x30
 800ad20:	2b09      	cmp	r3, #9
 800ad22:	d969      	bls.n	800adf8 <_vfiprintf_r+0x1a0>
 800ad24:	b360      	cbz	r0, 800ad80 <_vfiprintf_r+0x128>
 800ad26:	e024      	b.n	800ad72 <_vfiprintf_r+0x11a>
 800ad28:	4b50      	ldr	r3, [pc, #320]	; (800ae6c <_vfiprintf_r+0x214>)
 800ad2a:	429c      	cmp	r4, r3
 800ad2c:	d101      	bne.n	800ad32 <_vfiprintf_r+0xda>
 800ad2e:	68b4      	ldr	r4, [r6, #8]
 800ad30:	e7a2      	b.n	800ac78 <_vfiprintf_r+0x20>
 800ad32:	4b4f      	ldr	r3, [pc, #316]	; (800ae70 <_vfiprintf_r+0x218>)
 800ad34:	429c      	cmp	r4, r3
 800ad36:	bf08      	it	eq
 800ad38:	68f4      	ldreq	r4, [r6, #12]
 800ad3a:	e79d      	b.n	800ac78 <_vfiprintf_r+0x20>
 800ad3c:	4621      	mov	r1, r4
 800ad3e:	4630      	mov	r0, r6
 800ad40:	f7ff faa0 	bl	800a284 <__swsetup_r>
 800ad44:	2800      	cmp	r0, #0
 800ad46:	d09d      	beq.n	800ac84 <_vfiprintf_r+0x2c>
 800ad48:	f04f 30ff 	mov.w	r0, #4294967295
 800ad4c:	b01d      	add	sp, #116	; 0x74
 800ad4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad52:	46a8      	mov	r8, r5
 800ad54:	e7a2      	b.n	800ac9c <_vfiprintf_r+0x44>
 800ad56:	4a44      	ldr	r2, [pc, #272]	; (800ae68 <_vfiprintf_r+0x210>)
 800ad58:	1a80      	subs	r0, r0, r2
 800ad5a:	fa0b f000 	lsl.w	r0, fp, r0
 800ad5e:	4318      	orrs	r0, r3
 800ad60:	9004      	str	r0, [sp, #16]
 800ad62:	4645      	mov	r5, r8
 800ad64:	e7be      	b.n	800ace4 <_vfiprintf_r+0x8c>
 800ad66:	9a03      	ldr	r2, [sp, #12]
 800ad68:	1d11      	adds	r1, r2, #4
 800ad6a:	6812      	ldr	r2, [r2, #0]
 800ad6c:	9103      	str	r1, [sp, #12]
 800ad6e:	2a00      	cmp	r2, #0
 800ad70:	db01      	blt.n	800ad76 <_vfiprintf_r+0x11e>
 800ad72:	9207      	str	r2, [sp, #28]
 800ad74:	e004      	b.n	800ad80 <_vfiprintf_r+0x128>
 800ad76:	4252      	negs	r2, r2
 800ad78:	f043 0302 	orr.w	r3, r3, #2
 800ad7c:	9207      	str	r2, [sp, #28]
 800ad7e:	9304      	str	r3, [sp, #16]
 800ad80:	f898 3000 	ldrb.w	r3, [r8]
 800ad84:	2b2e      	cmp	r3, #46	; 0x2e
 800ad86:	d10e      	bne.n	800ada6 <_vfiprintf_r+0x14e>
 800ad88:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ad8c:	2b2a      	cmp	r3, #42	; 0x2a
 800ad8e:	d138      	bne.n	800ae02 <_vfiprintf_r+0x1aa>
 800ad90:	9b03      	ldr	r3, [sp, #12]
 800ad92:	1d1a      	adds	r2, r3, #4
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	9203      	str	r2, [sp, #12]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	bfb8      	it	lt
 800ad9c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ada0:	f108 0802 	add.w	r8, r8, #2
 800ada4:	9305      	str	r3, [sp, #20]
 800ada6:	4d33      	ldr	r5, [pc, #204]	; (800ae74 <_vfiprintf_r+0x21c>)
 800ada8:	f898 1000 	ldrb.w	r1, [r8]
 800adac:	2203      	movs	r2, #3
 800adae:	4628      	mov	r0, r5
 800adb0:	f7f5 fa16 	bl	80001e0 <memchr>
 800adb4:	b140      	cbz	r0, 800adc8 <_vfiprintf_r+0x170>
 800adb6:	2340      	movs	r3, #64	; 0x40
 800adb8:	1b40      	subs	r0, r0, r5
 800adba:	fa03 f000 	lsl.w	r0, r3, r0
 800adbe:	9b04      	ldr	r3, [sp, #16]
 800adc0:	4303      	orrs	r3, r0
 800adc2:	f108 0801 	add.w	r8, r8, #1
 800adc6:	9304      	str	r3, [sp, #16]
 800adc8:	f898 1000 	ldrb.w	r1, [r8]
 800adcc:	482a      	ldr	r0, [pc, #168]	; (800ae78 <_vfiprintf_r+0x220>)
 800adce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800add2:	2206      	movs	r2, #6
 800add4:	f108 0701 	add.w	r7, r8, #1
 800add8:	f7f5 fa02 	bl	80001e0 <memchr>
 800addc:	2800      	cmp	r0, #0
 800adde:	d037      	beq.n	800ae50 <_vfiprintf_r+0x1f8>
 800ade0:	4b26      	ldr	r3, [pc, #152]	; (800ae7c <_vfiprintf_r+0x224>)
 800ade2:	bb1b      	cbnz	r3, 800ae2c <_vfiprintf_r+0x1d4>
 800ade4:	9b03      	ldr	r3, [sp, #12]
 800ade6:	3307      	adds	r3, #7
 800ade8:	f023 0307 	bic.w	r3, r3, #7
 800adec:	3308      	adds	r3, #8
 800adee:	9303      	str	r3, [sp, #12]
 800adf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adf2:	444b      	add	r3, r9
 800adf4:	9309      	str	r3, [sp, #36]	; 0x24
 800adf6:	e750      	b.n	800ac9a <_vfiprintf_r+0x42>
 800adf8:	fb05 3202 	mla	r2, r5, r2, r3
 800adfc:	2001      	movs	r0, #1
 800adfe:	4688      	mov	r8, r1
 800ae00:	e78a      	b.n	800ad18 <_vfiprintf_r+0xc0>
 800ae02:	2300      	movs	r3, #0
 800ae04:	f108 0801 	add.w	r8, r8, #1
 800ae08:	9305      	str	r3, [sp, #20]
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	250a      	movs	r5, #10
 800ae0e:	4640      	mov	r0, r8
 800ae10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae14:	3a30      	subs	r2, #48	; 0x30
 800ae16:	2a09      	cmp	r2, #9
 800ae18:	d903      	bls.n	800ae22 <_vfiprintf_r+0x1ca>
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d0c3      	beq.n	800ada6 <_vfiprintf_r+0x14e>
 800ae1e:	9105      	str	r1, [sp, #20]
 800ae20:	e7c1      	b.n	800ada6 <_vfiprintf_r+0x14e>
 800ae22:	fb05 2101 	mla	r1, r5, r1, r2
 800ae26:	2301      	movs	r3, #1
 800ae28:	4680      	mov	r8, r0
 800ae2a:	e7f0      	b.n	800ae0e <_vfiprintf_r+0x1b6>
 800ae2c:	ab03      	add	r3, sp, #12
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	4622      	mov	r2, r4
 800ae32:	4b13      	ldr	r3, [pc, #76]	; (800ae80 <_vfiprintf_r+0x228>)
 800ae34:	a904      	add	r1, sp, #16
 800ae36:	4630      	mov	r0, r6
 800ae38:	f3af 8000 	nop.w
 800ae3c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ae40:	4681      	mov	r9, r0
 800ae42:	d1d5      	bne.n	800adf0 <_vfiprintf_r+0x198>
 800ae44:	89a3      	ldrh	r3, [r4, #12]
 800ae46:	065b      	lsls	r3, r3, #25
 800ae48:	f53f af7e 	bmi.w	800ad48 <_vfiprintf_r+0xf0>
 800ae4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae4e:	e77d      	b.n	800ad4c <_vfiprintf_r+0xf4>
 800ae50:	ab03      	add	r3, sp, #12
 800ae52:	9300      	str	r3, [sp, #0]
 800ae54:	4622      	mov	r2, r4
 800ae56:	4b0a      	ldr	r3, [pc, #40]	; (800ae80 <_vfiprintf_r+0x228>)
 800ae58:	a904      	add	r1, sp, #16
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	f000 f888 	bl	800af70 <_printf_i>
 800ae60:	e7ec      	b.n	800ae3c <_vfiprintf_r+0x1e4>
 800ae62:	bf00      	nop
 800ae64:	0800c474 	.word	0x0800c474
 800ae68:	0800c4b8 	.word	0x0800c4b8
 800ae6c:	0800c494 	.word	0x0800c494
 800ae70:	0800c454 	.word	0x0800c454
 800ae74:	0800c4b4 	.word	0x0800c4b4
 800ae78:	0800c4be 	.word	0x0800c4be
 800ae7c:	00000000 	.word	0x00000000
 800ae80:	0800ac33 	.word	0x0800ac33

0800ae84 <_printf_common>:
 800ae84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae88:	4691      	mov	r9, r2
 800ae8a:	461f      	mov	r7, r3
 800ae8c:	688a      	ldr	r2, [r1, #8]
 800ae8e:	690b      	ldr	r3, [r1, #16]
 800ae90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae94:	4293      	cmp	r3, r2
 800ae96:	bfb8      	it	lt
 800ae98:	4613      	movlt	r3, r2
 800ae9a:	f8c9 3000 	str.w	r3, [r9]
 800ae9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aea2:	4606      	mov	r6, r0
 800aea4:	460c      	mov	r4, r1
 800aea6:	b112      	cbz	r2, 800aeae <_printf_common+0x2a>
 800aea8:	3301      	adds	r3, #1
 800aeaa:	f8c9 3000 	str.w	r3, [r9]
 800aeae:	6823      	ldr	r3, [r4, #0]
 800aeb0:	0699      	lsls	r1, r3, #26
 800aeb2:	bf42      	ittt	mi
 800aeb4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800aeb8:	3302      	addmi	r3, #2
 800aeba:	f8c9 3000 	strmi.w	r3, [r9]
 800aebe:	6825      	ldr	r5, [r4, #0]
 800aec0:	f015 0506 	ands.w	r5, r5, #6
 800aec4:	d107      	bne.n	800aed6 <_printf_common+0x52>
 800aec6:	f104 0a19 	add.w	sl, r4, #25
 800aeca:	68e3      	ldr	r3, [r4, #12]
 800aecc:	f8d9 2000 	ldr.w	r2, [r9]
 800aed0:	1a9b      	subs	r3, r3, r2
 800aed2:	42ab      	cmp	r3, r5
 800aed4:	dc28      	bgt.n	800af28 <_printf_common+0xa4>
 800aed6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800aeda:	6822      	ldr	r2, [r4, #0]
 800aedc:	3300      	adds	r3, #0
 800aede:	bf18      	it	ne
 800aee0:	2301      	movne	r3, #1
 800aee2:	0692      	lsls	r2, r2, #26
 800aee4:	d42d      	bmi.n	800af42 <_printf_common+0xbe>
 800aee6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aeea:	4639      	mov	r1, r7
 800aeec:	4630      	mov	r0, r6
 800aeee:	47c0      	blx	r8
 800aef0:	3001      	adds	r0, #1
 800aef2:	d020      	beq.n	800af36 <_printf_common+0xb2>
 800aef4:	6823      	ldr	r3, [r4, #0]
 800aef6:	68e5      	ldr	r5, [r4, #12]
 800aef8:	f8d9 2000 	ldr.w	r2, [r9]
 800aefc:	f003 0306 	and.w	r3, r3, #6
 800af00:	2b04      	cmp	r3, #4
 800af02:	bf08      	it	eq
 800af04:	1aad      	subeq	r5, r5, r2
 800af06:	68a3      	ldr	r3, [r4, #8]
 800af08:	6922      	ldr	r2, [r4, #16]
 800af0a:	bf0c      	ite	eq
 800af0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af10:	2500      	movne	r5, #0
 800af12:	4293      	cmp	r3, r2
 800af14:	bfc4      	itt	gt
 800af16:	1a9b      	subgt	r3, r3, r2
 800af18:	18ed      	addgt	r5, r5, r3
 800af1a:	f04f 0900 	mov.w	r9, #0
 800af1e:	341a      	adds	r4, #26
 800af20:	454d      	cmp	r5, r9
 800af22:	d11a      	bne.n	800af5a <_printf_common+0xd6>
 800af24:	2000      	movs	r0, #0
 800af26:	e008      	b.n	800af3a <_printf_common+0xb6>
 800af28:	2301      	movs	r3, #1
 800af2a:	4652      	mov	r2, sl
 800af2c:	4639      	mov	r1, r7
 800af2e:	4630      	mov	r0, r6
 800af30:	47c0      	blx	r8
 800af32:	3001      	adds	r0, #1
 800af34:	d103      	bne.n	800af3e <_printf_common+0xba>
 800af36:	f04f 30ff 	mov.w	r0, #4294967295
 800af3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af3e:	3501      	adds	r5, #1
 800af40:	e7c3      	b.n	800aeca <_printf_common+0x46>
 800af42:	18e1      	adds	r1, r4, r3
 800af44:	1c5a      	adds	r2, r3, #1
 800af46:	2030      	movs	r0, #48	; 0x30
 800af48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af4c:	4422      	add	r2, r4
 800af4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af56:	3302      	adds	r3, #2
 800af58:	e7c5      	b.n	800aee6 <_printf_common+0x62>
 800af5a:	2301      	movs	r3, #1
 800af5c:	4622      	mov	r2, r4
 800af5e:	4639      	mov	r1, r7
 800af60:	4630      	mov	r0, r6
 800af62:	47c0      	blx	r8
 800af64:	3001      	adds	r0, #1
 800af66:	d0e6      	beq.n	800af36 <_printf_common+0xb2>
 800af68:	f109 0901 	add.w	r9, r9, #1
 800af6c:	e7d8      	b.n	800af20 <_printf_common+0x9c>
	...

0800af70 <_printf_i>:
 800af70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800af78:	460c      	mov	r4, r1
 800af7a:	7e09      	ldrb	r1, [r1, #24]
 800af7c:	b085      	sub	sp, #20
 800af7e:	296e      	cmp	r1, #110	; 0x6e
 800af80:	4617      	mov	r7, r2
 800af82:	4606      	mov	r6, r0
 800af84:	4698      	mov	r8, r3
 800af86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af88:	f000 80b3 	beq.w	800b0f2 <_printf_i+0x182>
 800af8c:	d822      	bhi.n	800afd4 <_printf_i+0x64>
 800af8e:	2963      	cmp	r1, #99	; 0x63
 800af90:	d036      	beq.n	800b000 <_printf_i+0x90>
 800af92:	d80a      	bhi.n	800afaa <_printf_i+0x3a>
 800af94:	2900      	cmp	r1, #0
 800af96:	f000 80b9 	beq.w	800b10c <_printf_i+0x19c>
 800af9a:	2958      	cmp	r1, #88	; 0x58
 800af9c:	f000 8083 	beq.w	800b0a6 <_printf_i+0x136>
 800afa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afa4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800afa8:	e032      	b.n	800b010 <_printf_i+0xa0>
 800afaa:	2964      	cmp	r1, #100	; 0x64
 800afac:	d001      	beq.n	800afb2 <_printf_i+0x42>
 800afae:	2969      	cmp	r1, #105	; 0x69
 800afb0:	d1f6      	bne.n	800afa0 <_printf_i+0x30>
 800afb2:	6820      	ldr	r0, [r4, #0]
 800afb4:	6813      	ldr	r3, [r2, #0]
 800afb6:	0605      	lsls	r5, r0, #24
 800afb8:	f103 0104 	add.w	r1, r3, #4
 800afbc:	d52a      	bpl.n	800b014 <_printf_i+0xa4>
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	6011      	str	r1, [r2, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	da03      	bge.n	800afce <_printf_i+0x5e>
 800afc6:	222d      	movs	r2, #45	; 0x2d
 800afc8:	425b      	negs	r3, r3
 800afca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800afce:	486f      	ldr	r0, [pc, #444]	; (800b18c <_printf_i+0x21c>)
 800afd0:	220a      	movs	r2, #10
 800afd2:	e039      	b.n	800b048 <_printf_i+0xd8>
 800afd4:	2973      	cmp	r1, #115	; 0x73
 800afd6:	f000 809d 	beq.w	800b114 <_printf_i+0x1a4>
 800afda:	d808      	bhi.n	800afee <_printf_i+0x7e>
 800afdc:	296f      	cmp	r1, #111	; 0x6f
 800afde:	d020      	beq.n	800b022 <_printf_i+0xb2>
 800afe0:	2970      	cmp	r1, #112	; 0x70
 800afe2:	d1dd      	bne.n	800afa0 <_printf_i+0x30>
 800afe4:	6823      	ldr	r3, [r4, #0]
 800afe6:	f043 0320 	orr.w	r3, r3, #32
 800afea:	6023      	str	r3, [r4, #0]
 800afec:	e003      	b.n	800aff6 <_printf_i+0x86>
 800afee:	2975      	cmp	r1, #117	; 0x75
 800aff0:	d017      	beq.n	800b022 <_printf_i+0xb2>
 800aff2:	2978      	cmp	r1, #120	; 0x78
 800aff4:	d1d4      	bne.n	800afa0 <_printf_i+0x30>
 800aff6:	2378      	movs	r3, #120	; 0x78
 800aff8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800affc:	4864      	ldr	r0, [pc, #400]	; (800b190 <_printf_i+0x220>)
 800affe:	e055      	b.n	800b0ac <_printf_i+0x13c>
 800b000:	6813      	ldr	r3, [r2, #0]
 800b002:	1d19      	adds	r1, r3, #4
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	6011      	str	r1, [r2, #0]
 800b008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b00c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b010:	2301      	movs	r3, #1
 800b012:	e08c      	b.n	800b12e <_printf_i+0x1be>
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	6011      	str	r1, [r2, #0]
 800b018:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b01c:	bf18      	it	ne
 800b01e:	b21b      	sxthne	r3, r3
 800b020:	e7cf      	b.n	800afc2 <_printf_i+0x52>
 800b022:	6813      	ldr	r3, [r2, #0]
 800b024:	6825      	ldr	r5, [r4, #0]
 800b026:	1d18      	adds	r0, r3, #4
 800b028:	6010      	str	r0, [r2, #0]
 800b02a:	0628      	lsls	r0, r5, #24
 800b02c:	d501      	bpl.n	800b032 <_printf_i+0xc2>
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	e002      	b.n	800b038 <_printf_i+0xc8>
 800b032:	0668      	lsls	r0, r5, #25
 800b034:	d5fb      	bpl.n	800b02e <_printf_i+0xbe>
 800b036:	881b      	ldrh	r3, [r3, #0]
 800b038:	4854      	ldr	r0, [pc, #336]	; (800b18c <_printf_i+0x21c>)
 800b03a:	296f      	cmp	r1, #111	; 0x6f
 800b03c:	bf14      	ite	ne
 800b03e:	220a      	movne	r2, #10
 800b040:	2208      	moveq	r2, #8
 800b042:	2100      	movs	r1, #0
 800b044:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b048:	6865      	ldr	r5, [r4, #4]
 800b04a:	60a5      	str	r5, [r4, #8]
 800b04c:	2d00      	cmp	r5, #0
 800b04e:	f2c0 8095 	blt.w	800b17c <_printf_i+0x20c>
 800b052:	6821      	ldr	r1, [r4, #0]
 800b054:	f021 0104 	bic.w	r1, r1, #4
 800b058:	6021      	str	r1, [r4, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d13d      	bne.n	800b0da <_printf_i+0x16a>
 800b05e:	2d00      	cmp	r5, #0
 800b060:	f040 808e 	bne.w	800b180 <_printf_i+0x210>
 800b064:	4665      	mov	r5, ip
 800b066:	2a08      	cmp	r2, #8
 800b068:	d10b      	bne.n	800b082 <_printf_i+0x112>
 800b06a:	6823      	ldr	r3, [r4, #0]
 800b06c:	07db      	lsls	r3, r3, #31
 800b06e:	d508      	bpl.n	800b082 <_printf_i+0x112>
 800b070:	6923      	ldr	r3, [r4, #16]
 800b072:	6862      	ldr	r2, [r4, #4]
 800b074:	429a      	cmp	r2, r3
 800b076:	bfde      	ittt	le
 800b078:	2330      	movle	r3, #48	; 0x30
 800b07a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b07e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b082:	ebac 0305 	sub.w	r3, ip, r5
 800b086:	6123      	str	r3, [r4, #16]
 800b088:	f8cd 8000 	str.w	r8, [sp]
 800b08c:	463b      	mov	r3, r7
 800b08e:	aa03      	add	r2, sp, #12
 800b090:	4621      	mov	r1, r4
 800b092:	4630      	mov	r0, r6
 800b094:	f7ff fef6 	bl	800ae84 <_printf_common>
 800b098:	3001      	adds	r0, #1
 800b09a:	d14d      	bne.n	800b138 <_printf_i+0x1c8>
 800b09c:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a0:	b005      	add	sp, #20
 800b0a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0a6:	4839      	ldr	r0, [pc, #228]	; (800b18c <_printf_i+0x21c>)
 800b0a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b0ac:	6813      	ldr	r3, [r2, #0]
 800b0ae:	6821      	ldr	r1, [r4, #0]
 800b0b0:	1d1d      	adds	r5, r3, #4
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	6015      	str	r5, [r2, #0]
 800b0b6:	060a      	lsls	r2, r1, #24
 800b0b8:	d50b      	bpl.n	800b0d2 <_printf_i+0x162>
 800b0ba:	07ca      	lsls	r2, r1, #31
 800b0bc:	bf44      	itt	mi
 800b0be:	f041 0120 	orrmi.w	r1, r1, #32
 800b0c2:	6021      	strmi	r1, [r4, #0]
 800b0c4:	b91b      	cbnz	r3, 800b0ce <_printf_i+0x15e>
 800b0c6:	6822      	ldr	r2, [r4, #0]
 800b0c8:	f022 0220 	bic.w	r2, r2, #32
 800b0cc:	6022      	str	r2, [r4, #0]
 800b0ce:	2210      	movs	r2, #16
 800b0d0:	e7b7      	b.n	800b042 <_printf_i+0xd2>
 800b0d2:	064d      	lsls	r5, r1, #25
 800b0d4:	bf48      	it	mi
 800b0d6:	b29b      	uxthmi	r3, r3
 800b0d8:	e7ef      	b.n	800b0ba <_printf_i+0x14a>
 800b0da:	4665      	mov	r5, ip
 800b0dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800b0e0:	fb02 3311 	mls	r3, r2, r1, r3
 800b0e4:	5cc3      	ldrb	r3, [r0, r3]
 800b0e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	2900      	cmp	r1, #0
 800b0ee:	d1f5      	bne.n	800b0dc <_printf_i+0x16c>
 800b0f0:	e7b9      	b.n	800b066 <_printf_i+0xf6>
 800b0f2:	6813      	ldr	r3, [r2, #0]
 800b0f4:	6825      	ldr	r5, [r4, #0]
 800b0f6:	6961      	ldr	r1, [r4, #20]
 800b0f8:	1d18      	adds	r0, r3, #4
 800b0fa:	6010      	str	r0, [r2, #0]
 800b0fc:	0628      	lsls	r0, r5, #24
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	d501      	bpl.n	800b106 <_printf_i+0x196>
 800b102:	6019      	str	r1, [r3, #0]
 800b104:	e002      	b.n	800b10c <_printf_i+0x19c>
 800b106:	066a      	lsls	r2, r5, #25
 800b108:	d5fb      	bpl.n	800b102 <_printf_i+0x192>
 800b10a:	8019      	strh	r1, [r3, #0]
 800b10c:	2300      	movs	r3, #0
 800b10e:	6123      	str	r3, [r4, #16]
 800b110:	4665      	mov	r5, ip
 800b112:	e7b9      	b.n	800b088 <_printf_i+0x118>
 800b114:	6813      	ldr	r3, [r2, #0]
 800b116:	1d19      	adds	r1, r3, #4
 800b118:	6011      	str	r1, [r2, #0]
 800b11a:	681d      	ldr	r5, [r3, #0]
 800b11c:	6862      	ldr	r2, [r4, #4]
 800b11e:	2100      	movs	r1, #0
 800b120:	4628      	mov	r0, r5
 800b122:	f7f5 f85d 	bl	80001e0 <memchr>
 800b126:	b108      	cbz	r0, 800b12c <_printf_i+0x1bc>
 800b128:	1b40      	subs	r0, r0, r5
 800b12a:	6060      	str	r0, [r4, #4]
 800b12c:	6863      	ldr	r3, [r4, #4]
 800b12e:	6123      	str	r3, [r4, #16]
 800b130:	2300      	movs	r3, #0
 800b132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b136:	e7a7      	b.n	800b088 <_printf_i+0x118>
 800b138:	6923      	ldr	r3, [r4, #16]
 800b13a:	462a      	mov	r2, r5
 800b13c:	4639      	mov	r1, r7
 800b13e:	4630      	mov	r0, r6
 800b140:	47c0      	blx	r8
 800b142:	3001      	adds	r0, #1
 800b144:	d0aa      	beq.n	800b09c <_printf_i+0x12c>
 800b146:	6823      	ldr	r3, [r4, #0]
 800b148:	079b      	lsls	r3, r3, #30
 800b14a:	d413      	bmi.n	800b174 <_printf_i+0x204>
 800b14c:	68e0      	ldr	r0, [r4, #12]
 800b14e:	9b03      	ldr	r3, [sp, #12]
 800b150:	4298      	cmp	r0, r3
 800b152:	bfb8      	it	lt
 800b154:	4618      	movlt	r0, r3
 800b156:	e7a3      	b.n	800b0a0 <_printf_i+0x130>
 800b158:	2301      	movs	r3, #1
 800b15a:	464a      	mov	r2, r9
 800b15c:	4639      	mov	r1, r7
 800b15e:	4630      	mov	r0, r6
 800b160:	47c0      	blx	r8
 800b162:	3001      	adds	r0, #1
 800b164:	d09a      	beq.n	800b09c <_printf_i+0x12c>
 800b166:	3501      	adds	r5, #1
 800b168:	68e3      	ldr	r3, [r4, #12]
 800b16a:	9a03      	ldr	r2, [sp, #12]
 800b16c:	1a9b      	subs	r3, r3, r2
 800b16e:	42ab      	cmp	r3, r5
 800b170:	dcf2      	bgt.n	800b158 <_printf_i+0x1e8>
 800b172:	e7eb      	b.n	800b14c <_printf_i+0x1dc>
 800b174:	2500      	movs	r5, #0
 800b176:	f104 0919 	add.w	r9, r4, #25
 800b17a:	e7f5      	b.n	800b168 <_printf_i+0x1f8>
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d1ac      	bne.n	800b0da <_printf_i+0x16a>
 800b180:	7803      	ldrb	r3, [r0, #0]
 800b182:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b186:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b18a:	e76c      	b.n	800b066 <_printf_i+0xf6>
 800b18c:	0800c4c5 	.word	0x0800c4c5
 800b190:	0800c4d6 	.word	0x0800c4d6

0800b194 <_scanf_chars>:
 800b194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b198:	4615      	mov	r5, r2
 800b19a:	688a      	ldr	r2, [r1, #8]
 800b19c:	4680      	mov	r8, r0
 800b19e:	460c      	mov	r4, r1
 800b1a0:	b932      	cbnz	r2, 800b1b0 <_scanf_chars+0x1c>
 800b1a2:	698a      	ldr	r2, [r1, #24]
 800b1a4:	2a00      	cmp	r2, #0
 800b1a6:	bf14      	ite	ne
 800b1a8:	f04f 32ff 	movne.w	r2, #4294967295
 800b1ac:	2201      	moveq	r2, #1
 800b1ae:	608a      	str	r2, [r1, #8]
 800b1b0:	6822      	ldr	r2, [r4, #0]
 800b1b2:	06d1      	lsls	r1, r2, #27
 800b1b4:	bf5f      	itttt	pl
 800b1b6:	681a      	ldrpl	r2, [r3, #0]
 800b1b8:	1d11      	addpl	r1, r2, #4
 800b1ba:	6019      	strpl	r1, [r3, #0]
 800b1bc:	6817      	ldrpl	r7, [r2, #0]
 800b1be:	2600      	movs	r6, #0
 800b1c0:	69a3      	ldr	r3, [r4, #24]
 800b1c2:	b1db      	cbz	r3, 800b1fc <_scanf_chars+0x68>
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d107      	bne.n	800b1d8 <_scanf_chars+0x44>
 800b1c8:	682b      	ldr	r3, [r5, #0]
 800b1ca:	6962      	ldr	r2, [r4, #20]
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	5cd3      	ldrb	r3, [r2, r3]
 800b1d0:	b9a3      	cbnz	r3, 800b1fc <_scanf_chars+0x68>
 800b1d2:	2e00      	cmp	r6, #0
 800b1d4:	d132      	bne.n	800b23c <_scanf_chars+0xa8>
 800b1d6:	e006      	b.n	800b1e6 <_scanf_chars+0x52>
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	d007      	beq.n	800b1ec <_scanf_chars+0x58>
 800b1dc:	2e00      	cmp	r6, #0
 800b1de:	d12d      	bne.n	800b23c <_scanf_chars+0xa8>
 800b1e0:	69a3      	ldr	r3, [r4, #24]
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d12a      	bne.n	800b23c <_scanf_chars+0xa8>
 800b1e6:	2001      	movs	r0, #1
 800b1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1ec:	f000 faf8 	bl	800b7e0 <__locale_ctype_ptr>
 800b1f0:	682b      	ldr	r3, [r5, #0]
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	4418      	add	r0, r3
 800b1f6:	7843      	ldrb	r3, [r0, #1]
 800b1f8:	071b      	lsls	r3, r3, #28
 800b1fa:	d4ef      	bmi.n	800b1dc <_scanf_chars+0x48>
 800b1fc:	6823      	ldr	r3, [r4, #0]
 800b1fe:	06da      	lsls	r2, r3, #27
 800b200:	bf5e      	ittt	pl
 800b202:	682b      	ldrpl	r3, [r5, #0]
 800b204:	781b      	ldrbpl	r3, [r3, #0]
 800b206:	703b      	strbpl	r3, [r7, #0]
 800b208:	682a      	ldr	r2, [r5, #0]
 800b20a:	686b      	ldr	r3, [r5, #4]
 800b20c:	f102 0201 	add.w	r2, r2, #1
 800b210:	602a      	str	r2, [r5, #0]
 800b212:	68a2      	ldr	r2, [r4, #8]
 800b214:	f103 33ff 	add.w	r3, r3, #4294967295
 800b218:	f102 32ff 	add.w	r2, r2, #4294967295
 800b21c:	606b      	str	r3, [r5, #4]
 800b21e:	f106 0601 	add.w	r6, r6, #1
 800b222:	bf58      	it	pl
 800b224:	3701      	addpl	r7, #1
 800b226:	60a2      	str	r2, [r4, #8]
 800b228:	b142      	cbz	r2, 800b23c <_scanf_chars+0xa8>
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	dcc8      	bgt.n	800b1c0 <_scanf_chars+0x2c>
 800b22e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b232:	4629      	mov	r1, r5
 800b234:	4640      	mov	r0, r8
 800b236:	4798      	blx	r3
 800b238:	2800      	cmp	r0, #0
 800b23a:	d0c1      	beq.n	800b1c0 <_scanf_chars+0x2c>
 800b23c:	6823      	ldr	r3, [r4, #0]
 800b23e:	f013 0310 	ands.w	r3, r3, #16
 800b242:	d105      	bne.n	800b250 <_scanf_chars+0xbc>
 800b244:	68e2      	ldr	r2, [r4, #12]
 800b246:	3201      	adds	r2, #1
 800b248:	60e2      	str	r2, [r4, #12]
 800b24a:	69a2      	ldr	r2, [r4, #24]
 800b24c:	b102      	cbz	r2, 800b250 <_scanf_chars+0xbc>
 800b24e:	703b      	strb	r3, [r7, #0]
 800b250:	6923      	ldr	r3, [r4, #16]
 800b252:	441e      	add	r6, r3
 800b254:	6126      	str	r6, [r4, #16]
 800b256:	2000      	movs	r0, #0
 800b258:	e7c6      	b.n	800b1e8 <_scanf_chars+0x54>
	...

0800b25c <_scanf_i>:
 800b25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b260:	469a      	mov	sl, r3
 800b262:	4b74      	ldr	r3, [pc, #464]	; (800b434 <_scanf_i+0x1d8>)
 800b264:	460c      	mov	r4, r1
 800b266:	4683      	mov	fp, r0
 800b268:	4616      	mov	r6, r2
 800b26a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b26e:	b087      	sub	sp, #28
 800b270:	ab03      	add	r3, sp, #12
 800b272:	68a7      	ldr	r7, [r4, #8]
 800b274:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b278:	4b6f      	ldr	r3, [pc, #444]	; (800b438 <_scanf_i+0x1dc>)
 800b27a:	69a1      	ldr	r1, [r4, #24]
 800b27c:	4a6f      	ldr	r2, [pc, #444]	; (800b43c <_scanf_i+0x1e0>)
 800b27e:	2903      	cmp	r1, #3
 800b280:	bf08      	it	eq
 800b282:	461a      	moveq	r2, r3
 800b284:	1e7b      	subs	r3, r7, #1
 800b286:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800b28a:	bf84      	itt	hi
 800b28c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b290:	60a3      	strhi	r3, [r4, #8]
 800b292:	6823      	ldr	r3, [r4, #0]
 800b294:	9200      	str	r2, [sp, #0]
 800b296:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b29a:	bf88      	it	hi
 800b29c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b2a0:	f104 091c 	add.w	r9, r4, #28
 800b2a4:	6023      	str	r3, [r4, #0]
 800b2a6:	bf8c      	ite	hi
 800b2a8:	197f      	addhi	r7, r7, r5
 800b2aa:	2700      	movls	r7, #0
 800b2ac:	464b      	mov	r3, r9
 800b2ae:	f04f 0800 	mov.w	r8, #0
 800b2b2:	9301      	str	r3, [sp, #4]
 800b2b4:	6831      	ldr	r1, [r6, #0]
 800b2b6:	ab03      	add	r3, sp, #12
 800b2b8:	2202      	movs	r2, #2
 800b2ba:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b2be:	7809      	ldrb	r1, [r1, #0]
 800b2c0:	f7f4 ff8e 	bl	80001e0 <memchr>
 800b2c4:	9b01      	ldr	r3, [sp, #4]
 800b2c6:	b330      	cbz	r0, 800b316 <_scanf_i+0xba>
 800b2c8:	f1b8 0f01 	cmp.w	r8, #1
 800b2cc:	d15a      	bne.n	800b384 <_scanf_i+0x128>
 800b2ce:	6862      	ldr	r2, [r4, #4]
 800b2d0:	b92a      	cbnz	r2, 800b2de <_scanf_i+0x82>
 800b2d2:	6822      	ldr	r2, [r4, #0]
 800b2d4:	2108      	movs	r1, #8
 800b2d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2da:	6061      	str	r1, [r4, #4]
 800b2dc:	6022      	str	r2, [r4, #0]
 800b2de:	6822      	ldr	r2, [r4, #0]
 800b2e0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b2e4:	6022      	str	r2, [r4, #0]
 800b2e6:	68a2      	ldr	r2, [r4, #8]
 800b2e8:	1e51      	subs	r1, r2, #1
 800b2ea:	60a1      	str	r1, [r4, #8]
 800b2ec:	b19a      	cbz	r2, 800b316 <_scanf_i+0xba>
 800b2ee:	6832      	ldr	r2, [r6, #0]
 800b2f0:	1c51      	adds	r1, r2, #1
 800b2f2:	6031      	str	r1, [r6, #0]
 800b2f4:	7812      	ldrb	r2, [r2, #0]
 800b2f6:	701a      	strb	r2, [r3, #0]
 800b2f8:	1c5d      	adds	r5, r3, #1
 800b2fa:	6873      	ldr	r3, [r6, #4]
 800b2fc:	3b01      	subs	r3, #1
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	6073      	str	r3, [r6, #4]
 800b302:	dc07      	bgt.n	800b314 <_scanf_i+0xb8>
 800b304:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b308:	4631      	mov	r1, r6
 800b30a:	4658      	mov	r0, fp
 800b30c:	4798      	blx	r3
 800b30e:	2800      	cmp	r0, #0
 800b310:	f040 8086 	bne.w	800b420 <_scanf_i+0x1c4>
 800b314:	462b      	mov	r3, r5
 800b316:	f108 0801 	add.w	r8, r8, #1
 800b31a:	f1b8 0f03 	cmp.w	r8, #3
 800b31e:	d1c8      	bne.n	800b2b2 <_scanf_i+0x56>
 800b320:	6862      	ldr	r2, [r4, #4]
 800b322:	b90a      	cbnz	r2, 800b328 <_scanf_i+0xcc>
 800b324:	220a      	movs	r2, #10
 800b326:	6062      	str	r2, [r4, #4]
 800b328:	6862      	ldr	r2, [r4, #4]
 800b32a:	4945      	ldr	r1, [pc, #276]	; (800b440 <_scanf_i+0x1e4>)
 800b32c:	6960      	ldr	r0, [r4, #20]
 800b32e:	9301      	str	r3, [sp, #4]
 800b330:	1a89      	subs	r1, r1, r2
 800b332:	f000 f8a9 	bl	800b488 <__sccl>
 800b336:	9b01      	ldr	r3, [sp, #4]
 800b338:	f04f 0800 	mov.w	r8, #0
 800b33c:	461d      	mov	r5, r3
 800b33e:	68a3      	ldr	r3, [r4, #8]
 800b340:	6822      	ldr	r2, [r4, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d03a      	beq.n	800b3bc <_scanf_i+0x160>
 800b346:	6831      	ldr	r1, [r6, #0]
 800b348:	6960      	ldr	r0, [r4, #20]
 800b34a:	f891 c000 	ldrb.w	ip, [r1]
 800b34e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b352:	2800      	cmp	r0, #0
 800b354:	d032      	beq.n	800b3bc <_scanf_i+0x160>
 800b356:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b35a:	d121      	bne.n	800b3a0 <_scanf_i+0x144>
 800b35c:	0510      	lsls	r0, r2, #20
 800b35e:	d51f      	bpl.n	800b3a0 <_scanf_i+0x144>
 800b360:	f108 0801 	add.w	r8, r8, #1
 800b364:	b117      	cbz	r7, 800b36c <_scanf_i+0x110>
 800b366:	3301      	adds	r3, #1
 800b368:	3f01      	subs	r7, #1
 800b36a:	60a3      	str	r3, [r4, #8]
 800b36c:	6873      	ldr	r3, [r6, #4]
 800b36e:	3b01      	subs	r3, #1
 800b370:	2b00      	cmp	r3, #0
 800b372:	6073      	str	r3, [r6, #4]
 800b374:	dd1b      	ble.n	800b3ae <_scanf_i+0x152>
 800b376:	6833      	ldr	r3, [r6, #0]
 800b378:	3301      	adds	r3, #1
 800b37a:	6033      	str	r3, [r6, #0]
 800b37c:	68a3      	ldr	r3, [r4, #8]
 800b37e:	3b01      	subs	r3, #1
 800b380:	60a3      	str	r3, [r4, #8]
 800b382:	e7dc      	b.n	800b33e <_scanf_i+0xe2>
 800b384:	f1b8 0f02 	cmp.w	r8, #2
 800b388:	d1ad      	bne.n	800b2e6 <_scanf_i+0x8a>
 800b38a:	6822      	ldr	r2, [r4, #0]
 800b38c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b390:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b394:	d1bf      	bne.n	800b316 <_scanf_i+0xba>
 800b396:	2110      	movs	r1, #16
 800b398:	6061      	str	r1, [r4, #4]
 800b39a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b39e:	e7a1      	b.n	800b2e4 <_scanf_i+0x88>
 800b3a0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b3a4:	6022      	str	r2, [r4, #0]
 800b3a6:	780b      	ldrb	r3, [r1, #0]
 800b3a8:	702b      	strb	r3, [r5, #0]
 800b3aa:	3501      	adds	r5, #1
 800b3ac:	e7de      	b.n	800b36c <_scanf_i+0x110>
 800b3ae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b3b2:	4631      	mov	r1, r6
 800b3b4:	4658      	mov	r0, fp
 800b3b6:	4798      	blx	r3
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	d0df      	beq.n	800b37c <_scanf_i+0x120>
 800b3bc:	6823      	ldr	r3, [r4, #0]
 800b3be:	05d9      	lsls	r1, r3, #23
 800b3c0:	d50c      	bpl.n	800b3dc <_scanf_i+0x180>
 800b3c2:	454d      	cmp	r5, r9
 800b3c4:	d908      	bls.n	800b3d8 <_scanf_i+0x17c>
 800b3c6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b3ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b3ce:	4632      	mov	r2, r6
 800b3d0:	4658      	mov	r0, fp
 800b3d2:	4798      	blx	r3
 800b3d4:	1e6f      	subs	r7, r5, #1
 800b3d6:	463d      	mov	r5, r7
 800b3d8:	454d      	cmp	r5, r9
 800b3da:	d029      	beq.n	800b430 <_scanf_i+0x1d4>
 800b3dc:	6822      	ldr	r2, [r4, #0]
 800b3de:	f012 0210 	ands.w	r2, r2, #16
 800b3e2:	d113      	bne.n	800b40c <_scanf_i+0x1b0>
 800b3e4:	702a      	strb	r2, [r5, #0]
 800b3e6:	6863      	ldr	r3, [r4, #4]
 800b3e8:	9e00      	ldr	r6, [sp, #0]
 800b3ea:	4649      	mov	r1, r9
 800b3ec:	4658      	mov	r0, fp
 800b3ee:	47b0      	blx	r6
 800b3f0:	f8da 3000 	ldr.w	r3, [sl]
 800b3f4:	6821      	ldr	r1, [r4, #0]
 800b3f6:	1d1a      	adds	r2, r3, #4
 800b3f8:	f8ca 2000 	str.w	r2, [sl]
 800b3fc:	f011 0f20 	tst.w	r1, #32
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	d010      	beq.n	800b426 <_scanf_i+0x1ca>
 800b404:	6018      	str	r0, [r3, #0]
 800b406:	68e3      	ldr	r3, [r4, #12]
 800b408:	3301      	adds	r3, #1
 800b40a:	60e3      	str	r3, [r4, #12]
 800b40c:	eba5 0509 	sub.w	r5, r5, r9
 800b410:	44a8      	add	r8, r5
 800b412:	6925      	ldr	r5, [r4, #16]
 800b414:	4445      	add	r5, r8
 800b416:	6125      	str	r5, [r4, #16]
 800b418:	2000      	movs	r0, #0
 800b41a:	b007      	add	sp, #28
 800b41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b420:	f04f 0800 	mov.w	r8, #0
 800b424:	e7ca      	b.n	800b3bc <_scanf_i+0x160>
 800b426:	07ca      	lsls	r2, r1, #31
 800b428:	bf4c      	ite	mi
 800b42a:	8018      	strhmi	r0, [r3, #0]
 800b42c:	6018      	strpl	r0, [r3, #0]
 800b42e:	e7ea      	b.n	800b406 <_scanf_i+0x1aa>
 800b430:	2001      	movs	r0, #1
 800b432:	e7f2      	b.n	800b41a <_scanf_i+0x1be>
 800b434:	0800c3fc 	.word	0x0800c3fc
 800b438:	0800b5e5 	.word	0x0800b5e5
 800b43c:	0800b6fd 	.word	0x0800b6fd
 800b440:	0800c4f7 	.word	0x0800c4f7

0800b444 <_read_r>:
 800b444:	b538      	push	{r3, r4, r5, lr}
 800b446:	4c07      	ldr	r4, [pc, #28]	; (800b464 <_read_r+0x20>)
 800b448:	4605      	mov	r5, r0
 800b44a:	4608      	mov	r0, r1
 800b44c:	4611      	mov	r1, r2
 800b44e:	2200      	movs	r2, #0
 800b450:	6022      	str	r2, [r4, #0]
 800b452:	461a      	mov	r2, r3
 800b454:	f7f6 f878 	bl	8001548 <_read>
 800b458:	1c43      	adds	r3, r0, #1
 800b45a:	d102      	bne.n	800b462 <_read_r+0x1e>
 800b45c:	6823      	ldr	r3, [r4, #0]
 800b45e:	b103      	cbz	r3, 800b462 <_read_r+0x1e>
 800b460:	602b      	str	r3, [r5, #0]
 800b462:	bd38      	pop	{r3, r4, r5, pc}
 800b464:	20000830 	.word	0x20000830

0800b468 <_sbrk_r>:
 800b468:	b538      	push	{r3, r4, r5, lr}
 800b46a:	4c06      	ldr	r4, [pc, #24]	; (800b484 <_sbrk_r+0x1c>)
 800b46c:	2300      	movs	r3, #0
 800b46e:	4605      	mov	r5, r0
 800b470:	4608      	mov	r0, r1
 800b472:	6023      	str	r3, [r4, #0]
 800b474:	f7f6 f8ba 	bl	80015ec <_sbrk>
 800b478:	1c43      	adds	r3, r0, #1
 800b47a:	d102      	bne.n	800b482 <_sbrk_r+0x1a>
 800b47c:	6823      	ldr	r3, [r4, #0]
 800b47e:	b103      	cbz	r3, 800b482 <_sbrk_r+0x1a>
 800b480:	602b      	str	r3, [r5, #0]
 800b482:	bd38      	pop	{r3, r4, r5, pc}
 800b484:	20000830 	.word	0x20000830

0800b488 <__sccl>:
 800b488:	b570      	push	{r4, r5, r6, lr}
 800b48a:	780b      	ldrb	r3, [r1, #0]
 800b48c:	2b5e      	cmp	r3, #94	; 0x5e
 800b48e:	bf13      	iteet	ne
 800b490:	1c4a      	addne	r2, r1, #1
 800b492:	1c8a      	addeq	r2, r1, #2
 800b494:	784b      	ldrbeq	r3, [r1, #1]
 800b496:	2100      	movne	r1, #0
 800b498:	bf08      	it	eq
 800b49a:	2101      	moveq	r1, #1
 800b49c:	1e44      	subs	r4, r0, #1
 800b49e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800b4a2:	f804 1f01 	strb.w	r1, [r4, #1]!
 800b4a6:	42ac      	cmp	r4, r5
 800b4a8:	d1fb      	bne.n	800b4a2 <__sccl+0x1a>
 800b4aa:	b913      	cbnz	r3, 800b4b2 <__sccl+0x2a>
 800b4ac:	3a01      	subs	r2, #1
 800b4ae:	4610      	mov	r0, r2
 800b4b0:	bd70      	pop	{r4, r5, r6, pc}
 800b4b2:	f081 0401 	eor.w	r4, r1, #1
 800b4b6:	54c4      	strb	r4, [r0, r3]
 800b4b8:	1c51      	adds	r1, r2, #1
 800b4ba:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800b4be:	2d2d      	cmp	r5, #45	; 0x2d
 800b4c0:	f101 36ff 	add.w	r6, r1, #4294967295
 800b4c4:	460a      	mov	r2, r1
 800b4c6:	d006      	beq.n	800b4d6 <__sccl+0x4e>
 800b4c8:	2d5d      	cmp	r5, #93	; 0x5d
 800b4ca:	d0f0      	beq.n	800b4ae <__sccl+0x26>
 800b4cc:	b90d      	cbnz	r5, 800b4d2 <__sccl+0x4a>
 800b4ce:	4632      	mov	r2, r6
 800b4d0:	e7ed      	b.n	800b4ae <__sccl+0x26>
 800b4d2:	462b      	mov	r3, r5
 800b4d4:	e7ef      	b.n	800b4b6 <__sccl+0x2e>
 800b4d6:	780e      	ldrb	r6, [r1, #0]
 800b4d8:	2e5d      	cmp	r6, #93	; 0x5d
 800b4da:	d0fa      	beq.n	800b4d2 <__sccl+0x4a>
 800b4dc:	42b3      	cmp	r3, r6
 800b4de:	dcf8      	bgt.n	800b4d2 <__sccl+0x4a>
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	429e      	cmp	r6, r3
 800b4e4:	54c4      	strb	r4, [r0, r3]
 800b4e6:	dcfb      	bgt.n	800b4e0 <__sccl+0x58>
 800b4e8:	3102      	adds	r1, #2
 800b4ea:	e7e6      	b.n	800b4ba <__sccl+0x32>

0800b4ec <_strtol_l.isra.0>:
 800b4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4f0:	4680      	mov	r8, r0
 800b4f2:	4689      	mov	r9, r1
 800b4f4:	4692      	mov	sl, r2
 800b4f6:	461e      	mov	r6, r3
 800b4f8:	460f      	mov	r7, r1
 800b4fa:	463d      	mov	r5, r7
 800b4fc:	9808      	ldr	r0, [sp, #32]
 800b4fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b502:	f000 f969 	bl	800b7d8 <__locale_ctype_ptr_l>
 800b506:	4420      	add	r0, r4
 800b508:	7843      	ldrb	r3, [r0, #1]
 800b50a:	f013 0308 	ands.w	r3, r3, #8
 800b50e:	d132      	bne.n	800b576 <_strtol_l.isra.0+0x8a>
 800b510:	2c2d      	cmp	r4, #45	; 0x2d
 800b512:	d132      	bne.n	800b57a <_strtol_l.isra.0+0x8e>
 800b514:	787c      	ldrb	r4, [r7, #1]
 800b516:	1cbd      	adds	r5, r7, #2
 800b518:	2201      	movs	r2, #1
 800b51a:	2e00      	cmp	r6, #0
 800b51c:	d05d      	beq.n	800b5da <_strtol_l.isra.0+0xee>
 800b51e:	2e10      	cmp	r6, #16
 800b520:	d109      	bne.n	800b536 <_strtol_l.isra.0+0x4a>
 800b522:	2c30      	cmp	r4, #48	; 0x30
 800b524:	d107      	bne.n	800b536 <_strtol_l.isra.0+0x4a>
 800b526:	782b      	ldrb	r3, [r5, #0]
 800b528:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b52c:	2b58      	cmp	r3, #88	; 0x58
 800b52e:	d14f      	bne.n	800b5d0 <_strtol_l.isra.0+0xe4>
 800b530:	786c      	ldrb	r4, [r5, #1]
 800b532:	2610      	movs	r6, #16
 800b534:	3502      	adds	r5, #2
 800b536:	2a00      	cmp	r2, #0
 800b538:	bf14      	ite	ne
 800b53a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b53e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b542:	2700      	movs	r7, #0
 800b544:	fbb1 fcf6 	udiv	ip, r1, r6
 800b548:	4638      	mov	r0, r7
 800b54a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b54e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b552:	2b09      	cmp	r3, #9
 800b554:	d817      	bhi.n	800b586 <_strtol_l.isra.0+0x9a>
 800b556:	461c      	mov	r4, r3
 800b558:	42a6      	cmp	r6, r4
 800b55a:	dd23      	ble.n	800b5a4 <_strtol_l.isra.0+0xb8>
 800b55c:	1c7b      	adds	r3, r7, #1
 800b55e:	d007      	beq.n	800b570 <_strtol_l.isra.0+0x84>
 800b560:	4584      	cmp	ip, r0
 800b562:	d31c      	bcc.n	800b59e <_strtol_l.isra.0+0xb2>
 800b564:	d101      	bne.n	800b56a <_strtol_l.isra.0+0x7e>
 800b566:	45a6      	cmp	lr, r4
 800b568:	db19      	blt.n	800b59e <_strtol_l.isra.0+0xb2>
 800b56a:	fb00 4006 	mla	r0, r0, r6, r4
 800b56e:	2701      	movs	r7, #1
 800b570:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b574:	e7eb      	b.n	800b54e <_strtol_l.isra.0+0x62>
 800b576:	462f      	mov	r7, r5
 800b578:	e7bf      	b.n	800b4fa <_strtol_l.isra.0+0xe>
 800b57a:	2c2b      	cmp	r4, #43	; 0x2b
 800b57c:	bf04      	itt	eq
 800b57e:	1cbd      	addeq	r5, r7, #2
 800b580:	787c      	ldrbeq	r4, [r7, #1]
 800b582:	461a      	mov	r2, r3
 800b584:	e7c9      	b.n	800b51a <_strtol_l.isra.0+0x2e>
 800b586:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b58a:	2b19      	cmp	r3, #25
 800b58c:	d801      	bhi.n	800b592 <_strtol_l.isra.0+0xa6>
 800b58e:	3c37      	subs	r4, #55	; 0x37
 800b590:	e7e2      	b.n	800b558 <_strtol_l.isra.0+0x6c>
 800b592:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b596:	2b19      	cmp	r3, #25
 800b598:	d804      	bhi.n	800b5a4 <_strtol_l.isra.0+0xb8>
 800b59a:	3c57      	subs	r4, #87	; 0x57
 800b59c:	e7dc      	b.n	800b558 <_strtol_l.isra.0+0x6c>
 800b59e:	f04f 37ff 	mov.w	r7, #4294967295
 800b5a2:	e7e5      	b.n	800b570 <_strtol_l.isra.0+0x84>
 800b5a4:	1c7b      	adds	r3, r7, #1
 800b5a6:	d108      	bne.n	800b5ba <_strtol_l.isra.0+0xce>
 800b5a8:	2322      	movs	r3, #34	; 0x22
 800b5aa:	f8c8 3000 	str.w	r3, [r8]
 800b5ae:	4608      	mov	r0, r1
 800b5b0:	f1ba 0f00 	cmp.w	sl, #0
 800b5b4:	d107      	bne.n	800b5c6 <_strtol_l.isra.0+0xda>
 800b5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ba:	b102      	cbz	r2, 800b5be <_strtol_l.isra.0+0xd2>
 800b5bc:	4240      	negs	r0, r0
 800b5be:	f1ba 0f00 	cmp.w	sl, #0
 800b5c2:	d0f8      	beq.n	800b5b6 <_strtol_l.isra.0+0xca>
 800b5c4:	b10f      	cbz	r7, 800b5ca <_strtol_l.isra.0+0xde>
 800b5c6:	f105 39ff 	add.w	r9, r5, #4294967295
 800b5ca:	f8ca 9000 	str.w	r9, [sl]
 800b5ce:	e7f2      	b.n	800b5b6 <_strtol_l.isra.0+0xca>
 800b5d0:	2430      	movs	r4, #48	; 0x30
 800b5d2:	2e00      	cmp	r6, #0
 800b5d4:	d1af      	bne.n	800b536 <_strtol_l.isra.0+0x4a>
 800b5d6:	2608      	movs	r6, #8
 800b5d8:	e7ad      	b.n	800b536 <_strtol_l.isra.0+0x4a>
 800b5da:	2c30      	cmp	r4, #48	; 0x30
 800b5dc:	d0a3      	beq.n	800b526 <_strtol_l.isra.0+0x3a>
 800b5de:	260a      	movs	r6, #10
 800b5e0:	e7a9      	b.n	800b536 <_strtol_l.isra.0+0x4a>
	...

0800b5e4 <_strtol_r>:
 800b5e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5e6:	4c06      	ldr	r4, [pc, #24]	; (800b600 <_strtol_r+0x1c>)
 800b5e8:	4d06      	ldr	r5, [pc, #24]	; (800b604 <_strtol_r+0x20>)
 800b5ea:	6824      	ldr	r4, [r4, #0]
 800b5ec:	6a24      	ldr	r4, [r4, #32]
 800b5ee:	2c00      	cmp	r4, #0
 800b5f0:	bf08      	it	eq
 800b5f2:	462c      	moveq	r4, r5
 800b5f4:	9400      	str	r4, [sp, #0]
 800b5f6:	f7ff ff79 	bl	800b4ec <_strtol_l.isra.0>
 800b5fa:	b003      	add	sp, #12
 800b5fc:	bd30      	pop	{r4, r5, pc}
 800b5fe:	bf00      	nop
 800b600:	200002d4 	.word	0x200002d4
 800b604:	20000338 	.word	0x20000338

0800b608 <_strtoul_l.isra.0>:
 800b608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b60c:	4680      	mov	r8, r0
 800b60e:	4689      	mov	r9, r1
 800b610:	4692      	mov	sl, r2
 800b612:	461e      	mov	r6, r3
 800b614:	460f      	mov	r7, r1
 800b616:	463d      	mov	r5, r7
 800b618:	9808      	ldr	r0, [sp, #32]
 800b61a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b61e:	f000 f8db 	bl	800b7d8 <__locale_ctype_ptr_l>
 800b622:	4420      	add	r0, r4
 800b624:	7843      	ldrb	r3, [r0, #1]
 800b626:	f013 0308 	ands.w	r3, r3, #8
 800b62a:	d130      	bne.n	800b68e <_strtoul_l.isra.0+0x86>
 800b62c:	2c2d      	cmp	r4, #45	; 0x2d
 800b62e:	d130      	bne.n	800b692 <_strtoul_l.isra.0+0x8a>
 800b630:	787c      	ldrb	r4, [r7, #1]
 800b632:	1cbd      	adds	r5, r7, #2
 800b634:	2101      	movs	r1, #1
 800b636:	2e00      	cmp	r6, #0
 800b638:	d05c      	beq.n	800b6f4 <_strtoul_l.isra.0+0xec>
 800b63a:	2e10      	cmp	r6, #16
 800b63c:	d109      	bne.n	800b652 <_strtoul_l.isra.0+0x4a>
 800b63e:	2c30      	cmp	r4, #48	; 0x30
 800b640:	d107      	bne.n	800b652 <_strtoul_l.isra.0+0x4a>
 800b642:	782b      	ldrb	r3, [r5, #0]
 800b644:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b648:	2b58      	cmp	r3, #88	; 0x58
 800b64a:	d14e      	bne.n	800b6ea <_strtoul_l.isra.0+0xe2>
 800b64c:	786c      	ldrb	r4, [r5, #1]
 800b64e:	2610      	movs	r6, #16
 800b650:	3502      	adds	r5, #2
 800b652:	f04f 32ff 	mov.w	r2, #4294967295
 800b656:	2300      	movs	r3, #0
 800b658:	fbb2 f2f6 	udiv	r2, r2, r6
 800b65c:	fb06 fc02 	mul.w	ip, r6, r2
 800b660:	ea6f 0c0c 	mvn.w	ip, ip
 800b664:	4618      	mov	r0, r3
 800b666:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b66a:	2f09      	cmp	r7, #9
 800b66c:	d817      	bhi.n	800b69e <_strtoul_l.isra.0+0x96>
 800b66e:	463c      	mov	r4, r7
 800b670:	42a6      	cmp	r6, r4
 800b672:	dd23      	ble.n	800b6bc <_strtoul_l.isra.0+0xb4>
 800b674:	2b00      	cmp	r3, #0
 800b676:	db1e      	blt.n	800b6b6 <_strtoul_l.isra.0+0xae>
 800b678:	4282      	cmp	r2, r0
 800b67a:	d31c      	bcc.n	800b6b6 <_strtoul_l.isra.0+0xae>
 800b67c:	d101      	bne.n	800b682 <_strtoul_l.isra.0+0x7a>
 800b67e:	45a4      	cmp	ip, r4
 800b680:	db19      	blt.n	800b6b6 <_strtoul_l.isra.0+0xae>
 800b682:	fb00 4006 	mla	r0, r0, r6, r4
 800b686:	2301      	movs	r3, #1
 800b688:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b68c:	e7eb      	b.n	800b666 <_strtoul_l.isra.0+0x5e>
 800b68e:	462f      	mov	r7, r5
 800b690:	e7c1      	b.n	800b616 <_strtoul_l.isra.0+0xe>
 800b692:	2c2b      	cmp	r4, #43	; 0x2b
 800b694:	bf04      	itt	eq
 800b696:	1cbd      	addeq	r5, r7, #2
 800b698:	787c      	ldrbeq	r4, [r7, #1]
 800b69a:	4619      	mov	r1, r3
 800b69c:	e7cb      	b.n	800b636 <_strtoul_l.isra.0+0x2e>
 800b69e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b6a2:	2f19      	cmp	r7, #25
 800b6a4:	d801      	bhi.n	800b6aa <_strtoul_l.isra.0+0xa2>
 800b6a6:	3c37      	subs	r4, #55	; 0x37
 800b6a8:	e7e2      	b.n	800b670 <_strtoul_l.isra.0+0x68>
 800b6aa:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b6ae:	2f19      	cmp	r7, #25
 800b6b0:	d804      	bhi.n	800b6bc <_strtoul_l.isra.0+0xb4>
 800b6b2:	3c57      	subs	r4, #87	; 0x57
 800b6b4:	e7dc      	b.n	800b670 <_strtoul_l.isra.0+0x68>
 800b6b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ba:	e7e5      	b.n	800b688 <_strtoul_l.isra.0+0x80>
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	da09      	bge.n	800b6d4 <_strtoul_l.isra.0+0xcc>
 800b6c0:	2322      	movs	r3, #34	; 0x22
 800b6c2:	f8c8 3000 	str.w	r3, [r8]
 800b6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ca:	f1ba 0f00 	cmp.w	sl, #0
 800b6ce:	d107      	bne.n	800b6e0 <_strtoul_l.isra.0+0xd8>
 800b6d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d4:	b101      	cbz	r1, 800b6d8 <_strtoul_l.isra.0+0xd0>
 800b6d6:	4240      	negs	r0, r0
 800b6d8:	f1ba 0f00 	cmp.w	sl, #0
 800b6dc:	d0f8      	beq.n	800b6d0 <_strtoul_l.isra.0+0xc8>
 800b6de:	b10b      	cbz	r3, 800b6e4 <_strtoul_l.isra.0+0xdc>
 800b6e0:	f105 39ff 	add.w	r9, r5, #4294967295
 800b6e4:	f8ca 9000 	str.w	r9, [sl]
 800b6e8:	e7f2      	b.n	800b6d0 <_strtoul_l.isra.0+0xc8>
 800b6ea:	2430      	movs	r4, #48	; 0x30
 800b6ec:	2e00      	cmp	r6, #0
 800b6ee:	d1b0      	bne.n	800b652 <_strtoul_l.isra.0+0x4a>
 800b6f0:	2608      	movs	r6, #8
 800b6f2:	e7ae      	b.n	800b652 <_strtoul_l.isra.0+0x4a>
 800b6f4:	2c30      	cmp	r4, #48	; 0x30
 800b6f6:	d0a4      	beq.n	800b642 <_strtoul_l.isra.0+0x3a>
 800b6f8:	260a      	movs	r6, #10
 800b6fa:	e7aa      	b.n	800b652 <_strtoul_l.isra.0+0x4a>

0800b6fc <_strtoul_r>:
 800b6fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6fe:	4c06      	ldr	r4, [pc, #24]	; (800b718 <_strtoul_r+0x1c>)
 800b700:	4d06      	ldr	r5, [pc, #24]	; (800b71c <_strtoul_r+0x20>)
 800b702:	6824      	ldr	r4, [r4, #0]
 800b704:	6a24      	ldr	r4, [r4, #32]
 800b706:	2c00      	cmp	r4, #0
 800b708:	bf08      	it	eq
 800b70a:	462c      	moveq	r4, r5
 800b70c:	9400      	str	r4, [sp, #0]
 800b70e:	f7ff ff7b 	bl	800b608 <_strtoul_l.isra.0>
 800b712:	b003      	add	sp, #12
 800b714:	bd30      	pop	{r4, r5, pc}
 800b716:	bf00      	nop
 800b718:	200002d4 	.word	0x200002d4
 800b71c:	20000338 	.word	0x20000338

0800b720 <__submore>:
 800b720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b724:	460c      	mov	r4, r1
 800b726:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b72c:	4299      	cmp	r1, r3
 800b72e:	d11d      	bne.n	800b76c <__submore+0x4c>
 800b730:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b734:	f7ff f862 	bl	800a7fc <_malloc_r>
 800b738:	b918      	cbnz	r0, 800b742 <__submore+0x22>
 800b73a:	f04f 30ff 	mov.w	r0, #4294967295
 800b73e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b746:	63a3      	str	r3, [r4, #56]	; 0x38
 800b748:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b74c:	6360      	str	r0, [r4, #52]	; 0x34
 800b74e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b752:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b756:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b75a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b75e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b762:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b766:	6020      	str	r0, [r4, #0]
 800b768:	2000      	movs	r0, #0
 800b76a:	e7e8      	b.n	800b73e <__submore+0x1e>
 800b76c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b76e:	0077      	lsls	r7, r6, #1
 800b770:	463a      	mov	r2, r7
 800b772:	f000 f857 	bl	800b824 <_realloc_r>
 800b776:	4605      	mov	r5, r0
 800b778:	2800      	cmp	r0, #0
 800b77a:	d0de      	beq.n	800b73a <__submore+0x1a>
 800b77c:	eb00 0806 	add.w	r8, r0, r6
 800b780:	4601      	mov	r1, r0
 800b782:	4632      	mov	r2, r6
 800b784:	4640      	mov	r0, r8
 800b786:	f7fe fbfd 	bl	8009f84 <memcpy>
 800b78a:	f8c4 8000 	str.w	r8, [r4]
 800b78e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b792:	e7e9      	b.n	800b768 <__submore+0x48>

0800b794 <_fstat_r>:
 800b794:	b538      	push	{r3, r4, r5, lr}
 800b796:	4c07      	ldr	r4, [pc, #28]	; (800b7b4 <_fstat_r+0x20>)
 800b798:	2300      	movs	r3, #0
 800b79a:	4605      	mov	r5, r0
 800b79c:	4608      	mov	r0, r1
 800b79e:	4611      	mov	r1, r2
 800b7a0:	6023      	str	r3, [r4, #0]
 800b7a2:	f7f5 fefa 	bl	800159a <_fstat>
 800b7a6:	1c43      	adds	r3, r0, #1
 800b7a8:	d102      	bne.n	800b7b0 <_fstat_r+0x1c>
 800b7aa:	6823      	ldr	r3, [r4, #0]
 800b7ac:	b103      	cbz	r3, 800b7b0 <_fstat_r+0x1c>
 800b7ae:	602b      	str	r3, [r5, #0]
 800b7b0:	bd38      	pop	{r3, r4, r5, pc}
 800b7b2:	bf00      	nop
 800b7b4:	20000830 	.word	0x20000830

0800b7b8 <_isatty_r>:
 800b7b8:	b538      	push	{r3, r4, r5, lr}
 800b7ba:	4c06      	ldr	r4, [pc, #24]	; (800b7d4 <_isatty_r+0x1c>)
 800b7bc:	2300      	movs	r3, #0
 800b7be:	4605      	mov	r5, r0
 800b7c0:	4608      	mov	r0, r1
 800b7c2:	6023      	str	r3, [r4, #0]
 800b7c4:	f7f5 fef9 	bl	80015ba <_isatty>
 800b7c8:	1c43      	adds	r3, r0, #1
 800b7ca:	d102      	bne.n	800b7d2 <_isatty_r+0x1a>
 800b7cc:	6823      	ldr	r3, [r4, #0]
 800b7ce:	b103      	cbz	r3, 800b7d2 <_isatty_r+0x1a>
 800b7d0:	602b      	str	r3, [r5, #0]
 800b7d2:	bd38      	pop	{r3, r4, r5, pc}
 800b7d4:	20000830 	.word	0x20000830

0800b7d8 <__locale_ctype_ptr_l>:
 800b7d8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b7dc:	4770      	bx	lr
	...

0800b7e0 <__locale_ctype_ptr>:
 800b7e0:	4b04      	ldr	r3, [pc, #16]	; (800b7f4 <__locale_ctype_ptr+0x14>)
 800b7e2:	4a05      	ldr	r2, [pc, #20]	; (800b7f8 <__locale_ctype_ptr+0x18>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	6a1b      	ldr	r3, [r3, #32]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	bf08      	it	eq
 800b7ec:	4613      	moveq	r3, r2
 800b7ee:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800b7f2:	4770      	bx	lr
 800b7f4:	200002d4 	.word	0x200002d4
 800b7f8:	20000338 	.word	0x20000338

0800b7fc <__ascii_mbtowc>:
 800b7fc:	b082      	sub	sp, #8
 800b7fe:	b901      	cbnz	r1, 800b802 <__ascii_mbtowc+0x6>
 800b800:	a901      	add	r1, sp, #4
 800b802:	b142      	cbz	r2, 800b816 <__ascii_mbtowc+0x1a>
 800b804:	b14b      	cbz	r3, 800b81a <__ascii_mbtowc+0x1e>
 800b806:	7813      	ldrb	r3, [r2, #0]
 800b808:	600b      	str	r3, [r1, #0]
 800b80a:	7812      	ldrb	r2, [r2, #0]
 800b80c:	1c10      	adds	r0, r2, #0
 800b80e:	bf18      	it	ne
 800b810:	2001      	movne	r0, #1
 800b812:	b002      	add	sp, #8
 800b814:	4770      	bx	lr
 800b816:	4610      	mov	r0, r2
 800b818:	e7fb      	b.n	800b812 <__ascii_mbtowc+0x16>
 800b81a:	f06f 0001 	mvn.w	r0, #1
 800b81e:	e7f8      	b.n	800b812 <__ascii_mbtowc+0x16>

0800b820 <__malloc_lock>:
 800b820:	4770      	bx	lr

0800b822 <__malloc_unlock>:
 800b822:	4770      	bx	lr

0800b824 <_realloc_r>:
 800b824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b826:	4607      	mov	r7, r0
 800b828:	4614      	mov	r4, r2
 800b82a:	460e      	mov	r6, r1
 800b82c:	b921      	cbnz	r1, 800b838 <_realloc_r+0x14>
 800b82e:	4611      	mov	r1, r2
 800b830:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b834:	f7fe bfe2 	b.w	800a7fc <_malloc_r>
 800b838:	b922      	cbnz	r2, 800b844 <_realloc_r+0x20>
 800b83a:	f7fe ff91 	bl	800a760 <_free_r>
 800b83e:	4625      	mov	r5, r4
 800b840:	4628      	mov	r0, r5
 800b842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b844:	f000 f821 	bl	800b88a <_malloc_usable_size_r>
 800b848:	42a0      	cmp	r0, r4
 800b84a:	d20f      	bcs.n	800b86c <_realloc_r+0x48>
 800b84c:	4621      	mov	r1, r4
 800b84e:	4638      	mov	r0, r7
 800b850:	f7fe ffd4 	bl	800a7fc <_malloc_r>
 800b854:	4605      	mov	r5, r0
 800b856:	2800      	cmp	r0, #0
 800b858:	d0f2      	beq.n	800b840 <_realloc_r+0x1c>
 800b85a:	4631      	mov	r1, r6
 800b85c:	4622      	mov	r2, r4
 800b85e:	f7fe fb91 	bl	8009f84 <memcpy>
 800b862:	4631      	mov	r1, r6
 800b864:	4638      	mov	r0, r7
 800b866:	f7fe ff7b 	bl	800a760 <_free_r>
 800b86a:	e7e9      	b.n	800b840 <_realloc_r+0x1c>
 800b86c:	4635      	mov	r5, r6
 800b86e:	e7e7      	b.n	800b840 <_realloc_r+0x1c>

0800b870 <__ascii_wctomb>:
 800b870:	b149      	cbz	r1, 800b886 <__ascii_wctomb+0x16>
 800b872:	2aff      	cmp	r2, #255	; 0xff
 800b874:	bf85      	ittet	hi
 800b876:	238a      	movhi	r3, #138	; 0x8a
 800b878:	6003      	strhi	r3, [r0, #0]
 800b87a:	700a      	strbls	r2, [r1, #0]
 800b87c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b880:	bf98      	it	ls
 800b882:	2001      	movls	r0, #1
 800b884:	4770      	bx	lr
 800b886:	4608      	mov	r0, r1
 800b888:	4770      	bx	lr

0800b88a <_malloc_usable_size_r>:
 800b88a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b88e:	1f18      	subs	r0, r3, #4
 800b890:	2b00      	cmp	r3, #0
 800b892:	bfbc      	itt	lt
 800b894:	580b      	ldrlt	r3, [r1, r0]
 800b896:	18c0      	addlt	r0, r0, r3
 800b898:	4770      	bx	lr
	...

0800b89c <cosf>:
 800b89c:	ee10 3a10 	vmov	r3, s0
 800b8a0:	b507      	push	{r0, r1, r2, lr}
 800b8a2:	4a1c      	ldr	r2, [pc, #112]	; (800b914 <cosf+0x78>)
 800b8a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	dc04      	bgt.n	800b8b6 <cosf+0x1a>
 800b8ac:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800b918 <cosf+0x7c>
 800b8b0:	f000 f9a2 	bl	800bbf8 <__kernel_cosf>
 800b8b4:	e004      	b.n	800b8c0 <cosf+0x24>
 800b8b6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b8ba:	db04      	blt.n	800b8c6 <cosf+0x2a>
 800b8bc:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b8c0:	b003      	add	sp, #12
 800b8c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8c6:	4668      	mov	r0, sp
 800b8c8:	f000 f86a 	bl	800b9a0 <__ieee754_rem_pio2f>
 800b8cc:	f000 0003 	and.w	r0, r0, #3
 800b8d0:	2801      	cmp	r0, #1
 800b8d2:	d007      	beq.n	800b8e4 <cosf+0x48>
 800b8d4:	2802      	cmp	r0, #2
 800b8d6:	d00e      	beq.n	800b8f6 <cosf+0x5a>
 800b8d8:	b9a0      	cbnz	r0, 800b904 <cosf+0x68>
 800b8da:	eddd 0a01 	vldr	s1, [sp, #4]
 800b8de:	ed9d 0a00 	vldr	s0, [sp]
 800b8e2:	e7e5      	b.n	800b8b0 <cosf+0x14>
 800b8e4:	eddd 0a01 	vldr	s1, [sp, #4]
 800b8e8:	ed9d 0a00 	vldr	s0, [sp]
 800b8ec:	f000 fc64 	bl	800c1b8 <__kernel_sinf>
 800b8f0:	eeb1 0a40 	vneg.f32	s0, s0
 800b8f4:	e7e4      	b.n	800b8c0 <cosf+0x24>
 800b8f6:	eddd 0a01 	vldr	s1, [sp, #4]
 800b8fa:	ed9d 0a00 	vldr	s0, [sp]
 800b8fe:	f000 f97b 	bl	800bbf8 <__kernel_cosf>
 800b902:	e7f5      	b.n	800b8f0 <cosf+0x54>
 800b904:	2001      	movs	r0, #1
 800b906:	eddd 0a01 	vldr	s1, [sp, #4]
 800b90a:	ed9d 0a00 	vldr	s0, [sp]
 800b90e:	f000 fc53 	bl	800c1b8 <__kernel_sinf>
 800b912:	e7d5      	b.n	800b8c0 <cosf+0x24>
 800b914:	3f490fd8 	.word	0x3f490fd8
 800b918:	00000000 	.word	0x00000000

0800b91c <sinf>:
 800b91c:	ee10 3a10 	vmov	r3, s0
 800b920:	b507      	push	{r0, r1, r2, lr}
 800b922:	4a1d      	ldr	r2, [pc, #116]	; (800b998 <sinf+0x7c>)
 800b924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b928:	4293      	cmp	r3, r2
 800b92a:	dc05      	bgt.n	800b938 <sinf+0x1c>
 800b92c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800b99c <sinf+0x80>
 800b930:	2000      	movs	r0, #0
 800b932:	f000 fc41 	bl	800c1b8 <__kernel_sinf>
 800b936:	e004      	b.n	800b942 <sinf+0x26>
 800b938:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b93c:	db04      	blt.n	800b948 <sinf+0x2c>
 800b93e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b942:	b003      	add	sp, #12
 800b944:	f85d fb04 	ldr.w	pc, [sp], #4
 800b948:	4668      	mov	r0, sp
 800b94a:	f000 f829 	bl	800b9a0 <__ieee754_rem_pio2f>
 800b94e:	f000 0003 	and.w	r0, r0, #3
 800b952:	2801      	cmp	r0, #1
 800b954:	d008      	beq.n	800b968 <sinf+0x4c>
 800b956:	2802      	cmp	r0, #2
 800b958:	d00d      	beq.n	800b976 <sinf+0x5a>
 800b95a:	b9b0      	cbnz	r0, 800b98a <sinf+0x6e>
 800b95c:	2001      	movs	r0, #1
 800b95e:	eddd 0a01 	vldr	s1, [sp, #4]
 800b962:	ed9d 0a00 	vldr	s0, [sp]
 800b966:	e7e4      	b.n	800b932 <sinf+0x16>
 800b968:	eddd 0a01 	vldr	s1, [sp, #4]
 800b96c:	ed9d 0a00 	vldr	s0, [sp]
 800b970:	f000 f942 	bl	800bbf8 <__kernel_cosf>
 800b974:	e7e5      	b.n	800b942 <sinf+0x26>
 800b976:	2001      	movs	r0, #1
 800b978:	eddd 0a01 	vldr	s1, [sp, #4]
 800b97c:	ed9d 0a00 	vldr	s0, [sp]
 800b980:	f000 fc1a 	bl	800c1b8 <__kernel_sinf>
 800b984:	eeb1 0a40 	vneg.f32	s0, s0
 800b988:	e7db      	b.n	800b942 <sinf+0x26>
 800b98a:	eddd 0a01 	vldr	s1, [sp, #4]
 800b98e:	ed9d 0a00 	vldr	s0, [sp]
 800b992:	f000 f931 	bl	800bbf8 <__kernel_cosf>
 800b996:	e7f5      	b.n	800b984 <sinf+0x68>
 800b998:	3f490fd8 	.word	0x3f490fd8
 800b99c:	00000000 	.word	0x00000000

0800b9a0 <__ieee754_rem_pio2f>:
 800b9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9a2:	ee10 6a10 	vmov	r6, s0
 800b9a6:	4b86      	ldr	r3, [pc, #536]	; (800bbc0 <__ieee754_rem_pio2f+0x220>)
 800b9a8:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800b9ac:	429c      	cmp	r4, r3
 800b9ae:	b087      	sub	sp, #28
 800b9b0:	4605      	mov	r5, r0
 800b9b2:	dc05      	bgt.n	800b9c0 <__ieee754_rem_pio2f+0x20>
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	ed85 0a00 	vstr	s0, [r5]
 800b9ba:	6043      	str	r3, [r0, #4]
 800b9bc:	2000      	movs	r0, #0
 800b9be:	e020      	b.n	800ba02 <__ieee754_rem_pio2f+0x62>
 800b9c0:	4b80      	ldr	r3, [pc, #512]	; (800bbc4 <__ieee754_rem_pio2f+0x224>)
 800b9c2:	429c      	cmp	r4, r3
 800b9c4:	dc38      	bgt.n	800ba38 <__ieee754_rem_pio2f+0x98>
 800b9c6:	2e00      	cmp	r6, #0
 800b9c8:	f024 040f 	bic.w	r4, r4, #15
 800b9cc:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800bbc8 <__ieee754_rem_pio2f+0x228>
 800b9d0:	4b7e      	ldr	r3, [pc, #504]	; (800bbcc <__ieee754_rem_pio2f+0x22c>)
 800b9d2:	dd18      	ble.n	800ba06 <__ieee754_rem_pio2f+0x66>
 800b9d4:	429c      	cmp	r4, r3
 800b9d6:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b9da:	bf09      	itett	eq
 800b9dc:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800bbd0 <__ieee754_rem_pio2f+0x230>
 800b9e0:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800bbd4 <__ieee754_rem_pio2f+0x234>
 800b9e4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b9e8:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800bbd8 <__ieee754_rem_pio2f+0x238>
 800b9ec:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b9f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b9f4:	edc0 6a00 	vstr	s13, [r0]
 800b9f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b9fc:	edc0 7a01 	vstr	s15, [r0, #4]
 800ba00:	2001      	movs	r0, #1
 800ba02:	b007      	add	sp, #28
 800ba04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba06:	429c      	cmp	r4, r3
 800ba08:	ee70 7a07 	vadd.f32	s15, s0, s14
 800ba0c:	bf09      	itett	eq
 800ba0e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800bbd0 <__ieee754_rem_pio2f+0x230>
 800ba12:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800bbd4 <__ieee754_rem_pio2f+0x234>
 800ba16:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800ba1a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800bbd8 <__ieee754_rem_pio2f+0x238>
 800ba1e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ba22:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ba26:	edc0 6a00 	vstr	s13, [r0]
 800ba2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba2e:	edc0 7a01 	vstr	s15, [r0, #4]
 800ba32:	f04f 30ff 	mov.w	r0, #4294967295
 800ba36:	e7e4      	b.n	800ba02 <__ieee754_rem_pio2f+0x62>
 800ba38:	4b68      	ldr	r3, [pc, #416]	; (800bbdc <__ieee754_rem_pio2f+0x23c>)
 800ba3a:	429c      	cmp	r4, r3
 800ba3c:	dc71      	bgt.n	800bb22 <__ieee754_rem_pio2f+0x182>
 800ba3e:	f000 fc03 	bl	800c248 <fabsf>
 800ba42:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800bbe0 <__ieee754_rem_pio2f+0x240>
 800ba46:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ba4a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ba4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba52:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800ba56:	ee17 0a90 	vmov	r0, s15
 800ba5a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800bbc8 <__ieee754_rem_pio2f+0x228>
 800ba5e:	eeb1 7a46 	vneg.f32	s14, s12
 800ba62:	eea7 0a27 	vfma.f32	s0, s14, s15
 800ba66:	281f      	cmp	r0, #31
 800ba68:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800bbd4 <__ieee754_rem_pio2f+0x234>
 800ba6c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ba70:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ba74:	ee16 3a90 	vmov	r3, s13
 800ba78:	dc1c      	bgt.n	800bab4 <__ieee754_rem_pio2f+0x114>
 800ba7a:	1e47      	subs	r7, r0, #1
 800ba7c:	4959      	ldr	r1, [pc, #356]	; (800bbe4 <__ieee754_rem_pio2f+0x244>)
 800ba7e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800ba82:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800ba86:	428a      	cmp	r2, r1
 800ba88:	d014      	beq.n	800bab4 <__ieee754_rem_pio2f+0x114>
 800ba8a:	602b      	str	r3, [r5, #0]
 800ba8c:	ed95 7a00 	vldr	s14, [r5]
 800ba90:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ba94:	2e00      	cmp	r6, #0
 800ba96:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ba9a:	ed85 0a01 	vstr	s0, [r5, #4]
 800ba9e:	dab0      	bge.n	800ba02 <__ieee754_rem_pio2f+0x62>
 800baa0:	eeb1 7a47 	vneg.f32	s14, s14
 800baa4:	eeb1 0a40 	vneg.f32	s0, s0
 800baa8:	ed85 7a00 	vstr	s14, [r5]
 800baac:	ed85 0a01 	vstr	s0, [r5, #4]
 800bab0:	4240      	negs	r0, r0
 800bab2:	e7a6      	b.n	800ba02 <__ieee754_rem_pio2f+0x62>
 800bab4:	15e4      	asrs	r4, r4, #23
 800bab6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800baba:	1aa2      	subs	r2, r4, r2
 800babc:	2a08      	cmp	r2, #8
 800babe:	dde4      	ble.n	800ba8a <__ieee754_rem_pio2f+0xea>
 800bac0:	eddf 7a43 	vldr	s15, [pc, #268]	; 800bbd0 <__ieee754_rem_pio2f+0x230>
 800bac4:	eef0 6a40 	vmov.f32	s13, s0
 800bac8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bacc:	ee30 0a66 	vsub.f32	s0, s0, s13
 800bad0:	eea7 0a27 	vfma.f32	s0, s14, s15
 800bad4:	eddf 7a40 	vldr	s15, [pc, #256]	; 800bbd8 <__ieee754_rem_pio2f+0x238>
 800bad8:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800badc:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800bae0:	eef0 7a40 	vmov.f32	s15, s0
 800bae4:	ee15 3a90 	vmov	r3, s11
 800bae8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800baec:	1aa4      	subs	r4, r4, r2
 800baee:	2c19      	cmp	r4, #25
 800baf0:	dc04      	bgt.n	800bafc <__ieee754_rem_pio2f+0x15c>
 800baf2:	edc5 5a00 	vstr	s11, [r5]
 800baf6:	eeb0 0a66 	vmov.f32	s0, s13
 800bafa:	e7c7      	b.n	800ba8c <__ieee754_rem_pio2f+0xec>
 800bafc:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800bbe8 <__ieee754_rem_pio2f+0x248>
 800bb00:	eeb0 0a66 	vmov.f32	s0, s13
 800bb04:	eea7 0a25 	vfma.f32	s0, s14, s11
 800bb08:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800bb0c:	eee7 7a25 	vfma.f32	s15, s14, s11
 800bb10:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800bbec <__ieee754_rem_pio2f+0x24c>
 800bb14:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800bb18:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bb1c:	ed85 7a00 	vstr	s14, [r5]
 800bb20:	e7b4      	b.n	800ba8c <__ieee754_rem_pio2f+0xec>
 800bb22:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800bb26:	db06      	blt.n	800bb36 <__ieee754_rem_pio2f+0x196>
 800bb28:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bb2c:	edc0 7a01 	vstr	s15, [r0, #4]
 800bb30:	edc0 7a00 	vstr	s15, [r0]
 800bb34:	e742      	b.n	800b9bc <__ieee754_rem_pio2f+0x1c>
 800bb36:	15e2      	asrs	r2, r4, #23
 800bb38:	3a86      	subs	r2, #134	; 0x86
 800bb3a:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800bb3e:	ee07 3a90 	vmov	s15, r3
 800bb42:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bb46:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800bbf0 <__ieee754_rem_pio2f+0x250>
 800bb4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bb4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb52:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bb56:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bb5a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bb5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bb62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb66:	ed8d 7a04 	vstr	s14, [sp, #16]
 800bb6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bb6e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb76:	edcd 7a05 	vstr	s15, [sp, #20]
 800bb7a:	d11e      	bne.n	800bbba <__ieee754_rem_pio2f+0x21a>
 800bb7c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800bb80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb84:	bf0c      	ite	eq
 800bb86:	2301      	moveq	r3, #1
 800bb88:	2302      	movne	r3, #2
 800bb8a:	491a      	ldr	r1, [pc, #104]	; (800bbf4 <__ieee754_rem_pio2f+0x254>)
 800bb8c:	9101      	str	r1, [sp, #4]
 800bb8e:	2102      	movs	r1, #2
 800bb90:	9100      	str	r1, [sp, #0]
 800bb92:	a803      	add	r0, sp, #12
 800bb94:	4629      	mov	r1, r5
 800bb96:	f000 f88d 	bl	800bcb4 <__kernel_rem_pio2f>
 800bb9a:	2e00      	cmp	r6, #0
 800bb9c:	f6bf af31 	bge.w	800ba02 <__ieee754_rem_pio2f+0x62>
 800bba0:	edd5 7a00 	vldr	s15, [r5]
 800bba4:	eef1 7a67 	vneg.f32	s15, s15
 800bba8:	edc5 7a00 	vstr	s15, [r5]
 800bbac:	edd5 7a01 	vldr	s15, [r5, #4]
 800bbb0:	eef1 7a67 	vneg.f32	s15, s15
 800bbb4:	edc5 7a01 	vstr	s15, [r5, #4]
 800bbb8:	e77a      	b.n	800bab0 <__ieee754_rem_pio2f+0x110>
 800bbba:	2303      	movs	r3, #3
 800bbbc:	e7e5      	b.n	800bb8a <__ieee754_rem_pio2f+0x1ea>
 800bbbe:	bf00      	nop
 800bbc0:	3f490fd8 	.word	0x3f490fd8
 800bbc4:	4016cbe3 	.word	0x4016cbe3
 800bbc8:	3fc90f80 	.word	0x3fc90f80
 800bbcc:	3fc90fd0 	.word	0x3fc90fd0
 800bbd0:	37354400 	.word	0x37354400
 800bbd4:	37354443 	.word	0x37354443
 800bbd8:	2e85a308 	.word	0x2e85a308
 800bbdc:	43490f80 	.word	0x43490f80
 800bbe0:	3f22f984 	.word	0x3f22f984
 800bbe4:	0800c610 	.word	0x0800c610
 800bbe8:	2e85a300 	.word	0x2e85a300
 800bbec:	248d3132 	.word	0x248d3132
 800bbf0:	43800000 	.word	0x43800000
 800bbf4:	0800c690 	.word	0x0800c690

0800bbf8 <__kernel_cosf>:
 800bbf8:	ee10 3a10 	vmov	r3, s0
 800bbfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc00:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bc04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc08:	da05      	bge.n	800bc16 <__kernel_cosf+0x1e>
 800bc0a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bc0e:	ee17 2a90 	vmov	r2, s15
 800bc12:	2a00      	cmp	r2, #0
 800bc14:	d03b      	beq.n	800bc8e <__kernel_cosf+0x96>
 800bc16:	ee20 6a00 	vmul.f32	s12, s0, s0
 800bc1a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bc1e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800bc94 <__kernel_cosf+0x9c>
 800bc22:	4a1d      	ldr	r2, [pc, #116]	; (800bc98 <__kernel_cosf+0xa0>)
 800bc24:	ee66 7a07 	vmul.f32	s15, s12, s14
 800bc28:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800bc9c <__kernel_cosf+0xa4>
 800bc2c:	eea6 7a25 	vfma.f32	s14, s12, s11
 800bc30:	4293      	cmp	r3, r2
 800bc32:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800bca0 <__kernel_cosf+0xa8>
 800bc36:	eee7 5a06 	vfma.f32	s11, s14, s12
 800bc3a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800bca4 <__kernel_cosf+0xac>
 800bc3e:	eea5 7a86 	vfma.f32	s14, s11, s12
 800bc42:	eddf 5a19 	vldr	s11, [pc, #100]	; 800bca8 <__kernel_cosf+0xb0>
 800bc46:	eee7 5a06 	vfma.f32	s11, s14, s12
 800bc4a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800bcac <__kernel_cosf+0xb4>
 800bc4e:	eea5 7a86 	vfma.f32	s14, s11, s12
 800bc52:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800bc56:	ee27 7a06 	vmul.f32	s14, s14, s12
 800bc5a:	eee6 0a07 	vfma.f32	s1, s12, s14
 800bc5e:	dc04      	bgt.n	800bc6a <__kernel_cosf+0x72>
 800bc60:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800bc64:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800bc68:	4770      	bx	lr
 800bc6a:	4a11      	ldr	r2, [pc, #68]	; (800bcb0 <__kernel_cosf+0xb8>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	bfda      	itte	le
 800bc70:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800bc74:	ee07 3a10 	vmovle	s14, r3
 800bc78:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800bc7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc80:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800bc84:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800bc88:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bc8c:	4770      	bx	lr
 800bc8e:	eeb0 0a66 	vmov.f32	s0, s13
 800bc92:	4770      	bx	lr
 800bc94:	ad47d74e 	.word	0xad47d74e
 800bc98:	3e999999 	.word	0x3e999999
 800bc9c:	310f74f6 	.word	0x310f74f6
 800bca0:	b493f27c 	.word	0xb493f27c
 800bca4:	37d00d01 	.word	0x37d00d01
 800bca8:	bab60b61 	.word	0xbab60b61
 800bcac:	3d2aaaab 	.word	0x3d2aaaab
 800bcb0:	3f480000 	.word	0x3f480000

0800bcb4 <__kernel_rem_pio2f>:
 800bcb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb8:	ed2d 8b04 	vpush	{d8-d9}
 800bcbc:	b0d7      	sub	sp, #348	; 0x15c
 800bcbe:	469b      	mov	fp, r3
 800bcc0:	460e      	mov	r6, r1
 800bcc2:	4bbe      	ldr	r3, [pc, #760]	; (800bfbc <__kernel_rem_pio2f+0x308>)
 800bcc4:	9964      	ldr	r1, [sp, #400]	; 0x190
 800bcc6:	9002      	str	r0, [sp, #8]
 800bcc8:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800bccc:	9865      	ldr	r0, [sp, #404]	; 0x194
 800bcce:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800bfcc <__kernel_rem_pio2f+0x318>
 800bcd2:	1ed1      	subs	r1, r2, #3
 800bcd4:	2308      	movs	r3, #8
 800bcd6:	fb91 f1f3 	sdiv	r1, r1, r3
 800bcda:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800bcde:	f10b 3aff 	add.w	sl, fp, #4294967295
 800bce2:	1c4c      	adds	r4, r1, #1
 800bce4:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800bce8:	eba1 050a 	sub.w	r5, r1, sl
 800bcec:	aa1a      	add	r2, sp, #104	; 0x68
 800bcee:	eb09 070a 	add.w	r7, r9, sl
 800bcf2:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800bcf6:	4696      	mov	lr, r2
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	42bb      	cmp	r3, r7
 800bcfc:	dd0f      	ble.n	800bd1e <__kernel_rem_pio2f+0x6a>
 800bcfe:	af42      	add	r7, sp, #264	; 0x108
 800bd00:	2200      	movs	r2, #0
 800bd02:	454a      	cmp	r2, r9
 800bd04:	dc27      	bgt.n	800bd56 <__kernel_rem_pio2f+0xa2>
 800bd06:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800bd0a:	eb0b 0302 	add.w	r3, fp, r2
 800bd0e:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800bd12:	9d02      	ldr	r5, [sp, #8]
 800bd14:	eddf 7aad 	vldr	s15, [pc, #692]	; 800bfcc <__kernel_rem_pio2f+0x318>
 800bd18:	f04f 0c00 	mov.w	ip, #0
 800bd1c:	e015      	b.n	800bd4a <__kernel_rem_pio2f+0x96>
 800bd1e:	42dd      	cmn	r5, r3
 800bd20:	bf5d      	ittte	pl
 800bd22:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800bd26:	ee07 2a90 	vmovpl	s15, r2
 800bd2a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800bd2e:	eef0 7a47 	vmovmi.f32	s15, s14
 800bd32:	ecee 7a01 	vstmia	lr!, {s15}
 800bd36:	3301      	adds	r3, #1
 800bd38:	e7df      	b.n	800bcfa <__kernel_rem_pio2f+0x46>
 800bd3a:	ecf5 6a01 	vldmia	r5!, {s13}
 800bd3e:	ed33 7a01 	vldmdb	r3!, {s14}
 800bd42:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bd46:	f10c 0c01 	add.w	ip, ip, #1
 800bd4a:	45d4      	cmp	ip, sl
 800bd4c:	ddf5      	ble.n	800bd3a <__kernel_rem_pio2f+0x86>
 800bd4e:	ece7 7a01 	vstmia	r7!, {s15}
 800bd52:	3201      	adds	r2, #1
 800bd54:	e7d5      	b.n	800bd02 <__kernel_rem_pio2f+0x4e>
 800bd56:	ab06      	add	r3, sp, #24
 800bd58:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800bd5c:	9304      	str	r3, [sp, #16]
 800bd5e:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800bfc8 <__kernel_rem_pio2f+0x314>
 800bd62:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800bfc4 <__kernel_rem_pio2f+0x310>
 800bd66:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800bd6a:	9303      	str	r3, [sp, #12]
 800bd6c:	464d      	mov	r5, r9
 800bd6e:	ab56      	add	r3, sp, #344	; 0x158
 800bd70:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800bd74:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800bd78:	3f01      	subs	r7, #1
 800bd7a:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800bd7e:	00bf      	lsls	r7, r7, #2
 800bd80:	ab56      	add	r3, sp, #344	; 0x158
 800bd82:	19da      	adds	r2, r3, r7
 800bd84:	3a4c      	subs	r2, #76	; 0x4c
 800bd86:	2300      	movs	r3, #0
 800bd88:	1ae9      	subs	r1, r5, r3
 800bd8a:	2900      	cmp	r1, #0
 800bd8c:	dc4c      	bgt.n	800be28 <__kernel_rem_pio2f+0x174>
 800bd8e:	4620      	mov	r0, r4
 800bd90:	f000 faa4 	bl	800c2dc <scalbnf>
 800bd94:	eeb0 8a40 	vmov.f32	s16, s0
 800bd98:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800bd9c:	ee28 0a00 	vmul.f32	s0, s16, s0
 800bda0:	f000 fa5a 	bl	800c258 <floorf>
 800bda4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800bda8:	eea0 8a67 	vfms.f32	s16, s0, s15
 800bdac:	2c00      	cmp	r4, #0
 800bdae:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800bdb2:	edcd 7a01 	vstr	s15, [sp, #4]
 800bdb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdba:	ee38 8a67 	vsub.f32	s16, s16, s15
 800bdbe:	dd48      	ble.n	800be52 <__kernel_rem_pio2f+0x19e>
 800bdc0:	1e69      	subs	r1, r5, #1
 800bdc2:	ab06      	add	r3, sp, #24
 800bdc4:	f1c4 0008 	rsb	r0, r4, #8
 800bdc8:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800bdcc:	9a01      	ldr	r2, [sp, #4]
 800bdce:	fa4c f300 	asr.w	r3, ip, r0
 800bdd2:	441a      	add	r2, r3
 800bdd4:	4083      	lsls	r3, r0
 800bdd6:	9201      	str	r2, [sp, #4]
 800bdd8:	ebac 0203 	sub.w	r2, ip, r3
 800bddc:	ab06      	add	r3, sp, #24
 800bdde:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800bde2:	f1c4 0307 	rsb	r3, r4, #7
 800bde6:	fa42 f803 	asr.w	r8, r2, r3
 800bdea:	f1b8 0f00 	cmp.w	r8, #0
 800bdee:	dd41      	ble.n	800be74 <__kernel_rem_pio2f+0x1c0>
 800bdf0:	9b01      	ldr	r3, [sp, #4]
 800bdf2:	2000      	movs	r0, #0
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	9301      	str	r3, [sp, #4]
 800bdf8:	4601      	mov	r1, r0
 800bdfa:	4285      	cmp	r5, r0
 800bdfc:	dc6d      	bgt.n	800beda <__kernel_rem_pio2f+0x226>
 800bdfe:	2c00      	cmp	r4, #0
 800be00:	dd04      	ble.n	800be0c <__kernel_rem_pio2f+0x158>
 800be02:	2c01      	cmp	r4, #1
 800be04:	d07e      	beq.n	800bf04 <__kernel_rem_pio2f+0x250>
 800be06:	2c02      	cmp	r4, #2
 800be08:	f000 8086 	beq.w	800bf18 <__kernel_rem_pio2f+0x264>
 800be0c:	f1b8 0f02 	cmp.w	r8, #2
 800be10:	d130      	bne.n	800be74 <__kernel_rem_pio2f+0x1c0>
 800be12:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800be16:	ee30 8a48 	vsub.f32	s16, s0, s16
 800be1a:	b359      	cbz	r1, 800be74 <__kernel_rem_pio2f+0x1c0>
 800be1c:	4620      	mov	r0, r4
 800be1e:	f000 fa5d 	bl	800c2dc <scalbnf>
 800be22:	ee38 8a40 	vsub.f32	s16, s16, s0
 800be26:	e025      	b.n	800be74 <__kernel_rem_pio2f+0x1c0>
 800be28:	ee60 7a28 	vmul.f32	s15, s0, s17
 800be2c:	a806      	add	r0, sp, #24
 800be2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be36:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800be3a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800be3e:	ee10 1a10 	vmov	r1, s0
 800be42:	ed32 0a01 	vldmdb	r2!, {s0}
 800be46:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800be4a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800be4e:	3301      	adds	r3, #1
 800be50:	e79a      	b.n	800bd88 <__kernel_rem_pio2f+0xd4>
 800be52:	d106      	bne.n	800be62 <__kernel_rem_pio2f+0x1ae>
 800be54:	1e6b      	subs	r3, r5, #1
 800be56:	aa06      	add	r2, sp, #24
 800be58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800be5c:	ea4f 2822 	mov.w	r8, r2, asr #8
 800be60:	e7c3      	b.n	800bdea <__kernel_rem_pio2f+0x136>
 800be62:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800be66:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800be6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be6e:	da31      	bge.n	800bed4 <__kernel_rem_pio2f+0x220>
 800be70:	f04f 0800 	mov.w	r8, #0
 800be74:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800be78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be7c:	f040 80a8 	bne.w	800bfd0 <__kernel_rem_pio2f+0x31c>
 800be80:	1e6b      	subs	r3, r5, #1
 800be82:	4618      	mov	r0, r3
 800be84:	2200      	movs	r2, #0
 800be86:	4548      	cmp	r0, r9
 800be88:	da4d      	bge.n	800bf26 <__kernel_rem_pio2f+0x272>
 800be8a:	2a00      	cmp	r2, #0
 800be8c:	f000 8087 	beq.w	800bf9e <__kernel_rem_pio2f+0x2ea>
 800be90:	aa06      	add	r2, sp, #24
 800be92:	3c08      	subs	r4, #8
 800be94:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800be98:	2900      	cmp	r1, #0
 800be9a:	f000 808d 	beq.w	800bfb8 <__kernel_rem_pio2f+0x304>
 800be9e:	4620      	mov	r0, r4
 800bea0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bea4:	9302      	str	r3, [sp, #8]
 800bea6:	f000 fa19 	bl	800c2dc <scalbnf>
 800beaa:	9b02      	ldr	r3, [sp, #8]
 800beac:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800bfc8 <__kernel_rem_pio2f+0x314>
 800beb0:	0099      	lsls	r1, r3, #2
 800beb2:	aa42      	add	r2, sp, #264	; 0x108
 800beb4:	1850      	adds	r0, r2, r1
 800beb6:	1d05      	adds	r5, r0, #4
 800beb8:	461c      	mov	r4, r3
 800beba:	2c00      	cmp	r4, #0
 800bebc:	f280 80b8 	bge.w	800c030 <__kernel_rem_pio2f+0x37c>
 800bec0:	2500      	movs	r5, #0
 800bec2:	1b5c      	subs	r4, r3, r5
 800bec4:	2c00      	cmp	r4, #0
 800bec6:	f2c0 80d8 	blt.w	800c07a <__kernel_rem_pio2f+0x3c6>
 800beca:	4f3d      	ldr	r7, [pc, #244]	; (800bfc0 <__kernel_rem_pio2f+0x30c>)
 800becc:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800bfcc <__kernel_rem_pio2f+0x318>
 800bed0:	2400      	movs	r4, #0
 800bed2:	e0c6      	b.n	800c062 <__kernel_rem_pio2f+0x3ae>
 800bed4:	f04f 0802 	mov.w	r8, #2
 800bed8:	e78a      	b.n	800bdf0 <__kernel_rem_pio2f+0x13c>
 800beda:	ab06      	add	r3, sp, #24
 800bedc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800bee0:	b949      	cbnz	r1, 800bef6 <__kernel_rem_pio2f+0x242>
 800bee2:	b12b      	cbz	r3, 800bef0 <__kernel_rem_pio2f+0x23c>
 800bee4:	aa06      	add	r2, sp, #24
 800bee6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800beea:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800beee:	2301      	movs	r3, #1
 800bef0:	3001      	adds	r0, #1
 800bef2:	4619      	mov	r1, r3
 800bef4:	e781      	b.n	800bdfa <__kernel_rem_pio2f+0x146>
 800bef6:	aa06      	add	r2, sp, #24
 800bef8:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800befc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800bf00:	460b      	mov	r3, r1
 800bf02:	e7f5      	b.n	800bef0 <__kernel_rem_pio2f+0x23c>
 800bf04:	1e68      	subs	r0, r5, #1
 800bf06:	ab06      	add	r3, sp, #24
 800bf08:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800bf0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf10:	aa06      	add	r2, sp, #24
 800bf12:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800bf16:	e779      	b.n	800be0c <__kernel_rem_pio2f+0x158>
 800bf18:	1e68      	subs	r0, r5, #1
 800bf1a:	ab06      	add	r3, sp, #24
 800bf1c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800bf20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf24:	e7f4      	b.n	800bf10 <__kernel_rem_pio2f+0x25c>
 800bf26:	a906      	add	r1, sp, #24
 800bf28:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800bf2c:	3801      	subs	r0, #1
 800bf2e:	430a      	orrs	r2, r1
 800bf30:	e7a9      	b.n	800be86 <__kernel_rem_pio2f+0x1d2>
 800bf32:	f10c 0c01 	add.w	ip, ip, #1
 800bf36:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bf3a:	2a00      	cmp	r2, #0
 800bf3c:	d0f9      	beq.n	800bf32 <__kernel_rem_pio2f+0x27e>
 800bf3e:	eb0b 0305 	add.w	r3, fp, r5
 800bf42:	aa1a      	add	r2, sp, #104	; 0x68
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	1898      	adds	r0, r3, r2
 800bf48:	3004      	adds	r0, #4
 800bf4a:	1c69      	adds	r1, r5, #1
 800bf4c:	3704      	adds	r7, #4
 800bf4e:	2200      	movs	r2, #0
 800bf50:	4465      	add	r5, ip
 800bf52:	9005      	str	r0, [sp, #20]
 800bf54:	428d      	cmp	r5, r1
 800bf56:	f6ff af0a 	blt.w	800bd6e <__kernel_rem_pio2f+0xba>
 800bf5a:	a81a      	add	r0, sp, #104	; 0x68
 800bf5c:	eb02 0c03 	add.w	ip, r2, r3
 800bf60:	4484      	add	ip, r0
 800bf62:	9803      	ldr	r0, [sp, #12]
 800bf64:	f8dd e008 	ldr.w	lr, [sp, #8]
 800bf68:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800bf6c:	9001      	str	r0, [sp, #4]
 800bf6e:	ee07 0a90 	vmov	s15, r0
 800bf72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf76:	9805      	ldr	r0, [sp, #20]
 800bf78:	edcc 7a00 	vstr	s15, [ip]
 800bf7c:	eddf 7a13 	vldr	s15, [pc, #76]	; 800bfcc <__kernel_rem_pio2f+0x318>
 800bf80:	eb00 0802 	add.w	r8, r0, r2
 800bf84:	f04f 0c00 	mov.w	ip, #0
 800bf88:	45d4      	cmp	ip, sl
 800bf8a:	dd0c      	ble.n	800bfa6 <__kernel_rem_pio2f+0x2f2>
 800bf8c:	eb02 0c07 	add.w	ip, r2, r7
 800bf90:	a842      	add	r0, sp, #264	; 0x108
 800bf92:	4484      	add	ip, r0
 800bf94:	edcc 7a01 	vstr	s15, [ip, #4]
 800bf98:	3101      	adds	r1, #1
 800bf9a:	3204      	adds	r2, #4
 800bf9c:	e7da      	b.n	800bf54 <__kernel_rem_pio2f+0x2a0>
 800bf9e:	9b04      	ldr	r3, [sp, #16]
 800bfa0:	f04f 0c01 	mov.w	ip, #1
 800bfa4:	e7c7      	b.n	800bf36 <__kernel_rem_pio2f+0x282>
 800bfa6:	ecfe 6a01 	vldmia	lr!, {s13}
 800bfaa:	ed38 7a01 	vldmdb	r8!, {s14}
 800bfae:	f10c 0c01 	add.w	ip, ip, #1
 800bfb2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bfb6:	e7e7      	b.n	800bf88 <__kernel_rem_pio2f+0x2d4>
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	e769      	b.n	800be90 <__kernel_rem_pio2f+0x1dc>
 800bfbc:	0800c9d4 	.word	0x0800c9d4
 800bfc0:	0800c9a8 	.word	0x0800c9a8
 800bfc4:	43800000 	.word	0x43800000
 800bfc8:	3b800000 	.word	0x3b800000
 800bfcc:	00000000 	.word	0x00000000
 800bfd0:	4260      	negs	r0, r4
 800bfd2:	eeb0 0a48 	vmov.f32	s0, s16
 800bfd6:	f000 f981 	bl	800c2dc <scalbnf>
 800bfda:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800bfc4 <__kernel_rem_pio2f+0x310>
 800bfde:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800bfe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfe6:	db1a      	blt.n	800c01e <__kernel_rem_pio2f+0x36a>
 800bfe8:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800bfc8 <__kernel_rem_pio2f+0x314>
 800bfec:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bff0:	aa06      	add	r2, sp, #24
 800bff2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bff6:	a906      	add	r1, sp, #24
 800bff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bffc:	3408      	adds	r4, #8
 800bffe:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c002:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c006:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c00a:	ee10 3a10 	vmov	r3, s0
 800c00e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800c012:	1c6b      	adds	r3, r5, #1
 800c014:	ee17 2a90 	vmov	r2, s15
 800c018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c01c:	e73f      	b.n	800be9e <__kernel_rem_pio2f+0x1ea>
 800c01e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c022:	aa06      	add	r2, sp, #24
 800c024:	ee10 3a10 	vmov	r3, s0
 800c028:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800c02c:	462b      	mov	r3, r5
 800c02e:	e736      	b.n	800be9e <__kernel_rem_pio2f+0x1ea>
 800c030:	aa06      	add	r2, sp, #24
 800c032:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800c036:	9202      	str	r2, [sp, #8]
 800c038:	ee07 2a90 	vmov	s15, r2
 800c03c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c040:	3c01      	subs	r4, #1
 800c042:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c046:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c04a:	ed65 7a01 	vstmdb	r5!, {s15}
 800c04e:	e734      	b.n	800beba <__kernel_rem_pio2f+0x206>
 800c050:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800c054:	ecf7 6a01 	vldmia	r7!, {s13}
 800c058:	ed9c 7a00 	vldr	s14, [ip]
 800c05c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c060:	3401      	adds	r4, #1
 800c062:	454c      	cmp	r4, r9
 800c064:	dc01      	bgt.n	800c06a <__kernel_rem_pio2f+0x3b6>
 800c066:	42a5      	cmp	r5, r4
 800c068:	daf2      	bge.n	800c050 <__kernel_rem_pio2f+0x39c>
 800c06a:	aa56      	add	r2, sp, #344	; 0x158
 800c06c:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800c070:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800c074:	3501      	adds	r5, #1
 800c076:	3804      	subs	r0, #4
 800c078:	e723      	b.n	800bec2 <__kernel_rem_pio2f+0x20e>
 800c07a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c07c:	2a03      	cmp	r2, #3
 800c07e:	d84d      	bhi.n	800c11c <__kernel_rem_pio2f+0x468>
 800c080:	e8df f002 	tbb	[pc, r2]
 800c084:	021f1f3e 	.word	0x021f1f3e
 800c088:	aa56      	add	r2, sp, #344	; 0x158
 800c08a:	4411      	add	r1, r2
 800c08c:	399c      	subs	r1, #156	; 0x9c
 800c08e:	4608      	mov	r0, r1
 800c090:	461c      	mov	r4, r3
 800c092:	2c00      	cmp	r4, #0
 800c094:	dc5f      	bgt.n	800c156 <__kernel_rem_pio2f+0x4a2>
 800c096:	4608      	mov	r0, r1
 800c098:	461c      	mov	r4, r3
 800c09a:	2c01      	cmp	r4, #1
 800c09c:	dc6b      	bgt.n	800c176 <__kernel_rem_pio2f+0x4c2>
 800c09e:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800bfcc <__kernel_rem_pio2f+0x318>
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	dc77      	bgt.n	800c196 <__kernel_rem_pio2f+0x4e2>
 800c0a6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800c0aa:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800c0ae:	f1b8 0f00 	cmp.w	r8, #0
 800c0b2:	d176      	bne.n	800c1a2 <__kernel_rem_pio2f+0x4ee>
 800c0b4:	edc6 6a00 	vstr	s13, [r6]
 800c0b8:	ed86 7a01 	vstr	s14, [r6, #4]
 800c0bc:	edc6 7a02 	vstr	s15, [r6, #8]
 800c0c0:	e02c      	b.n	800c11c <__kernel_rem_pio2f+0x468>
 800c0c2:	aa56      	add	r2, sp, #344	; 0x158
 800c0c4:	4411      	add	r1, r2
 800c0c6:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800bfcc <__kernel_rem_pio2f+0x318>
 800c0ca:	399c      	subs	r1, #156	; 0x9c
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	da32      	bge.n	800c138 <__kernel_rem_pio2f+0x484>
 800c0d2:	f1b8 0f00 	cmp.w	r8, #0
 800c0d6:	d035      	beq.n	800c144 <__kernel_rem_pio2f+0x490>
 800c0d8:	eef1 7a47 	vneg.f32	s15, s14
 800c0dc:	edc6 7a00 	vstr	s15, [r6]
 800c0e0:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800c0e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c0e8:	a82f      	add	r0, sp, #188	; 0xbc
 800c0ea:	2101      	movs	r1, #1
 800c0ec:	428b      	cmp	r3, r1
 800c0ee:	da2c      	bge.n	800c14a <__kernel_rem_pio2f+0x496>
 800c0f0:	f1b8 0f00 	cmp.w	r8, #0
 800c0f4:	d001      	beq.n	800c0fa <__kernel_rem_pio2f+0x446>
 800c0f6:	eef1 7a67 	vneg.f32	s15, s15
 800c0fa:	edc6 7a01 	vstr	s15, [r6, #4]
 800c0fe:	e00d      	b.n	800c11c <__kernel_rem_pio2f+0x468>
 800c100:	aa56      	add	r2, sp, #344	; 0x158
 800c102:	4411      	add	r1, r2
 800c104:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800bfcc <__kernel_rem_pio2f+0x318>
 800c108:	399c      	subs	r1, #156	; 0x9c
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	da0e      	bge.n	800c12c <__kernel_rem_pio2f+0x478>
 800c10e:	f1b8 0f00 	cmp.w	r8, #0
 800c112:	d001      	beq.n	800c118 <__kernel_rem_pio2f+0x464>
 800c114:	eef1 7a67 	vneg.f32	s15, s15
 800c118:	edc6 7a00 	vstr	s15, [r6]
 800c11c:	9b01      	ldr	r3, [sp, #4]
 800c11e:	f003 0007 	and.w	r0, r3, #7
 800c122:	b057      	add	sp, #348	; 0x15c
 800c124:	ecbd 8b04 	vpop	{d8-d9}
 800c128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c12c:	ed31 7a01 	vldmdb	r1!, {s14}
 800c130:	3b01      	subs	r3, #1
 800c132:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c136:	e7e8      	b.n	800c10a <__kernel_rem_pio2f+0x456>
 800c138:	ed71 7a01 	vldmdb	r1!, {s15}
 800c13c:	3801      	subs	r0, #1
 800c13e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c142:	e7c4      	b.n	800c0ce <__kernel_rem_pio2f+0x41a>
 800c144:	eef0 7a47 	vmov.f32	s15, s14
 800c148:	e7c8      	b.n	800c0dc <__kernel_rem_pio2f+0x428>
 800c14a:	ecb0 7a01 	vldmia	r0!, {s14}
 800c14e:	3101      	adds	r1, #1
 800c150:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c154:	e7ca      	b.n	800c0ec <__kernel_rem_pio2f+0x438>
 800c156:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c15a:	ed70 6a01 	vldmdb	r0!, {s13}
 800c15e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c162:	3c01      	subs	r4, #1
 800c164:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c168:	ed00 7a01 	vstr	s14, [r0, #-4]
 800c16c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c170:	edc0 7a00 	vstr	s15, [r0]
 800c174:	e78d      	b.n	800c092 <__kernel_rem_pio2f+0x3de>
 800c176:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c17a:	ed70 6a01 	vldmdb	r0!, {s13}
 800c17e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c182:	3c01      	subs	r4, #1
 800c184:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c188:	ed00 7a01 	vstr	s14, [r0, #-4]
 800c18c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c190:	edc0 7a00 	vstr	s15, [r0]
 800c194:	e781      	b.n	800c09a <__kernel_rem_pio2f+0x3e6>
 800c196:	ed31 7a01 	vldmdb	r1!, {s14}
 800c19a:	3b01      	subs	r3, #1
 800c19c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c1a0:	e77f      	b.n	800c0a2 <__kernel_rem_pio2f+0x3ee>
 800c1a2:	eef1 6a66 	vneg.f32	s13, s13
 800c1a6:	eeb1 7a47 	vneg.f32	s14, s14
 800c1aa:	edc6 6a00 	vstr	s13, [r6]
 800c1ae:	ed86 7a01 	vstr	s14, [r6, #4]
 800c1b2:	eef1 7a67 	vneg.f32	s15, s15
 800c1b6:	e781      	b.n	800c0bc <__kernel_rem_pio2f+0x408>

0800c1b8 <__kernel_sinf>:
 800c1b8:	ee10 3a10 	vmov	r3, s0
 800c1bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1c0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c1c4:	da04      	bge.n	800c1d0 <__kernel_sinf+0x18>
 800c1c6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c1ca:	ee17 3a90 	vmov	r3, s15
 800c1ce:	b35b      	cbz	r3, 800c228 <__kernel_sinf+0x70>
 800c1d0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c1d4:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c22c <__kernel_sinf+0x74>
 800c1d8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c230 <__kernel_sinf+0x78>
 800c1dc:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c1e0:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c234 <__kernel_sinf+0x7c>
 800c1e4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c1e8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c238 <__kernel_sinf+0x80>
 800c1ec:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c1f0:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c23c <__kernel_sinf+0x84>
 800c1f4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c1f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c1fc:	b930      	cbnz	r0, 800c20c <__kernel_sinf+0x54>
 800c1fe:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800c240 <__kernel_sinf+0x88>
 800c202:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c206:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c20a:	4770      	bx	lr
 800c20c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c210:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c214:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c218:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c21c:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c244 <__kernel_sinf+0x8c>
 800c220:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c224:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c228:	4770      	bx	lr
 800c22a:	bf00      	nop
 800c22c:	2f2ec9d3 	.word	0x2f2ec9d3
 800c230:	b2d72f34 	.word	0xb2d72f34
 800c234:	3638ef1b 	.word	0x3638ef1b
 800c238:	b9500d01 	.word	0xb9500d01
 800c23c:	3c088889 	.word	0x3c088889
 800c240:	be2aaaab 	.word	0xbe2aaaab
 800c244:	3e2aaaab 	.word	0x3e2aaaab

0800c248 <fabsf>:
 800c248:	ee10 3a10 	vmov	r3, s0
 800c24c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c250:	ee00 3a10 	vmov	s0, r3
 800c254:	4770      	bx	lr
	...

0800c258 <floorf>:
 800c258:	ee10 3a10 	vmov	r3, s0
 800c25c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c260:	0dca      	lsrs	r2, r1, #23
 800c262:	3a7f      	subs	r2, #127	; 0x7f
 800c264:	2a16      	cmp	r2, #22
 800c266:	dc2a      	bgt.n	800c2be <floorf+0x66>
 800c268:	2a00      	cmp	r2, #0
 800c26a:	da11      	bge.n	800c290 <floorf+0x38>
 800c26c:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c2d0 <floorf+0x78>
 800c270:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c274:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c27c:	dd05      	ble.n	800c28a <floorf+0x32>
 800c27e:	2b00      	cmp	r3, #0
 800c280:	da23      	bge.n	800c2ca <floorf+0x72>
 800c282:	4a14      	ldr	r2, [pc, #80]	; (800c2d4 <floorf+0x7c>)
 800c284:	2900      	cmp	r1, #0
 800c286:	bf18      	it	ne
 800c288:	4613      	movne	r3, r2
 800c28a:	ee00 3a10 	vmov	s0, r3
 800c28e:	4770      	bx	lr
 800c290:	4911      	ldr	r1, [pc, #68]	; (800c2d8 <floorf+0x80>)
 800c292:	4111      	asrs	r1, r2
 800c294:	420b      	tst	r3, r1
 800c296:	d0fa      	beq.n	800c28e <floorf+0x36>
 800c298:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c2d0 <floorf+0x78>
 800c29c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c2a0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c2a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a8:	ddef      	ble.n	800c28a <floorf+0x32>
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	bfbe      	ittt	lt
 800c2ae:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c2b2:	fa40 f202 	asrlt.w	r2, r0, r2
 800c2b6:	189b      	addlt	r3, r3, r2
 800c2b8:	ea23 0301 	bic.w	r3, r3, r1
 800c2bc:	e7e5      	b.n	800c28a <floorf+0x32>
 800c2be:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c2c2:	d3e4      	bcc.n	800c28e <floorf+0x36>
 800c2c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c2c8:	4770      	bx	lr
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	e7dd      	b.n	800c28a <floorf+0x32>
 800c2ce:	bf00      	nop
 800c2d0:	7149f2ca 	.word	0x7149f2ca
 800c2d4:	bf800000 	.word	0xbf800000
 800c2d8:	007fffff 	.word	0x007fffff

0800c2dc <scalbnf>:
 800c2dc:	b508      	push	{r3, lr}
 800c2de:	ee10 2a10 	vmov	r2, s0
 800c2e2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800c2e6:	ed2d 8b02 	vpush	{d8}
 800c2ea:	eef0 0a40 	vmov.f32	s1, s0
 800c2ee:	d004      	beq.n	800c2fa <scalbnf+0x1e>
 800c2f0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c2f4:	d306      	bcc.n	800c304 <scalbnf+0x28>
 800c2f6:	ee70 0a00 	vadd.f32	s1, s0, s0
 800c2fa:	ecbd 8b02 	vpop	{d8}
 800c2fe:	eeb0 0a60 	vmov.f32	s0, s1
 800c302:	bd08      	pop	{r3, pc}
 800c304:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c308:	d21c      	bcs.n	800c344 <scalbnf+0x68>
 800c30a:	4b1f      	ldr	r3, [pc, #124]	; (800c388 <scalbnf+0xac>)
 800c30c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c38c <scalbnf+0xb0>
 800c310:	4298      	cmp	r0, r3
 800c312:	ee60 0a27 	vmul.f32	s1, s0, s15
 800c316:	db10      	blt.n	800c33a <scalbnf+0x5e>
 800c318:	ee10 2a90 	vmov	r2, s1
 800c31c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800c320:	3b19      	subs	r3, #25
 800c322:	4403      	add	r3, r0
 800c324:	2bfe      	cmp	r3, #254	; 0xfe
 800c326:	dd0f      	ble.n	800c348 <scalbnf+0x6c>
 800c328:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800c390 <scalbnf+0xb4>
 800c32c:	eeb0 0a48 	vmov.f32	s0, s16
 800c330:	f000 f834 	bl	800c39c <copysignf>
 800c334:	ee60 0a08 	vmul.f32	s1, s0, s16
 800c338:	e7df      	b.n	800c2fa <scalbnf+0x1e>
 800c33a:	eddf 7a16 	vldr	s15, [pc, #88]	; 800c394 <scalbnf+0xb8>
 800c33e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800c342:	e7da      	b.n	800c2fa <scalbnf+0x1e>
 800c344:	0ddb      	lsrs	r3, r3, #23
 800c346:	e7ec      	b.n	800c322 <scalbnf+0x46>
 800c348:	2b00      	cmp	r3, #0
 800c34a:	dd06      	ble.n	800c35a <scalbnf+0x7e>
 800c34c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800c350:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800c354:	ee00 3a90 	vmov	s1, r3
 800c358:	e7cf      	b.n	800c2fa <scalbnf+0x1e>
 800c35a:	f113 0f16 	cmn.w	r3, #22
 800c35e:	da06      	bge.n	800c36e <scalbnf+0x92>
 800c360:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c364:	4298      	cmp	r0, r3
 800c366:	dcdf      	bgt.n	800c328 <scalbnf+0x4c>
 800c368:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800c394 <scalbnf+0xb8>
 800c36c:	e7de      	b.n	800c32c <scalbnf+0x50>
 800c36e:	3319      	adds	r3, #25
 800c370:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800c374:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800c378:	eddf 7a07 	vldr	s15, [pc, #28]	; 800c398 <scalbnf+0xbc>
 800c37c:	ee07 3a10 	vmov	s14, r3
 800c380:	ee67 0a27 	vmul.f32	s1, s14, s15
 800c384:	e7b9      	b.n	800c2fa <scalbnf+0x1e>
 800c386:	bf00      	nop
 800c388:	ffff3cb0 	.word	0xffff3cb0
 800c38c:	4c000000 	.word	0x4c000000
 800c390:	7149f2ca 	.word	0x7149f2ca
 800c394:	0da24260 	.word	0x0da24260
 800c398:	33000000 	.word	0x33000000

0800c39c <copysignf>:
 800c39c:	ee10 3a10 	vmov	r3, s0
 800c3a0:	ee10 2a90 	vmov	r2, s1
 800c3a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c3a8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	ee00 3a10 	vmov	s0, r3
 800c3b2:	4770      	bx	lr

0800c3b4 <_init>:
 800c3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3b6:	bf00      	nop
 800c3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ba:	bc08      	pop	{r3}
 800c3bc:	469e      	mov	lr, r3
 800c3be:	4770      	bx	lr

0800c3c0 <_fini>:
 800c3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c2:	bf00      	nop
 800c3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3c6:	bc08      	pop	{r3}
 800c3c8:	469e      	mov	lr, r3
 800c3ca:	4770      	bx	lr
