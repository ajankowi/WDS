
com_dalmi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d054  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  0800d1e4  0800d1e4  0001d1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7d8  0800d7d8  000204a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7d8  0800d7d8  0001d7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7e0  0800d7e0  000204a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7e0  0800d7e0  0001d7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7e4  0800d7e4  0001d7e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a4  20000000  0800d7e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  200004a4  0800dc8c  000204a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000888  0800dc8c  00020888  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000215b0  00000000  00000000  000204d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000381e  00000000  00000000  00041a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018a8  00000000  00000000  000452a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016e0  00000000  00000000  00046b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002aa1c  00000000  00000000  00048230  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015380  00000000  00000000  00072c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd616  00000000  00000000  00087fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001855e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000765c  00000000  00000000  00185660  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004a4 	.word	0x200004a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d1cc 	.word	0x0800d1cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004a8 	.word	0x200004a8
 80001cc:	0800d1cc 	.word	0x0800d1cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b972 	b.w	8000db8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	4688      	mov	r8, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14b      	bne.n	8000b92 <__udivmoddi4+0xa6>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4615      	mov	r5, r2
 8000afe:	d967      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0720 	rsb	r7, r2, #32
 8000b0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b12:	4095      	lsls	r5, r2
 8000b14:	ea47 0803 	orr.w	r8, r7, r3
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b24:	fa1f fc85 	uxth.w	ip, r5
 8000b28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b30:	fb07 f10c 	mul.w	r1, r7, ip
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18eb      	adds	r3, r5, r3
 8000b3a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b3e:	f080 811b 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8118 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b48:	3f02      	subs	r7, #2
 8000b4a:	442b      	add	r3, r5
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b60:	45a4      	cmp	ip, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	192c      	adds	r4, r5, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8107 	bcs.w	8000d7c <__udivmoddi4+0x290>
 8000b6e:	45a4      	cmp	ip, r4
 8000b70:	f240 8104 	bls.w	8000d7c <__udivmoddi4+0x290>
 8000b74:	3802      	subs	r0, #2
 8000b76:	442c      	add	r4, r5
 8000b78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b7c:	eba4 040c 	sub.w	r4, r4, ip
 8000b80:	2700      	movs	r7, #0
 8000b82:	b11e      	cbz	r6, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c6 4300 	strd	r4, r3, [r6]
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d909      	bls.n	8000baa <__udivmoddi4+0xbe>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	f000 80eb 	beq.w	8000d72 <__udivmoddi4+0x286>
 8000b9c:	2700      	movs	r7, #0
 8000b9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ba2:	4638      	mov	r0, r7
 8000ba4:	4639      	mov	r1, r7
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	fab3 f783 	clz	r7, r3
 8000bae:	2f00      	cmp	r7, #0
 8000bb0:	d147      	bne.n	8000c42 <__udivmoddi4+0x156>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d302      	bcc.n	8000bbc <__udivmoddi4+0xd0>
 8000bb6:	4282      	cmp	r2, r0
 8000bb8:	f200 80fa 	bhi.w	8000db0 <__udivmoddi4+0x2c4>
 8000bbc:	1a84      	subs	r4, r0, r2
 8000bbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	4698      	mov	r8, r3
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d0e0      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000bca:	e9c6 4800 	strd	r4, r8, [r6]
 8000bce:	e7dd      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000bd0:	b902      	cbnz	r2, 8000bd4 <__udivmoddi4+0xe8>
 8000bd2:	deff      	udf	#255	; 0xff
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	f040 808f 	bne.w	8000cfc <__udivmoddi4+0x210>
 8000bde:	1b49      	subs	r1, r1, r5
 8000be0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000be4:	fa1f f885 	uxth.w	r8, r5
 8000be8:	2701      	movs	r7, #1
 8000bea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x124>
 8000c00:	18eb      	adds	r3, r5, r3
 8000c02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x122>
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	f200 80cd 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000c0e:	4684      	mov	ip, r0
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	b2a3      	uxth	r3, r4
 8000c14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c20:	fb08 f800 	mul.w	r8, r8, r0
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x14c>
 8000c28:	192c      	adds	r4, r5, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x14a>
 8000c30:	45a0      	cmp	r8, r4
 8000c32:	f200 80b6 	bhi.w	8000da2 <__udivmoddi4+0x2b6>
 8000c36:	4618      	mov	r0, r3
 8000c38:	eba4 0408 	sub.w	r4, r4, r8
 8000c3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c40:	e79f      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c42:	f1c7 0c20 	rsb	ip, r7, #32
 8000c46:	40bb      	lsls	r3, r7
 8000c48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c50:	fa01 f407 	lsl.w	r4, r1, r7
 8000c54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c60:	4325      	orrs	r5, r4
 8000c62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c66:	0c2c      	lsrs	r4, r5, #16
 8000c68:	fb08 3319 	mls	r3, r8, r9, r3
 8000c6c:	fa1f fa8e 	uxth.w	sl, lr
 8000c70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c74:	fb09 f40a 	mul.w	r4, r9, sl
 8000c78:	429c      	cmp	r4, r3
 8000c7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b0>
 8000c84:	eb1e 0303 	adds.w	r3, lr, r3
 8000c88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c8c:	f080 8087 	bcs.w	8000d9e <__udivmoddi4+0x2b2>
 8000c90:	429c      	cmp	r4, r3
 8000c92:	f240 8084 	bls.w	8000d9e <__udivmoddi4+0x2b2>
 8000c96:	f1a9 0902 	sub.w	r9, r9, #2
 8000c9a:	4473      	add	r3, lr
 8000c9c:	1b1b      	subs	r3, r3, r4
 8000c9e:	b2ad      	uxth	r5, r5
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb0:	45a2      	cmp	sl, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1da>
 8000cb4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	d26b      	bcs.n	8000d96 <__udivmoddi4+0x2aa>
 8000cbe:	45a2      	cmp	sl, r4
 8000cc0:	d969      	bls.n	8000d96 <__udivmoddi4+0x2aa>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4474      	add	r4, lr
 8000cc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cca:	fba0 8902 	umull	r8, r9, r0, r2
 8000cce:	eba4 040a 	sub.w	r4, r4, sl
 8000cd2:	454c      	cmp	r4, r9
 8000cd4:	46c2      	mov	sl, r8
 8000cd6:	464b      	mov	r3, r9
 8000cd8:	d354      	bcc.n	8000d84 <__udivmoddi4+0x298>
 8000cda:	d051      	beq.n	8000d80 <__udivmoddi4+0x294>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d069      	beq.n	8000db4 <__udivmoddi4+0x2c8>
 8000ce0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ce4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ce8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cec:	40fd      	lsrs	r5, r7
 8000cee:	40fc      	lsrs	r4, r7
 8000cf0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cf4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cf8:	2700      	movs	r7, #0
 8000cfa:	e747      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000cfc:	f1c2 0320 	rsb	r3, r2, #32
 8000d00:	fa20 f703 	lsr.w	r7, r0, r3
 8000d04:	4095      	lsls	r5, r2
 8000d06:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d12:	4338      	orrs	r0, r7
 8000d14:	0c01      	lsrs	r1, r0, #16
 8000d16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d1a:	fa1f f885 	uxth.w	r8, r5
 8000d1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d26:	fb07 f308 	mul.w	r3, r7, r8
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x256>
 8000d32:	1869      	adds	r1, r5, r1
 8000d34:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d38:	d22f      	bcs.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d92d      	bls.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3e:	3f02      	subs	r7, #2
 8000d40:	4429      	add	r1, r5
 8000d42:	1acb      	subs	r3, r1, r3
 8000d44:	b281      	uxth	r1, r0
 8000d46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d52:	fb00 f308 	mul.w	r3, r0, r8
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d907      	bls.n	8000d6a <__udivmoddi4+0x27e>
 8000d5a:	1869      	adds	r1, r5, r1
 8000d5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d60:	d217      	bcs.n	8000d92 <__udivmoddi4+0x2a6>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d915      	bls.n	8000d92 <__udivmoddi4+0x2a6>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4429      	add	r1, r5
 8000d6a:	1ac9      	subs	r1, r1, r3
 8000d6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d70:	e73b      	b.n	8000bea <__udivmoddi4+0xfe>
 8000d72:	4637      	mov	r7, r6
 8000d74:	4630      	mov	r0, r6
 8000d76:	e709      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d78:	4607      	mov	r7, r0
 8000d7a:	e6e7      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	e6fb      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d80:	4541      	cmp	r1, r8
 8000d82:	d2ab      	bcs.n	8000cdc <__udivmoddi4+0x1f0>
 8000d84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d88:	eb69 020e 	sbc.w	r2, r9, lr
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	4613      	mov	r3, r2
 8000d90:	e7a4      	b.n	8000cdc <__udivmoddi4+0x1f0>
 8000d92:	4660      	mov	r0, ip
 8000d94:	e7e9      	b.n	8000d6a <__udivmoddi4+0x27e>
 8000d96:	4618      	mov	r0, r3
 8000d98:	e795      	b.n	8000cc6 <__udivmoddi4+0x1da>
 8000d9a:	4667      	mov	r7, ip
 8000d9c:	e7d1      	b.n	8000d42 <__udivmoddi4+0x256>
 8000d9e:	4681      	mov	r9, r0
 8000da0:	e77c      	b.n	8000c9c <__udivmoddi4+0x1b0>
 8000da2:	3802      	subs	r0, #2
 8000da4:	442c      	add	r4, r5
 8000da6:	e747      	b.n	8000c38 <__udivmoddi4+0x14c>
 8000da8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dac:	442b      	add	r3, r5
 8000dae:	e72f      	b.n	8000c10 <__udivmoddi4+0x124>
 8000db0:	4638      	mov	r0, r7
 8000db2:	e708      	b.n	8000bc6 <__udivmoddi4+0xda>
 8000db4:	4637      	mov	r7, r6
 8000db6:	e6e9      	b.n	8000b8c <__udivmoddi4+0xa0>

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <HAL_TIM_PeriodElapsedCallback>:
#include "StepMotor.h"


volatile uint8_t i = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM6){
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d106      	bne.n	8000ddc <HAL_TIM_PeriodElapsedCallback+0x20>
		i++;
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000dda:	701a      	strb	r2, [r3, #0]
	}
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	40001000 	.word	0x40001000
 8000dec:	200004c0 	.word	0x200004c0

08000df0 <SM_it>:


void SM_it(){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(StepM_1_1_GPIO_Port, StepM_1_1_Pin, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2101      	movs	r1, #1
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f001 fc90 	bl	8002720 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(StepM_1_2_GPIO_Port, StepM_1_2_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e06:	4808      	ldr	r0, [pc, #32]	; (8000e28 <SM_it+0x38>)
 8000e08:	f001 fc8a 	bl	8002720 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(StepM_4_1_GPIO_Port, StepM_4_1_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2101      	movs	r1, #1
 8000e10:	4806      	ldr	r0, [pc, #24]	; (8000e2c <SM_it+0x3c>)
 8000e12:	f001 fc85 	bl	8002720 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(StepM_4_2_GPIO_Port, StepM_4_2_Pin, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e20:	f001 fc7e 	bl	8002720 <HAL_GPIO_WritePin>
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	48000800 	.word	0x48000800
 8000e2c:	48000400 	.word	0x48000400

08000e30 <half_step_motor_left>:


void half_step_motor_left(uint32_t angle, uint8_t number){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	70fb      	strb	r3, [r7, #3]

	HAL_TIM_Base_Start_IT(&htim6);
 8000e3c:	4872      	ldr	r0, [pc, #456]	; (8001008 <half_step_motor_left+0x1d8>)
 8000e3e:	f003 fccf 	bl	80047e0 <HAL_TIM_Base_Start_IT>

	uint32_t ac = 1;
 8000e42:	2301      	movs	r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]

	if(number == 1){
 8000e46:	78fb      	ldrb	r3, [r7, #3]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d168      	bne.n	8000f1e <half_step_motor_left+0xee>
		for (; ac <= angle;){
 8000e4c:	e060      	b.n	8000f10 <half_step_motor_left+0xe0>
			if(i == 0){
 8000e4e:	4b6f      	ldr	r3, [pc, #444]	; (800100c <half_step_motor_left+0x1dc>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d105      	bne.n	8000e64 <half_step_motor_left+0x34>
				HAL_GPIO_WritePin(StepM_2_1_GPIO_Port, StepM_2_1_Pin, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e60:	f001 fc5e 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i == 1){
 8000e64:	4b69      	ldr	r3, [pc, #420]	; (800100c <half_step_motor_left+0x1dc>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d105      	bne.n	8000e7a <half_step_motor_left+0x4a>
				HAL_GPIO_WritePin(StepM_1_1_GPIO_Port, StepM_1_1_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2101      	movs	r1, #1
 8000e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e76:	f001 fc53 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i == 2){
 8000e7a:	4b64      	ldr	r3, [pc, #400]	; (800100c <half_step_motor_left+0x1dc>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d105      	bne.n	8000e90 <half_step_motor_left+0x60>
				HAL_GPIO_WritePin(StepM_3_1_GPIO_Port, StepM_3_1_Pin, GPIO_PIN_SET);
 8000e84:	2201      	movs	r2, #1
 8000e86:	2110      	movs	r1, #16
 8000e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8c:	f001 fc48 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i == 3){
 8000e90:	4b5e      	ldr	r3, [pc, #376]	; (800100c <half_step_motor_left+0x1dc>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d105      	bne.n	8000ea6 <half_step_motor_left+0x76>
				HAL_GPIO_WritePin(StepM_2_1_GPIO_Port, StepM_2_1_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea2:	f001 fc3d 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i == 4){
 8000ea6:	4b59      	ldr	r3, [pc, #356]	; (800100c <half_step_motor_left+0x1dc>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	d104      	bne.n	8000eba <half_step_motor_left+0x8a>
				HAL_GPIO_WritePin(StepM_4_1_GPIO_Port, StepM_4_1_Pin, GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	4856      	ldr	r0, [pc, #344]	; (8001010 <half_step_motor_left+0x1e0>)
 8000eb6:	f001 fc33 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i == 5){
 8000eba:	4b54      	ldr	r3, [pc, #336]	; (800100c <half_step_motor_left+0x1dc>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b05      	cmp	r3, #5
 8000ec2:	d105      	bne.n	8000ed0 <half_step_motor_left+0xa0>
				HAL_GPIO_WritePin(StepM_3_1_GPIO_Port, StepM_3_1_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2110      	movs	r1, #16
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ecc:	f001 fc28 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i == 6){
 8000ed0:	4b4e      	ldr	r3, [pc, #312]	; (800100c <half_step_motor_left+0x1dc>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d105      	bne.n	8000ee6 <half_step_motor_left+0xb6>
				HAL_GPIO_WritePin(StepM_1_1_GPIO_Port, StepM_1_1_Pin, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2101      	movs	r1, #1
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee2:	f001 fc1d 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i == 7){
 8000ee6:	4b49      	ldr	r3, [pc, #292]	; (800100c <half_step_motor_left+0x1dc>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b07      	cmp	r3, #7
 8000eee:	d104      	bne.n	8000efa <half_step_motor_left+0xca>
				HAL_GPIO_WritePin(StepM_4_1_GPIO_Port, StepM_4_1_Pin, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	4846      	ldr	r0, [pc, #280]	; (8001010 <half_step_motor_left+0x1e0>)
 8000ef6:	f001 fc13 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i >= 8){
 8000efa:	4b44      	ldr	r3, [pc, #272]	; (800100c <half_step_motor_left+0x1dc>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b07      	cmp	r3, #7
 8000f02:	d905      	bls.n	8000f10 <half_step_motor_left+0xe0>
				i = 0;
 8000f04:	4b41      	ldr	r3, [pc, #260]	; (800100c <half_step_motor_left+0x1dc>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
				ac++;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
		for (; ac <= angle;){
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d99a      	bls.n	8000e4e <half_step_motor_left+0x1e>
			}
		}
		//HAL_GPIO_WritePin(StepM_1_1_GPIO_Port, StepM_1_1_Pin, GPIO_PIN_RESET);
		HAL_TIM_Base_Stop_IT(&htim6);
 8000f18:	483b      	ldr	r0, [pc, #236]	; (8001008 <half_step_motor_left+0x1d8>)
 8000f1a:	f003 fcd1 	bl	80048c0 <HAL_TIM_Base_Stop_IT>
	}
	if(number == 2){
 8000f1e:	78fb      	ldrb	r3, [r7, #3]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d16c      	bne.n	8000ffe <half_step_motor_left+0x1ce>
			for (; ac <= angle;){
 8000f24:	e064      	b.n	8000ff0 <half_step_motor_left+0x1c0>
				if(i == 0){
 8000f26:	4b39      	ldr	r3, [pc, #228]	; (800100c <half_step_motor_left+0x1dc>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d105      	bne.n	8000f3c <half_step_motor_left+0x10c>
					HAL_GPIO_WritePin(StepM_2_2_GPIO_Port, StepM_2_2_Pin, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f36:	4837      	ldr	r0, [pc, #220]	; (8001014 <half_step_motor_left+0x1e4>)
 8000f38:	f001 fbf2 	bl	8002720 <HAL_GPIO_WritePin>
				}
				if(i == 1){
 8000f3c:	4b33      	ldr	r3, [pc, #204]	; (800100c <half_step_motor_left+0x1dc>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d105      	bne.n	8000f52 <half_step_motor_left+0x122>
					HAL_GPIO_WritePin(StepM_1_2_GPIO_Port, StepM_1_2_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f4c:	4831      	ldr	r0, [pc, #196]	; (8001014 <half_step_motor_left+0x1e4>)
 8000f4e:	f001 fbe7 	bl	8002720 <HAL_GPIO_WritePin>
				}
				if(i == 2){
 8000f52:	4b2e      	ldr	r3, [pc, #184]	; (800100c <half_step_motor_left+0x1dc>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d105      	bne.n	8000f68 <half_step_motor_left+0x138>
					HAL_GPIO_WritePin(StepM_3_2_GPIO_Port, StepM_3_2_Pin, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f62:	482c      	ldr	r0, [pc, #176]	; (8001014 <half_step_motor_left+0x1e4>)
 8000f64:	f001 fbdc 	bl	8002720 <HAL_GPIO_WritePin>
				}
				if(i == 3){
 8000f68:	4b28      	ldr	r3, [pc, #160]	; (800100c <half_step_motor_left+0x1dc>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d105      	bne.n	8000f7e <half_step_motor_left+0x14e>
					HAL_GPIO_WritePin(StepM_2_2_GPIO_Port, StepM_2_2_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f78:	4826      	ldr	r0, [pc, #152]	; (8001014 <half_step_motor_left+0x1e4>)
 8000f7a:	f001 fbd1 	bl	8002720 <HAL_GPIO_WritePin>
				}
				if(i == 4){
 8000f7e:	4b23      	ldr	r3, [pc, #140]	; (800100c <half_step_motor_left+0x1dc>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b04      	cmp	r3, #4
 8000f86:	d106      	bne.n	8000f96 <half_step_motor_left+0x166>
					HAL_GPIO_WritePin(StepM_4_2_GPIO_Port, StepM_4_2_Pin, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f92:	f001 fbc5 	bl	8002720 <HAL_GPIO_WritePin>
				}
				if(i == 5){
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <half_step_motor_left+0x1dc>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b05      	cmp	r3, #5
 8000f9e:	d105      	bne.n	8000fac <half_step_motor_left+0x17c>
					HAL_GPIO_WritePin(StepM_3_2_GPIO_Port, StepM_3_2_Pin, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa6:	481b      	ldr	r0, [pc, #108]	; (8001014 <half_step_motor_left+0x1e4>)
 8000fa8:	f001 fbba 	bl	8002720 <HAL_GPIO_WritePin>
				}
				if(i == 6){
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <half_step_motor_left+0x1dc>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b06      	cmp	r3, #6
 8000fb4:	d105      	bne.n	8000fc2 <half_step_motor_left+0x192>
					HAL_GPIO_WritePin(StepM_1_2_GPIO_Port, StepM_1_2_Pin, GPIO_PIN_SET);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fbc:	4815      	ldr	r0, [pc, #84]	; (8001014 <half_step_motor_left+0x1e4>)
 8000fbe:	f001 fbaf 	bl	8002720 <HAL_GPIO_WritePin>
				}
				if(i == 7){
 8000fc2:	4b12      	ldr	r3, [pc, #72]	; (800100c <half_step_motor_left+0x1dc>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b07      	cmp	r3, #7
 8000fca:	d106      	bne.n	8000fda <half_step_motor_left+0x1aa>
					HAL_GPIO_WritePin(StepM_4_2_GPIO_Port, StepM_4_2_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd6:	f001 fba3 	bl	8002720 <HAL_GPIO_WritePin>
				}
				if(i >= 8){
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <half_step_motor_left+0x1dc>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b07      	cmp	r3, #7
 8000fe2:	d905      	bls.n	8000ff0 <half_step_motor_left+0x1c0>
					i = 0;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <half_step_motor_left+0x1dc>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
					ac++;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3301      	adds	r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
			for (; ac <= angle;){
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d996      	bls.n	8000f26 <half_step_motor_left+0xf6>
				}
			}
			//HAL_GPIO_WritePin(StepM_1_2_GPIO_Port, StepM_1_2_Pin, GPIO_PIN_RESET);
			HAL_TIM_Base_Stop_IT(&htim6);
 8000ff8:	4803      	ldr	r0, [pc, #12]	; (8001008 <half_step_motor_left+0x1d8>)
 8000ffa:	f003 fc61 	bl	80048c0 <HAL_TIM_Base_Stop_IT>
		}

}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000774 	.word	0x20000774
 800100c:	200004c0 	.word	0x200004c0
 8001010:	48000400 	.word	0x48000400
 8001014:	48000800 	.word	0x48000800

08001018 <half_step_motor_right>:



void half_step_motor_right(uint32_t angle, uint8_t number){
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]

	HAL_TIM_Base_Start_IT(&htim6);
 8001024:	4872      	ldr	r0, [pc, #456]	; (80011f0 <half_step_motor_right+0x1d8>)
 8001026:	f003 fbdb 	bl	80047e0 <HAL_TIM_Base_Start_IT>

	uint32_t ac = 1;
 800102a:	2301      	movs	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]

	if(number == 1){
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d168      	bne.n	8001106 <half_step_motor_right+0xee>
		for (; ac <= angle;){
 8001034:	e060      	b.n	80010f8 <half_step_motor_right+0xe0>

			if(i == 0){
 8001036:	4b6f      	ldr	r3, [pc, #444]	; (80011f4 <half_step_motor_right+0x1dc>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	d105      	bne.n	800104c <half_step_motor_right+0x34>
				HAL_GPIO_WritePin(StepM_3_1_GPIO_Port, StepM_3_1_Pin, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	2110      	movs	r1, #16
 8001044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001048:	f001 fb6a 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i == 1){
 800104c:	4b69      	ldr	r3, [pc, #420]	; (80011f4 <half_step_motor_right+0x1dc>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b01      	cmp	r3, #1
 8001054:	d104      	bne.n	8001060 <half_step_motor_right+0x48>
				HAL_GPIO_WritePin(StepM_4_1_GPIO_Port, StepM_4_1_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	2101      	movs	r1, #1
 800105a:	4867      	ldr	r0, [pc, #412]	; (80011f8 <half_step_motor_right+0x1e0>)
 800105c:	f001 fb60 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i == 2){
 8001060:	4b64      	ldr	r3, [pc, #400]	; (80011f4 <half_step_motor_right+0x1dc>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d105      	bne.n	8001076 <half_step_motor_right+0x5e>
				HAL_GPIO_WritePin(StepM_2_1_GPIO_Port, StepM_2_1_Pin, GPIO_PIN_SET);
 800106a:	2201      	movs	r2, #1
 800106c:	2102      	movs	r1, #2
 800106e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001072:	f001 fb55 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i == 3){
 8001076:	4b5f      	ldr	r3, [pc, #380]	; (80011f4 <half_step_motor_right+0x1dc>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b03      	cmp	r3, #3
 800107e:	d105      	bne.n	800108c <half_step_motor_right+0x74>
				HAL_GPIO_WritePin(StepM_3_1_GPIO_Port, StepM_3_1_Pin, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2110      	movs	r1, #16
 8001084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001088:	f001 fb4a 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i == 4){
 800108c:	4b59      	ldr	r3, [pc, #356]	; (80011f4 <half_step_motor_right+0x1dc>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b04      	cmp	r3, #4
 8001094:	d105      	bne.n	80010a2 <half_step_motor_right+0x8a>
				HAL_GPIO_WritePin(StepM_1_1_GPIO_Port, StepM_1_1_Pin, GPIO_PIN_SET);
 8001096:	2201      	movs	r2, #1
 8001098:	2101      	movs	r1, #1
 800109a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109e:	f001 fb3f 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i == 5){
 80010a2:	4b54      	ldr	r3, [pc, #336]	; (80011f4 <half_step_motor_right+0x1dc>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b05      	cmp	r3, #5
 80010aa:	d105      	bne.n	80010b8 <half_step_motor_right+0xa0>
				HAL_GPIO_WritePin(StepM_2_1_GPIO_Port, StepM_2_1_Pin, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2102      	movs	r1, #2
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f001 fb34 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i == 6){
 80010b8:	4b4e      	ldr	r3, [pc, #312]	; (80011f4 <half_step_motor_right+0x1dc>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d104      	bne.n	80010cc <half_step_motor_right+0xb4>
				HAL_GPIO_WritePin(StepM_4_1_GPIO_Port, StepM_4_1_Pin, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2101      	movs	r1, #1
 80010c6:	484c      	ldr	r0, [pc, #304]	; (80011f8 <half_step_motor_right+0x1e0>)
 80010c8:	f001 fb2a 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i == 7){
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <half_step_motor_right+0x1dc>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b07      	cmp	r3, #7
 80010d4:	d105      	bne.n	80010e2 <half_step_motor_right+0xca>
				HAL_GPIO_WritePin(StepM_1_1_GPIO_Port, StepM_1_1_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2101      	movs	r1, #1
 80010da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010de:	f001 fb1f 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i >= 8){
 80010e2:	4b44      	ldr	r3, [pc, #272]	; (80011f4 <half_step_motor_right+0x1dc>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b07      	cmp	r3, #7
 80010ea:	d905      	bls.n	80010f8 <half_step_motor_right+0xe0>
				i = 0;
 80010ec:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <half_step_motor_right+0x1dc>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
				ac++;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3301      	adds	r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
		for (; ac <= angle;){
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d99a      	bls.n	8001036 <half_step_motor_right+0x1e>
			}
		}
		//HAL_GPIO_WritePin(StepM_4_1_GPIO_Port, StepM_4_1_Pin, GPIO_PIN_RESET);
		HAL_TIM_Base_Stop_IT(&htim6);
 8001100:	483b      	ldr	r0, [pc, #236]	; (80011f0 <half_step_motor_right+0x1d8>)
 8001102:	f003 fbdd 	bl	80048c0 <HAL_TIM_Base_Stop_IT>
	}

	if(number == 2){
 8001106:	78fb      	ldrb	r3, [r7, #3]
 8001108:	2b02      	cmp	r3, #2
 800110a:	d16c      	bne.n	80011e6 <half_step_motor_right+0x1ce>
		for (; ac <= angle;){
 800110c:	e064      	b.n	80011d8 <half_step_motor_right+0x1c0>

			if(i == 0){
 800110e:	4b39      	ldr	r3, [pc, #228]	; (80011f4 <half_step_motor_right+0x1dc>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d105      	bne.n	8001124 <half_step_motor_right+0x10c>
				HAL_GPIO_WritePin(StepM_3_2_GPIO_Port, StepM_3_2_Pin, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800111e:	4837      	ldr	r0, [pc, #220]	; (80011fc <half_step_motor_right+0x1e4>)
 8001120:	f001 fafe 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i == 1){
 8001124:	4b33      	ldr	r3, [pc, #204]	; (80011f4 <half_step_motor_right+0x1dc>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d106      	bne.n	800113c <half_step_motor_right+0x124>
				HAL_GPIO_WritePin(StepM_4_2_GPIO_Port, StepM_4_2_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001138:	f001 faf2 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i == 2){
 800113c:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <half_step_motor_right+0x1dc>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d105      	bne.n	8001152 <half_step_motor_right+0x13a>
				HAL_GPIO_WritePin(StepM_2_2_GPIO_Port, StepM_2_2_Pin, GPIO_PIN_SET);
 8001146:	2201      	movs	r2, #1
 8001148:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800114c:	482b      	ldr	r0, [pc, #172]	; (80011fc <half_step_motor_right+0x1e4>)
 800114e:	f001 fae7 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i == 3){
 8001152:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <half_step_motor_right+0x1dc>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b03      	cmp	r3, #3
 800115a:	d105      	bne.n	8001168 <half_step_motor_right+0x150>
				HAL_GPIO_WritePin(StepM_3_2_GPIO_Port, StepM_3_2_Pin, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001162:	4826      	ldr	r0, [pc, #152]	; (80011fc <half_step_motor_right+0x1e4>)
 8001164:	f001 fadc 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i == 4){
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <half_step_motor_right+0x1dc>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b04      	cmp	r3, #4
 8001170:	d105      	bne.n	800117e <half_step_motor_right+0x166>
				HAL_GPIO_WritePin(StepM_1_2_GPIO_Port, StepM_1_2_Pin, GPIO_PIN_SET);
 8001172:	2201      	movs	r2, #1
 8001174:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001178:	4820      	ldr	r0, [pc, #128]	; (80011fc <half_step_motor_right+0x1e4>)
 800117a:	f001 fad1 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i == 5){
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <half_step_motor_right+0x1dc>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b05      	cmp	r3, #5
 8001186:	d105      	bne.n	8001194 <half_step_motor_right+0x17c>
				HAL_GPIO_WritePin(StepM_2_2_GPIO_Port, StepM_2_2_Pin, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118e:	481b      	ldr	r0, [pc, #108]	; (80011fc <half_step_motor_right+0x1e4>)
 8001190:	f001 fac6 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i == 6){
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <half_step_motor_right+0x1dc>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b06      	cmp	r3, #6
 800119c:	d106      	bne.n	80011ac <half_step_motor_right+0x194>
				HAL_GPIO_WritePin(StepM_4_2_GPIO_Port, StepM_4_2_Pin, GPIO_PIN_SET);
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a8:	f001 faba 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i == 7){
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <half_step_motor_right+0x1dc>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b07      	cmp	r3, #7
 80011b4:	d105      	bne.n	80011c2 <half_step_motor_right+0x1aa>
				HAL_GPIO_WritePin(StepM_1_2_GPIO_Port, StepM_1_2_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011bc:	480f      	ldr	r0, [pc, #60]	; (80011fc <half_step_motor_right+0x1e4>)
 80011be:	f001 faaf 	bl	8002720 <HAL_GPIO_WritePin>
			}
			if(i >= 8){
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <half_step_motor_right+0x1dc>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b07      	cmp	r3, #7
 80011ca:	d905      	bls.n	80011d8 <half_step_motor_right+0x1c0>
				i = 0;
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <half_step_motor_right+0x1dc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
				ac++;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3301      	adds	r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
		for (; ac <= angle;){
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d996      	bls.n	800110e <half_step_motor_right+0xf6>
			}
		}
		//HAL_GPIO_WritePin(StepM_4_2_GPIO_Port, StepM_4_2_Pin, GPIO_PIN_RESET);
		HAL_TIM_Base_Stop_IT(&htim6);
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <half_step_motor_right+0x1d8>)
 80011e2:	f003 fb6d 	bl	80048c0 <HAL_TIM_Base_Stop_IT>
	}

}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000774 	.word	0x20000774
 80011f4:	200004c0 	.word	0x200004c0
 80011f8:	48000400 	.word	0x48000400
 80011fc:	48000800 	.word	0x48000800

08001200 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	4b40      	ldr	r3, [pc, #256]	; (8001318 <MX_GPIO_Init+0x118>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	4a3f      	ldr	r2, [pc, #252]	; (8001318 <MX_GPIO_Init+0x118>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001222:	4b3d      	ldr	r3, [pc, #244]	; (8001318 <MX_GPIO_Init+0x118>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800122e:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <MX_GPIO_Init+0x118>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	4a39      	ldr	r2, [pc, #228]	; (8001318 <MX_GPIO_Init+0x118>)
 8001234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123a:	4b37      	ldr	r3, [pc, #220]	; (8001318 <MX_GPIO_Init+0x118>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	4b34      	ldr	r3, [pc, #208]	; (8001318 <MX_GPIO_Init+0x118>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4a33      	ldr	r2, [pc, #204]	; (8001318 <MX_GPIO_Init+0x118>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001252:	4b31      	ldr	r3, [pc, #196]	; (8001318 <MX_GPIO_Init+0x118>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	4b2e      	ldr	r3, [pc, #184]	; (8001318 <MX_GPIO_Init+0x118>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a2d      	ldr	r2, [pc, #180]	; (8001318 <MX_GPIO_Init+0x118>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b2b      	ldr	r3, [pc, #172]	; (8001318 <MX_GPIO_Init+0x118>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, StepM_1_1_Pin|StepM_2_1_Pin|StepM_3_1_Pin|LD2_Pin
 8001276:	2200      	movs	r2, #0
 8001278:	f248 0133 	movw	r1, #32819	; 0x8033
 800127c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001280:	f001 fa4e 	bl	8002720 <HAL_GPIO_WritePin>
                          |StepM_4_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(StepM_4_1_GPIO_Port, StepM_4_1_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	2101      	movs	r1, #1
 8001288:	4824      	ldr	r0, [pc, #144]	; (800131c <MX_GPIO_Init+0x11c>)
 800128a:	f001 fa49 	bl	8002720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, StepM_3_2_Pin|StepM_1_2_Pin|StepM_2_2_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001294:	4822      	ldr	r0, [pc, #136]	; (8001320 <MX_GPIO_Init+0x120>)
 8001296:	f001 fa43 	bl	8002720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800129a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012a0:	4b20      	ldr	r3, [pc, #128]	; (8001324 <MX_GPIO_Init+0x124>)
 80012a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	481c      	ldr	r0, [pc, #112]	; (8001320 <MX_GPIO_Init+0x120>)
 80012b0:	f001 f88e 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = StepM_1_1_Pin|StepM_2_1_Pin|StepM_3_1_Pin|LD2_Pin
 80012b4:	f248 0333 	movw	r3, #32819	; 0x8033
 80012b8:	617b      	str	r3, [r7, #20]
                          |StepM_4_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d0:	f001 f87e 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = StepM_4_1_Pin;
 80012d4:	2301      	movs	r3, #1
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(StepM_4_1_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	480c      	ldr	r0, [pc, #48]	; (800131c <MX_GPIO_Init+0x11c>)
 80012ec:	f001 f870 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = StepM_3_2_Pin|StepM_1_2_Pin|StepM_2_2_Pin;
 80012f0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_GPIO_Init+0x120>)
 800130a:	f001 f861 	bl	80023d0 <HAL_GPIO_Init>

}
 800130e:	bf00      	nop
 8001310:	3728      	adds	r7, #40	; 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000
 800131c:	48000400 	.word	0x48000400
 8001320:	48000800 	.word	0x48000800
 8001324:	10210000 	.word	0x10210000

08001328 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <MX_I2C1_Init+0x74>)
 800132e:	4a1c      	ldr	r2, [pc, #112]	; (80013a0 <MX_I2C1_Init+0x78>)
 8001330:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_I2C1_Init+0x74>)
 8001334:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <MX_I2C1_Init+0x7c>)
 8001336:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <MX_I2C1_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_I2C1_Init+0x74>)
 8001340:	2201      	movs	r2, #1
 8001342:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_I2C1_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_I2C1_Init+0x74>)
 800134c:	2200      	movs	r2, #0
 800134e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_I2C1_Init+0x74>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_I2C1_Init+0x74>)
 8001358:	2200      	movs	r2, #0
 800135a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_I2C1_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001362:	480e      	ldr	r0, [pc, #56]	; (800139c <MX_I2C1_Init+0x74>)
 8001364:	f001 f9f4 	bl	8002750 <HAL_I2C_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800136e:	f000 fc0d 	bl	8001b8c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001372:	2100      	movs	r1, #0
 8001374:	4809      	ldr	r0, [pc, #36]	; (800139c <MX_I2C1_Init+0x74>)
 8001376:	f001 fe45 	bl	8003004 <HAL_I2CEx_ConfigAnalogFilter>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001380:	f000 fc04 	bl	8001b8c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001384:	2100      	movs	r1, #0
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_I2C1_Init+0x74>)
 8001388:	f001 fe87 	bl	800309a <HAL_I2CEx_ConfigDigitalFilter>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001392:	f000 fbfb 	bl	8001b8c <Error_Handler>
  }

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200004e4 	.word	0x200004e4
 80013a0:	40005400 	.word	0x40005400
 80013a4:	10909cec 	.word	0x10909cec

080013a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a17      	ldr	r2, [pc, #92]	; (8001424 <HAL_I2C_MspInit+0x7c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d127      	bne.n	800141a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <HAL_I2C_MspInit+0x80>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	4a16      	ldr	r2, [pc, #88]	; (8001428 <HAL_I2C_MspInit+0x80>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_I2C_MspInit+0x80>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013e2:	23c0      	movs	r3, #192	; 0xc0
 80013e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e6:	2312      	movs	r3, #18
 80013e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013f2:	2304      	movs	r3, #4
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	480b      	ldr	r0, [pc, #44]	; (800142c <HAL_I2C_MspInit+0x84>)
 80013fe:	f000 ffe7 	bl	80023d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_I2C_MspInit+0x80>)
 8001404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001406:	4a08      	ldr	r2, [pc, #32]	; (8001428 <HAL_I2C_MspInit+0x80>)
 8001408:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800140c:	6593      	str	r3, [r2, #88]	; 0x58
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_I2C_MspInit+0x80>)
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800141a:	bf00      	nop
 800141c:	3728      	adds	r7, #40	; 0x28
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40005400 	.word	0x40005400
 8001428:	40021000 	.word	0x40021000
 800142c:	48000400 	.word	0x48000400

08001430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	ed2d 8b02 	vpush	{d8}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143a:	f000 fdd9 	bl	8001ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800143e:	f000 f9a3 	bl	8001788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001442:	f7ff fedd 	bl	8001200 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001446:	f000 fd2f 	bl	8001ea8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800144a:	f7ff ff6d 	bl	8001328 <MX_I2C1_Init>
  MX_TIM6_Init();
 800144e:	f000 fccf 	bl	8001df0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  Dev->I2cHandle = &hi2c1;
 8001452:	4bbb      	ldr	r3, [pc, #748]	; (8001740 <main+0x310>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4abb      	ldr	r2, [pc, #748]	; (8001744 <main+0x314>)
 8001458:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  Dev->I2cDevAddr = 0x52;
 800145c:	4bb8      	ldr	r3, [pc, #736]	; (8001740 <main+0x310>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2252      	movs	r2, #82	; 0x52
 8001462:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
  //
  // VL53L0X init for Single Measurement
  //

  VL53L0X_WaitDeviceBooted( Dev );
 8001466:	4bb6      	ldr	r3, [pc, #728]	; (8001740 <main+0x310>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f004 ffa6 	bl	80063bc <VL53L0X_WaitDeviceBooted>
  VL53L0X_DataInit( Dev );
 8001470:	4bb3      	ldr	r3, [pc, #716]	; (8001740 <main+0x310>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f004 fcbb 	bl	8005df0 <VL53L0X_DataInit>
  VL53L0X_StaticInit( Dev );
 800147a:	4bb1      	ldr	r3, [pc, #708]	; (8001740 <main+0x310>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f004 fe1a 	bl	80060b8 <VL53L0X_StaticInit>
  VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8001484:	4bae      	ldr	r3, [pc, #696]	; (8001740 <main+0x310>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	1d7a      	adds	r2, r7, #5
 800148a:	1db9      	adds	r1, r7, #6
 800148c:	4618      	mov	r0, r3
 800148e:	f005 fcd1 	bl	8006e34 <VL53L0X_PerformRefCalibration>
  VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8001492:	4bab      	ldr	r3, [pc, #684]	; (8001740 <main+0x310>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	1dfa      	adds	r2, r7, #7
 8001498:	f107 0108 	add.w	r1, r7, #8
 800149c:	4618      	mov	r0, r3
 800149e:	f006 f957 	bl	8007750 <VL53L0X_PerformRefSpadManagement>
  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80014a2:	4ba7      	ldr	r3, [pc, #668]	; (8001740 <main+0x310>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f005 f825 	bl	80064f8 <VL53L0X_SetDeviceMode>

  // Enable/Disable Sigma and Signal check
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80014ae:	4ba4      	ldr	r3, [pc, #656]	; (8001740 <main+0x310>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2201      	movs	r2, #1
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f005 fab6 	bl	8006a28 <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80014bc:	4ba0      	ldr	r3, [pc, #640]	; (8001740 <main+0x310>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2201      	movs	r2, #1
 80014c2:	2101      	movs	r1, #1
 80014c4:	4618      	mov	r0, r3
 80014c6:	f005 faaf 	bl	8006a28 <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80014ca:	4b9d      	ldr	r3, [pc, #628]	; (8001740 <main+0x310>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f641 1299 	movw	r2, #6553	; 0x1999
 80014d2:	2101      	movs	r1, #1
 80014d4:	4618      	mov	r0, r3
 80014d6:	f005 fb57 	bl	8006b88 <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80014da:	4b99      	ldr	r3, [pc, #612]	; (8001740 <main+0x310>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f005 fb4f 	bl	8006b88 <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 80014ea:	4b95      	ldr	r3, [pc, #596]	; (8001740 <main+0x310>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80014f2:	4618      	mov	r0, r3
 80014f4:	f005 f87a 	bl	80065ec <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80014f8:	4b91      	ldr	r3, [pc, #580]	; (8001740 <main+0x310>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2212      	movs	r2, #18
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f005 f899 	bl	8006638 <VL53L0X_SetVcselPulsePeriod>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8001506:	4b8e      	ldr	r3, [pc, #568]	; (8001740 <main+0x310>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	220e      	movs	r2, #14
 800150c:	2101      	movs	r1, #1
 800150e:	4618      	mov	r0, r3
 8001510:	f005 f892 	bl	8006638 <VL53L0X_SetVcselPulsePeriod>

  __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 8001514:	4b8c      	ldr	r3, [pc, #560]	; (8001748 <main+0x318>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b8b      	ldr	r3, [pc, #556]	; (8001748 <main+0x318>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0220 	orr.w	r2, r2, #32
 8001522:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  walec();
 8001524:	f000 f9a8 	bl	8001878 <walec>


  while(z != 987){
 8001528:	e002      	b.n	8001530 <main+0x100>
	  HAL_Delay(100);
 800152a:	2064      	movs	r0, #100	; 0x64
 800152c:	f000 fddc 	bl	80020e8 <HAL_Delay>
  while(z != 987){
 8001530:	4b86      	ldr	r3, [pc, #536]	; (800174c <main+0x31c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f240 32db 	movw	r2, #987	; 0x3db
 8001538:	4293      	cmp	r3, r2
 800153a:	d1f6      	bne.n	800152a <main+0xfa>
  }

  no = x;
 800153c:	4b84      	ldr	r3, [pc, #528]	; (8001750 <main+0x320>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	b21a      	sxth	r2, r3
 8001542:	4b84      	ldr	r3, [pc, #528]	; (8001754 <main+0x324>)
 8001544:	801a      	strh	r2, [r3, #0]
  ho = y;
 8001546:	4b84      	ldr	r3, [pc, #528]	; (8001758 <main+0x328>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	b21a      	sxth	r2, r3
 800154c:	4b83      	ldr	r3, [pc, #524]	; (800175c <main+0x32c>)
 800154e:	801a      	strh	r2, [r3, #0]

  kalibruj();
 8001550:	f000 fa2a 	bl	80019a8 <kalibruj>


  //HAL_Delay(4000);
  send(8889,8889,8889);
 8001554:	f242 22b9 	movw	r2, #8889	; 0x22b9
 8001558:	f242 21b9 	movw	r1, #8889	; 0x22b9
 800155c:	f242 20b9 	movw	r0, #8889	; 0x22b9
 8001560:	f000 fa6c 	bl	8001a3c <send>

  while(z != 944){
 8001564:	e002      	b.n	800156c <main+0x13c>
 	  HAL_Delay(100);
 8001566:	2064      	movs	r0, #100	; 0x64
 8001568:	f000 fdbe 	bl	80020e8 <HAL_Delay>
  while(z != 944){
 800156c:	4b77      	ldr	r3, [pc, #476]	; (800174c <main+0x31c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f5b3 7f6c 	cmp.w	r3, #944	; 0x3b0
 8001574:	d1f7      	bne.n	8001566 <main+0x136>
   }

  //while (1)
 // {
	while((zo<20)&&(licznik<40)&&z!=997){						// Pętla powtarzająca się 20 razu
 8001576:	e0c0      	b.n	80016fa <main+0x2ca>

		for(int a=1; a<65 ;a++){
 8001578:	2301      	movs	r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	e0ab      	b.n	80016d6 <main+0x2a6>
			VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 800157e:	4b70      	ldr	r3, [pc, #448]	; (8001740 <main+0x310>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4977      	ldr	r1, [pc, #476]	; (8001760 <main+0x330>)
 8001584:	4618      	mov	r0, r3
 8001586:	f005 fef7 	bl	8007378 <VL53L0X_PerformSingleRangingMeasurement>
				if(z == 997){
 800158a:	4b70      	ldr	r3, [pc, #448]	; (800174c <main+0x31c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f240 32e5 	movw	r2, #997	; 0x3e5
 8001592:	4293      	cmp	r3, r2
 8001594:	d104      	bne.n	80015a0 <main+0x170>
					send(144,144,144);
 8001596:	2290      	movs	r2, #144	; 0x90
 8001598:	2190      	movs	r1, #144	; 0x90
 800159a:	2090      	movs	r0, #144	; 0x90
 800159c:	f000 fa4e 	bl	8001a3c <send>
				}
				if(RangingData.RangeStatus == 0){
 80015a0:	4b6f      	ldr	r3, [pc, #444]	; (8001760 <main+0x330>)
 80015a2:	7e1b      	ldrb	r3, [r3, #24]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d104      	bne.n	80015b2 <main+0x182>
					pomiar = RangingData.RangeMilliMeter;
 80015a8:	4b6d      	ldr	r3, [pc, #436]	; (8001760 <main+0x330>)
 80015aa:	891b      	ldrh	r3, [r3, #8]
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	4b6d      	ldr	r3, [pc, #436]	; (8001764 <main+0x334>)
 80015b0:	801a      	strh	r2, [r3, #0]
				}

				pomiar = pomiar - 10;
 80015b2:	4b6c      	ldr	r3, [pc, #432]	; (8001764 <main+0x334>)
 80015b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	3b0a      	subs	r3, #10
 80015bc:	b29b      	uxth	r3, r3
 80015be:	b21a      	sxth	r2, r3
 80015c0:	4b68      	ldr	r3, [pc, #416]	; (8001764 <main+0x334>)
 80015c2:	801a      	strh	r2, [r3, #0]

				//printf("%d\r\n",pomiar);
				//HAL_Delay(1000);

				if(pomiar<prom){											// Odrzucanie błędnych pomiarów
 80015c4:	4b67      	ldr	r3, [pc, #412]	; (8001764 <main+0x334>)
 80015c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80015ca:	4b67      	ldr	r3, [pc, #412]	; (8001768 <main+0x338>)
 80015cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	da70      	bge.n	80016b6 <main+0x286>

					licznik = 0;
 80015d4:	4b65      	ldr	r3, [pc, #404]	; (800176c <main+0x33c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	801a      	strh	r2, [r3, #0]
					kat = (2*M_PI*a*8)/512;									// Oblicza kąt w radianach
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f7fe ffa2 	bl	8000524 <__aeabi_i2d>
 80015e0:	a355      	add	r3, pc, #340	; (adr r3, 8001738 <main+0x308>)
 80015e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e6:	f7ff f807 	bl	80005f8 <__aeabi_dmul>
 80015ea:	4603      	mov	r3, r0
 80015ec:	460c      	mov	r4, r1
 80015ee:	4618      	mov	r0, r3
 80015f0:	4621      	mov	r1, r4
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	4b5e      	ldr	r3, [pc, #376]	; (8001770 <main+0x340>)
 80015f8:	f7fe fffe 	bl	80005f8 <__aeabi_dmul>
 80015fc:	4603      	mov	r3, r0
 80015fe:	460c      	mov	r4, r1
 8001600:	4618      	mov	r0, r3
 8001602:	4621      	mov	r1, r4
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800160c:	f7ff f91e 	bl	800084c <__aeabi_ddiv>
 8001610:	4603      	mov	r3, r0
 8001612:	460c      	mov	r4, r1
 8001614:	4618      	mov	r0, r3
 8001616:	4621      	mov	r1, r4
 8001618:	f7ff fa00 	bl	8000a1c <__aeabi_d2f>
 800161c:	4602      	mov	r2, r0
 800161e:	4b55      	ldr	r3, [pc, #340]	; (8001774 <main+0x344>)
 8001620:	601a      	str	r2, [r3, #0]
					Ppros = prom - pomiar;						// Oblicza odległosc od srodka silnika krokowego
 8001622:	4b51      	ldr	r3, [pc, #324]	; (8001768 <main+0x338>)
 8001624:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001628:	b29a      	uxth	r2, r3
 800162a:	4b4e      	ldr	r3, [pc, #312]	; (8001764 <main+0x334>)
 800162c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001630:	b29b      	uxth	r3, r3
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	b29b      	uxth	r3, r3
 8001636:	b21a      	sxth	r2, r3
 8001638:	4b4f      	ldr	r3, [pc, #316]	; (8001778 <main+0x348>)
 800163a:	801a      	strh	r2, [r3, #0]
					xo = Ppros*cosf(kat);					// Wspolrzedna X
 800163c:	4b4e      	ldr	r3, [pc, #312]	; (8001778 <main+0x348>)
 800163e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800164a:	4b4a      	ldr	r3, [pc, #296]	; (8001774 <main+0x344>)
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	eeb0 0a67 	vmov.f32	s0, s15
 8001654:	f00b f82e 	bl	800c6b4 <cosf>
 8001658:	eef0 7a40 	vmov.f32	s15, s0
 800165c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001660:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001664:	ee17 2a90 	vmov	r2, s15
 8001668:	4b44      	ldr	r3, [pc, #272]	; (800177c <main+0x34c>)
 800166a:	601a      	str	r2, [r3, #0]
					yo = Ppros*sinf(kat);					// Wspolrzedna Y
 800166c:	4b42      	ldr	r3, [pc, #264]	; (8001778 <main+0x348>)
 800166e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800167a:	4b3e      	ldr	r3, [pc, #248]	; (8001774 <main+0x344>)
 800167c:	edd3 7a00 	vldr	s15, [r3]
 8001680:	eeb0 0a67 	vmov.f32	s0, s15
 8001684:	f00b f856 	bl	800c734 <sinf>
 8001688:	eef0 7a40 	vmov.f32	s15, s0
 800168c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001694:	ee17 2a90 	vmov	r2, s15
 8001698:	4b39      	ldr	r3, [pc, #228]	; (8001780 <main+0x350>)
 800169a:	601a      	str	r2, [r3, #0]
					send(xo,yo,3*zo);
 800169c:	4b37      	ldr	r3, [pc, #220]	; (800177c <main+0x34c>)
 800169e:	6818      	ldr	r0, [r3, #0]
 80016a0:	4b37      	ldr	r3, [pc, #220]	; (8001780 <main+0x350>)
 80016a2:	6819      	ldr	r1, [r3, #0]
 80016a4:	4b37      	ldr	r3, [pc, #220]	; (8001784 <main+0x354>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	461a      	mov	r2, r3
 80016b0:	f000 f9c4 	bl	8001a3c <send>
 80016b4:	e008      	b.n	80016c8 <main+0x298>
				}											// Zapisane dane nie zostaja stracone
				else{
					licznik++;								// Zwiekszenie licznika
 80016b6:	4b2d      	ldr	r3, [pc, #180]	; (800176c <main+0x33c>)
 80016b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	3301      	adds	r3, #1
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	4b29      	ldr	r3, [pc, #164]	; (800176c <main+0x33c>)
 80016c6:	801a      	strh	r2, [r3, #0]
				}
				half_step_motor_right(8,1);
 80016c8:	2101      	movs	r1, #1
 80016ca:	2008      	movs	r0, #8
 80016cc:	f7ff fca4 	bl	8001018 <half_step_motor_right>
		for(int a=1; a<65 ;a++){
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	3301      	adds	r3, #1
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2b40      	cmp	r3, #64	; 0x40
 80016da:	f77f af50 	ble.w	800157e <main+0x14e>

		}
		zo++;
 80016de:	4b29      	ldr	r3, [pc, #164]	; (8001784 <main+0x354>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	4a27      	ldr	r2, [pc, #156]	; (8001784 <main+0x354>)
 80016e6:	6013      	str	r3, [r2, #0]
		SM_it();
 80016e8:	f7ff fb82 	bl	8000df0 <SM_it>
		half_step_motor_right(1024,2);
 80016ec:	2102      	movs	r1, #2
 80016ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016f2:	f7ff fc91 	bl	8001018 <half_step_motor_right>
		SM_it();
 80016f6:	f7ff fb7b 	bl	8000df0 <SM_it>
	while((zo<20)&&(licznik<40)&&z!=997){						// Pętla powtarzająca się 20 razu
 80016fa:	4b22      	ldr	r3, [pc, #136]	; (8001784 <main+0x354>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b13      	cmp	r3, #19
 8001700:	dc0b      	bgt.n	800171a <main+0x2ea>
 8001702:	4b1a      	ldr	r3, [pc, #104]	; (800176c <main+0x33c>)
 8001704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001708:	2b27      	cmp	r3, #39	; 0x27
 800170a:	dc06      	bgt.n	800171a <main+0x2ea>
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <main+0x31c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f240 32e5 	movw	r2, #997	; 0x3e5
 8001714:	4293      	cmp	r3, r2
 8001716:	f47f af2f 	bne.w	8001578 <main+0x148>
	}
  	send(144,144,144);
 800171a:	2290      	movs	r2, #144	; 0x90
 800171c:	2190      	movs	r1, #144	; 0x90
 800171e:	2090      	movs	r0, #144	; 0x90
 8001720:	f000 f98c 	bl	8001a3c <send>


  return 0;
 8001724:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
 // }
  /* USER CODE END 3 */
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	ecbd 8b02 	vpop	{d8}
 8001730:	bd90      	pop	{r4, r7, pc}
 8001732:	bf00      	nop
 8001734:	f3af 8000 	nop.w
 8001738:	54442d18 	.word	0x54442d18
 800173c:	401921fb 	.word	0x401921fb
 8001740:	20000004 	.word	0x20000004
 8001744:	200004e4 	.word	0x200004e4
 8001748:	200007c0 	.word	0x200007c0
 800174c:	200005c0 	.word	0x200005c0
 8001750:	20000534 	.word	0x20000534
 8001754:	200005c6 	.word	0x200005c6
 8001758:	200005c8 	.word	0x200005c8
 800175c:	200005c4 	.word	0x200005c4
 8001760:	2000053c 	.word	0x2000053c
 8001764:	200004c2 	.word	0x200004c2
 8001768:	20000008 	.word	0x20000008
 800176c:	200004c4 	.word	0x200004c4
 8001770:	40200000 	.word	0x40200000
 8001774:	200004d4 	.word	0x200004d4
 8001778:	200004c6 	.word	0x200004c6
 800177c:	200004c8 	.word	0x200004c8
 8001780:	200004cc 	.word	0x200004cc
 8001784:	200004d0 	.word	0x200004d0

08001788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b0b8      	sub	sp, #224	; 0xe0
 800178c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001792:	2244      	movs	r2, #68	; 0x44
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f009 fb6f 	bl	800ae7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800179c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017ac:	463b      	mov	r3, r7
 80017ae:	2288      	movs	r2, #136	; 0x88
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f009 fb61 	bl	800ae7a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017b8:	2302      	movs	r3, #2
 80017ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017c6:	2310      	movs	r3, #16
 80017c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017cc:	2302      	movs	r3, #2
 80017ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017d2:	2302      	movs	r3, #2
 80017d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017d8:	2301      	movs	r3, #1
 80017da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80017de:	230a      	movs	r3, #10
 80017e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017e4:	2307      	movs	r3, #7
 80017e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017ea:	2302      	movs	r3, #2
 80017ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017f0:	2302      	movs	r3, #2
 80017f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017fa:	4618      	mov	r0, r3
 80017fc:	f001 fcfe 	bl	80031fc <HAL_RCC_OscConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001806:	f000 f9c1 	bl	8001b8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800180a:	230f      	movs	r3, #15
 800180c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001810:	2303      	movs	r3, #3
 8001812:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001816:	2300      	movs	r3, #0
 8001818:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001828:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800182c:	2104      	movs	r1, #4
 800182e:	4618      	mov	r0, r3
 8001830:	f002 f8ca 	bl	80039c8 <HAL_RCC_ClockConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800183a:	f000 f9a7 	bl	8001b8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800183e:	2342      	movs	r3, #66	; 0x42
 8001840:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001842:	2300      	movs	r3, #0
 8001844:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001846:	2300      	movs	r3, #0
 8001848:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800184a:	463b      	mov	r3, r7
 800184c:	4618      	mov	r0, r3
 800184e:	f002 fabf 	bl	8003dd0 <HAL_RCCEx_PeriphCLKConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001858:	f000 f998 	bl	8001b8c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800185c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001860:	f001 fc76 	bl	8003150 <HAL_PWREx_ControlVoltageScaling>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800186a:	f000 f98f 	bl	8001b8c <Error_Handler>
  }
}
 800186e:	bf00      	nop
 8001870:	37e0      	adds	r7, #224	; 0xe0
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <walec>:

/* USER CODE BEGIN 4 */


void walec(){
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	ed2d 8b02 	vpush	{d8}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0

	uint16_t flag1 = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	80fb      	strh	r3, [r7, #6]

	while(flag1 < 4){						// Pętla powtarzająca się 20 razu
 8001886:	e073      	b.n	8001970 <walec+0xf8>

		for(int a=1; a<65 ;a++){
 8001888:	2301      	movs	r3, #1
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	e068      	b.n	8001960 <walec+0xe8>
			    flag1++;
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	3301      	adds	r3, #1
 8001892:	80fb      	strh	r3, [r7, #6]

				//printf("%d\r\n",pomiar);
				//HAL_Delay(1000);
											// Odrzucanie błędnych pomiarów

				kat = (2*M_PI*a*8)/512;									// Oblicza kąt w radianach
 8001894:	6838      	ldr	r0, [r7, #0]
 8001896:	f7fe fe45 	bl	8000524 <__aeabi_i2d>
 800189a:	a341      	add	r3, pc, #260	; (adr r3, 80019a0 <walec+0x128>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	f7fe feaa 	bl	80005f8 <__aeabi_dmul>
 80018a4:	4603      	mov	r3, r0
 80018a6:	460c      	mov	r4, r1
 80018a8:	4618      	mov	r0, r3
 80018aa:	4621      	mov	r1, r4
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	4b35      	ldr	r3, [pc, #212]	; (8001988 <walec+0x110>)
 80018b2:	f7fe fea1 	bl	80005f8 <__aeabi_dmul>
 80018b6:	4603      	mov	r3, r0
 80018b8:	460c      	mov	r4, r1
 80018ba:	4618      	mov	r0, r3
 80018bc:	4621      	mov	r1, r4
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80018c6:	f7fe ffc1 	bl	800084c <__aeabi_ddiv>
 80018ca:	4603      	mov	r3, r0
 80018cc:	460c      	mov	r4, r1
 80018ce:	4618      	mov	r0, r3
 80018d0:	4621      	mov	r1, r4
 80018d2:	f7ff f8a3 	bl	8000a1c <__aeabi_d2f>
 80018d6:	4602      	mov	r2, r0
 80018d8:	4b2c      	ldr	r3, [pc, #176]	; (800198c <walec+0x114>)
 80018da:	601a      	str	r2, [r3, #0]
				Ppros = 40;						// Oblicza odległosc od srodka silnika krokowego
 80018dc:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <walec+0x118>)
 80018de:	2228      	movs	r2, #40	; 0x28
 80018e0:	801a      	strh	r2, [r3, #0]
				xo = Ppros*cosf(kat);					// Wspolrzedna X
 80018e2:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <walec+0x118>)
 80018e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e8:	ee07 3a90 	vmov	s15, r3
 80018ec:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80018f0:	4b26      	ldr	r3, [pc, #152]	; (800198c <walec+0x114>)
 80018f2:	edd3 7a00 	vldr	s15, [r3]
 80018f6:	eeb0 0a67 	vmov.f32	s0, s15
 80018fa:	f00a fedb 	bl	800c6b4 <cosf>
 80018fe:	eef0 7a40 	vmov.f32	s15, s0
 8001902:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001906:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800190a:	ee17 2a90 	vmov	r2, s15
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <walec+0x11c>)
 8001910:	601a      	str	r2, [r3, #0]
				yo = Ppros*sinf(kat);					// Wspolrzedna Y
 8001912:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <walec+0x118>)
 8001914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001920:	4b1a      	ldr	r3, [pc, #104]	; (800198c <walec+0x114>)
 8001922:	edd3 7a00 	vldr	s15, [r3]
 8001926:	eeb0 0a67 	vmov.f32	s0, s15
 800192a:	f00a ff03 	bl	800c734 <sinf>
 800192e:	eef0 7a40 	vmov.f32	s15, s0
 8001932:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001936:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800193a:	ee17 2a90 	vmov	r2, s15
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <walec+0x120>)
 8001940:	601a      	str	r2, [r3, #0]
				send(xo,yo,3*zo);
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <walec+0x11c>)
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <walec+0x120>)
 8001948:	6819      	ldr	r1, [r3, #0]
 800194a:	4b14      	ldr	r3, [pc, #80]	; (800199c <walec+0x124>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4613      	mov	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4413      	add	r3, r2
 8001954:	461a      	mov	r2, r3
 8001956:	f000 f871 	bl	8001a3c <send>
		for(int a=1; a<65 ;a++){
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	3301      	adds	r3, #1
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2b40      	cmp	r3, #64	; 0x40
 8001964:	dd93      	ble.n	800188e <walec+0x16>
															// Zapisane dane nie zostaja stracone

		}
		zo++;
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <walec+0x124>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	3301      	adds	r3, #1
 800196c:	4a0b      	ldr	r2, [pc, #44]	; (800199c <walec+0x124>)
 800196e:	6013      	str	r3, [r2, #0]
	while(flag1 < 4){						// Pętla powtarzająca się 20 razu
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	2b03      	cmp	r3, #3
 8001974:	d988      	bls.n	8001888 <walec+0x10>

	}

}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	ecbd 8b02 	vpop	{d8}
 8001980:	bd90      	pop	{r4, r7, pc}
 8001982:	bf00      	nop
 8001984:	f3af 8000 	nop.w
 8001988:	40200000 	.word	0x40200000
 800198c:	200004d4 	.word	0x200004d4
 8001990:	200004c6 	.word	0x200004c6
 8001994:	200004c8 	.word	0x200004c8
 8001998:	200004cc 	.word	0x200004cc
 800199c:	200004d0 	.word	0x200004d0
 80019a0:	54442d18 	.word	0x54442d18
 80019a4:	401921fb 	.word	0x401921fb

080019a8 <kalibruj>:

void kalibruj(){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0

	uint8_t flaga = 1;
 80019ae:	2301      	movs	r3, #1
 80019b0:	71fb      	strb	r3, [r7, #7]

	//printf( "Kalibracja skanera \r\n");				// Wyswietla komunikat

	while(flaga){
 80019b2:	e016      	b.n	80019e2 <kalibruj+0x3a>

		half_step_motor_left(256,2);			// uruchamia silnik krokowy
 80019b4:	2102      	movs	r1, #2
 80019b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80019ba:	f7ff fa39 	bl	8000e30 <half_step_motor_left>
		SM_it();
 80019be:	f7ff fa17 	bl	8000df0 <SM_it>
		  VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <kalibruj+0x58>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	490f      	ldr	r1, [pc, #60]	; (8001a04 <kalibruj+0x5c>)
 80019c8:	4618      	mov	r0, r3
 80019ca:	f005 fcd5 	bl	8007378 <VL53L0X_PerformSingleRangingMeasurement>

		  if(RangingData.RangeStatus == 0){
 80019ce:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <kalibruj+0x5c>)
 80019d0:	7e1b      	ldrb	r3, [r3, #24]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d105      	bne.n	80019e2 <kalibruj+0x3a>
			if(RangingData.RangeMilliMeter < 200){						// Jezeli pomiar jest mniejszy od 20cm
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <kalibruj+0x5c>)
 80019d8:	891b      	ldrh	r3, [r3, #8]
 80019da:	2bc7      	cmp	r3, #199	; 0xc7
 80019dc:	d801      	bhi.n	80019e2 <kalibruj+0x3a>
				flaga = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	71fb      	strb	r3, [r7, #7]
	while(flaga){
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1e5      	bne.n	80019b4 <kalibruj+0xc>
				//printf("Skalibrowano skaner\r\n");	// Wyswietla komunikat
			}
		}
	}

	half_step_motor_right(512,2);				// Uruchamia 2 silnik krokowy
 80019e8:	2102      	movs	r1, #2
 80019ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019ee:	f7ff fb13 	bl	8001018 <half_step_motor_right>
	SM_it();
 80019f2:	f7ff f9fd 	bl	8000df0 <SM_it>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000004 	.word	0x20000004
 8001a04:	2000053c 	.word	0x2000053c

08001a08 <_write>:




int _write(int file, char *ptr, int len){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]

	  if(HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, 100) != HAL_OK){
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	2364      	movs	r3, #100	; 0x64
 8001a1a:	68b9      	ldr	r1, [r7, #8]
 8001a1c:	4806      	ldr	r0, [pc, #24]	; (8001a38 <_write+0x30>)
 8001a1e:	f003 fa53 	bl	8004ec8 <HAL_UART_Transmit>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <_write+0x24>
		  Error_Handler();
 8001a28:	f000 f8b0 	bl	8001b8c <Error_Handler>
	  }

	return len;
 8001a2c:	687b      	ldr	r3, [r7, #4]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200007c0 	.word	0x200007c0

08001a3c <send>:

void send(int xwy, int ywy, int zwy){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]

	 	// Zapisanie wspolrzednych do bufora
	printf("X %d %d %d\n",xwy,ywy,zwy );
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	68f9      	ldr	r1, [r7, #12]
 8001a4e:	4803      	ldr	r0, [pc, #12]	; (8001a5c <send+0x20>)
 8001a50:	f009 fa1c 	bl	800ae8c <iprintf>

}
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	0800d1e4 	.word	0x0800d1e4

08001a60 <resetuj>:

void resetuj(char *tab){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

	int8_t k = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73fb      	strb	r3, [r7, #15]

	k = strlen(tab);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7fe fbaf 	bl	80001d0 <strlen>
 8001a72:	4603      	mov	r3, r0
 8001a74:	73fb      	strb	r3, [r7, #15]

	while(k>=-1){
 8001a76:	e00b      	b.n	8001a90 <resetuj+0x30>
		tab[k] = '\0';
 8001a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	4413      	add	r3, r2
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
		k--;
 8001a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	73fb      	strb	r3, [r7, #15]
	while(k>=-1){
 8001a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a98:	daee      	bge.n	8001a78 <resetuj+0x18>
	}

}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

	//resetuj();


	switch(r){
 8001aac:	4b2c      	ldr	r3, [pc, #176]	; (8001b60 <HAL_UART_RxCpltCallback+0xbc>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b20      	cmp	r3, #32
 8001ab2:	d002      	beq.n	8001aba <HAL_UART_RxCpltCallback+0x16>
 8001ab4:	2b40      	cmp	r3, #64	; 0x40
 8001ab6:	d02d      	beq.n	8001b14 <HAL_UART_RxCpltCallback+0x70>
 8001ab8:	e042      	b.n	8001b40 <HAL_UART_RxCpltCallback+0x9c>



	case ' ':

		if(flaga_1){
 8001aba:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <HAL_UART_RxCpltCallback+0xc0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d015      	beq.n	8001aee <HAL_UART_RxCpltCallback+0x4a>
			strncpy(s1,Rx,j);
 8001ac2:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <HAL_UART_RxCpltCallback+0xc4>)
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4928      	ldr	r1, [pc, #160]	; (8001b6c <HAL_UART_RxCpltCallback+0xc8>)
 8001aca:	4829      	ldr	r0, [pc, #164]	; (8001b70 <HAL_UART_RxCpltCallback+0xcc>)
 8001acc:	f009 fa6d 	bl	800afaa <strncpy>
			sscanf(s1, "%d", &x);
 8001ad0:	4a28      	ldr	r2, [pc, #160]	; (8001b74 <HAL_UART_RxCpltCallback+0xd0>)
 8001ad2:	4929      	ldr	r1, [pc, #164]	; (8001b78 <HAL_UART_RxCpltCallback+0xd4>)
 8001ad4:	4826      	ldr	r0, [pc, #152]	; (8001b70 <HAL_UART_RxCpltCallback+0xcc>)
 8001ad6:	f009 f9f1 	bl	800aebc <siscanf>
			flaga_1 = 0;
 8001ada:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <HAL_UART_RxCpltCallback+0xc0>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
			j=0;
 8001ae0:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <HAL_UART_RxCpltCallback+0xc4>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	801a      	strh	r2, [r3, #0]
			resetuj(s1);
 8001ae6:	4822      	ldr	r0, [pc, #136]	; (8001b70 <HAL_UART_RxCpltCallback+0xcc>)
 8001ae8:	f7ff ffba 	bl	8001a60 <resetuj>
			break;
 8001aec:	e033      	b.n	8001b56 <HAL_UART_RxCpltCallback+0xb2>
		}else{
			strncpy(s2,Rx,j);
 8001aee:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <HAL_UART_RxCpltCallback+0xc4>)
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	491d      	ldr	r1, [pc, #116]	; (8001b6c <HAL_UART_RxCpltCallback+0xc8>)
 8001af6:	4821      	ldr	r0, [pc, #132]	; (8001b7c <HAL_UART_RxCpltCallback+0xd8>)
 8001af8:	f009 fa57 	bl	800afaa <strncpy>
			sscanf(Rx, "%d", &y);
 8001afc:	4a20      	ldr	r2, [pc, #128]	; (8001b80 <HAL_UART_RxCpltCallback+0xdc>)
 8001afe:	491e      	ldr	r1, [pc, #120]	; (8001b78 <HAL_UART_RxCpltCallback+0xd4>)
 8001b00:	481a      	ldr	r0, [pc, #104]	; (8001b6c <HAL_UART_RxCpltCallback+0xc8>)
 8001b02:	f009 f9db 	bl	800aebc <siscanf>
			j=0;
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <HAL_UART_RxCpltCallback+0xc4>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	801a      	strh	r2, [r3, #0]
			resetuj(s2);
 8001b0c:	481b      	ldr	r0, [pc, #108]	; (8001b7c <HAL_UART_RxCpltCallback+0xd8>)
 8001b0e:	f7ff ffa7 	bl	8001a60 <resetuj>
			break;
 8001b12:	e020      	b.n	8001b56 <HAL_UART_RxCpltCallback+0xb2>
		}

		break;

	case '@':
		strncpy(s3,Rx,j);
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <HAL_UART_RxCpltCallback+0xc4>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4914      	ldr	r1, [pc, #80]	; (8001b6c <HAL_UART_RxCpltCallback+0xc8>)
 8001b1c:	4819      	ldr	r0, [pc, #100]	; (8001b84 <HAL_UART_RxCpltCallback+0xe0>)
 8001b1e:	f009 fa44 	bl	800afaa <strncpy>
		sscanf(Rx, "%d", &z);
 8001b22:	4a19      	ldr	r2, [pc, #100]	; (8001b88 <HAL_UART_RxCpltCallback+0xe4>)
 8001b24:	4914      	ldr	r1, [pc, #80]	; (8001b78 <HAL_UART_RxCpltCallback+0xd4>)
 8001b26:	4811      	ldr	r0, [pc, #68]	; (8001b6c <HAL_UART_RxCpltCallback+0xc8>)
 8001b28:	f009 f9c8 	bl	800aebc <siscanf>
		j=0;
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_UART_RxCpltCallback+0xc4>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	801a      	strh	r2, [r3, #0]
		flaga_1 = 1;
 8001b32:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <HAL_UART_RxCpltCallback+0xc0>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
		resetuj(s3);
 8001b38:	4812      	ldr	r0, [pc, #72]	; (8001b84 <HAL_UART_RxCpltCallback+0xe0>)
 8001b3a:	f7ff ff91 	bl	8001a60 <resetuj>
		break;
 8001b3e:	e00a      	b.n	8001b56 <HAL_UART_RxCpltCallback+0xb2>

	default: Rx[j++]=r;
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_UART_RxCpltCallback+0xc4>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	b291      	uxth	r1, r2
 8001b48:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <HAL_UART_RxCpltCallback+0xc4>)
 8001b4a:	8011      	strh	r1, [r2, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <HAL_UART_RxCpltCallback+0xbc>)
 8001b50:	7819      	ldrb	r1, [r3, #0]
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_UART_RxCpltCallback+0xc8>)
 8001b54:	5499      	strb	r1, [r3, r2]

	}



}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200005a8 	.word	0x200005a8
 8001b64:	20000000 	.word	0x20000000
 8001b68:	20000530 	.word	0x20000530
 8001b6c:	200005ac 	.word	0x200005ac
 8001b70:	2000055c 	.word	0x2000055c
 8001b74:	20000534 	.word	0x20000534
 8001b78:	0800d1f0 	.word	0x0800d1f0
 8001b7c:	200005cc 	.word	0x200005cc
 8001b80:	200005c8 	.word	0x200005c8
 8001b84:	20000768 	.word	0x20000768
 8001b88:	200005c0 	.word	0x200005c0

08001b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_MspInit+0x44>)
 8001ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba6:	4a0e      	ldr	r2, [pc, #56]	; (8001be0 <HAL_MspInit+0x44>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6613      	str	r3, [r2, #96]	; 0x60
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <HAL_MspInit+0x44>)
 8001bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_MspInit+0x44>)
 8001bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <HAL_MspInit+0x44>)
 8001bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_MspInit+0x44>)
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <HardFault_Handler+0x4>

08001bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <MemManage_Handler+0x4>

08001bfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <BusFault_Handler+0x4>

08001c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <UsageFault_Handler+0x4>

08001c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c38:	f000 fa36 	bl	80020a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c44:	4804      	ldr	r0, [pc, #16]	; (8001c58 <USART2_IRQHandler+0x18>)
 8001c46:	f003 fa75 	bl	8005134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, &r, 1);
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4903      	ldr	r1, [pc, #12]	; (8001c5c <USART2_IRQHandler+0x1c>)
 8001c4e:	4802      	ldr	r0, [pc, #8]	; (8001c58 <USART2_IRQHandler+0x18>)
 8001c50:	f003 f9ce 	bl	8004ff0 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	200007c0 	.word	0x200007c0
 8001c5c:	200005a8 	.word	0x200005a8

08001c60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <TIM6_DAC_IRQHandler+0x10>)
 8001c66:	f002 fe5a 	bl	800491e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000774 	.word	0x20000774

08001c74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	e00a      	b.n	8001c9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c86:	f3af 8000 	nop.w
 8001c8a:	4601      	mov	r1, r0
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	60ba      	str	r2, [r7, #8]
 8001c92:	b2ca      	uxtb	r2, r1
 8001c94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	dbf0      	blt.n	8001c86 <_read+0x12>
	}

return len;
 8001ca4:	687b      	ldr	r3, [r7, #4]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <_close>:
	}
	return len;
}

int _close(int file)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
	return -1;
 8001cb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cd6:	605a      	str	r2, [r3, #4]
	return 0;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <_isatty>:

int _isatty(int file)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
	return 1;
 8001cee:	2301      	movs	r3, #1
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
	return 0;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d20:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <_sbrk+0x5c>)
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <_sbrk+0x60>)
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d102      	bne.n	8001d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <_sbrk+0x64>)
 8001d36:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <_sbrk+0x68>)
 8001d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <_sbrk+0x64>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d207      	bcs.n	8001d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d48:	f009 f862 	bl	800ae10 <__errno>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	230c      	movs	r3, #12
 8001d50:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	e009      	b.n	8001d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <_sbrk+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5e:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <_sbrk+0x64>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <_sbrk+0x64>)
 8001d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20018000 	.word	0x20018000
 8001d78:	00000400 	.word	0x00000400
 8001d7c:	200004d8 	.word	0x200004d8
 8001d80:	20000888 	.word	0x20000888

08001d84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d88:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <SystemInit+0x64>)
 8001d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8e:	4a16      	ldr	r2, [pc, #88]	; (8001de8 <SystemInit+0x64>)
 8001d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d98:	4b14      	ldr	r3, [pc, #80]	; (8001dec <SystemInit+0x68>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a13      	ldr	r2, [pc, #76]	; (8001dec <SystemInit+0x68>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <SystemInit+0x68>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <SystemInit+0x68>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a0f      	ldr	r2, [pc, #60]	; (8001dec <SystemInit+0x68>)
 8001db0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001db4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001db8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001dba:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <SystemInit+0x68>)
 8001dbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dc0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <SystemInit+0x68>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a09      	ldr	r2, [pc, #36]	; (8001dec <SystemInit+0x68>)
 8001dc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dcc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <SystemInit+0x68>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <SystemInit+0x64>)
 8001dd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dda:	609a      	str	r2, [r3, #8]
#endif
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00
 8001dec:	40021000 	.word	0x40021000

08001df0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e02:	4a15      	ldr	r2, [pc, #84]	; (8001e58 <MX_TIM6_Init+0x68>)
 8001e04:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PRESCALER;
 8001e06:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e08:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001e0c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_PERIOD;
 8001e14:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e16:	2209      	movs	r2, #9
 8001e18:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e1c:	2280      	movs	r2, #128	; 0x80
 8001e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e20:	480c      	ldr	r0, [pc, #48]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e22:	f002 fc85 	bl	8004730 <HAL_TIM_Base_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001e2c:	f7ff feae 	bl	8001b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e30:	2300      	movs	r3, #0
 8001e32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4805      	ldr	r0, [pc, #20]	; (8001e54 <MX_TIM6_Init+0x64>)
 8001e3e:	f002 ff4f 	bl	8004ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001e48:	f7ff fea0 	bl	8001b8c <Error_Handler>
  }

}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000774 	.word	0x20000774
 8001e58:	40001000 	.word	0x40001000

08001e5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0d      	ldr	r2, [pc, #52]	; (8001ea0 <HAL_TIM_Base_MspInit+0x44>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d113      	bne.n	8001e96 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <HAL_TIM_Base_MspInit+0x48>)
 8001e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e72:	4a0c      	ldr	r2, [pc, #48]	; (8001ea4 <HAL_TIM_Base_MspInit+0x48>)
 8001e74:	f043 0310 	orr.w	r3, r3, #16
 8001e78:	6593      	str	r3, [r2, #88]	; 0x58
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <HAL_TIM_Base_MspInit+0x48>)
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2100      	movs	r1, #0
 8001e8a:	2036      	movs	r0, #54	; 0x36
 8001e8c:	f000 fa29 	bl	80022e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e90:	2036      	movs	r0, #54	; 0x36
 8001e92:	f000 fa42 	bl	800231a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40001000 	.word	0x40001000
 8001ea4:	40021000 	.word	0x40021000

08001ea8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001eae:	4a15      	ldr	r2, [pc, #84]	; (8001f04 <MX_USART2_UART_Init+0x5c>)
 8001eb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ece:	220c      	movs	r2, #12
 8001ed0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001eec:	f002 ff9e 	bl	8004e2c <HAL_UART_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ef6:	f7ff fe49 	bl	8001b8c <Error_Handler>
  }

}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	200007c0 	.word	0x200007c0
 8001f04:	40004400 	.word	0x40004400

08001f08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	; 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a1b      	ldr	r2, [pc, #108]	; (8001f94 <HAL_UART_MspInit+0x8c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d130      	bne.n	8001f8c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_UART_MspInit+0x90>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	4a1a      	ldr	r2, [pc, #104]	; (8001f98 <HAL_UART_MspInit+0x90>)
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f34:	6593      	str	r3, [r2, #88]	; 0x58
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <HAL_UART_MspInit+0x90>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_UART_MspInit+0x90>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	4a14      	ldr	r2, [pc, #80]	; (8001f98 <HAL_UART_MspInit+0x90>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_UART_MspInit+0x90>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f5a:	230c      	movs	r3, #12
 8001f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f66:	2303      	movs	r3, #3
 8001f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f6a:	2307      	movs	r3, #7
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	4619      	mov	r1, r3
 8001f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f78:	f000 fa2a 	bl	80023d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2026      	movs	r0, #38	; 0x26
 8001f82:	f000 f9ae 	bl	80022e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f86:	2026      	movs	r0, #38	; 0x26
 8001f88:	f000 f9c7 	bl	800231a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	3728      	adds	r7, #40	; 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40004400 	.word	0x40004400
 8001f98:	40021000 	.word	0x40021000

08001f9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fa0:	f7ff fef0 	bl	8001d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001fa4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001fa6:	e003      	b.n	8001fb0 <LoopCopyDataInit>

08001fa8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001faa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001fac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001fae:	3104      	adds	r1, #4

08001fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001fb0:	480a      	ldr	r0, [pc, #40]	; (8001fdc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001fb4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001fb6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001fb8:	d3f6      	bcc.n	8001fa8 <CopyDataInit>
	ldr	r2, =_sbss
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001fbc:	e002      	b.n	8001fc4 <LoopFillZerobss>

08001fbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001fbe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001fc0:	f842 3b04 	str.w	r3, [r2], #4

08001fc4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <LoopForever+0x16>)
	cmp	r2, r3
 8001fc6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001fc8:	d3f9      	bcc.n	8001fbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fca:	f008 ff27 	bl	800ae1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fce:	f7ff fa2f 	bl	8001430 <main>

08001fd2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fd2:	e7fe      	b.n	8001fd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fd4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001fd8:	0800d7e8 	.word	0x0800d7e8
	ldr	r0, =_sdata
 8001fdc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001fe0:	200004a4 	.word	0x200004a4
	ldr	r2, =_sbss
 8001fe4:	200004a4 	.word	0x200004a4
	ldr	r3, = _ebss
 8001fe8:	20000888 	.word	0x20000888

08001fec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fec:	e7fe      	b.n	8001fec <ADC1_2_IRQHandler>
	...

08001ff0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	; (800202c <HAL_Init+0x3c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a0b      	ldr	r2, [pc, #44]	; (800202c <HAL_Init+0x3c>)
 8002000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002004:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002006:	2003      	movs	r0, #3
 8002008:	f000 f960 	bl	80022cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800200c:	2000      	movs	r0, #0
 800200e:	f000 f80f 	bl	8002030 <HAL_InitTick>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	71fb      	strb	r3, [r7, #7]
 800201c:	e001      	b.n	8002022 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800201e:	f7ff fdbd 	bl	8001b9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002022:	79fb      	ldrb	r3, [r7, #7]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40022000 	.word	0x40022000

08002030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800203c:	4b17      	ldr	r3, [pc, #92]	; (800209c <HAL_InitTick+0x6c>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d023      	beq.n	800208c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002044:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <HAL_InitTick+0x70>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b14      	ldr	r3, [pc, #80]	; (800209c <HAL_InitTick+0x6c>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4619      	mov	r1, r3
 800204e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002052:	fbb3 f3f1 	udiv	r3, r3, r1
 8002056:	fbb2 f3f3 	udiv	r3, r2, r3
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f96b 	bl	8002336 <HAL_SYSTICK_Config>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10f      	bne.n	8002086 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b0f      	cmp	r3, #15
 800206a:	d809      	bhi.n	8002080 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800206c:	2200      	movs	r2, #0
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	f04f 30ff 	mov.w	r0, #4294967295
 8002074:	f000 f935 	bl	80022e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002078:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <HAL_InitTick+0x74>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e007      	b.n	8002090 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
 8002084:	e004      	b.n	8002090 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
 800208a:	e001      	b.n	8002090 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002090:	7bfb      	ldrb	r3, [r7, #15]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000014 	.word	0x20000014
 80020a0:	2000000c 	.word	0x2000000c
 80020a4:	20000010 	.word	0x20000010

080020a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_IncTick+0x20>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_IncTick+0x24>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	4a04      	ldr	r2, [pc, #16]	; (80020cc <HAL_IncTick+0x24>)
 80020ba:	6013      	str	r3, [r2, #0]
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	20000014 	.word	0x20000014
 80020cc:	20000840 	.word	0x20000840

080020d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return uwTick;
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <HAL_GetTick+0x14>)
 80020d6:	681b      	ldr	r3, [r3, #0]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000840 	.word	0x20000840

080020e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f0:	f7ff ffee 	bl	80020d0 <HAL_GetTick>
 80020f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002100:	d005      	beq.n	800210e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_Delay+0x40>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4413      	add	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800210e:	bf00      	nop
 8002110:	f7ff ffde 	bl	80020d0 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	429a      	cmp	r2, r3
 800211e:	d8f7      	bhi.n	8002110 <HAL_Delay+0x28>
  {
  }
}
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000014 	.word	0x20000014

0800212c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002148:	4013      	ands	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215e:	4a04      	ldr	r2, [pc, #16]	; (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	60d3      	str	r3, [r2, #12]
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <__NVIC_GetPriorityGrouping+0x18>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	f003 0307 	and.w	r3, r3, #7
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	db0b      	blt.n	80021ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	f003 021f 	and.w	r2, r3, #31
 80021a8:	4907      	ldr	r1, [pc, #28]	; (80021c8 <__NVIC_EnableIRQ+0x38>)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	2001      	movs	r0, #1
 80021b2:	fa00 f202 	lsl.w	r2, r0, r2
 80021b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000e100 	.word	0xe000e100

080021cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	6039      	str	r1, [r7, #0]
 80021d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	db0a      	blt.n	80021f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	490c      	ldr	r1, [pc, #48]	; (8002218 <__NVIC_SetPriority+0x4c>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	0112      	lsls	r2, r2, #4
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	440b      	add	r3, r1
 80021f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f4:	e00a      	b.n	800220c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4908      	ldr	r1, [pc, #32]	; (800221c <__NVIC_SetPriority+0x50>)
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	3b04      	subs	r3, #4
 8002204:	0112      	lsls	r2, r2, #4
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	440b      	add	r3, r1
 800220a:	761a      	strb	r2, [r3, #24]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000e100 	.word	0xe000e100
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002220:	b480      	push	{r7}
 8002222:	b089      	sub	sp, #36	; 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f1c3 0307 	rsb	r3, r3, #7
 800223a:	2b04      	cmp	r3, #4
 800223c:	bf28      	it	cs
 800223e:	2304      	movcs	r3, #4
 8002240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3304      	adds	r3, #4
 8002246:	2b06      	cmp	r3, #6
 8002248:	d902      	bls.n	8002250 <NVIC_EncodePriority+0x30>
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3b03      	subs	r3, #3
 800224e:	e000      	b.n	8002252 <NVIC_EncodePriority+0x32>
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	f04f 32ff 	mov.w	r2, #4294967295
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43da      	mvns	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	401a      	ands	r2, r3
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002268:	f04f 31ff 	mov.w	r1, #4294967295
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	fa01 f303 	lsl.w	r3, r1, r3
 8002272:	43d9      	mvns	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	4313      	orrs	r3, r2
         );
}
 800227a:	4618      	mov	r0, r3
 800227c:	3724      	adds	r7, #36	; 0x24
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3b01      	subs	r3, #1
 8002294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002298:	d301      	bcc.n	800229e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800229a:	2301      	movs	r3, #1
 800229c:	e00f      	b.n	80022be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800229e:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <SysTick_Config+0x40>)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022a6:	210f      	movs	r1, #15
 80022a8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ac:	f7ff ff8e 	bl	80021cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <SysTick_Config+0x40>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022b6:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <SysTick_Config+0x40>)
 80022b8:	2207      	movs	r2, #7
 80022ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	e000e010 	.word	0xe000e010

080022cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff ff29 	bl	800212c <__NVIC_SetPriorityGrouping>
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b086      	sub	sp, #24
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	4603      	mov	r3, r0
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022f4:	f7ff ff3e 	bl	8002174 <__NVIC_GetPriorityGrouping>
 80022f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68b9      	ldr	r1, [r7, #8]
 80022fe:	6978      	ldr	r0, [r7, #20]
 8002300:	f7ff ff8e 	bl	8002220 <NVIC_EncodePriority>
 8002304:	4602      	mov	r2, r0
 8002306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff5d 	bl	80021cc <__NVIC_SetPriority>
}
 8002312:	bf00      	nop
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	4603      	mov	r3, r0
 8002322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff31 	bl	8002190 <__NVIC_EnableIRQ>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff ffa2 	bl	8002288 <SysTick_Config>
 8002344:	4603      	mov	r3, r0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d005      	beq.n	8002372 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2204      	movs	r2, #4
 800236a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
 8002370:	e029      	b.n	80023c6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 020e 	bic.w	r2, r2, #14
 8002380:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0201 	bic.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	f003 021c 	and.w	r2, r3, #28
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	2101      	movs	r1, #1
 80023a0:	fa01 f202 	lsl.w	r2, r1, r2
 80023a4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	4798      	blx	r3
    }
  }
  return status;
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023de:	e17f      	b.n	80026e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	2101      	movs	r1, #1
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ec:	4013      	ands	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8171 	beq.w	80026da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d00b      	beq.n	8002418 <HAL_GPIO_Init+0x48>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d007      	beq.n	8002418 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800240c:	2b11      	cmp	r3, #17
 800240e:	d003      	beq.n	8002418 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b12      	cmp	r3, #18
 8002416:	d130      	bne.n	800247a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	2203      	movs	r2, #3
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4313      	orrs	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800244e:	2201      	movs	r2, #1
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4013      	ands	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	091b      	lsrs	r3, r3, #4
 8002464:	f003 0201 	and.w	r2, r3, #1
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b03      	cmp	r3, #3
 8002484:	d118      	bne.n	80024b8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800248c:	2201      	movs	r2, #1
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	08db      	lsrs	r3, r3, #3
 80024a2:	f003 0201 	and.w	r2, r3, #1
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x128>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b12      	cmp	r3, #18
 80024f6:	d123      	bne.n	8002540 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	08da      	lsrs	r2, r3, #3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3208      	adds	r2, #8
 8002500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002504:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	220f      	movs	r2, #15
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	08da      	lsrs	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3208      	adds	r2, #8
 800253a:	6939      	ldr	r1, [r7, #16]
 800253c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	2203      	movs	r2, #3
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4013      	ands	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0203 	and.w	r2, r3, #3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 80ac 	beq.w	80026da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002582:	4b5e      	ldr	r3, [pc, #376]	; (80026fc <HAL_GPIO_Init+0x32c>)
 8002584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002586:	4a5d      	ldr	r2, [pc, #372]	; (80026fc <HAL_GPIO_Init+0x32c>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6613      	str	r3, [r2, #96]	; 0x60
 800258e:	4b5b      	ldr	r3, [pc, #364]	; (80026fc <HAL_GPIO_Init+0x32c>)
 8002590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800259a:	4a59      	ldr	r2, [pc, #356]	; (8002700 <HAL_GPIO_Init+0x330>)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	3302      	adds	r3, #2
 80025a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	220f      	movs	r2, #15
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4013      	ands	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025c4:	d025      	beq.n	8002612 <HAL_GPIO_Init+0x242>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a4e      	ldr	r2, [pc, #312]	; (8002704 <HAL_GPIO_Init+0x334>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01f      	beq.n	800260e <HAL_GPIO_Init+0x23e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4d      	ldr	r2, [pc, #308]	; (8002708 <HAL_GPIO_Init+0x338>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d019      	beq.n	800260a <HAL_GPIO_Init+0x23a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a4c      	ldr	r2, [pc, #304]	; (800270c <HAL_GPIO_Init+0x33c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_GPIO_Init+0x236>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a4b      	ldr	r2, [pc, #300]	; (8002710 <HAL_GPIO_Init+0x340>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00d      	beq.n	8002602 <HAL_GPIO_Init+0x232>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a4a      	ldr	r2, [pc, #296]	; (8002714 <HAL_GPIO_Init+0x344>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d007      	beq.n	80025fe <HAL_GPIO_Init+0x22e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a49      	ldr	r2, [pc, #292]	; (8002718 <HAL_GPIO_Init+0x348>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d101      	bne.n	80025fa <HAL_GPIO_Init+0x22a>
 80025f6:	2306      	movs	r3, #6
 80025f8:	e00c      	b.n	8002614 <HAL_GPIO_Init+0x244>
 80025fa:	2307      	movs	r3, #7
 80025fc:	e00a      	b.n	8002614 <HAL_GPIO_Init+0x244>
 80025fe:	2305      	movs	r3, #5
 8002600:	e008      	b.n	8002614 <HAL_GPIO_Init+0x244>
 8002602:	2304      	movs	r3, #4
 8002604:	e006      	b.n	8002614 <HAL_GPIO_Init+0x244>
 8002606:	2303      	movs	r3, #3
 8002608:	e004      	b.n	8002614 <HAL_GPIO_Init+0x244>
 800260a:	2302      	movs	r3, #2
 800260c:	e002      	b.n	8002614 <HAL_GPIO_Init+0x244>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_GPIO_Init+0x244>
 8002612:	2300      	movs	r3, #0
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	f002 0203 	and.w	r2, r2, #3
 800261a:	0092      	lsls	r2, r2, #2
 800261c:	4093      	lsls	r3, r2
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002624:	4936      	ldr	r1, [pc, #216]	; (8002700 <HAL_GPIO_Init+0x330>)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	3302      	adds	r3, #2
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002632:	4b3a      	ldr	r3, [pc, #232]	; (800271c <HAL_GPIO_Init+0x34c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	43db      	mvns	r3, r3
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4013      	ands	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002656:	4a31      	ldr	r2, [pc, #196]	; (800271c <HAL_GPIO_Init+0x34c>)
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800265c:	4b2f      	ldr	r3, [pc, #188]	; (800271c <HAL_GPIO_Init+0x34c>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	43db      	mvns	r3, r3
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002680:	4a26      	ldr	r2, [pc, #152]	; (800271c <HAL_GPIO_Init+0x34c>)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002686:	4b25      	ldr	r3, [pc, #148]	; (800271c <HAL_GPIO_Init+0x34c>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	43db      	mvns	r3, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026aa:	4a1c      	ldr	r2, [pc, #112]	; (800271c <HAL_GPIO_Init+0x34c>)
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026b0:	4b1a      	ldr	r3, [pc, #104]	; (800271c <HAL_GPIO_Init+0x34c>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026d4:	4a11      	ldr	r2, [pc, #68]	; (800271c <HAL_GPIO_Init+0x34c>)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	3301      	adds	r3, #1
 80026de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f47f ae78 	bne.w	80023e0 <HAL_GPIO_Init+0x10>
  }
}
 80026f0:	bf00      	nop
 80026f2:	371c      	adds	r7, #28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	40021000 	.word	0x40021000
 8002700:	40010000 	.word	0x40010000
 8002704:	48000400 	.word	0x48000400
 8002708:	48000800 	.word	0x48000800
 800270c:	48000c00 	.word	0x48000c00
 8002710:	48001000 	.word	0x48001000
 8002714:	48001400 	.word	0x48001400
 8002718:	48001800 	.word	0x48001800
 800271c:	40010400 	.word	0x40010400

08002720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	807b      	strh	r3, [r7, #2]
 800272c:	4613      	mov	r3, r2
 800272e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002730:	787b      	ldrb	r3, [r7, #1]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002736:	887a      	ldrh	r2, [r7, #2]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800273c:	e002      	b.n	8002744 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800273e:	887a      	ldrh	r2, [r7, #2]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e081      	b.n	8002866 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d106      	bne.n	800277c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7fe fe16 	bl	80013a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2224      	movs	r2, #36	; 0x24
 8002780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d107      	bne.n	80027ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	e006      	b.n	80027d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d104      	bne.n	80027ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800280c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691a      	ldr	r2, [r3, #16]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	ea42 0103 	orr.w	r1, r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	021a      	lsls	r2, r3, #8
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69d9      	ldr	r1, [r3, #28]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1a      	ldr	r2, [r3, #32]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af02      	add	r7, sp, #8
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	607a      	str	r2, [r7, #4]
 800287a:	461a      	mov	r2, r3
 800287c:	460b      	mov	r3, r1
 800287e:	817b      	strh	r3, [r7, #10]
 8002880:	4613      	mov	r3, r2
 8002882:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b20      	cmp	r3, #32
 800288e:	f040 80da 	bne.w	8002a46 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_I2C_Master_Transmit+0x30>
 800289c:	2302      	movs	r3, #2
 800289e:	e0d3      	b.n	8002a48 <HAL_I2C_Master_Transmit+0x1d8>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028a8:	f7ff fc12 	bl	80020d0 <HAL_GetTick>
 80028ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	2319      	movs	r3, #25
 80028b4:	2201      	movs	r2, #1
 80028b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f000 f9e6 	bl	8002c8c <I2C_WaitOnFlagUntilTimeout>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0be      	b.n	8002a48 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2221      	movs	r2, #33	; 0x21
 80028ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2210      	movs	r2, #16
 80028d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	893a      	ldrh	r2, [r7, #8]
 80028ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2bff      	cmp	r3, #255	; 0xff
 80028fa:	d90e      	bls.n	800291a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	22ff      	movs	r2, #255	; 0xff
 8002900:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002906:	b2da      	uxtb	r2, r3
 8002908:	8979      	ldrh	r1, [r7, #10]
 800290a:	4b51      	ldr	r3, [pc, #324]	; (8002a50 <HAL_I2C_Master_Transmit+0x1e0>)
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 fb48 	bl	8002fa8 <I2C_TransferConfig>
 8002918:	e06c      	b.n	80029f4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002928:	b2da      	uxtb	r2, r3
 800292a:	8979      	ldrh	r1, [r7, #10]
 800292c:	4b48      	ldr	r3, [pc, #288]	; (8002a50 <HAL_I2C_Master_Transmit+0x1e0>)
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 fb37 	bl	8002fa8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800293a:	e05b      	b.n	80029f4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	6a39      	ldr	r1, [r7, #32]
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 f9e3 	bl	8002d0c <I2C_WaitOnTXISFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e07b      	b.n	8002a48 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	781a      	ldrb	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296a:	b29b      	uxth	r3, r3
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d034      	beq.n	80029f4 <HAL_I2C_Master_Transmit+0x184>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298e:	2b00      	cmp	r3, #0
 8002990:	d130      	bne.n	80029f4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	2200      	movs	r2, #0
 800299a:	2180      	movs	r1, #128	; 0x80
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 f975 	bl	8002c8c <I2C_WaitOnFlagUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e04d      	b.n	8002a48 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2bff      	cmp	r3, #255	; 0xff
 80029b4:	d90e      	bls.n	80029d4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	22ff      	movs	r2, #255	; 0xff
 80029ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	8979      	ldrh	r1, [r7, #10]
 80029c4:	2300      	movs	r3, #0
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 faeb 	bl	8002fa8 <I2C_TransferConfig>
 80029d2:	e00f      	b.n	80029f4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	8979      	ldrh	r1, [r7, #10]
 80029e6:	2300      	movs	r3, #0
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fada 	bl	8002fa8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d19e      	bne.n	800293c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	6a39      	ldr	r1, [r7, #32]
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f9c2 	bl	8002d8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e01a      	b.n	8002a48 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2220      	movs	r2, #32
 8002a18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_I2C_Master_Transmit+0x1e4>)
 8002a26:	400b      	ands	r3, r1
 8002a28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e000      	b.n	8002a48 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002a46:	2302      	movs	r3, #2
  }
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	80002000 	.word	0x80002000
 8002a54:	fe00e800 	.word	0xfe00e800

08002a58 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	461a      	mov	r2, r3
 8002a64:	460b      	mov	r3, r1
 8002a66:	817b      	strh	r3, [r7, #10]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	f040 80db 	bne.w	8002c30 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_I2C_Master_Receive+0x30>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e0d4      	b.n	8002c32 <HAL_I2C_Master_Receive+0x1da>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a90:	f7ff fb1e 	bl	80020d0 <HAL_GetTick>
 8002a94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	2319      	movs	r3, #25
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f8f2 	bl	8002c8c <I2C_WaitOnFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e0bf      	b.n	8002c32 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2222      	movs	r2, #34	; 0x22
 8002ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2210      	movs	r2, #16
 8002abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	893a      	ldrh	r2, [r7, #8]
 8002ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	2bff      	cmp	r3, #255	; 0xff
 8002ae2:	d90e      	bls.n	8002b02 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	22ff      	movs	r2, #255	; 0xff
 8002ae8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	8979      	ldrh	r1, [r7, #10]
 8002af2:	4b52      	ldr	r3, [pc, #328]	; (8002c3c <HAL_I2C_Master_Receive+0x1e4>)
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 fa54 	bl	8002fa8 <I2C_TransferConfig>
 8002b00:	e06d      	b.n	8002bde <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	8979      	ldrh	r1, [r7, #10]
 8002b14:	4b49      	ldr	r3, [pc, #292]	; (8002c3c <HAL_I2C_Master_Receive+0x1e4>)
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 fa43 	bl	8002fa8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002b22:	e05c      	b.n	8002bde <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	6a39      	ldr	r1, [r7, #32]
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f96b 	bl	8002e04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e07c      	b.n	8002c32 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d034      	beq.n	8002bde <HAL_I2C_Master_Receive+0x186>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d130      	bne.n	8002bde <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	2200      	movs	r2, #0
 8002b84:	2180      	movs	r1, #128	; 0x80
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f880 	bl	8002c8c <I2C_WaitOnFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e04d      	b.n	8002c32 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	2bff      	cmp	r3, #255	; 0xff
 8002b9e:	d90e      	bls.n	8002bbe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	22ff      	movs	r2, #255	; 0xff
 8002ba4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	8979      	ldrh	r1, [r7, #10]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f9f6 	bl	8002fa8 <I2C_TransferConfig>
 8002bbc:	e00f      	b.n	8002bde <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	8979      	ldrh	r1, [r7, #10]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 f9e5 	bl	8002fa8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d19d      	bne.n	8002b24 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	6a39      	ldr	r1, [r7, #32]
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f8cd 	bl	8002d8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e01a      	b.n	8002c32 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2220      	movs	r2, #32
 8002c02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6859      	ldr	r1, [r3, #4]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <HAL_I2C_Master_Receive+0x1e8>)
 8002c10:	400b      	ands	r3, r1
 8002c12:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e000      	b.n	8002c32 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
  }
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	80002400 	.word	0x80002400
 8002c40:	fe00e800 	.word	0xfe00e800

08002c44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d103      	bne.n	8002c62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d007      	beq.n	8002c80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	619a      	str	r2, [r3, #24]
  }
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c9c:	e022      	b.n	8002ce4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca4:	d01e      	beq.n	8002ce4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca6:	f7ff fa13 	bl	80020d0 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d302      	bcc.n	8002cbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d113      	bne.n	8002ce4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e00f      	b.n	8002d04 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4013      	ands	r3, r2
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d0cd      	beq.n	8002c9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d18:	e02c      	b.n	8002d74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f8dc 	bl	8002edc <I2C_IsAcknowledgeFailed>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e02a      	b.n	8002d84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d01e      	beq.n	8002d74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d36:	f7ff f9cb 	bl	80020d0 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d302      	bcc.n	8002d4c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d113      	bne.n	8002d74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d50:	f043 0220 	orr.w	r2, r3, #32
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e007      	b.n	8002d84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d1cb      	bne.n	8002d1a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d98:	e028      	b.n	8002dec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 f89c 	bl	8002edc <I2C_IsAcknowledgeFailed>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e026      	b.n	8002dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dae:	f7ff f98f 	bl	80020d0 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d302      	bcc.n	8002dc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d113      	bne.n	8002dec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc8:	f043 0220 	orr.w	r2, r3, #32
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e007      	b.n	8002dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	d1cf      	bne.n	8002d9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e10:	e055      	b.n	8002ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68b9      	ldr	r1, [r7, #8]
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f860 	bl	8002edc <I2C_IsAcknowledgeFailed>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e053      	b.n	8002ece <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d129      	bne.n	8002e88 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d105      	bne.n	8002e4e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e03f      	b.n	8002ece <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2220      	movs	r2, #32
 8002e54:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002e62:	400b      	ands	r3, r1
 8002e64:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e022      	b.n	8002ece <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e88:	f7ff f922 	bl	80020d0 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d302      	bcc.n	8002e9e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10f      	bne.n	8002ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	f043 0220 	orr.w	r2, r3, #32
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e007      	b.n	8002ece <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d1a2      	bne.n	8002e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	fe00e800 	.word	0xfe00e800

08002edc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	2b10      	cmp	r3, #16
 8002ef4:	d151      	bne.n	8002f9a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ef6:	e022      	b.n	8002f3e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efe:	d01e      	beq.n	8002f3e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f00:	f7ff f8e6 	bl	80020d0 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d302      	bcc.n	8002f16 <I2C_IsAcknowledgeFailed+0x3a>
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d113      	bne.n	8002f3e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	f043 0220 	orr.w	r2, r3, #32
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e02e      	b.n	8002f9c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	d1d5      	bne.n	8002ef8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2210      	movs	r2, #16
 8002f52:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f7ff fe71 	bl	8002c44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <I2C_IsAcknowledgeFailed+0xc8>)
 8002f6e:	400b      	ands	r3, r1
 8002f70:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	f043 0204 	orr.w	r2, r3, #4
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	fe00e800 	.word	0xfe00e800

08002fa8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	607b      	str	r3, [r7, #4]
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	817b      	strh	r3, [r7, #10]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	0d5b      	lsrs	r3, r3, #21
 8002fc4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002fc8:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <I2C_TransferConfig+0x58>)
 8002fca:	430b      	orrs	r3, r1
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	ea02 0103 	and.w	r1, r2, r3
 8002fd2:	897b      	ldrh	r3, [r7, #10]
 8002fd4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fd8:	7a7b      	ldrb	r3, [r7, #9]
 8002fda:	041b      	lsls	r3, r3, #16
 8002fdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	03ff63ff 	.word	0x03ff63ff

08003004 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b20      	cmp	r3, #32
 8003018:	d138      	bne.n	800308c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003024:	2302      	movs	r3, #2
 8003026:	e032      	b.n	800308e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2224      	movs	r2, #36	; 0x24
 8003034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0201 	bic.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003056:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6819      	ldr	r1, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003088:	2300      	movs	r3, #0
 800308a:	e000      	b.n	800308e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800308c:	2302      	movs	r3, #2
  }
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800309a:	b480      	push	{r7}
 800309c:	b085      	sub	sp, #20
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d139      	bne.n	8003124 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e033      	b.n	8003126 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2224      	movs	r2, #36	; 0x24
 80030ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0201 	bic.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	021b      	lsls	r3, r3, #8
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	e000      	b.n	8003126 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003124:	2302      	movs	r3, #2
  }
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003138:	4b04      	ldr	r3, [pc, #16]	; (800314c <HAL_PWREx_GetVoltageRange+0x18>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40007000 	.word	0x40007000

08003150 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800315e:	d130      	bne.n	80031c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003160:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800316c:	d038      	beq.n	80031e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800316e:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003176:	4a1e      	ldr	r2, [pc, #120]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003178:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800317c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800317e:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2232      	movs	r2, #50	; 0x32
 8003184:	fb02 f303 	mul.w	r3, r2, r3
 8003188:	4a1b      	ldr	r2, [pc, #108]	; (80031f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	0c9b      	lsrs	r3, r3, #18
 8003190:	3301      	adds	r3, #1
 8003192:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003194:	e002      	b.n	800319c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	3b01      	subs	r3, #1
 800319a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800319c:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a8:	d102      	bne.n	80031b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f2      	bne.n	8003196 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031bc:	d110      	bne.n	80031e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e00f      	b.n	80031e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80031c2:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ce:	d007      	beq.n	80031e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031d0:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031d8:	4a05      	ldr	r2, [pc, #20]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40007000 	.word	0x40007000
 80031f4:	2000000c 	.word	0x2000000c
 80031f8:	431bde83 	.word	0x431bde83

080031fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e3d4      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800320e:	4ba1      	ldr	r3, [pc, #644]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003218:	4b9e      	ldr	r3, [pc, #632]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0310 	and.w	r3, r3, #16
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80e4 	beq.w	80033f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d007      	beq.n	8003246 <HAL_RCC_OscConfig+0x4a>
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	2b0c      	cmp	r3, #12
 800323a:	f040 808b 	bne.w	8003354 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b01      	cmp	r3, #1
 8003242:	f040 8087 	bne.w	8003354 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003246:	4b93      	ldr	r3, [pc, #588]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d005      	beq.n	800325e <HAL_RCC_OscConfig+0x62>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e3ac      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1a      	ldr	r2, [r3, #32]
 8003262:	4b8c      	ldr	r3, [pc, #560]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d004      	beq.n	8003278 <HAL_RCC_OscConfig+0x7c>
 800326e:	4b89      	ldr	r3, [pc, #548]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003276:	e005      	b.n	8003284 <HAL_RCC_OscConfig+0x88>
 8003278:	4b86      	ldr	r3, [pc, #536]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 800327a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003284:	4293      	cmp	r3, r2
 8003286:	d223      	bcs.n	80032d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fd3f 	bl	8003d10 <RCC_SetFlashLatencyFromMSIRange>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e38d      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800329c:	4b7d      	ldr	r3, [pc, #500]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a7c      	ldr	r2, [pc, #496]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 80032a2:	f043 0308 	orr.w	r3, r3, #8
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b7a      	ldr	r3, [pc, #488]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4977      	ldr	r1, [pc, #476]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ba:	4b76      	ldr	r3, [pc, #472]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	021b      	lsls	r3, r3, #8
 80032c8:	4972      	ldr	r1, [pc, #456]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	604b      	str	r3, [r1, #4]
 80032ce:	e025      	b.n	800331c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032d0:	4b70      	ldr	r3, [pc, #448]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a6f      	ldr	r2, [pc, #444]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 80032d6:	f043 0308 	orr.w	r3, r3, #8
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	4b6d      	ldr	r3, [pc, #436]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	496a      	ldr	r1, [pc, #424]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ee:	4b69      	ldr	r3, [pc, #420]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	021b      	lsls	r3, r3, #8
 80032fc:	4965      	ldr	r1, [pc, #404]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d109      	bne.n	800331c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fcff 	bl	8003d10 <RCC_SetFlashLatencyFromMSIRange>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e34d      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800331c:	f000 fc36 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 8003320:	4601      	mov	r1, r0
 8003322:	4b5c      	ldr	r3, [pc, #368]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	4a5a      	ldr	r2, [pc, #360]	; (8003498 <HAL_RCC_OscConfig+0x29c>)
 800332e:	5cd3      	ldrb	r3, [r2, r3]
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	fa21 f303 	lsr.w	r3, r1, r3
 8003338:	4a58      	ldr	r2, [pc, #352]	; (800349c <HAL_RCC_OscConfig+0x2a0>)
 800333a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800333c:	4b58      	ldr	r3, [pc, #352]	; (80034a0 <HAL_RCC_OscConfig+0x2a4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7fe fe75 	bl	8002030 <HAL_InitTick>
 8003346:	4603      	mov	r3, r0
 8003348:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d052      	beq.n	80033f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	e331      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d032      	beq.n	80033c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800335c:	4b4d      	ldr	r3, [pc, #308]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a4c      	ldr	r2, [pc, #304]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003368:	f7fe feb2 	bl	80020d0 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003370:	f7fe feae 	bl	80020d0 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e31a      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003382:	4b44      	ldr	r3, [pc, #272]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0f0      	beq.n	8003370 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800338e:	4b41      	ldr	r3, [pc, #260]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a40      	ldr	r2, [pc, #256]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 8003394:	f043 0308 	orr.w	r3, r3, #8
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	4b3e      	ldr	r3, [pc, #248]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	493b      	ldr	r1, [pc, #236]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ac:	4b39      	ldr	r3, [pc, #228]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	021b      	lsls	r3, r3, #8
 80033ba:	4936      	ldr	r1, [pc, #216]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	604b      	str	r3, [r1, #4]
 80033c0:	e01a      	b.n	80033f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033c2:	4b34      	ldr	r3, [pc, #208]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a33      	ldr	r2, [pc, #204]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033ce:	f7fe fe7f 	bl	80020d0 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033d6:	f7fe fe7b 	bl	80020d0 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e2e7      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033e8:	4b2a      	ldr	r3, [pc, #168]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f0      	bne.n	80033d6 <HAL_RCC_OscConfig+0x1da>
 80033f4:	e000      	b.n	80033f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d074      	beq.n	80034ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2b08      	cmp	r3, #8
 8003408:	d005      	beq.n	8003416 <HAL_RCC_OscConfig+0x21a>
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b0c      	cmp	r3, #12
 800340e:	d10e      	bne.n	800342e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2b03      	cmp	r3, #3
 8003414:	d10b      	bne.n	800342e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003416:	4b1f      	ldr	r3, [pc, #124]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d064      	beq.n	80034ec <HAL_RCC_OscConfig+0x2f0>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d160      	bne.n	80034ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e2c4      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003436:	d106      	bne.n	8003446 <HAL_RCC_OscConfig+0x24a>
 8003438:	4b16      	ldr	r3, [pc, #88]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a15      	ldr	r2, [pc, #84]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 800343e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	e01d      	b.n	8003482 <HAL_RCC_OscConfig+0x286>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800344e:	d10c      	bne.n	800346a <HAL_RCC_OscConfig+0x26e>
 8003450:	4b10      	ldr	r3, [pc, #64]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0f      	ldr	r2, [pc, #60]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 8003456:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a0c      	ldr	r2, [pc, #48]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 8003462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	e00b      	b.n	8003482 <HAL_RCC_OscConfig+0x286>
 800346a:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a09      	ldr	r2, [pc, #36]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 8003470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	4b07      	ldr	r3, [pc, #28]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a06      	ldr	r2, [pc, #24]	; (8003494 <HAL_RCC_OscConfig+0x298>)
 800347c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003480:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d01c      	beq.n	80034c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348a:	f7fe fe21 	bl	80020d0 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003490:	e011      	b.n	80034b6 <HAL_RCC_OscConfig+0x2ba>
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000
 8003498:	0800d200 	.word	0x0800d200
 800349c:	2000000c 	.word	0x2000000c
 80034a0:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a4:	f7fe fe14 	bl	80020d0 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e280      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034b6:	4baf      	ldr	r3, [pc, #700]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0x2a8>
 80034c2:	e014      	b.n	80034ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fe fe04 	bl	80020d0 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034cc:	f7fe fe00 	bl	80020d0 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e26c      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034de:	4ba5      	ldr	r3, [pc, #660]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x2d0>
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d060      	beq.n	80035bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d005      	beq.n	800350c <HAL_RCC_OscConfig+0x310>
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b0c      	cmp	r3, #12
 8003504:	d119      	bne.n	800353a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d116      	bne.n	800353a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800350c:	4b99      	ldr	r3, [pc, #612]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_OscConfig+0x328>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e249      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003524:	4b93      	ldr	r3, [pc, #588]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	061b      	lsls	r3, r3, #24
 8003532:	4990      	ldr	r1, [pc, #576]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 8003534:	4313      	orrs	r3, r2
 8003536:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003538:	e040      	b.n	80035bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d023      	beq.n	800358a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003542:	4b8c      	ldr	r3, [pc, #560]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a8b      	ldr	r2, [pc, #556]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 8003548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354e:	f7fe fdbf 	bl	80020d0 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003556:	f7fe fdbb 	bl	80020d0 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e227      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003568:	4b82      	ldr	r3, [pc, #520]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003574:	4b7f      	ldr	r3, [pc, #508]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	061b      	lsls	r3, r3, #24
 8003582:	497c      	ldr	r1, [pc, #496]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 8003584:	4313      	orrs	r3, r2
 8003586:	604b      	str	r3, [r1, #4]
 8003588:	e018      	b.n	80035bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800358a:	4b7a      	ldr	r3, [pc, #488]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a79      	ldr	r2, [pc, #484]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 8003590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003596:	f7fe fd9b 	bl	80020d0 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800359e:	f7fe fd97 	bl	80020d0 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e203      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035b0:	4b70      	ldr	r3, [pc, #448]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f0      	bne.n	800359e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d03c      	beq.n	8003642 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01c      	beq.n	800360a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d0:	4b68      	ldr	r3, [pc, #416]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 80035d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d6:	4a67      	ldr	r2, [pc, #412]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7fe fd76 	bl	80020d0 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e8:	f7fe fd72 	bl	80020d0 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e1de      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035fa:	4b5e      	ldr	r3, [pc, #376]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 80035fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0ef      	beq.n	80035e8 <HAL_RCC_OscConfig+0x3ec>
 8003608:	e01b      	b.n	8003642 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800360a:	4b5a      	ldr	r3, [pc, #360]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 800360c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003610:	4a58      	ldr	r2, [pc, #352]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361a:	f7fe fd59 	bl	80020d0 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003622:	f7fe fd55 	bl	80020d0 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e1c1      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003634:	4b4f      	ldr	r3, [pc, #316]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 8003636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1ef      	bne.n	8003622 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 80a6 	beq.w	800379c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003650:	2300      	movs	r3, #0
 8003652:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003654:	4b47      	ldr	r3, [pc, #284]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 8003656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10d      	bne.n	800367c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003660:	4b44      	ldr	r3, [pc, #272]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 8003662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003664:	4a43      	ldr	r2, [pc, #268]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 8003666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366a:	6593      	str	r3, [r2, #88]	; 0x58
 800366c:	4b41      	ldr	r3, [pc, #260]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 800366e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003678:	2301      	movs	r3, #1
 800367a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800367c:	4b3e      	ldr	r3, [pc, #248]	; (8003778 <HAL_RCC_OscConfig+0x57c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d118      	bne.n	80036ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003688:	4b3b      	ldr	r3, [pc, #236]	; (8003778 <HAL_RCC_OscConfig+0x57c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a3a      	ldr	r2, [pc, #232]	; (8003778 <HAL_RCC_OscConfig+0x57c>)
 800368e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003692:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003694:	f7fe fd1c 	bl	80020d0 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369c:	f7fe fd18 	bl	80020d0 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e184      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ae:	4b32      	ldr	r3, [pc, #200]	; (8003778 <HAL_RCC_OscConfig+0x57c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d108      	bne.n	80036d4 <HAL_RCC_OscConfig+0x4d8>
 80036c2:	4b2c      	ldr	r3, [pc, #176]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c8:	4a2a      	ldr	r2, [pc, #168]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036d2:	e024      	b.n	800371e <HAL_RCC_OscConfig+0x522>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b05      	cmp	r3, #5
 80036da:	d110      	bne.n	80036fe <HAL_RCC_OscConfig+0x502>
 80036dc:	4b25      	ldr	r3, [pc, #148]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 80036de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e2:	4a24      	ldr	r2, [pc, #144]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 80036e4:	f043 0304 	orr.w	r3, r3, #4
 80036e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ec:	4b21      	ldr	r3, [pc, #132]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 80036ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f2:	4a20      	ldr	r2, [pc, #128]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036fc:	e00f      	b.n	800371e <HAL_RCC_OscConfig+0x522>
 80036fe:	4b1d      	ldr	r3, [pc, #116]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003704:	4a1b      	ldr	r2, [pc, #108]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 8003706:	f023 0301 	bic.w	r3, r3, #1
 800370a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800370e:	4b19      	ldr	r3, [pc, #100]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003714:	4a17      	ldr	r2, [pc, #92]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 8003716:	f023 0304 	bic.w	r3, r3, #4
 800371a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d016      	beq.n	8003754 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003726:	f7fe fcd3 	bl	80020d0 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800372c:	e00a      	b.n	8003744 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372e:	f7fe fccf 	bl	80020d0 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	f241 3288 	movw	r2, #5000	; 0x1388
 800373c:	4293      	cmp	r3, r2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e139      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_RCC_OscConfig+0x578>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0ed      	beq.n	800372e <HAL_RCC_OscConfig+0x532>
 8003752:	e01a      	b.n	800378a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003754:	f7fe fcbc 	bl	80020d0 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800375a:	e00f      	b.n	800377c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375c:	f7fe fcb8 	bl	80020d0 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	f241 3288 	movw	r2, #5000	; 0x1388
 800376a:	4293      	cmp	r3, r2
 800376c:	d906      	bls.n	800377c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e122      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
 8003772:	bf00      	nop
 8003774:	40021000 	.word	0x40021000
 8003778:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800377c:	4b90      	ldr	r3, [pc, #576]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1e8      	bne.n	800375c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800378a:	7ffb      	ldrb	r3, [r7, #31]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d105      	bne.n	800379c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003790:	4b8b      	ldr	r3, [pc, #556]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	4a8a      	ldr	r2, [pc, #552]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 8003796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800379a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8108 	beq.w	80039b6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	f040 80d0 	bne.w	8003950 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037b0:	4b83      	ldr	r3, [pc, #524]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f003 0203 	and.w	r2, r3, #3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d130      	bne.n	8003826 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	3b01      	subs	r3, #1
 80037d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d127      	bne.n	8003826 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d11f      	bne.n	8003826 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037f0:	2a07      	cmp	r2, #7
 80037f2:	bf14      	ite	ne
 80037f4:	2201      	movne	r2, #1
 80037f6:	2200      	moveq	r2, #0
 80037f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d113      	bne.n	8003826 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003808:	085b      	lsrs	r3, r3, #1
 800380a:	3b01      	subs	r3, #1
 800380c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d109      	bne.n	8003826 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	085b      	lsrs	r3, r3, #1
 800381e:	3b01      	subs	r3, #1
 8003820:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003822:	429a      	cmp	r2, r3
 8003824:	d06e      	beq.n	8003904 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	2b0c      	cmp	r3, #12
 800382a:	d069      	beq.n	8003900 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800382c:	4b64      	ldr	r3, [pc, #400]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d105      	bne.n	8003844 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003838:	4b61      	ldr	r3, [pc, #388]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0b7      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003848:	4b5d      	ldr	r3, [pc, #372]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a5c      	ldr	r2, [pc, #368]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 800384e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003852:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003854:	f7fe fc3c 	bl	80020d0 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385c:	f7fe fc38 	bl	80020d0 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e0a4      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800386e:	4b54      	ldr	r3, [pc, #336]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800387a:	4b51      	ldr	r3, [pc, #324]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	4b51      	ldr	r3, [pc, #324]	; (80039c4 <HAL_RCC_OscConfig+0x7c8>)
 8003880:	4013      	ands	r3, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800388a:	3a01      	subs	r2, #1
 800388c:	0112      	lsls	r2, r2, #4
 800388e:	4311      	orrs	r1, r2
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003894:	0212      	lsls	r2, r2, #8
 8003896:	4311      	orrs	r1, r2
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800389c:	0852      	lsrs	r2, r2, #1
 800389e:	3a01      	subs	r2, #1
 80038a0:	0552      	lsls	r2, r2, #21
 80038a2:	4311      	orrs	r1, r2
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80038a8:	0852      	lsrs	r2, r2, #1
 80038aa:	3a01      	subs	r2, #1
 80038ac:	0652      	lsls	r2, r2, #25
 80038ae:	4311      	orrs	r1, r2
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038b4:	0912      	lsrs	r2, r2, #4
 80038b6:	0452      	lsls	r2, r2, #17
 80038b8:	430a      	orrs	r2, r1
 80038ba:	4941      	ldr	r1, [pc, #260]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038c0:	4b3f      	ldr	r3, [pc, #252]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a3e      	ldr	r2, [pc, #248]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 80038c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038cc:	4b3c      	ldr	r3, [pc, #240]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4a3b      	ldr	r2, [pc, #236]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 80038d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038d8:	f7fe fbfa 	bl	80020d0 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e0:	f7fe fbf6 	bl	80020d0 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e062      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038f2:	4b33      	ldr	r3, [pc, #204]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038fe:	e05a      	b.n	80039b6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e059      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003904:	4b2e      	ldr	r3, [pc, #184]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d152      	bne.n	80039b6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003910:	4b2b      	ldr	r3, [pc, #172]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a2a      	ldr	r2, [pc, #168]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 8003916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800391a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800391c:	4b28      	ldr	r3, [pc, #160]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4a27      	ldr	r2, [pc, #156]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 8003922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003926:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003928:	f7fe fbd2 	bl	80020d0 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003930:	f7fe fbce 	bl	80020d0 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e03a      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003942:	4b1f      	ldr	r3, [pc, #124]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0f0      	beq.n	8003930 <HAL_RCC_OscConfig+0x734>
 800394e:	e032      	b.n	80039b6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	2b0c      	cmp	r3, #12
 8003954:	d02d      	beq.n	80039b2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003956:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a19      	ldr	r2, [pc, #100]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 800395c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003960:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003962:	4b17      	ldr	r3, [pc, #92]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d105      	bne.n	800397a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800396e:	4b14      	ldr	r3, [pc, #80]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	4a13      	ldr	r2, [pc, #76]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 8003974:	f023 0303 	bic.w	r3, r3, #3
 8003978:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800397a:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	4a10      	ldr	r2, [pc, #64]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 8003980:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003988:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398a:	f7fe fba1 	bl	80020d0 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003992:	f7fe fb9d 	bl	80020d0 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e009      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_RCC_OscConfig+0x7c4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1f0      	bne.n	8003992 <HAL_RCC_OscConfig+0x796>
 80039b0:	e001      	b.n	80039b6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3720      	adds	r7, #32
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40021000 	.word	0x40021000
 80039c4:	f99d808c 	.word	0xf99d808c

080039c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0c8      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039dc:	4b66      	ldr	r3, [pc, #408]	; (8003b78 <HAL_RCC_ClockConfig+0x1b0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d910      	bls.n	8003a0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ea:	4b63      	ldr	r3, [pc, #396]	; (8003b78 <HAL_RCC_ClockConfig+0x1b0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 0207 	bic.w	r2, r3, #7
 80039f2:	4961      	ldr	r1, [pc, #388]	; (8003b78 <HAL_RCC_ClockConfig+0x1b0>)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fa:	4b5f      	ldr	r3, [pc, #380]	; (8003b78 <HAL_RCC_ClockConfig+0x1b0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0b0      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d04c      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d107      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a20:	4b56      	ldr	r3, [pc, #344]	; (8003b7c <HAL_RCC_ClockConfig+0x1b4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d121      	bne.n	8003a70 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e09e      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d107      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a38:	4b50      	ldr	r3, [pc, #320]	; (8003b7c <HAL_RCC_ClockConfig+0x1b4>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d115      	bne.n	8003a70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e092      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d107      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a50:	4b4a      	ldr	r3, [pc, #296]	; (8003b7c <HAL_RCC_ClockConfig+0x1b4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d109      	bne.n	8003a70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e086      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a60:	4b46      	ldr	r3, [pc, #280]	; (8003b7c <HAL_RCC_ClockConfig+0x1b4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e07e      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a70:	4b42      	ldr	r3, [pc, #264]	; (8003b7c <HAL_RCC_ClockConfig+0x1b4>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f023 0203 	bic.w	r2, r3, #3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	493f      	ldr	r1, [pc, #252]	; (8003b7c <HAL_RCC_ClockConfig+0x1b4>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a82:	f7fe fb25 	bl	80020d0 <HAL_GetTick>
 8003a86:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a88:	e00a      	b.n	8003aa0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a8a:	f7fe fb21 	bl	80020d0 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e066      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa0:	4b36      	ldr	r3, [pc, #216]	; (8003b7c <HAL_RCC_ClockConfig+0x1b4>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 020c 	and.w	r2, r3, #12
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d1eb      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d008      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003abe:	4b2f      	ldr	r3, [pc, #188]	; (8003b7c <HAL_RCC_ClockConfig+0x1b4>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	492c      	ldr	r1, [pc, #176]	; (8003b7c <HAL_RCC_ClockConfig+0x1b4>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad0:	4b29      	ldr	r3, [pc, #164]	; (8003b78 <HAL_RCC_ClockConfig+0x1b0>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d210      	bcs.n	8003b00 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	4b26      	ldr	r3, [pc, #152]	; (8003b78 <HAL_RCC_ClockConfig+0x1b0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 0207 	bic.w	r2, r3, #7
 8003ae6:	4924      	ldr	r1, [pc, #144]	; (8003b78 <HAL_RCC_ClockConfig+0x1b0>)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aee:	4b22      	ldr	r3, [pc, #136]	; (8003b78 <HAL_RCC_ClockConfig+0x1b0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d001      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e036      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b0c:	4b1b      	ldr	r3, [pc, #108]	; (8003b7c <HAL_RCC_ClockConfig+0x1b4>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4918      	ldr	r1, [pc, #96]	; (8003b7c <HAL_RCC_ClockConfig+0x1b4>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d009      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b2a:	4b14      	ldr	r3, [pc, #80]	; (8003b7c <HAL_RCC_ClockConfig+0x1b4>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4910      	ldr	r1, [pc, #64]	; (8003b7c <HAL_RCC_ClockConfig+0x1b4>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b3e:	f000 f825 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 8003b42:	4601      	mov	r1, r0
 8003b44:	4b0d      	ldr	r3, [pc, #52]	; (8003b7c <HAL_RCC_ClockConfig+0x1b4>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	091b      	lsrs	r3, r3, #4
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	4a0c      	ldr	r2, [pc, #48]	; (8003b80 <HAL_RCC_ClockConfig+0x1b8>)
 8003b50:	5cd3      	ldrb	r3, [r2, r3]
 8003b52:	f003 031f 	and.w	r3, r3, #31
 8003b56:	fa21 f303 	lsr.w	r3, r1, r3
 8003b5a:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b5e:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <HAL_RCC_ClockConfig+0x1c0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fa64 	bl	8002030 <HAL_InitTick>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b6c:	7afb      	ldrb	r3, [r7, #11]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40022000 	.word	0x40022000
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	0800d200 	.word	0x0800d200
 8003b84:	2000000c 	.word	0x2000000c
 8003b88:	20000010 	.word	0x20000010

08003b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b089      	sub	sp, #36	; 0x24
 8003b90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61fb      	str	r3, [r7, #28]
 8003b96:	2300      	movs	r3, #0
 8003b98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b9a:	4b3d      	ldr	r3, [pc, #244]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ba4:	4b3a      	ldr	r3, [pc, #232]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b0c      	cmp	r3, #12
 8003bb8:	d121      	bne.n	8003bfe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d11e      	bne.n	8003bfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bc0:	4b33      	ldr	r3, [pc, #204]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0308 	and.w	r3, r3, #8
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d107      	bne.n	8003bdc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bcc:	4b30      	ldr	r3, [pc, #192]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd2:	0a1b      	lsrs	r3, r3, #8
 8003bd4:	f003 030f 	and.w	r3, r3, #15
 8003bd8:	61fb      	str	r3, [r7, #28]
 8003bda:	e005      	b.n	8003be8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bdc:	4b2c      	ldr	r3, [pc, #176]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	091b      	lsrs	r3, r3, #4
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003be8:	4a2a      	ldr	r2, [pc, #168]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10d      	bne.n	8003c14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bfc:	e00a      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d102      	bne.n	8003c0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c04:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c06:	61bb      	str	r3, [r7, #24]
 8003c08:	e004      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d101      	bne.n	8003c14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c10:	4b22      	ldr	r3, [pc, #136]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003c12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	d133      	bne.n	8003c82 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c1a:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d002      	beq.n	8003c30 <HAL_RCC_GetSysClockFreq+0xa4>
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d003      	beq.n	8003c36 <HAL_RCC_GetSysClockFreq+0xaa>
 8003c2e:	e005      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c30:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c32:	617b      	str	r3, [r7, #20]
      break;
 8003c34:	e005      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c36:	4b19      	ldr	r3, [pc, #100]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003c38:	617b      	str	r3, [r7, #20]
      break;
 8003c3a:	e002      	b.n	8003c42 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	617b      	str	r3, [r7, #20]
      break;
 8003c40:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c42:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	091b      	lsrs	r3, r3, #4
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c50:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	fb02 f203 	mul.w	r2, r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c66:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c68:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	0e5b      	lsrs	r3, r3, #25
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	3301      	adds	r3, #1
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c80:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c82:	69bb      	ldr	r3, [r7, #24]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3724      	adds	r7, #36	; 0x24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	40021000 	.word	0x40021000
 8003c94:	0800d218 	.word	0x0800d218
 8003c98:	00f42400 	.word	0x00f42400
 8003c9c:	007a1200 	.word	0x007a1200

08003ca0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ca4:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	2000000c 	.word	0x2000000c

08003cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cbc:	f7ff fff0 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 8003cc0:	4601      	mov	r1, r0
 8003cc2:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	0a1b      	lsrs	r3, r3, #8
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	4a04      	ldr	r2, [pc, #16]	; (8003ce0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cce:	5cd3      	ldrb	r3, [r2, r3]
 8003cd0:	f003 031f 	and.w	r3, r3, #31
 8003cd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	0800d210 	.word	0x0800d210

08003ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ce8:	f7ff ffda 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 8003cec:	4601      	mov	r1, r0
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	0adb      	lsrs	r3, r3, #11
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cfa:	5cd3      	ldrb	r3, [r2, r3]
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	0800d210 	.word	0x0800d210

08003d10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d18:	2300      	movs	r3, #0
 8003d1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d1c:	4b2a      	ldr	r3, [pc, #168]	; (8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d28:	f7ff fa04 	bl	8003134 <HAL_PWREx_GetVoltageRange>
 8003d2c:	6178      	str	r0, [r7, #20]
 8003d2e:	e014      	b.n	8003d5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d30:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d34:	4a24      	ldr	r2, [pc, #144]	; (8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d3c:	4b22      	ldr	r3, [pc, #136]	; (8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d48:	f7ff f9f4 	bl	8003134 <HAL_PWREx_GetVoltageRange>
 8003d4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d4e:	4b1e      	ldr	r3, [pc, #120]	; (8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d52:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d60:	d10b      	bne.n	8003d7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b80      	cmp	r3, #128	; 0x80
 8003d66:	d919      	bls.n	8003d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2ba0      	cmp	r3, #160	; 0xa0
 8003d6c:	d902      	bls.n	8003d74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d6e:	2302      	movs	r3, #2
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	e013      	b.n	8003d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d74:	2301      	movs	r3, #1
 8003d76:	613b      	str	r3, [r7, #16]
 8003d78:	e010      	b.n	8003d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b80      	cmp	r3, #128	; 0x80
 8003d7e:	d902      	bls.n	8003d86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d80:	2303      	movs	r3, #3
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	e00a      	b.n	8003d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b80      	cmp	r3, #128	; 0x80
 8003d8a:	d102      	bne.n	8003d92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	e004      	b.n	8003d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b70      	cmp	r3, #112	; 0x70
 8003d96:	d101      	bne.n	8003d9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d98:	2301      	movs	r3, #1
 8003d9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f023 0207 	bic.w	r2, r3, #7
 8003da4:	4909      	ldr	r1, [pc, #36]	; (8003dcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003dac:	4b07      	ldr	r3, [pc, #28]	; (8003dcc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d001      	beq.n	8003dbe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	40022000 	.word	0x40022000

08003dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003dd8:	2300      	movs	r3, #0
 8003dda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ddc:	2300      	movs	r3, #0
 8003dde:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d03f      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003df4:	d01c      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dfa:	d802      	bhi.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00e      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003e00:	e01f      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003e02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e06:	d003      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003e08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e0c:	d01c      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003e0e:	e018      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e10:	4b85      	ldr	r3, [pc, #532]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	4a84      	ldr	r2, [pc, #528]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e1a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e1c:	e015      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3304      	adds	r3, #4
 8003e22:	2100      	movs	r1, #0
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 fab9 	bl	800439c <RCCEx_PLLSAI1_Config>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e2e:	e00c      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3320      	adds	r3, #32
 8003e34:	2100      	movs	r1, #0
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fba0 	bl	800457c <RCCEx_PLLSAI2_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e40:	e003      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	74fb      	strb	r3, [r7, #19]
      break;
 8003e46:	e000      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003e48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e4a:	7cfb      	ldrb	r3, [r7, #19]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10b      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e50:	4b75      	ldr	r3, [pc, #468]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e5e:	4972      	ldr	r1, [pc, #456]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e66:	e001      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e68:	7cfb      	ldrb	r3, [r7, #19]
 8003e6a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d03f      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e80:	d01c      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003e82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e86:	d802      	bhi.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00e      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003e8c:	e01f      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e92:	d003      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003e94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e98:	d01c      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003e9a:	e018      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e9c:	4b62      	ldr	r3, [pc, #392]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4a61      	ldr	r2, [pc, #388]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ea8:	e015      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3304      	adds	r3, #4
 8003eae:	2100      	movs	r1, #0
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fa73 	bl	800439c <RCCEx_PLLSAI1_Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003eba:	e00c      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3320      	adds	r3, #32
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fb5a 	bl	800457c <RCCEx_PLLSAI2_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ecc:	e003      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ed2:	e000      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003ed4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed6:	7cfb      	ldrb	r3, [r7, #19]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10b      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003edc:	4b52      	ldr	r3, [pc, #328]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eea:	494f      	ldr	r1, [pc, #316]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ef2:	e001      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef4:	7cfb      	ldrb	r3, [r7, #19]
 8003ef6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 80a0 	beq.w	8004046 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f06:	2300      	movs	r3, #0
 8003f08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f0a:	4b47      	ldr	r3, [pc, #284]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00d      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f20:	4b41      	ldr	r3, [pc, #260]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f24:	4a40      	ldr	r2, [pc, #256]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f2c:	4b3e      	ldr	r3, [pc, #248]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f3c:	4b3b      	ldr	r3, [pc, #236]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a3a      	ldr	r2, [pc, #232]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f48:	f7fe f8c2 	bl	80020d0 <HAL_GetTick>
 8003f4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f4e:	e009      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f50:	f7fe f8be 	bl	80020d0 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d902      	bls.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	74fb      	strb	r3, [r7, #19]
        break;
 8003f62:	e005      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f64:	4b31      	ldr	r3, [pc, #196]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0ef      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003f70:	7cfb      	ldrb	r3, [r7, #19]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d15c      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f76:	4b2c      	ldr	r3, [pc, #176]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01f      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d019      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f94:	4b24      	ldr	r3, [pc, #144]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fa0:	4b21      	ldr	r3, [pc, #132]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa6:	4a20      	ldr	r2, [pc, #128]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fb0:	4b1d      	ldr	r3, [pc, #116]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb6:	4a1c      	ldr	r2, [pc, #112]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fc0:	4a19      	ldr	r2, [pc, #100]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d016      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd2:	f7fe f87d 	bl	80020d0 <HAL_GetTick>
 8003fd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fd8:	e00b      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fda:	f7fe f879 	bl	80020d0 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d902      	bls.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	74fb      	strb	r3, [r7, #19]
            break;
 8003ff0:	e006      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ff2:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0ec      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004000:	7cfb      	ldrb	r3, [r7, #19]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10c      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004006:	4b08      	ldr	r3, [pc, #32]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004016:	4904      	ldr	r1, [pc, #16]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800401e:	e009      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004020:	7cfb      	ldrb	r3, [r7, #19]
 8004022:	74bb      	strb	r3, [r7, #18]
 8004024:	e006      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004026:	bf00      	nop
 8004028:	40021000 	.word	0x40021000
 800402c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004034:	7c7b      	ldrb	r3, [r7, #17]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d105      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800403a:	4b9e      	ldr	r3, [pc, #632]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800403c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403e:	4a9d      	ldr	r2, [pc, #628]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004044:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004052:	4b98      	ldr	r3, [pc, #608]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004058:	f023 0203 	bic.w	r2, r3, #3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	4994      	ldr	r1, [pc, #592]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004074:	4b8f      	ldr	r3, [pc, #572]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	f023 020c 	bic.w	r2, r3, #12
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004082:	498c      	ldr	r1, [pc, #560]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004096:	4b87      	ldr	r3, [pc, #540]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	4983      	ldr	r1, [pc, #524]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040b8:	4b7e      	ldr	r3, [pc, #504]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c6:	497b      	ldr	r1, [pc, #492]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0310 	and.w	r3, r3, #16
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040da:	4b76      	ldr	r3, [pc, #472]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e8:	4972      	ldr	r1, [pc, #456]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040fc:	4b6d      	ldr	r3, [pc, #436]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004102:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410a:	496a      	ldr	r1, [pc, #424]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800411e:	4b65      	ldr	r3, [pc, #404]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004124:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412c:	4961      	ldr	r1, [pc, #388]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004140:	4b5c      	ldr	r3, [pc, #368]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800414e:	4959      	ldr	r1, [pc, #356]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004162:	4b54      	ldr	r3, [pc, #336]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004170:	4950      	ldr	r1, [pc, #320]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004184:	4b4b      	ldr	r3, [pc, #300]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	4948      	ldr	r1, [pc, #288]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041a6:	4b43      	ldr	r3, [pc, #268]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b4:	493f      	ldr	r1, [pc, #252]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d028      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041c8:	4b3a      	ldr	r3, [pc, #232]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d6:	4937      	ldr	r1, [pc, #220]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041e6:	d106      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041e8:	4b32      	ldr	r3, [pc, #200]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	4a31      	ldr	r2, [pc, #196]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041f2:	60d3      	str	r3, [r2, #12]
 80041f4:	e011      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041fe:	d10c      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3304      	adds	r3, #4
 8004204:	2101      	movs	r1, #1
 8004206:	4618      	mov	r0, r3
 8004208:	f000 f8c8 	bl	800439c <RCCEx_PLLSAI1_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004210:	7cfb      	ldrb	r3, [r7, #19]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004216:	7cfb      	ldrb	r3, [r7, #19]
 8004218:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d028      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004226:	4b23      	ldr	r3, [pc, #140]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004234:	491f      	ldr	r1, [pc, #124]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004244:	d106      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004246:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	4a1a      	ldr	r2, [pc, #104]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800424c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004250:	60d3      	str	r3, [r2, #12]
 8004252:	e011      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004258:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800425c:	d10c      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3304      	adds	r3, #4
 8004262:	2101      	movs	r1, #1
 8004264:	4618      	mov	r0, r3
 8004266:	f000 f899 	bl	800439c <RCCEx_PLLSAI1_Config>
 800426a:	4603      	mov	r3, r0
 800426c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800426e:	7cfb      	ldrb	r3, [r7, #19]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004274:	7cfb      	ldrb	r3, [r7, #19]
 8004276:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d02b      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004292:	4908      	ldr	r1, [pc, #32]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800429e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042a2:	d109      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042a4:	4b03      	ldr	r3, [pc, #12]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	4a02      	ldr	r2, [pc, #8]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ae:	60d3      	str	r3, [r2, #12]
 80042b0:	e014      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80042b2:	bf00      	nop
 80042b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042c0:	d10c      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3304      	adds	r3, #4
 80042c6:	2101      	movs	r1, #1
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 f867 	bl	800439c <RCCEx_PLLSAI1_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042d2:	7cfb      	ldrb	r3, [r7, #19]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80042d8:	7cfb      	ldrb	r3, [r7, #19]
 80042da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d02f      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042e8:	4b2b      	ldr	r3, [pc, #172]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042f6:	4928      	ldr	r1, [pc, #160]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004302:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004306:	d10d      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3304      	adds	r3, #4
 800430c:	2102      	movs	r1, #2
 800430e:	4618      	mov	r0, r3
 8004310:	f000 f844 	bl	800439c <RCCEx_PLLSAI1_Config>
 8004314:	4603      	mov	r3, r0
 8004316:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004318:	7cfb      	ldrb	r3, [r7, #19]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d014      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800431e:	7cfb      	ldrb	r3, [r7, #19]
 8004320:	74bb      	strb	r3, [r7, #18]
 8004322:	e011      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800432c:	d10c      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3320      	adds	r3, #32
 8004332:	2102      	movs	r1, #2
 8004334:	4618      	mov	r0, r3
 8004336:	f000 f921 	bl	800457c <RCCEx_PLLSAI2_Config>
 800433a:	4603      	mov	r3, r0
 800433c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800433e:	7cfb      	ldrb	r3, [r7, #19]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004344:	7cfb      	ldrb	r3, [r7, #19]
 8004346:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004354:	4b10      	ldr	r3, [pc, #64]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004362:	490d      	ldr	r1, [pc, #52]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00b      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004376:	4b08      	ldr	r3, [pc, #32]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004386:	4904      	ldr	r1, [pc, #16]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800438e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40021000 	.word	0x40021000

0800439c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043aa:	4b73      	ldr	r3, [pc, #460]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d018      	beq.n	80043e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043b6:	4b70      	ldr	r3, [pc, #448]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f003 0203 	and.w	r2, r3, #3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d10d      	bne.n	80043e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
       ||
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80043ce:	4b6a      	ldr	r3, [pc, #424]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	091b      	lsrs	r3, r3, #4
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
       ||
 80043de:	429a      	cmp	r2, r3
 80043e0:	d044      	beq.n	800446c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	73fb      	strb	r3, [r7, #15]
 80043e6:	e041      	b.n	800446c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d00c      	beq.n	800440a <RCCEx_PLLSAI1_Config+0x6e>
 80043f0:	2b03      	cmp	r3, #3
 80043f2:	d013      	beq.n	800441c <RCCEx_PLLSAI1_Config+0x80>
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d120      	bne.n	800443a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043f8:	4b5f      	ldr	r3, [pc, #380]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d11d      	bne.n	8004440 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004408:	e01a      	b.n	8004440 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800440a:	4b5b      	ldr	r3, [pc, #364]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004412:	2b00      	cmp	r3, #0
 8004414:	d116      	bne.n	8004444 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800441a:	e013      	b.n	8004444 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800441c:	4b56      	ldr	r3, [pc, #344]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10f      	bne.n	8004448 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004428:	4b53      	ldr	r3, [pc, #332]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d109      	bne.n	8004448 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004438:	e006      	b.n	8004448 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	73fb      	strb	r3, [r7, #15]
      break;
 800443e:	e004      	b.n	800444a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004440:	bf00      	nop
 8004442:	e002      	b.n	800444a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004444:	bf00      	nop
 8004446:	e000      	b.n	800444a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004448:	bf00      	nop
    }

    if(status == HAL_OK)
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10d      	bne.n	800446c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004450:	4b49      	ldr	r3, [pc, #292]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6819      	ldr	r1, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	3b01      	subs	r3, #1
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	430b      	orrs	r3, r1
 8004466:	4944      	ldr	r1, [pc, #272]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004468:	4313      	orrs	r3, r2
 800446a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d17d      	bne.n	800456e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004472:	4b41      	ldr	r3, [pc, #260]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a40      	ldr	r2, [pc, #256]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004478:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800447c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800447e:	f7fd fe27 	bl	80020d0 <HAL_GetTick>
 8004482:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004484:	e009      	b.n	800449a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004486:	f7fd fe23 	bl	80020d0 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d902      	bls.n	800449a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	73fb      	strb	r3, [r7, #15]
        break;
 8004498:	e005      	b.n	80044a6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800449a:	4b37      	ldr	r3, [pc, #220]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1ef      	bne.n	8004486 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d160      	bne.n	800456e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d111      	bne.n	80044d6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044b2:	4b31      	ldr	r3, [pc, #196]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80044ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6892      	ldr	r2, [r2, #8]
 80044c2:	0211      	lsls	r1, r2, #8
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	68d2      	ldr	r2, [r2, #12]
 80044c8:	0912      	lsrs	r2, r2, #4
 80044ca:	0452      	lsls	r2, r2, #17
 80044cc:	430a      	orrs	r2, r1
 80044ce:	492a      	ldr	r1, [pc, #168]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	610b      	str	r3, [r1, #16]
 80044d4:	e027      	b.n	8004526 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d112      	bne.n	8004502 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044dc:	4b26      	ldr	r3, [pc, #152]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80044e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6892      	ldr	r2, [r2, #8]
 80044ec:	0211      	lsls	r1, r2, #8
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6912      	ldr	r2, [r2, #16]
 80044f2:	0852      	lsrs	r2, r2, #1
 80044f4:	3a01      	subs	r2, #1
 80044f6:	0552      	lsls	r2, r2, #21
 80044f8:	430a      	orrs	r2, r1
 80044fa:	491f      	ldr	r1, [pc, #124]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	610b      	str	r3, [r1, #16]
 8004500:	e011      	b.n	8004526 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004502:	4b1d      	ldr	r3, [pc, #116]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800450a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6892      	ldr	r2, [r2, #8]
 8004512:	0211      	lsls	r1, r2, #8
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6952      	ldr	r2, [r2, #20]
 8004518:	0852      	lsrs	r2, r2, #1
 800451a:	3a01      	subs	r2, #1
 800451c:	0652      	lsls	r2, r2, #25
 800451e:	430a      	orrs	r2, r1
 8004520:	4915      	ldr	r1, [pc, #84]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004522:	4313      	orrs	r3, r2
 8004524:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004526:	4b14      	ldr	r3, [pc, #80]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a13      	ldr	r2, [pc, #76]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 800452c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004530:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004532:	f7fd fdcd 	bl	80020d0 <HAL_GetTick>
 8004536:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004538:	e009      	b.n	800454e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800453a:	f7fd fdc9 	bl	80020d0 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d902      	bls.n	800454e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	73fb      	strb	r3, [r7, #15]
          break;
 800454c:	e005      	b.n	800455a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800454e:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0ef      	beq.n	800453a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d106      	bne.n	800456e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004560:	4b05      	ldr	r3, [pc, #20]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	4903      	ldr	r1, [pc, #12]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 800456a:	4313      	orrs	r3, r2
 800456c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800456e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40021000 	.word	0x40021000

0800457c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800458a:	4b68      	ldr	r3, [pc, #416]	; (800472c <RCCEx_PLLSAI2_Config+0x1b0>)
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d018      	beq.n	80045c8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004596:	4b65      	ldr	r3, [pc, #404]	; (800472c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f003 0203 	and.w	r2, r3, #3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d10d      	bne.n	80045c2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
       ||
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80045ae:	4b5f      	ldr	r3, [pc, #380]	; (800472c <RCCEx_PLLSAI2_Config+0x1b0>)
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	091b      	lsrs	r3, r3, #4
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
       ||
 80045be:	429a      	cmp	r2, r3
 80045c0:	d044      	beq.n	800464c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	73fb      	strb	r3, [r7, #15]
 80045c6:	e041      	b.n	800464c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d00c      	beq.n	80045ea <RCCEx_PLLSAI2_Config+0x6e>
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d013      	beq.n	80045fc <RCCEx_PLLSAI2_Config+0x80>
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d120      	bne.n	800461a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045d8:	4b54      	ldr	r3, [pc, #336]	; (800472c <RCCEx_PLLSAI2_Config+0x1b0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d11d      	bne.n	8004620 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045e8:	e01a      	b.n	8004620 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045ea:	4b50      	ldr	r3, [pc, #320]	; (800472c <RCCEx_PLLSAI2_Config+0x1b0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d116      	bne.n	8004624 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045fa:	e013      	b.n	8004624 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045fc:	4b4b      	ldr	r3, [pc, #300]	; (800472c <RCCEx_PLLSAI2_Config+0x1b0>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10f      	bne.n	8004628 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004608:	4b48      	ldr	r3, [pc, #288]	; (800472c <RCCEx_PLLSAI2_Config+0x1b0>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004618:	e006      	b.n	8004628 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	73fb      	strb	r3, [r7, #15]
      break;
 800461e:	e004      	b.n	800462a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004620:	bf00      	nop
 8004622:	e002      	b.n	800462a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004624:	bf00      	nop
 8004626:	e000      	b.n	800462a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004628:	bf00      	nop
    }

    if(status == HAL_OK)
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10d      	bne.n	800464c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004630:	4b3e      	ldr	r3, [pc, #248]	; (800472c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6819      	ldr	r1, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	3b01      	subs	r3, #1
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	430b      	orrs	r3, r1
 8004646:	4939      	ldr	r1, [pc, #228]	; (800472c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004648:	4313      	orrs	r3, r2
 800464a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d167      	bne.n	8004722 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004652:	4b36      	ldr	r3, [pc, #216]	; (800472c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a35      	ldr	r2, [pc, #212]	; (800472c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800465c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800465e:	f7fd fd37 	bl	80020d0 <HAL_GetTick>
 8004662:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004664:	e009      	b.n	800467a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004666:	f7fd fd33 	bl	80020d0 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d902      	bls.n	800467a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	73fb      	strb	r3, [r7, #15]
        break;
 8004678:	e005      	b.n	8004686 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800467a:	4b2c      	ldr	r3, [pc, #176]	; (800472c <RCCEx_PLLSAI2_Config+0x1b0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1ef      	bne.n	8004666 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d14a      	bne.n	8004722 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d111      	bne.n	80046b6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004692:	4b26      	ldr	r3, [pc, #152]	; (800472c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800469a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6892      	ldr	r2, [r2, #8]
 80046a2:	0211      	lsls	r1, r2, #8
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	68d2      	ldr	r2, [r2, #12]
 80046a8:	0912      	lsrs	r2, r2, #4
 80046aa:	0452      	lsls	r2, r2, #17
 80046ac:	430a      	orrs	r2, r1
 80046ae:	491f      	ldr	r1, [pc, #124]	; (800472c <RCCEx_PLLSAI2_Config+0x1b0>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	614b      	str	r3, [r1, #20]
 80046b4:	e011      	b.n	80046da <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046b6:	4b1d      	ldr	r3, [pc, #116]	; (800472c <RCCEx_PLLSAI2_Config+0x1b0>)
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80046be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6892      	ldr	r2, [r2, #8]
 80046c6:	0211      	lsls	r1, r2, #8
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6912      	ldr	r2, [r2, #16]
 80046cc:	0852      	lsrs	r2, r2, #1
 80046ce:	3a01      	subs	r2, #1
 80046d0:	0652      	lsls	r2, r2, #25
 80046d2:	430a      	orrs	r2, r1
 80046d4:	4915      	ldr	r1, [pc, #84]	; (800472c <RCCEx_PLLSAI2_Config+0x1b0>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80046da:	4b14      	ldr	r3, [pc, #80]	; (800472c <RCCEx_PLLSAI2_Config+0x1b0>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a13      	ldr	r2, [pc, #76]	; (800472c <RCCEx_PLLSAI2_Config+0x1b0>)
 80046e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e6:	f7fd fcf3 	bl	80020d0 <HAL_GetTick>
 80046ea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046ec:	e009      	b.n	8004702 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046ee:	f7fd fcef 	bl	80020d0 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d902      	bls.n	8004702 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	73fb      	strb	r3, [r7, #15]
          break;
 8004700:	e005      	b.n	800470e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004702:	4b0a      	ldr	r3, [pc, #40]	; (800472c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0ef      	beq.n	80046ee <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d106      	bne.n	8004722 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004716:	695a      	ldr	r2, [r3, #20]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	4903      	ldr	r1, [pc, #12]	; (800472c <RCCEx_PLLSAI2_Config+0x1b0>)
 800471e:	4313      	orrs	r3, r2
 8004720:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004722:	7bfb      	ldrb	r3, [r7, #15]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40021000 	.word	0x40021000

08004730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e049      	b.n	80047d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fd fb80 	bl	8001e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3304      	adds	r3, #4
 800476c:	4619      	mov	r1, r3
 800476e:	4610      	mov	r0, r2
 8004770:	f000 fa1c 	bl	8004bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d001      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e04f      	b.n	8004898 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a23      	ldr	r2, [pc, #140]	; (80048a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d01d      	beq.n	8004856 <HAL_TIM_Base_Start_IT+0x76>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004822:	d018      	beq.n	8004856 <HAL_TIM_Base_Start_IT+0x76>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a1f      	ldr	r2, [pc, #124]	; (80048a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d013      	beq.n	8004856 <HAL_TIM_Base_Start_IT+0x76>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a1e      	ldr	r2, [pc, #120]	; (80048ac <HAL_TIM_Base_Start_IT+0xcc>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d00e      	beq.n	8004856 <HAL_TIM_Base_Start_IT+0x76>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a1c      	ldr	r2, [pc, #112]	; (80048b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d009      	beq.n	8004856 <HAL_TIM_Base_Start_IT+0x76>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a1b      	ldr	r2, [pc, #108]	; (80048b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d004      	beq.n	8004856 <HAL_TIM_Base_Start_IT+0x76>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a19      	ldr	r2, [pc, #100]	; (80048b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d115      	bne.n	8004882 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	4b17      	ldr	r3, [pc, #92]	; (80048bc <HAL_TIM_Base_Start_IT+0xdc>)
 800485e:	4013      	ands	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b06      	cmp	r3, #6
 8004866:	d015      	beq.n	8004894 <HAL_TIM_Base_Start_IT+0xb4>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486e:	d011      	beq.n	8004894 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004880:	e008      	b.n	8004894 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0201 	orr.w	r2, r2, #1
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	e000      	b.n	8004896 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004894:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	40012c00 	.word	0x40012c00
 80048a8:	40000400 	.word	0x40000400
 80048ac:	40000800 	.word	0x40000800
 80048b0:	40000c00 	.word	0x40000c00
 80048b4:	40013400 	.word	0x40013400
 80048b8:	40014000 	.word	0x40014000
 80048bc:	00010007 	.word	0x00010007

080048c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0201 	bic.w	r2, r2, #1
 80048d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6a1a      	ldr	r2, [r3, #32]
 80048de:	f241 1311 	movw	r3, #4369	; 0x1111
 80048e2:	4013      	ands	r3, r2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10f      	bne.n	8004908 <HAL_TIM_Base_Stop_IT+0x48>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6a1a      	ldr	r2, [r3, #32]
 80048ee:	f240 4344 	movw	r3, #1092	; 0x444
 80048f2:	4013      	ands	r3, r2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d107      	bne.n	8004908 <HAL_TIM_Base_Stop_IT+0x48>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0201 	bic.w	r2, r2, #1
 8004906:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b082      	sub	sp, #8
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b02      	cmp	r3, #2
 8004932:	d122      	bne.n	800497a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b02      	cmp	r3, #2
 8004940:	d11b      	bne.n	800497a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f06f 0202 	mvn.w	r2, #2
 800494a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	f003 0303 	and.w	r3, r3, #3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f905 	bl	8004b70 <HAL_TIM_IC_CaptureCallback>
 8004966:	e005      	b.n	8004974 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f8f7 	bl	8004b5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f908 	bl	8004b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b04      	cmp	r3, #4
 8004986:	d122      	bne.n	80049ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b04      	cmp	r3, #4
 8004994:	d11b      	bne.n	80049ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f06f 0204 	mvn.w	r2, #4
 800499e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f8db 	bl	8004b70 <HAL_TIM_IC_CaptureCallback>
 80049ba:	e005      	b.n	80049c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f8cd 	bl	8004b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f8de 	bl	8004b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d122      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d11b      	bne.n	8004a22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f06f 0208 	mvn.w	r2, #8
 80049f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2204      	movs	r2, #4
 80049f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	f003 0303 	and.w	r3, r3, #3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f8b1 	bl	8004b70 <HAL_TIM_IC_CaptureCallback>
 8004a0e:	e005      	b.n	8004a1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f8a3 	bl	8004b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f8b4 	bl	8004b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	2b10      	cmp	r3, #16
 8004a2e:	d122      	bne.n	8004a76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f003 0310 	and.w	r3, r3, #16
 8004a3a:	2b10      	cmp	r3, #16
 8004a3c:	d11b      	bne.n	8004a76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f06f 0210 	mvn.w	r2, #16
 8004a46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2208      	movs	r2, #8
 8004a4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f887 	bl	8004b70 <HAL_TIM_IC_CaptureCallback>
 8004a62:	e005      	b.n	8004a70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f879 	bl	8004b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f88a 	bl	8004b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d10e      	bne.n	8004aa2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d107      	bne.n	8004aa2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f06f 0201 	mvn.w	r2, #1
 8004a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7fc f98d 	bl	8000dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aac:	2b80      	cmp	r3, #128	; 0x80
 8004aae:	d10e      	bne.n	8004ace <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aba:	2b80      	cmp	r3, #128	; 0x80
 8004abc:	d107      	bne.n	8004ace <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f99b 	bl	8004e04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004adc:	d10e      	bne.n	8004afc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae8:	2b80      	cmp	r3, #128	; 0x80
 8004aea:	d107      	bne.n	8004afc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f98e 	bl	8004e18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b06:	2b40      	cmp	r3, #64	; 0x40
 8004b08:	d10e      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b14:	2b40      	cmp	r3, #64	; 0x40
 8004b16:	d107      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f838 	bl	8004b98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d10e      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0320 	and.w	r3, r3, #32
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d107      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0220 	mvn.w	r2, #32
 8004b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f94e 	bl	8004df0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b54:	bf00      	nop
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a40      	ldr	r2, [pc, #256]	; (8004cc0 <TIM_Base_SetConfig+0x114>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d013      	beq.n	8004bec <TIM_Base_SetConfig+0x40>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bca:	d00f      	beq.n	8004bec <TIM_Base_SetConfig+0x40>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a3d      	ldr	r2, [pc, #244]	; (8004cc4 <TIM_Base_SetConfig+0x118>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d00b      	beq.n	8004bec <TIM_Base_SetConfig+0x40>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a3c      	ldr	r2, [pc, #240]	; (8004cc8 <TIM_Base_SetConfig+0x11c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d007      	beq.n	8004bec <TIM_Base_SetConfig+0x40>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a3b      	ldr	r2, [pc, #236]	; (8004ccc <TIM_Base_SetConfig+0x120>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d003      	beq.n	8004bec <TIM_Base_SetConfig+0x40>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a3a      	ldr	r2, [pc, #232]	; (8004cd0 <TIM_Base_SetConfig+0x124>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d108      	bne.n	8004bfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a2f      	ldr	r2, [pc, #188]	; (8004cc0 <TIM_Base_SetConfig+0x114>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d01f      	beq.n	8004c46 <TIM_Base_SetConfig+0x9a>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0c:	d01b      	beq.n	8004c46 <TIM_Base_SetConfig+0x9a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a2c      	ldr	r2, [pc, #176]	; (8004cc4 <TIM_Base_SetConfig+0x118>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d017      	beq.n	8004c46 <TIM_Base_SetConfig+0x9a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a2b      	ldr	r2, [pc, #172]	; (8004cc8 <TIM_Base_SetConfig+0x11c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d013      	beq.n	8004c46 <TIM_Base_SetConfig+0x9a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a2a      	ldr	r2, [pc, #168]	; (8004ccc <TIM_Base_SetConfig+0x120>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00f      	beq.n	8004c46 <TIM_Base_SetConfig+0x9a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a29      	ldr	r2, [pc, #164]	; (8004cd0 <TIM_Base_SetConfig+0x124>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00b      	beq.n	8004c46 <TIM_Base_SetConfig+0x9a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a28      	ldr	r2, [pc, #160]	; (8004cd4 <TIM_Base_SetConfig+0x128>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d007      	beq.n	8004c46 <TIM_Base_SetConfig+0x9a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a27      	ldr	r2, [pc, #156]	; (8004cd8 <TIM_Base_SetConfig+0x12c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d003      	beq.n	8004c46 <TIM_Base_SetConfig+0x9a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a26      	ldr	r2, [pc, #152]	; (8004cdc <TIM_Base_SetConfig+0x130>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d108      	bne.n	8004c58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a10      	ldr	r2, [pc, #64]	; (8004cc0 <TIM_Base_SetConfig+0x114>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00f      	beq.n	8004ca4 <TIM_Base_SetConfig+0xf8>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a12      	ldr	r2, [pc, #72]	; (8004cd0 <TIM_Base_SetConfig+0x124>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00b      	beq.n	8004ca4 <TIM_Base_SetConfig+0xf8>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a11      	ldr	r2, [pc, #68]	; (8004cd4 <TIM_Base_SetConfig+0x128>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d007      	beq.n	8004ca4 <TIM_Base_SetConfig+0xf8>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a10      	ldr	r2, [pc, #64]	; (8004cd8 <TIM_Base_SetConfig+0x12c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d003      	beq.n	8004ca4 <TIM_Base_SetConfig+0xf8>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a0f      	ldr	r2, [pc, #60]	; (8004cdc <TIM_Base_SetConfig+0x130>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d103      	bne.n	8004cac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	691a      	ldr	r2, [r3, #16]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	615a      	str	r2, [r3, #20]
}
 8004cb2:	bf00      	nop
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40012c00 	.word	0x40012c00
 8004cc4:	40000400 	.word	0x40000400
 8004cc8:	40000800 	.word	0x40000800
 8004ccc:	40000c00 	.word	0x40000c00
 8004cd0:	40013400 	.word	0x40013400
 8004cd4:	40014000 	.word	0x40014000
 8004cd8:	40014400 	.word	0x40014400
 8004cdc:	40014800 	.word	0x40014800

08004ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e068      	b.n	8004dca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a2e      	ldr	r2, [pc, #184]	; (8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d004      	beq.n	8004d2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a2d      	ldr	r2, [pc, #180]	; (8004ddc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d108      	bne.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a1e      	ldr	r2, [pc, #120]	; (8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d01d      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6a:	d018      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a1b      	ldr	r2, [pc, #108]	; (8004de0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d013      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a1a      	ldr	r2, [pc, #104]	; (8004de4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00e      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a18      	ldr	r2, [pc, #96]	; (8004de8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d009      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a13      	ldr	r2, [pc, #76]	; (8004ddc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d004      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a14      	ldr	r2, [pc, #80]	; (8004dec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d10c      	bne.n	8004db8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004da4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	40012c00 	.word	0x40012c00
 8004ddc:	40013400 	.word	0x40013400
 8004de0:	40000400 	.word	0x40000400
 8004de4:	40000800 	.word	0x40000800
 8004de8:	40000c00 	.word	0x40000c00
 8004dec:	40014000 	.word	0x40014000

08004df0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e040      	b.n	8004ec0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d106      	bne.n	8004e54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fd f85a 	bl	8001f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2224      	movs	r2, #36	; 0x24
 8004e58:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0201 	bic.w	r2, r2, #1
 8004e68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fabe 	bl	80053ec <UART_SetConfig>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d101      	bne.n	8004e7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e022      	b.n	8004ec0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fd3c 	bl	8005900 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689a      	ldr	r2, [r3, #8]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ea6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 fdc3 	bl	8005a44 <UART_CheckIdleState>
 8004ebe:	4603      	mov	r3, r0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08a      	sub	sp, #40	; 0x28
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004edc:	2b20      	cmp	r3, #32
 8004ede:	f040 8081 	bne.w	8004fe4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <HAL_UART_Transmit+0x26>
 8004ee8:	88fb      	ldrh	r3, [r7, #6]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e079      	b.n	8004fe6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d101      	bne.n	8004f00 <HAL_UART_Transmit+0x38>
 8004efc:	2302      	movs	r3, #2
 8004efe:	e072      	b.n	8004fe6 <HAL_UART_Transmit+0x11e>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2221      	movs	r2, #33	; 0x21
 8004f12:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004f14:	f7fd f8dc 	bl	80020d0 <HAL_GetTick>
 8004f18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	88fa      	ldrh	r2, [r7, #6]
 8004f1e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	88fa      	ldrh	r2, [r7, #6]
 8004f26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f32:	d108      	bne.n	8004f46 <HAL_UART_Transmit+0x7e>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d104      	bne.n	8004f46 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	61bb      	str	r3, [r7, #24]
 8004f44:	e003      	b.n	8004f4e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004f56:	e02d      	b.n	8004fb4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2180      	movs	r1, #128	; 0x80
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 fdb3 	bl	8005ace <UART_WaitOnFlagUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e039      	b.n	8004fe6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10b      	bne.n	8004f90 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	881a      	ldrh	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f84:	b292      	uxth	r2, r2
 8004f86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	3302      	adds	r3, #2
 8004f8c:	61bb      	str	r3, [r7, #24]
 8004f8e:	e008      	b.n	8004fa2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	781a      	ldrb	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	b292      	uxth	r2, r2
 8004f9a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1cb      	bne.n	8004f58 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2140      	movs	r1, #64	; 0x40
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 fd7f 	bl	8005ace <UART_WaitOnFlagUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e005      	b.n	8004fe6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	e000      	b.n	8004fe6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004fe4:	2302      	movs	r3, #2
  }
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3720      	adds	r7, #32
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005002:	2b20      	cmp	r3, #32
 8005004:	f040 808a 	bne.w	800511c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <HAL_UART_Receive_IT+0x24>
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e082      	b.n	800511e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <HAL_UART_Receive_IT+0x36>
 8005022:	2302      	movs	r3, #2
 8005024:	e07b      	b.n	800511e <HAL_UART_Receive_IT+0x12e>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	88fa      	ldrh	r2, [r7, #6]
 8005038:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	88fa      	ldrh	r2, [r7, #6]
 8005040:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005052:	d10e      	bne.n	8005072 <HAL_UART_Receive_IT+0x82>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d105      	bne.n	8005068 <HAL_UART_Receive_IT+0x78>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005062:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005066:	e02d      	b.n	80050c4 <HAL_UART_Receive_IT+0xd4>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	22ff      	movs	r2, #255	; 0xff
 800506c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005070:	e028      	b.n	80050c4 <HAL_UART_Receive_IT+0xd4>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10d      	bne.n	8005096 <HAL_UART_Receive_IT+0xa6>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d104      	bne.n	800508c <HAL_UART_Receive_IT+0x9c>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	22ff      	movs	r2, #255	; 0xff
 8005086:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800508a:	e01b      	b.n	80050c4 <HAL_UART_Receive_IT+0xd4>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	227f      	movs	r2, #127	; 0x7f
 8005090:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005094:	e016      	b.n	80050c4 <HAL_UART_Receive_IT+0xd4>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800509e:	d10d      	bne.n	80050bc <HAL_UART_Receive_IT+0xcc>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d104      	bne.n	80050b2 <HAL_UART_Receive_IT+0xc2>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	227f      	movs	r2, #127	; 0x7f
 80050ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050b0:	e008      	b.n	80050c4 <HAL_UART_Receive_IT+0xd4>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	223f      	movs	r2, #63	; 0x3f
 80050b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050ba:	e003      	b.n	80050c4 <HAL_UART_Receive_IT+0xd4>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2222      	movs	r2, #34	; 0x22
 80050ce:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0201 	orr.w	r2, r2, #1
 80050de:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e8:	d107      	bne.n	80050fa <HAL_UART_Receive_IT+0x10a>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d103      	bne.n	80050fa <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4a0d      	ldr	r2, [pc, #52]	; (800512c <HAL_UART_Receive_IT+0x13c>)
 80050f6:	661a      	str	r2, [r3, #96]	; 0x60
 80050f8:	e002      	b.n	8005100 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	4a0c      	ldr	r2, [pc, #48]	; (8005130 <HAL_UART_Receive_IT+0x140>)
 80050fe:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005116:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005118:	2300      	movs	r3, #0
 800511a:	e000      	b.n	800511e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800511c:	2302      	movs	r3, #2
  }
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	08005d0d 	.word	0x08005d0d
 8005130:	08005c63 	.word	0x08005c63

08005134 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005154:	69fa      	ldr	r2, [r7, #28]
 8005156:	f640 030f 	movw	r3, #2063	; 0x80f
 800515a:	4013      	ands	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d113      	bne.n	800518c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f003 0320 	and.w	r3, r3, #32
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00e      	beq.n	800518c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b00      	cmp	r3, #0
 8005176:	d009      	beq.n	800518c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 8114 	beq.w	80053aa <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	4798      	blx	r3
      }
      return;
 800518a:	e10e      	b.n	80053aa <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 80d6 	beq.w	8005340 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d105      	bne.n	80051aa <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	4b86      	ldr	r3, [pc, #536]	; (80053bc <HAL_UART_IRQHandler+0x288>)
 80051a2:	4013      	ands	r3, r2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 80cb 	beq.w	8005340 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00e      	beq.n	80051d2 <HAL_UART_IRQHandler+0x9e>
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d009      	beq.n	80051d2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2201      	movs	r2, #1
 80051c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051ca:	f043 0201 	orr.w	r2, r3, #1
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00e      	beq.n	80051fa <HAL_UART_IRQHandler+0xc6>
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d009      	beq.n	80051fa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2202      	movs	r2, #2
 80051ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051f2:	f043 0204 	orr.w	r2, r3, #4
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00e      	beq.n	8005222 <HAL_UART_IRQHandler+0xee>
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d009      	beq.n	8005222 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2204      	movs	r2, #4
 8005214:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800521a:	f043 0202 	orr.w	r2, r3, #2
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	f003 0308 	and.w	r3, r3, #8
 8005228:	2b00      	cmp	r3, #0
 800522a:	d013      	beq.n	8005254 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	f003 0320 	and.w	r3, r3, #32
 8005232:	2b00      	cmp	r3, #0
 8005234:	d104      	bne.n	8005240 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800523c:	2b00      	cmp	r3, #0
 800523e:	d009      	beq.n	8005254 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2208      	movs	r2, #8
 8005246:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800524c:	f043 0208 	orr.w	r2, r3, #8
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00f      	beq.n	800527e <HAL_UART_IRQHandler+0x14a>
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005270:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005276:	f043 0220 	orr.w	r2, r3, #32
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005282:	2b00      	cmp	r3, #0
 8005284:	f000 8093 	beq.w	80053ae <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00c      	beq.n	80052ac <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	f003 0320 	and.w	r3, r3, #32
 8005298:	2b00      	cmp	r3, #0
 800529a:	d007      	beq.n	80052ac <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052b0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052bc:	2b40      	cmp	r3, #64	; 0x40
 80052be:	d004      	beq.n	80052ca <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d031      	beq.n	800532e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fc7a 	bl	8005bc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052da:	2b40      	cmp	r3, #64	; 0x40
 80052dc:	d123      	bne.n	8005326 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ec:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d013      	beq.n	800531e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052fa:	4a31      	ldr	r2, [pc, #196]	; (80053c0 <HAL_UART_IRQHandler+0x28c>)
 80052fc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005302:	4618      	mov	r0, r3
 8005304:	f7fd f823 	bl	800234e <HAL_DMA_Abort_IT>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d016      	beq.n	800533c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005318:	4610      	mov	r0, r2
 800531a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800531c:	e00e      	b.n	800533c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f85a 	bl	80053d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005324:	e00a      	b.n	800533c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f856 	bl	80053d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800532c:	e006      	b.n	800533c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f852 	bl	80053d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800533a:	e038      	b.n	80053ae <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800533c:	bf00      	nop
    return;
 800533e:	e036      	b.n	80053ae <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00d      	beq.n	8005366 <HAL_UART_IRQHandler+0x232>
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d008      	beq.n	8005366 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800535c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fd29 	bl	8005db6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005364:	e026      	b.n	80053b4 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00d      	beq.n	800538c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005376:	2b00      	cmp	r3, #0
 8005378:	d008      	beq.n	800538c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800537e:	2b00      	cmp	r3, #0
 8005380:	d017      	beq.n	80053b2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	4798      	blx	r3
    }
    return;
 800538a:	e012      	b.n	80053b2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00e      	beq.n	80053b4 <HAL_UART_IRQHandler+0x280>
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539c:	2b00      	cmp	r3, #0
 800539e:	d009      	beq.n	80053b4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fc45 	bl	8005c30 <UART_EndTransmit_IT>
    return;
 80053a6:	bf00      	nop
 80053a8:	e004      	b.n	80053b4 <HAL_UART_IRQHandler+0x280>
      return;
 80053aa:	bf00      	nop
 80053ac:	e002      	b.n	80053b4 <HAL_UART_IRQHandler+0x280>
    return;
 80053ae:	bf00      	nop
 80053b0:	e000      	b.n	80053b4 <HAL_UART_IRQHandler+0x280>
    return;
 80053b2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80053b4:	3720      	adds	r7, #32
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	04000120 	.word	0x04000120
 80053c0:	08005c05 	.word	0x08005c05

080053c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053ec:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80053f0:	b088      	sub	sp, #32
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	4313      	orrs	r3, r2
 8005410:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	4bac      	ldr	r3, [pc, #688]	; (80056cc <UART_SetConfig+0x2e0>)
 800541a:	4013      	ands	r3, r2
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6812      	ldr	r2, [r2, #0]
 8005420:	69f9      	ldr	r1, [r7, #28]
 8005422:	430b      	orrs	r3, r1
 8005424:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4aa2      	ldr	r2, [pc, #648]	; (80056d0 <UART_SetConfig+0x2e4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d004      	beq.n	8005456 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	69fa      	ldr	r2, [r7, #28]
 8005452:	4313      	orrs	r3, r2
 8005454:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	69fa      	ldr	r2, [r7, #28]
 8005466:	430a      	orrs	r2, r1
 8005468:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a99      	ldr	r2, [pc, #612]	; (80056d4 <UART_SetConfig+0x2e8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d121      	bne.n	80054b8 <UART_SetConfig+0xcc>
 8005474:	4b98      	ldr	r3, [pc, #608]	; (80056d8 <UART_SetConfig+0x2ec>)
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b03      	cmp	r3, #3
 8005480:	d816      	bhi.n	80054b0 <UART_SetConfig+0xc4>
 8005482:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <UART_SetConfig+0x9c>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	08005499 	.word	0x08005499
 800548c:	080054a5 	.word	0x080054a5
 8005490:	0800549f 	.word	0x0800549f
 8005494:	080054ab 	.word	0x080054ab
 8005498:	2301      	movs	r3, #1
 800549a:	76fb      	strb	r3, [r7, #27]
 800549c:	e0e8      	b.n	8005670 <UART_SetConfig+0x284>
 800549e:	2302      	movs	r3, #2
 80054a0:	76fb      	strb	r3, [r7, #27]
 80054a2:	e0e5      	b.n	8005670 <UART_SetConfig+0x284>
 80054a4:	2304      	movs	r3, #4
 80054a6:	76fb      	strb	r3, [r7, #27]
 80054a8:	e0e2      	b.n	8005670 <UART_SetConfig+0x284>
 80054aa:	2308      	movs	r3, #8
 80054ac:	76fb      	strb	r3, [r7, #27]
 80054ae:	e0df      	b.n	8005670 <UART_SetConfig+0x284>
 80054b0:	2310      	movs	r3, #16
 80054b2:	76fb      	strb	r3, [r7, #27]
 80054b4:	bf00      	nop
 80054b6:	e0db      	b.n	8005670 <UART_SetConfig+0x284>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a87      	ldr	r2, [pc, #540]	; (80056dc <UART_SetConfig+0x2f0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d134      	bne.n	800552c <UART_SetConfig+0x140>
 80054c2:	4b85      	ldr	r3, [pc, #532]	; (80056d8 <UART_SetConfig+0x2ec>)
 80054c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c8:	f003 030c 	and.w	r3, r3, #12
 80054cc:	2b0c      	cmp	r3, #12
 80054ce:	d829      	bhi.n	8005524 <UART_SetConfig+0x138>
 80054d0:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <UART_SetConfig+0xec>)
 80054d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d6:	bf00      	nop
 80054d8:	0800550d 	.word	0x0800550d
 80054dc:	08005525 	.word	0x08005525
 80054e0:	08005525 	.word	0x08005525
 80054e4:	08005525 	.word	0x08005525
 80054e8:	08005519 	.word	0x08005519
 80054ec:	08005525 	.word	0x08005525
 80054f0:	08005525 	.word	0x08005525
 80054f4:	08005525 	.word	0x08005525
 80054f8:	08005513 	.word	0x08005513
 80054fc:	08005525 	.word	0x08005525
 8005500:	08005525 	.word	0x08005525
 8005504:	08005525 	.word	0x08005525
 8005508:	0800551f 	.word	0x0800551f
 800550c:	2300      	movs	r3, #0
 800550e:	76fb      	strb	r3, [r7, #27]
 8005510:	e0ae      	b.n	8005670 <UART_SetConfig+0x284>
 8005512:	2302      	movs	r3, #2
 8005514:	76fb      	strb	r3, [r7, #27]
 8005516:	e0ab      	b.n	8005670 <UART_SetConfig+0x284>
 8005518:	2304      	movs	r3, #4
 800551a:	76fb      	strb	r3, [r7, #27]
 800551c:	e0a8      	b.n	8005670 <UART_SetConfig+0x284>
 800551e:	2308      	movs	r3, #8
 8005520:	76fb      	strb	r3, [r7, #27]
 8005522:	e0a5      	b.n	8005670 <UART_SetConfig+0x284>
 8005524:	2310      	movs	r3, #16
 8005526:	76fb      	strb	r3, [r7, #27]
 8005528:	bf00      	nop
 800552a:	e0a1      	b.n	8005670 <UART_SetConfig+0x284>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a6b      	ldr	r2, [pc, #428]	; (80056e0 <UART_SetConfig+0x2f4>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d120      	bne.n	8005578 <UART_SetConfig+0x18c>
 8005536:	4b68      	ldr	r3, [pc, #416]	; (80056d8 <UART_SetConfig+0x2ec>)
 8005538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005540:	2b10      	cmp	r3, #16
 8005542:	d00f      	beq.n	8005564 <UART_SetConfig+0x178>
 8005544:	2b10      	cmp	r3, #16
 8005546:	d802      	bhi.n	800554e <UART_SetConfig+0x162>
 8005548:	2b00      	cmp	r3, #0
 800554a:	d005      	beq.n	8005558 <UART_SetConfig+0x16c>
 800554c:	e010      	b.n	8005570 <UART_SetConfig+0x184>
 800554e:	2b20      	cmp	r3, #32
 8005550:	d005      	beq.n	800555e <UART_SetConfig+0x172>
 8005552:	2b30      	cmp	r3, #48	; 0x30
 8005554:	d009      	beq.n	800556a <UART_SetConfig+0x17e>
 8005556:	e00b      	b.n	8005570 <UART_SetConfig+0x184>
 8005558:	2300      	movs	r3, #0
 800555a:	76fb      	strb	r3, [r7, #27]
 800555c:	e088      	b.n	8005670 <UART_SetConfig+0x284>
 800555e:	2302      	movs	r3, #2
 8005560:	76fb      	strb	r3, [r7, #27]
 8005562:	e085      	b.n	8005670 <UART_SetConfig+0x284>
 8005564:	2304      	movs	r3, #4
 8005566:	76fb      	strb	r3, [r7, #27]
 8005568:	e082      	b.n	8005670 <UART_SetConfig+0x284>
 800556a:	2308      	movs	r3, #8
 800556c:	76fb      	strb	r3, [r7, #27]
 800556e:	e07f      	b.n	8005670 <UART_SetConfig+0x284>
 8005570:	2310      	movs	r3, #16
 8005572:	76fb      	strb	r3, [r7, #27]
 8005574:	bf00      	nop
 8005576:	e07b      	b.n	8005670 <UART_SetConfig+0x284>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a59      	ldr	r2, [pc, #356]	; (80056e4 <UART_SetConfig+0x2f8>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d120      	bne.n	80055c4 <UART_SetConfig+0x1d8>
 8005582:	4b55      	ldr	r3, [pc, #340]	; (80056d8 <UART_SetConfig+0x2ec>)
 8005584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005588:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800558c:	2b40      	cmp	r3, #64	; 0x40
 800558e:	d00f      	beq.n	80055b0 <UART_SetConfig+0x1c4>
 8005590:	2b40      	cmp	r3, #64	; 0x40
 8005592:	d802      	bhi.n	800559a <UART_SetConfig+0x1ae>
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <UART_SetConfig+0x1b8>
 8005598:	e010      	b.n	80055bc <UART_SetConfig+0x1d0>
 800559a:	2b80      	cmp	r3, #128	; 0x80
 800559c:	d005      	beq.n	80055aa <UART_SetConfig+0x1be>
 800559e:	2bc0      	cmp	r3, #192	; 0xc0
 80055a0:	d009      	beq.n	80055b6 <UART_SetConfig+0x1ca>
 80055a2:	e00b      	b.n	80055bc <UART_SetConfig+0x1d0>
 80055a4:	2300      	movs	r3, #0
 80055a6:	76fb      	strb	r3, [r7, #27]
 80055a8:	e062      	b.n	8005670 <UART_SetConfig+0x284>
 80055aa:	2302      	movs	r3, #2
 80055ac:	76fb      	strb	r3, [r7, #27]
 80055ae:	e05f      	b.n	8005670 <UART_SetConfig+0x284>
 80055b0:	2304      	movs	r3, #4
 80055b2:	76fb      	strb	r3, [r7, #27]
 80055b4:	e05c      	b.n	8005670 <UART_SetConfig+0x284>
 80055b6:	2308      	movs	r3, #8
 80055b8:	76fb      	strb	r3, [r7, #27]
 80055ba:	e059      	b.n	8005670 <UART_SetConfig+0x284>
 80055bc:	2310      	movs	r3, #16
 80055be:	76fb      	strb	r3, [r7, #27]
 80055c0:	bf00      	nop
 80055c2:	e055      	b.n	8005670 <UART_SetConfig+0x284>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a47      	ldr	r2, [pc, #284]	; (80056e8 <UART_SetConfig+0x2fc>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d124      	bne.n	8005618 <UART_SetConfig+0x22c>
 80055ce:	4b42      	ldr	r3, [pc, #264]	; (80056d8 <UART_SetConfig+0x2ec>)
 80055d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055dc:	d012      	beq.n	8005604 <UART_SetConfig+0x218>
 80055de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055e2:	d802      	bhi.n	80055ea <UART_SetConfig+0x1fe>
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d007      	beq.n	80055f8 <UART_SetConfig+0x20c>
 80055e8:	e012      	b.n	8005610 <UART_SetConfig+0x224>
 80055ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ee:	d006      	beq.n	80055fe <UART_SetConfig+0x212>
 80055f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055f4:	d009      	beq.n	800560a <UART_SetConfig+0x21e>
 80055f6:	e00b      	b.n	8005610 <UART_SetConfig+0x224>
 80055f8:	2300      	movs	r3, #0
 80055fa:	76fb      	strb	r3, [r7, #27]
 80055fc:	e038      	b.n	8005670 <UART_SetConfig+0x284>
 80055fe:	2302      	movs	r3, #2
 8005600:	76fb      	strb	r3, [r7, #27]
 8005602:	e035      	b.n	8005670 <UART_SetConfig+0x284>
 8005604:	2304      	movs	r3, #4
 8005606:	76fb      	strb	r3, [r7, #27]
 8005608:	e032      	b.n	8005670 <UART_SetConfig+0x284>
 800560a:	2308      	movs	r3, #8
 800560c:	76fb      	strb	r3, [r7, #27]
 800560e:	e02f      	b.n	8005670 <UART_SetConfig+0x284>
 8005610:	2310      	movs	r3, #16
 8005612:	76fb      	strb	r3, [r7, #27]
 8005614:	bf00      	nop
 8005616:	e02b      	b.n	8005670 <UART_SetConfig+0x284>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a2c      	ldr	r2, [pc, #176]	; (80056d0 <UART_SetConfig+0x2e4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d124      	bne.n	800566c <UART_SetConfig+0x280>
 8005622:	4b2d      	ldr	r3, [pc, #180]	; (80056d8 <UART_SetConfig+0x2ec>)
 8005624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005628:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800562c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005630:	d012      	beq.n	8005658 <UART_SetConfig+0x26c>
 8005632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005636:	d802      	bhi.n	800563e <UART_SetConfig+0x252>
 8005638:	2b00      	cmp	r3, #0
 800563a:	d007      	beq.n	800564c <UART_SetConfig+0x260>
 800563c:	e012      	b.n	8005664 <UART_SetConfig+0x278>
 800563e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005642:	d006      	beq.n	8005652 <UART_SetConfig+0x266>
 8005644:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005648:	d009      	beq.n	800565e <UART_SetConfig+0x272>
 800564a:	e00b      	b.n	8005664 <UART_SetConfig+0x278>
 800564c:	2300      	movs	r3, #0
 800564e:	76fb      	strb	r3, [r7, #27]
 8005650:	e00e      	b.n	8005670 <UART_SetConfig+0x284>
 8005652:	2302      	movs	r3, #2
 8005654:	76fb      	strb	r3, [r7, #27]
 8005656:	e00b      	b.n	8005670 <UART_SetConfig+0x284>
 8005658:	2304      	movs	r3, #4
 800565a:	76fb      	strb	r3, [r7, #27]
 800565c:	e008      	b.n	8005670 <UART_SetConfig+0x284>
 800565e:	2308      	movs	r3, #8
 8005660:	76fb      	strb	r3, [r7, #27]
 8005662:	e005      	b.n	8005670 <UART_SetConfig+0x284>
 8005664:	2310      	movs	r3, #16
 8005666:	76fb      	strb	r3, [r7, #27]
 8005668:	bf00      	nop
 800566a:	e001      	b.n	8005670 <UART_SetConfig+0x284>
 800566c:	2310      	movs	r3, #16
 800566e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a16      	ldr	r2, [pc, #88]	; (80056d0 <UART_SetConfig+0x2e4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	f040 8087 	bne.w	800578a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800567c:	7efb      	ldrb	r3, [r7, #27]
 800567e:	2b08      	cmp	r3, #8
 8005680:	d836      	bhi.n	80056f0 <UART_SetConfig+0x304>
 8005682:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <UART_SetConfig+0x29c>)
 8005684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005688:	080056ad 	.word	0x080056ad
 800568c:	080056f1 	.word	0x080056f1
 8005690:	080056b5 	.word	0x080056b5
 8005694:	080056f1 	.word	0x080056f1
 8005698:	080056bb 	.word	0x080056bb
 800569c:	080056f1 	.word	0x080056f1
 80056a0:	080056f1 	.word	0x080056f1
 80056a4:	080056f1 	.word	0x080056f1
 80056a8:	080056c3 	.word	0x080056c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056ac:	f7fe fb04 	bl	8003cb8 <HAL_RCC_GetPCLK1Freq>
 80056b0:	6178      	str	r0, [r7, #20]
        break;
 80056b2:	e022      	b.n	80056fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056b4:	4b0d      	ldr	r3, [pc, #52]	; (80056ec <UART_SetConfig+0x300>)
 80056b6:	617b      	str	r3, [r7, #20]
        break;
 80056b8:	e01f      	b.n	80056fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ba:	f7fe fa67 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 80056be:	6178      	str	r0, [r7, #20]
        break;
 80056c0:	e01b      	b.n	80056fa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056c6:	617b      	str	r3, [r7, #20]
        break;
 80056c8:	e017      	b.n	80056fa <UART_SetConfig+0x30e>
 80056ca:	bf00      	nop
 80056cc:	efff69f3 	.word	0xefff69f3
 80056d0:	40008000 	.word	0x40008000
 80056d4:	40013800 	.word	0x40013800
 80056d8:	40021000 	.word	0x40021000
 80056dc:	40004400 	.word	0x40004400
 80056e0:	40004800 	.word	0x40004800
 80056e4:	40004c00 	.word	0x40004c00
 80056e8:	40005000 	.word	0x40005000
 80056ec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	76bb      	strb	r3, [r7, #26]
        break;
 80056f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 80f1 	beq.w	80058e4 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	4613      	mov	r3, r2
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	4413      	add	r3, r2
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	429a      	cmp	r2, r3
 8005710:	d305      	bcc.n	800571e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	429a      	cmp	r2, r3
 800571c:	d902      	bls.n	8005724 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	76bb      	strb	r3, [r7, #26]
 8005722:	e0df      	b.n	80058e4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	4619      	mov	r1, r3
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	f04f 0400 	mov.w	r4, #0
 8005734:	0214      	lsls	r4, r2, #8
 8005736:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800573a:	020b      	lsls	r3, r1, #8
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6852      	ldr	r2, [r2, #4]
 8005740:	0852      	lsrs	r2, r2, #1
 8005742:	4611      	mov	r1, r2
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	eb13 0b01 	adds.w	fp, r3, r1
 800574c:	eb44 0c02 	adc.w	ip, r4, r2
 8005750:	4658      	mov	r0, fp
 8005752:	4661      	mov	r1, ip
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f04f 0400 	mov.w	r4, #0
 800575c:	461a      	mov	r2, r3
 800575e:	4623      	mov	r3, r4
 8005760:	f7fb f9ac 	bl	8000abc <__aeabi_uldivmod>
 8005764:	4603      	mov	r3, r0
 8005766:	460c      	mov	r4, r1
 8005768:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005770:	d308      	bcc.n	8005784 <UART_SetConfig+0x398>
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005778:	d204      	bcs.n	8005784 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	60da      	str	r2, [r3, #12]
 8005782:	e0af      	b.n	80058e4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	76bb      	strb	r3, [r7, #26]
 8005788:	e0ac      	b.n	80058e4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005792:	d15b      	bne.n	800584c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005794:	7efb      	ldrb	r3, [r7, #27]
 8005796:	2b08      	cmp	r3, #8
 8005798:	d827      	bhi.n	80057ea <UART_SetConfig+0x3fe>
 800579a:	a201      	add	r2, pc, #4	; (adr r2, 80057a0 <UART_SetConfig+0x3b4>)
 800579c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a0:	080057c5 	.word	0x080057c5
 80057a4:	080057cd 	.word	0x080057cd
 80057a8:	080057d5 	.word	0x080057d5
 80057ac:	080057eb 	.word	0x080057eb
 80057b0:	080057db 	.word	0x080057db
 80057b4:	080057eb 	.word	0x080057eb
 80057b8:	080057eb 	.word	0x080057eb
 80057bc:	080057eb 	.word	0x080057eb
 80057c0:	080057e3 	.word	0x080057e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057c4:	f7fe fa78 	bl	8003cb8 <HAL_RCC_GetPCLK1Freq>
 80057c8:	6178      	str	r0, [r7, #20]
        break;
 80057ca:	e013      	b.n	80057f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057cc:	f7fe fa8a 	bl	8003ce4 <HAL_RCC_GetPCLK2Freq>
 80057d0:	6178      	str	r0, [r7, #20]
        break;
 80057d2:	e00f      	b.n	80057f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057d4:	4b49      	ldr	r3, [pc, #292]	; (80058fc <UART_SetConfig+0x510>)
 80057d6:	617b      	str	r3, [r7, #20]
        break;
 80057d8:	e00c      	b.n	80057f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057da:	f7fe f9d7 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 80057de:	6178      	str	r0, [r7, #20]
        break;
 80057e0:	e008      	b.n	80057f4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057e6:	617b      	str	r3, [r7, #20]
        break;
 80057e8:	e004      	b.n	80057f4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	76bb      	strb	r3, [r7, #26]
        break;
 80057f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d074      	beq.n	80058e4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	005a      	lsls	r2, r3, #1
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	085b      	lsrs	r3, r3, #1
 8005804:	441a      	add	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	fbb2 f3f3 	udiv	r3, r2, r3
 800580e:	b29b      	uxth	r3, r3
 8005810:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	2b0f      	cmp	r3, #15
 8005816:	d916      	bls.n	8005846 <UART_SetConfig+0x45a>
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800581e:	d212      	bcs.n	8005846 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	b29b      	uxth	r3, r3
 8005824:	f023 030f 	bic.w	r3, r3, #15
 8005828:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	085b      	lsrs	r3, r3, #1
 800582e:	b29b      	uxth	r3, r3
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	b29a      	uxth	r2, r3
 8005836:	89fb      	ldrh	r3, [r7, #14]
 8005838:	4313      	orrs	r3, r2
 800583a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	89fa      	ldrh	r2, [r7, #14]
 8005842:	60da      	str	r2, [r3, #12]
 8005844:	e04e      	b.n	80058e4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	76bb      	strb	r3, [r7, #26]
 800584a:	e04b      	b.n	80058e4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800584c:	7efb      	ldrb	r3, [r7, #27]
 800584e:	2b08      	cmp	r3, #8
 8005850:	d827      	bhi.n	80058a2 <UART_SetConfig+0x4b6>
 8005852:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <UART_SetConfig+0x46c>)
 8005854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005858:	0800587d 	.word	0x0800587d
 800585c:	08005885 	.word	0x08005885
 8005860:	0800588d 	.word	0x0800588d
 8005864:	080058a3 	.word	0x080058a3
 8005868:	08005893 	.word	0x08005893
 800586c:	080058a3 	.word	0x080058a3
 8005870:	080058a3 	.word	0x080058a3
 8005874:	080058a3 	.word	0x080058a3
 8005878:	0800589b 	.word	0x0800589b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800587c:	f7fe fa1c 	bl	8003cb8 <HAL_RCC_GetPCLK1Freq>
 8005880:	6178      	str	r0, [r7, #20]
        break;
 8005882:	e013      	b.n	80058ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005884:	f7fe fa2e 	bl	8003ce4 <HAL_RCC_GetPCLK2Freq>
 8005888:	6178      	str	r0, [r7, #20]
        break;
 800588a:	e00f      	b.n	80058ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800588c:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <UART_SetConfig+0x510>)
 800588e:	617b      	str	r3, [r7, #20]
        break;
 8005890:	e00c      	b.n	80058ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005892:	f7fe f97b 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 8005896:	6178      	str	r0, [r7, #20]
        break;
 8005898:	e008      	b.n	80058ac <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800589a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800589e:	617b      	str	r3, [r7, #20]
        break;
 80058a0:	e004      	b.n	80058ac <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	76bb      	strb	r3, [r7, #26]
        break;
 80058aa:	bf00      	nop
    }

    if (pclk != 0U)
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d018      	beq.n	80058e4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	085a      	lsrs	r2, r3, #1
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	441a      	add	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	2b0f      	cmp	r3, #15
 80058cc:	d908      	bls.n	80058e0 <UART_SetConfig+0x4f4>
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d4:	d204      	bcs.n	80058e0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	60da      	str	r2, [r3, #12]
 80058de:	e001      	b.n	80058e4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80058f0:	7ebb      	ldrb	r3, [r7, #26]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3720      	adds	r7, #32
 80058f6:	46bd      	mov	sp, r7
 80058f8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80058fc:	00f42400 	.word	0x00f42400

08005900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00a      	beq.n	800592a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	f003 0308 	and.w	r3, r3, #8
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d01a      	beq.n	8005a16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059fe:	d10a      	bne.n	8005a16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	605a      	str	r2, [r3, #4]
  }
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af02      	add	r7, sp, #8
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005a52:	f7fc fb3d 	bl	80020d0 <HAL_GetTick>
 8005a56:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	d10e      	bne.n	8005a84 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f82a 	bl	8005ace <UART_WaitOnFlagUntilTimeout>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e020      	b.n	8005ac6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d10e      	bne.n	8005ab0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f814 	bl	8005ace <UART_WaitOnFlagUntilTimeout>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e00a      	b.n	8005ac6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	603b      	str	r3, [r7, #0]
 8005ada:	4613      	mov	r3, r2
 8005adc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ade:	e05d      	b.n	8005b9c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae6:	d059      	beq.n	8005b9c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ae8:	f7fc faf2 	bl	80020d0 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d302      	bcc.n	8005afe <UART_WaitOnFlagUntilTimeout+0x30>
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d11b      	bne.n	8005b36 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b0c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0201 	bic.w	r2, r2, #1
 8005b1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2220      	movs	r2, #32
 8005b22:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2220      	movs	r2, #32
 8005b28:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e042      	b.n	8005bbc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d02b      	beq.n	8005b9c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b52:	d123      	bne.n	8005b9c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b6c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0201 	bic.w	r2, r2, #1
 8005b7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2220      	movs	r2, #32
 8005b82:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2220      	movs	r2, #32
 8005b88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e00f      	b.n	8005bbc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	69da      	ldr	r2, [r3, #28]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	bf0c      	ite	eq
 8005bac:	2301      	moveq	r3, #1
 8005bae:	2300      	movne	r3, #0
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d092      	beq.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005bda:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0201 	bic.w	r2, r2, #1
 8005bea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f7ff fbd8 	bl	80053d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c28:	bf00      	nop
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c46:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7ff fbb5 	bl	80053c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c5a:	bf00      	nop
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b084      	sub	sp, #16
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c70:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c76:	2b22      	cmp	r3, #34	; 0x22
 8005c78:	d13a      	bne.n	8005cf0 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005c80:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c82:	89bb      	ldrh	r3, [r7, #12]
 8005c84:	b2d9      	uxtb	r1, r3
 8005c86:	89fb      	ldrh	r3, [r7, #14]
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8e:	400a      	ands	r2, r1
 8005c90:	b2d2      	uxtb	r2, r2
 8005c92:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d123      	bne.n	8005d04 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005cca:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689a      	ldr	r2, [r3, #8]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0201 	bic.w	r2, r2, #1
 8005cda:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7fb fedb 	bl	8001aa4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cee:	e009      	b.n	8005d04 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	8b1b      	ldrh	r3, [r3, #24]
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0208 	orr.w	r2, r2, #8
 8005d00:	b292      	uxth	r2, r2
 8005d02:	831a      	strh	r2, [r3, #24]
}
 8005d04:	bf00      	nop
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d1a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d20:	2b22      	cmp	r3, #34	; 0x22
 8005d22:	d13a      	bne.n	8005d9a <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d2a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d30:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005d32:	89ba      	ldrh	r2, [r7, #12]
 8005d34:	89fb      	ldrh	r3, [r7, #14]
 8005d36:	4013      	ands	r3, r2
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d42:	1c9a      	adds	r2, r3, #2
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d123      	bne.n	8005dae <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d74:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0201 	bic.w	r2, r2, #1
 8005d84:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fb fe86 	bl	8001aa4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d98:	e009      	b.n	8005dae <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	8b1b      	ldrh	r3, [r3, #24]
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0208 	orr.w	r2, r2, #8
 8005daa:	b292      	uxth	r2, r2
 8005dac:	831a      	strh	r2, [r3, #24]
}
 8005dae:	bf00      	nop
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b084      	sub	sp, #16
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8005dd8:	6839      	ldr	r1, [r7, #0]
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f001 fccd 	bl	800777a <VL53L0X_get_offset_calibration_data_micro_meter>
 8005de0:	4603      	mov	r3, r0
 8005de2:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8005de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8005df0:	b5b0      	push	{r4, r5, r7, lr}
 8005df2:	b096      	sub	sp, #88	; 0x58
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8005dfe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d107      	bne.n	8005e16 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8005e06:	2200      	movs	r2, #0
 8005e08:	2188      	movs	r1, #136	; 0x88
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f004 fed0 	bl	800abb0 <VL53L0X_WrByte>
 8005e10:	4603      	mov	r3, r0
 8005e12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e24:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005e2e:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a9e      	ldr	r2, [pc, #632]	; (80060b0 <VL53L0X_DataInit+0x2c0>)
 8005e36:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a9d      	ldr	r2, [pc, #628]	; (80060b4 <VL53L0X_DataInit+0x2c4>)
 8005e3e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005e48:	f107 0310 	add.w	r3, r7, #16
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fac2 	bl	80063d8 <VL53L0X_GetDeviceParameters>
 8005e54:	4603      	mov	r3, r0
 8005e56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8005e5a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d112      	bne.n	8005e88 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8005e62:	2300      	movs	r3, #0
 8005e64:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8005e66:	2300      	movs	r3, #0
 8005e68:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f103 0410 	add.w	r4, r3, #16
 8005e70:	f107 0510 	add.w	r5, r7, #16
 8005e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e80:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005e84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2264      	movs	r2, #100	; 0x64
 8005e8c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f44f 7261 	mov.w	r2, #900	; 0x384
 8005e96:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005ea0:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005eaa:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	2180      	movs	r1, #128	; 0x80
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f004 fe78 	bl	800abb0 <VL53L0X_WrByte>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005ece:	2201      	movs	r2, #1
 8005ed0:	21ff      	movs	r1, #255	; 0xff
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f004 fe6c 	bl	800abb0 <VL53L0X_WrByte>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	461a      	mov	r2, r3
 8005edc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	2100      	movs	r1, #0
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f004 fe60 	bl	800abb0 <VL53L0X_WrByte>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8005efe:	f107 030f 	add.w	r3, r7, #15
 8005f02:	461a      	mov	r2, r3
 8005f04:	2191      	movs	r1, #145	; 0x91
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f004 fed4 	bl	800acb4 <VL53L0X_RdByte>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	461a      	mov	r2, r3
 8005f10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f14:	4313      	orrs	r3, r2
 8005f16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8005f1a:	7bfa      	ldrb	r2, [r7, #15]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005f22:	2201      	movs	r2, #1
 8005f24:	2100      	movs	r1, #0
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f004 fe42 	bl	800abb0 <VL53L0X_WrByte>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	21ff      	movs	r1, #255	; 0xff
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f004 fe36 	bl	800abb0 <VL53L0X_WrByte>
 8005f44:	4603      	mov	r3, r0
 8005f46:	461a      	mov	r2, r3
 8005f48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005f52:	2200      	movs	r2, #0
 8005f54:	2180      	movs	r1, #128	; 0x80
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f004 fe2a 	bl	800abb0 <VL53L0X_WrByte>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f64:	4313      	orrs	r3, r2
 8005f66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	653b      	str	r3, [r7, #80]	; 0x50
 8005f6e:	e014      	b.n	8005f9a <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8005f70:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d114      	bne.n	8005fa2 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	4619      	mov	r1, r3
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fd51 	bl	8006a28 <VL53L0X_SetLimitCheckEnable>
 8005f86:	4603      	mov	r3, r0
 8005f88:	461a      	mov	r2, r3
 8005f8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f96:	3301      	adds	r3, #1
 8005f98:	653b      	str	r3, [r7, #80]	; 0x50
 8005f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f9c:	2b05      	cmp	r3, #5
 8005f9e:	dde7      	ble.n	8005f70 <VL53L0X_DataInit+0x180>
 8005fa0:	e000      	b.n	8005fa4 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8005fa2:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8005fa4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d107      	bne.n	8005fbc <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005fac:	2200      	movs	r2, #0
 8005fae:	2102      	movs	r1, #2
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fd39 	bl	8006a28 <VL53L0X_SetLimitCheckEnable>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005fbc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d107      	bne.n	8005fd4 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	2103      	movs	r1, #3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 fd2d 	bl	8006a28 <VL53L0X_SetLimitCheckEnable>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005fd4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d107      	bne.n	8005fec <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2104      	movs	r1, #4
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fd21 	bl	8006a28 <VL53L0X_SetLimitCheckEnable>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8005fec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d107      	bne.n	8006004 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	2105      	movs	r1, #5
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fd15 	bl	8006a28 <VL53L0X_SetLimitCheckEnable>
 8005ffe:	4603      	mov	r3, r0
 8006000:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8006004:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006008:	2b00      	cmp	r3, #0
 800600a:	d108      	bne.n	800601e <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800600c:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8006010:	2100      	movs	r1, #0
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fdb8 	bl	8006b88 <VL53L0X_SetLimitCheckValue>
 8006018:	4603      	mov	r3, r0
 800601a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800601e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006022:	2b00      	cmp	r3, #0
 8006024:	d108      	bne.n	8006038 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006026:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800602a:	2101      	movs	r1, #1
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 fdab 	bl	8006b88 <VL53L0X_SetLimitCheckValue>
 8006032:	4603      	mov	r3, r0
 8006034:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006038:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800603c:	2b00      	cmp	r3, #0
 800603e:	d108      	bne.n	8006052 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006040:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8006044:	2102      	movs	r1, #2
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fd9e 	bl	8006b88 <VL53L0X_SetLimitCheckValue>
 800604c:	4603      	mov	r3, r0
 800604e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006052:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006056:	2b00      	cmp	r3, #0
 8006058:	d107      	bne.n	800606a <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800605a:	2200      	movs	r2, #0
 800605c:	2103      	movs	r1, #3
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fd92 	bl	8006b88 <VL53L0X_SetLimitCheckValue>
 8006064:	4603      	mov	r3, r0
 8006066:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800606a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10f      	bne.n	8006092 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	22ff      	movs	r2, #255	; 0xff
 8006076:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800607a:	22ff      	movs	r2, #255	; 0xff
 800607c:	2101      	movs	r1, #1
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f004 fd96 	bl	800abb0 <VL53L0X_WrByte>
 8006084:	4603      	mov	r3, r0
 8006086:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006092:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006096:	2b00      	cmp	r3, #0
 8006098:	d103      	bne.n	80060a2 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80060a2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3758      	adds	r7, #88	; 0x58
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bdb0      	pop	{r4, r5, r7, pc}
 80060ae:	bf00      	nop
 80060b0:	00016b85 	.word	0x00016b85
 80060b4:	000970a4 	.word	0x000970a4

080060b8 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80060b8:	b5b0      	push	{r4, r5, r7, lr}
 80060ba:	b09e      	sub	sp, #120	; 0x78
 80060bc:	af02      	add	r7, sp, #8
 80060be:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80060c0:	2300      	movs	r3, #0
 80060c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80060c6:	f107 031c 	add.w	r3, r7, #28
 80060ca:	2240      	movs	r2, #64	; 0x40
 80060cc:	2100      	movs	r1, #0
 80060ce:	4618      	mov	r0, r3
 80060d0:	f004 fed3 	bl	800ae7a <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80060d4:	2300      	movs	r3, #0
 80060d6:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80060d8:	2300      	movs	r3, #0
 80060da:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80060e2:	2300      	movs	r3, #0
 80060e4:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80060e6:	2300      	movs	r3, #0
 80060e8:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80060ea:	2300      	movs	r3, #0
 80060ec:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80060ee:	2300      	movs	r3, #0
 80060f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80060f4:	2101      	movs	r1, #1
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f002 fa95 	bl	8008626 <VL53L0X_get_info_from_device>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8006108:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8006110:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8006114:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006118:	2b01      	cmp	r3, #1
 800611a:	d80d      	bhi.n	8006138 <VL53L0X_StaticInit+0x80>
 800611c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006120:	2b01      	cmp	r3, #1
 8006122:	d102      	bne.n	800612a <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8006124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006126:	2b20      	cmp	r3, #32
 8006128:	d806      	bhi.n	8006138 <VL53L0X_StaticInit+0x80>
 800612a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10e      	bne.n	8006150 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8006132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006134:	2b0c      	cmp	r3, #12
 8006136:	d90b      	bls.n	8006150 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8006138:	f107 0218 	add.w	r2, r7, #24
 800613c:	f107 0314 	add.w	r3, r7, #20
 8006140:	4619      	mov	r1, r3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f001 fd14 	bl	8007b70 <VL53L0X_perform_ref_spad_management>
 8006148:	4603      	mov	r3, r0
 800614a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800614e:	e009      	b.n	8006164 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8006150:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006154:	461a      	mov	r2, r3
 8006156:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f001 ff15 	bl	8007f88 <VL53L0X_set_reference_spads>
 800615e:	4603      	mov	r3, r0
 8006160:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8006164:	4b94      	ldr	r3, [pc, #592]	; (80063b8 <VL53L0X_StaticInit+0x300>)
 8006166:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8006168:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10f      	bne.n	8006190 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006176:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800617a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800617e:	2b00      	cmp	r3, #0
 8006180:	d104      	bne.n	800618c <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8006188:	66bb      	str	r3, [r7, #104]	; 0x68
 800618a:	e001      	b.n	8006190 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800618c:	4b8a      	ldr	r3, [pc, #552]	; (80063b8 <VL53L0X_StaticInit+0x300>)
 800618e:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006190:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006194:	2b00      	cmp	r3, #0
 8006196:	d106      	bne.n	80061a6 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8006198:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f003 fde8 	bl	8009d70 <VL53L0X_load_tuning_settings>
 80061a0:	4603      	mov	r3, r0
 80061a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80061a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10a      	bne.n	80061c4 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80061ae:	2300      	movs	r3, #0
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	2304      	movs	r3, #4
 80061b4:	2200      	movs	r2, #0
 80061b6:	2100      	movs	r1, #0
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f001 f90d 	bl	80073d8 <VL53L0X_SetGpioConfig>
 80061be:	4603      	mov	r3, r0
 80061c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80061c4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d121      	bne.n	8006210 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80061cc:	2201      	movs	r2, #1
 80061ce:	21ff      	movs	r1, #255	; 0xff
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f004 fced 	bl	800abb0 <VL53L0X_WrByte>
 80061d6:	4603      	mov	r3, r0
 80061d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80061dc:	f107 031a 	add.w	r3, r7, #26
 80061e0:	461a      	mov	r2, r3
 80061e2:	2184      	movs	r1, #132	; 0x84
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f004 fd8f 	bl	800ad08 <VL53L0X_RdWord>
 80061ea:	4603      	mov	r3, r0
 80061ec:	461a      	mov	r2, r3
 80061ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80061f2:	4313      	orrs	r3, r2
 80061f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80061f8:	2200      	movs	r2, #0
 80061fa:	21ff      	movs	r1, #255	; 0xff
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f004 fcd7 	bl	800abb0 <VL53L0X_WrByte>
 8006202:	4603      	mov	r3, r0
 8006204:	461a      	mov	r2, r3
 8006206:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800620a:	4313      	orrs	r3, r2
 800620c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006210:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006214:	2b00      	cmp	r3, #0
 8006216:	d105      	bne.n	8006224 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8006218:	8b7b      	ldrh	r3, [r7, #26]
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	461a      	mov	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8006224:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006228:	2b00      	cmp	r3, #0
 800622a:	d108      	bne.n	800623e <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800622c:	f107 031c 	add.w	r3, r7, #28
 8006230:	4619      	mov	r1, r3
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f8d0 	bl	80063d8 <VL53L0X_GetDeviceParameters>
 8006238:	4603      	mov	r3, r0
 800623a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800623e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006242:	2b00      	cmp	r3, #0
 8006244:	d110      	bne.n	8006268 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8006246:	f107 0319 	add.w	r3, r7, #25
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f9ae 	bl	80065ae <VL53L0X_GetFractionEnable>
 8006252:	4603      	mov	r3, r0
 8006254:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8006258:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800625c:	2b00      	cmp	r3, #0
 800625e:	d103      	bne.n	8006268 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8006260:	7e7a      	ldrb	r2, [r7, #25]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006268:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10e      	bne.n	800628e <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f103 0410 	add.w	r4, r3, #16
 8006276:	f107 051c 	add.w	r5, r7, #28
 800627a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800627c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800627e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006286:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800628a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800628e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006292:	2b00      	cmp	r3, #0
 8006294:	d111      	bne.n	80062ba <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8006296:	f107 0319 	add.w	r3, r7, #25
 800629a:	461a      	mov	r2, r3
 800629c:	2101      	movs	r1, #1
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f004 fd08 	bl	800acb4 <VL53L0X_RdByte>
 80062a4:	4603      	mov	r3, r0
 80062a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80062aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d103      	bne.n	80062ba <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80062b2:	7e7a      	ldrb	r2, [r7, #25]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80062ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d107      	bne.n	80062d2 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80062c2:	2200      	movs	r2, #0
 80062c4:	2100      	movs	r1, #0
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f9e6 	bl	8006698 <VL53L0X_SetSequenceStepEnable>
 80062cc:	4603      	mov	r3, r0
 80062ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80062d2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d107      	bne.n	80062ea <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80062da:	2200      	movs	r2, #0
 80062dc:	2102      	movs	r1, #2
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f9da 	bl	8006698 <VL53L0X_SetSequenceStepEnable>
 80062e4:	4603      	mov	r3, r0
 80062e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80062ea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d103      	bne.n	80062fa <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2203      	movs	r2, #3
 80062f6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80062fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d109      	bne.n	8006316 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006302:	f107 0313 	add.w	r3, r7, #19
 8006306:	461a      	mov	r2, r3
 8006308:	2100      	movs	r1, #0
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f9ac 	bl	8006668 <VL53L0X_GetVcselPulsePeriod>
 8006310:	4603      	mov	r3, r0
 8006312:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006316:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800631a:	2b00      	cmp	r3, #0
 800631c:	d103      	bne.n	8006326 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800631e:	7cfa      	ldrb	r2, [r7, #19]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006326:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800632a:	2b00      	cmp	r3, #0
 800632c:	d109      	bne.n	8006342 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800632e:	f107 0313 	add.w	r3, r7, #19
 8006332:	461a      	mov	r2, r3
 8006334:	2101      	movs	r1, #1
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f996 	bl	8006668 <VL53L0X_GetVcselPulsePeriod>
 800633c:	4603      	mov	r3, r0
 800633e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006342:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006346:	2b00      	cmp	r3, #0
 8006348:	d103      	bne.n	8006352 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800634a:	7cfa      	ldrb	r2, [r7, #19]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006352:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006356:	2b00      	cmp	r3, #0
 8006358:	d109      	bne.n	800636e <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800635a:	f107 030c 	add.w	r3, r7, #12
 800635e:	461a      	mov	r2, r3
 8006360:	2103      	movs	r1, #3
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f002 fee0 	bl	8009128 <get_sequence_step_timeout>
 8006368:	4603      	mov	r3, r0
 800636a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800636e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006372:	2b00      	cmp	r3, #0
 8006374:	d103      	bne.n	800637e <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800637e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006382:	2b00      	cmp	r3, #0
 8006384:	d109      	bne.n	800639a <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8006386:	f107 030c 	add.w	r3, r7, #12
 800638a:	461a      	mov	r2, r3
 800638c:	2104      	movs	r1, #4
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f002 feca 	bl	8009128 <get_sequence_step_timeout>
 8006394:	4603      	mov	r3, r0
 8006396:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800639a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d103      	bne.n	80063aa <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80063aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3770      	adds	r7, #112	; 0x70
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bdb0      	pop	{r4, r5, r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20000018 	.word	0x20000018

080063bc <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80063c4:	239d      	movs	r3, #157	; 0x9d
 80063c6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 80063c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063e2:	2300      	movs	r3, #0
 80063e4:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	4619      	mov	r1, r3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f8cc 	bl	8006588 <VL53L0X_GetDeviceMode>
 80063f0:	4603      	mov	r3, r0
 80063f2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80063f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d107      	bne.n	800640c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	3308      	adds	r3, #8
 8006400:	4619      	mov	r1, r3
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fa94 	bl	8006930 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8006408:	4603      	mov	r3, r0
 800640a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800640c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d102      	bne.n	800641a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	2200      	movs	r2, #0
 8006418:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800641a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d107      	bne.n	8006432 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	3310      	adds	r3, #16
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 faca 	bl	80069c2 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800642e:	4603      	mov	r3, r0
 8006430:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8006432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d107      	bne.n	800644a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	3314      	adds	r3, #20
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7ff fcc2 	bl	8005dca <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8006446:	4603      	mov	r3, r0
 8006448:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800644a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d134      	bne.n	80064bc <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006452:	2300      	movs	r3, #0
 8006454:	60bb      	str	r3, [r7, #8]
 8006456:	e02a      	b.n	80064ae <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d12a      	bne.n	80064b6 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	b299      	uxth	r1, r3
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	3308      	adds	r3, #8
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	4413      	add	r3, r2
 800646e:	3304      	adds	r3, #4
 8006470:	461a      	mov	r2, r3
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fbea 	bl	8006c4c <VL53L0X_GetLimitCheckValue>
 8006478:	4603      	mov	r3, r0
 800647a:	461a      	mov	r2, r3
 800647c:	7bfb      	ldrb	r3, [r7, #15]
 800647e:	4313      	orrs	r3, r2
 8006480:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d117      	bne.n	80064ba <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	b299      	uxth	r1, r3
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	3318      	adds	r3, #24
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	4413      	add	r3, r2
 8006496:	461a      	mov	r2, r3
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fb51 	bl	8006b40 <VL53L0X_GetLimitCheckEnable>
 800649e:	4603      	mov	r3, r0
 80064a0:	461a      	mov	r2, r3
 80064a2:	7bfb      	ldrb	r3, [r7, #15]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	3301      	adds	r3, #1
 80064ac:	60bb      	str	r3, [r7, #8]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2b05      	cmp	r3, #5
 80064b2:	ddd1      	ble.n	8006458 <VL53L0X_GetDeviceParameters+0x80>
 80064b4:	e002      	b.n	80064bc <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80064b6:	bf00      	nop
 80064b8:	e000      	b.n	80064bc <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80064ba:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80064bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d107      	bne.n	80064d4 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	333c      	adds	r3, #60	; 0x3c
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 fc4c 	bl	8006d68 <VL53L0X_GetWrapAroundCheckEnable>
 80064d0:	4603      	mov	r3, r0
 80064d2:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80064d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d107      	bne.n	80064ec <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	3304      	adds	r3, #4
 80064e0:	4619      	mov	r1, r3
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f895 	bl	8006612 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80064e8:	4603      	mov	r3, r0
 80064ea:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80064ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006504:	2300      	movs	r3, #0
 8006506:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	2b15      	cmp	r3, #21
 800650c:	d832      	bhi.n	8006574 <VL53L0X_SetDeviceMode+0x7c>
 800650e:	a201      	add	r2, pc, #4	; (adr r2, 8006514 <VL53L0X_SetDeviceMode+0x1c>)
 8006510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006514:	0800656d 	.word	0x0800656d
 8006518:	0800656d 	.word	0x0800656d
 800651c:	08006575 	.word	0x08006575
 8006520:	0800656d 	.word	0x0800656d
 8006524:	08006575 	.word	0x08006575
 8006528:	08006575 	.word	0x08006575
 800652c:	08006575 	.word	0x08006575
 8006530:	08006575 	.word	0x08006575
 8006534:	08006575 	.word	0x08006575
 8006538:	08006575 	.word	0x08006575
 800653c:	08006575 	.word	0x08006575
 8006540:	08006575 	.word	0x08006575
 8006544:	08006575 	.word	0x08006575
 8006548:	08006575 	.word	0x08006575
 800654c:	08006575 	.word	0x08006575
 8006550:	08006575 	.word	0x08006575
 8006554:	08006575 	.word	0x08006575
 8006558:	08006575 	.word	0x08006575
 800655c:	08006575 	.word	0x08006575
 8006560:	08006575 	.word	0x08006575
 8006564:	0800656d 	.word	0x0800656d
 8006568:	0800656d 	.word	0x0800656d
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	78fa      	ldrb	r2, [r7, #3]
 8006570:	741a      	strb	r2, [r3, #16]
		break;
 8006572:	e001      	b.n	8006578 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006574:	23f8      	movs	r3, #248	; 0xf8
 8006576:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006578:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006592:	2300      	movs	r3, #0
 8006594:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	7c1a      	ldrb	r2, [r3, #16]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800659e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80065b8:	2300      	movs	r3, #0
 80065ba:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	2109      	movs	r1, #9
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f004 fb77 	bl	800acb4 <VL53L0X_RdByte>
 80065c6:	4603      	mov	r3, r0
 80065c8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80065ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d106      	bne.n	80065e0 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80065e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80065f6:	2300      	movs	r3, #0
 80065f8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80065fa:	6839      	ldr	r1, [r7, #0]
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f003 fa26 	bl	8009a4e <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8006602:	4603      	mov	r3, r0
 8006604:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8006606:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
 800661a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800661c:	2300      	movs	r3, #0
 800661e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f003 faf3 	bl	8009c0e <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8006628:	4603      	mov	r3, r0
 800662a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800662c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	460b      	mov	r3, r1
 8006642:	70fb      	strb	r3, [r7, #3]
 8006644:	4613      	mov	r3, r2
 8006646:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006648:	2300      	movs	r3, #0
 800664a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800664c:	78ba      	ldrb	r2, [r7, #2]
 800664e:	78fb      	ldrb	r3, [r7, #3]
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f002 ff3b 	bl	80094ce <VL53L0X_set_vcsel_pulse_period>
 8006658:	4603      	mov	r3, r0
 800665a:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800665c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	460b      	mov	r3, r1
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006676:	2300      	movs	r3, #0
 8006678:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800667a:	7afb      	ldrb	r3, [r7, #11]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	4619      	mov	r1, r3
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f003 f9ad 	bl	80099e0 <VL53L0X_get_vcsel_pulse_period>
 8006686:	4603      	mov	r3, r0
 8006688:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800668a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
	...

08006698 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	70fb      	strb	r3, [r7, #3]
 80066a4:	4613      	mov	r3, r2
 80066a6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066a8:	2300      	movs	r3, #0
 80066aa:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80066ac:	2300      	movs	r3, #0
 80066ae:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80066b0:	2300      	movs	r3, #0
 80066b2:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80066b4:	f107 030f 	add.w	r3, r7, #15
 80066b8:	461a      	mov	r2, r3
 80066ba:	2101      	movs	r1, #1
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f004 faf9 	bl	800acb4 <VL53L0X_RdByte>
 80066c2:	4603      	mov	r3, r0
 80066c4:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
 80066c8:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80066ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d15a      	bne.n	8006788 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80066d2:	78bb      	ldrb	r3, [r7, #2]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d12b      	bne.n	8006730 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80066d8:	78fb      	ldrb	r3, [r7, #3]
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d825      	bhi.n	800672a <VL53L0X_SetSequenceStepEnable+0x92>
 80066de:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80066e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e4:	080066f9 	.word	0x080066f9
 80066e8:	08006703 	.word	0x08006703
 80066ec:	0800670d 	.word	0x0800670d
 80066f0:	08006717 	.word	0x08006717
 80066f4:	08006721 	.word	0x08006721
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80066f8:	7dbb      	ldrb	r3, [r7, #22]
 80066fa:	f043 0310 	orr.w	r3, r3, #16
 80066fe:	75bb      	strb	r3, [r7, #22]
				break;
 8006700:	e043      	b.n	800678a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8006702:	7dbb      	ldrb	r3, [r7, #22]
 8006704:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006708:	75bb      	strb	r3, [r7, #22]
				break;
 800670a:	e03e      	b.n	800678a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800670c:	7dbb      	ldrb	r3, [r7, #22]
 800670e:	f043 0304 	orr.w	r3, r3, #4
 8006712:	75bb      	strb	r3, [r7, #22]
				break;
 8006714:	e039      	b.n	800678a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8006716:	7dbb      	ldrb	r3, [r7, #22]
 8006718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800671c:	75bb      	strb	r3, [r7, #22]
				break;
 800671e:	e034      	b.n	800678a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8006720:	7dbb      	ldrb	r3, [r7, #22]
 8006722:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006726:	75bb      	strb	r3, [r7, #22]
				break;
 8006728:	e02f      	b.n	800678a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800672a:	23fc      	movs	r3, #252	; 0xfc
 800672c:	75fb      	strb	r3, [r7, #23]
 800672e:	e02c      	b.n	800678a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8006730:	78fb      	ldrb	r3, [r7, #3]
 8006732:	2b04      	cmp	r3, #4
 8006734:	d825      	bhi.n	8006782 <VL53L0X_SetSequenceStepEnable+0xea>
 8006736:	a201      	add	r2, pc, #4	; (adr r2, 800673c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8006738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673c:	08006751 	.word	0x08006751
 8006740:	0800675b 	.word	0x0800675b
 8006744:	08006765 	.word	0x08006765
 8006748:	0800676f 	.word	0x0800676f
 800674c:	08006779 	.word	0x08006779
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8006750:	7dbb      	ldrb	r3, [r7, #22]
 8006752:	f023 0310 	bic.w	r3, r3, #16
 8006756:	75bb      	strb	r3, [r7, #22]
				break;
 8006758:	e017      	b.n	800678a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800675a:	7dbb      	ldrb	r3, [r7, #22]
 800675c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006760:	75bb      	strb	r3, [r7, #22]
				break;
 8006762:	e012      	b.n	800678a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8006764:	7dbb      	ldrb	r3, [r7, #22]
 8006766:	f023 0304 	bic.w	r3, r3, #4
 800676a:	75bb      	strb	r3, [r7, #22]
				break;
 800676c:	e00d      	b.n	800678a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800676e:	7dbb      	ldrb	r3, [r7, #22]
 8006770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006774:	75bb      	strb	r3, [r7, #22]
				break;
 8006776:	e008      	b.n	800678a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8006778:	7dbb      	ldrb	r3, [r7, #22]
 800677a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800677e:	75bb      	strb	r3, [r7, #22]
				break;
 8006780:	e003      	b.n	800678a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006782:	23fc      	movs	r3, #252	; 0xfc
 8006784:	75fb      	strb	r3, [r7, #23]
 8006786:	e000      	b.n	800678a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8006788:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800678a:	7bfb      	ldrb	r3, [r7, #15]
 800678c:	7dba      	ldrb	r2, [r7, #22]
 800678e:	429a      	cmp	r2, r3
 8006790:	d01e      	beq.n	80067d0 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8006792:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d107      	bne.n	80067aa <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800679a:	7dbb      	ldrb	r3, [r7, #22]
 800679c:	461a      	mov	r2, r3
 800679e:	2101      	movs	r1, #1
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f004 fa05 	bl	800abb0 <VL53L0X_WrByte>
 80067a6:	4603      	mov	r3, r0
 80067a8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80067aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d103      	bne.n	80067ba <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	7dba      	ldrb	r2, [r7, #22]
 80067b6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80067ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d106      	bne.n	80067d0 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80067c8:	6939      	ldr	r1, [r7, #16]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff ff0e 	bl	80065ec <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80067d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3718      	adds	r7, #24
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80067dc:	b480      	push	{r7}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	607b      	str	r3, [r7, #4]
 80067e6:	460b      	mov	r3, r1
 80067e8:	72fb      	strb	r3, [r7, #11]
 80067ea:	4613      	mov	r3, r2
 80067ec:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067ee:	2300      	movs	r3, #0
 80067f0:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80067f8:	7afb      	ldrb	r3, [r7, #11]
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d836      	bhi.n	800686c <sequence_step_enabled+0x90>
 80067fe:	a201      	add	r2, pc, #4	; (adr r2, 8006804 <sequence_step_enabled+0x28>)
 8006800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006804:	08006819 	.word	0x08006819
 8006808:	0800682b 	.word	0x0800682b
 800680c:	0800683d 	.word	0x0800683d
 8006810:	0800684f 	.word	0x0800684f
 8006814:	08006861 	.word	0x08006861
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8006818:	7abb      	ldrb	r3, [r7, #10]
 800681a:	111b      	asrs	r3, r3, #4
 800681c:	b2db      	uxtb	r3, r3
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	b2da      	uxtb	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	701a      	strb	r2, [r3, #0]
		break;
 8006828:	e022      	b.n	8006870 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800682a:	7abb      	ldrb	r3, [r7, #10]
 800682c:	10db      	asrs	r3, r3, #3
 800682e:	b2db      	uxtb	r3, r3
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	b2da      	uxtb	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	701a      	strb	r2, [r3, #0]
		break;
 800683a:	e019      	b.n	8006870 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800683c:	7abb      	ldrb	r3, [r7, #10]
 800683e:	109b      	asrs	r3, r3, #2
 8006840:	b2db      	uxtb	r3, r3
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	b2da      	uxtb	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	701a      	strb	r2, [r3, #0]
		break;
 800684c:	e010      	b.n	8006870 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800684e:	7abb      	ldrb	r3, [r7, #10]
 8006850:	119b      	asrs	r3, r3, #6
 8006852:	b2db      	uxtb	r3, r3
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	b2da      	uxtb	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	701a      	strb	r2, [r3, #0]
		break;
 800685e:	e007      	b.n	8006870 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8006860:	7abb      	ldrb	r3, [r7, #10]
 8006862:	09db      	lsrs	r3, r3, #7
 8006864:	b2da      	uxtb	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	701a      	strb	r2, [r3, #0]
		break;
 800686a:	e001      	b.n	8006870 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800686c:	23fc      	movs	r3, #252	; 0xfc
 800686e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006870:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006874:	4618      	mov	r0, r3
 8006876:	371c      	adds	r7, #28
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800688a:	2300      	movs	r3, #0
 800688c:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800688e:	2300      	movs	r3, #0
 8006890:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006892:	f107 030e 	add.w	r3, r7, #14
 8006896:	461a      	mov	r2, r3
 8006898:	2101      	movs	r1, #1
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f004 fa0a 	bl	800acb4 <VL53L0X_RdByte>
 80068a0:	4603      	mov	r3, r0
 80068a2:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80068a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d107      	bne.n	80068bc <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80068ac:	7bba      	ldrb	r2, [r7, #14]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2100      	movs	r1, #0
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7ff ff92 	bl	80067dc <sequence_step_enabled>
 80068b8:	4603      	mov	r3, r0
 80068ba:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80068bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d108      	bne.n	80068d6 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80068c4:	7bba      	ldrb	r2, [r7, #14]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	3302      	adds	r3, #2
 80068ca:	2101      	movs	r1, #1
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7ff ff85 	bl	80067dc <sequence_step_enabled>
 80068d2:	4603      	mov	r3, r0
 80068d4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80068d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d108      	bne.n	80068f0 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80068de:	7bba      	ldrb	r2, [r7, #14]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	3301      	adds	r3, #1
 80068e4:	2102      	movs	r1, #2
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7ff ff78 	bl	80067dc <sequence_step_enabled>
 80068ec:	4603      	mov	r3, r0
 80068ee:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80068f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d108      	bne.n	800690a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80068f8:	7bba      	ldrb	r2, [r7, #14]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	3303      	adds	r3, #3
 80068fe:	2103      	movs	r1, #3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7ff ff6b 	bl	80067dc <sequence_step_enabled>
 8006906:	4603      	mov	r3, r0
 8006908:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800690a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d108      	bne.n	8006924 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8006912:	7bba      	ldrb	r2, [r7, #14]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	3304      	adds	r3, #4
 8006918:	2104      	movs	r1, #4
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff ff5e 	bl	80067dc <sequence_step_enabled>
 8006920:	4603      	mov	r3, r0
 8006922:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006924:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800693a:	2300      	movs	r3, #0
 800693c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800693e:	f107 030c 	add.w	r3, r7, #12
 8006942:	461a      	mov	r2, r3
 8006944:	21f8      	movs	r1, #248	; 0xf8
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f004 f9de 	bl	800ad08 <VL53L0X_RdWord>
 800694c:	4603      	mov	r3, r0
 800694e:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8006950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d108      	bne.n	800696a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8006958:	f107 0308 	add.w	r3, r7, #8
 800695c:	461a      	mov	r2, r3
 800695e:	2104      	movs	r1, #4
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f004 fa09 	bl	800ad78 <VL53L0X_RdDWord>
 8006966:	4603      	mov	r3, r0
 8006968:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800696a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10c      	bne.n	800698c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8006972:	89bb      	ldrh	r3, [r7, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d005      	beq.n	8006984 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	89ba      	ldrh	r2, [r7, #12]
 800697c:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800698c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069a2:	2300      	movs	r3, #0
 80069a4:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	7f1b      	ldrb	r3, [r3, #28]
 80069aa:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	7bba      	ldrb	r2, [r7, #14]
 80069b0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80069b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b086      	sub	sp, #24
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069cc:	2300      	movs	r3, #0
 80069ce:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80069d0:	f107 030e 	add.w	r3, r7, #14
 80069d4:	461a      	mov	r2, r3
 80069d6:	2120      	movs	r1, #32
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f004 f995 	bl	800ad08 <VL53L0X_RdWord>
 80069de:	4603      	mov	r3, r0
 80069e0:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80069e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d118      	bne.n	8006a1c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80069ea:	89fb      	ldrh	r3, [r7, #14]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d109      	bne.n	8006a04 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	771a      	strb	r2, [r3, #28]
 8006a02:	e00b      	b.n	8006a1c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8006a04:	89fb      	ldrh	r3, [r7, #14]
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006a1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3718      	adds	r7, #24
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	807b      	strh	r3, [r7, #2]
 8006a34:	4613      	mov	r3, r2
 8006a36:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8006a40:	2300      	movs	r3, #0
 8006a42:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006a48:	887b      	ldrh	r3, [r7, #2]
 8006a4a:	2b05      	cmp	r3, #5
 8006a4c:	d902      	bls.n	8006a54 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006a4e:	23fc      	movs	r3, #252	; 0xfc
 8006a50:	75fb      	strb	r3, [r7, #23]
 8006a52:	e05b      	b.n	8006b0c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8006a54:	787b      	ldrb	r3, [r7, #1]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d106      	bne.n	8006a68 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8006a62:	2301      	movs	r3, #1
 8006a64:	73bb      	strb	r3, [r7, #14]
 8006a66:	e00a      	b.n	8006a7e <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006a68:	887b      	ldrh	r3, [r7, #2]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	330c      	adds	r3, #12
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8006a76:	2300      	movs	r3, #0
 8006a78:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8006a7e:	887b      	ldrh	r3, [r7, #2]
 8006a80:	2b05      	cmp	r3, #5
 8006a82:	d841      	bhi.n	8006b08 <VL53L0X_SetLimitCheckEnable+0xe0>
 8006a84:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <VL53L0X_SetLimitCheckEnable+0x64>)
 8006a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8a:	bf00      	nop
 8006a8c:	08006aa5 	.word	0x08006aa5
 8006a90:	08006aaf 	.word	0x08006aaf
 8006a94:	08006ac5 	.word	0x08006ac5
 8006a98:	08006acf 	.word	0x08006acf
 8006a9c:	08006ad9 	.word	0x08006ad9
 8006aa0:	08006af1 	.word	0x08006af1

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	7bfa      	ldrb	r2, [r7, #15]
 8006aa8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8006aac:	e02e      	b.n	8006b0c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	2144      	movs	r1, #68	; 0x44
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f004 f89d 	bl	800abf8 <VL53L0X_WrWord>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	75fb      	strb	r3, [r7, #23]

			break;
 8006ac2:	e023      	b.n	8006b0c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	7bfa      	ldrb	r2, [r7, #15]
 8006ac8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8006acc:	e01e      	b.n	8006b0c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	7bfa      	ldrb	r2, [r7, #15]
 8006ad2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8006ad6:	e019      	b.n	8006b0c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8006ad8:	7bbb      	ldrb	r3, [r7, #14]
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006ade:	7b7b      	ldrb	r3, [r7, #13]
 8006ae0:	22fe      	movs	r2, #254	; 0xfe
 8006ae2:	2160      	movs	r1, #96	; 0x60
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f004 f8b1 	bl	800ac4c <VL53L0X_UpdateByte>
 8006aea:	4603      	mov	r3, r0
 8006aec:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8006aee:	e00d      	b.n	8006b0c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8006af0:	7bbb      	ldrb	r3, [r7, #14]
 8006af2:	011b      	lsls	r3, r3, #4
 8006af4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8006af6:	7b7b      	ldrb	r3, [r7, #13]
 8006af8:	22ef      	movs	r2, #239	; 0xef
 8006afa:	2160      	movs	r1, #96	; 0x60
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f004 f8a5 	bl	800ac4c <VL53L0X_UpdateByte>
 8006b02:	4603      	mov	r3, r0
 8006b04:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8006b06:	e001      	b.n	8006b0c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006b08:	23fc      	movs	r3, #252	; 0xfc
 8006b0a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10f      	bne.n	8006b34 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8006b14:	787b      	ldrb	r3, [r7, #1]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d106      	bne.n	8006b28 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006b1a:	887b      	ldrh	r3, [r7, #2]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	4413      	add	r3, r2
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006b26:	e005      	b.n	8006b34 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006b28:	887b      	ldrh	r3, [r7, #2]
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006b34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3718      	adds	r7, #24
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	460b      	mov	r3, r1
 8006b4a:	607a      	str	r2, [r7, #4]
 8006b4c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006b52:	897b      	ldrh	r3, [r7, #10]
 8006b54:	2b05      	cmp	r3, #5
 8006b56:	d905      	bls.n	8006b64 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006b58:	23fc      	movs	r3, #252	; 0xfc
 8006b5a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	701a      	strb	r2, [r3, #0]
 8006b62:	e008      	b.n	8006b76 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006b64:	897b      	ldrh	r3, [r7, #10]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b6e:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	7dba      	ldrb	r2, [r7, #22]
 8006b74:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006b76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	371c      	adds	r7, #28
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
	...

08006b88 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	460b      	mov	r3, r1
 8006b92:	607a      	str	r2, [r7, #4]
 8006b94:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b96:	2300      	movs	r3, #0
 8006b98:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8006b9a:	897b      	ldrh	r3, [r7, #10]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ba4:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8006ba6:	7dbb      	ldrb	r3, [r7, #22]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d107      	bne.n	8006bbc <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006bac:	897b      	ldrh	r3, [r7, #10]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	330c      	adds	r3, #12
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	605a      	str	r2, [r3, #4]
 8006bba:	e040      	b.n	8006c3e <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8006bbc:	897b      	ldrh	r3, [r7, #10]
 8006bbe:	2b05      	cmp	r3, #5
 8006bc0:	d830      	bhi.n	8006c24 <VL53L0X_SetLimitCheckValue+0x9c>
 8006bc2:	a201      	add	r2, pc, #4	; (adr r2, 8006bc8 <VL53L0X_SetLimitCheckValue+0x40>)
 8006bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc8:	08006be1 	.word	0x08006be1
 8006bcc:	08006be9 	.word	0x08006be9
 8006bd0:	08006bff 	.word	0x08006bff
 8006bd4:	08006c07 	.word	0x08006c07
 8006bd8:	08006c0f 	.word	0x08006c0f
 8006bdc:	08006c0f 	.word	0x08006c0f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8006be6:	e01f      	b.n	8006c28 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	461a      	mov	r2, r3
 8006bf0:	2144      	movs	r1, #68	; 0x44
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f004 f800 	bl	800abf8 <VL53L0X_WrWord>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006bfc:	e014      	b.n	8006c28 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8006c04:	e010      	b.n	8006c28 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8006c0c:	e00c      	b.n	8006c28 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	461a      	mov	r2, r3
 8006c16:	2164      	movs	r1, #100	; 0x64
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f003 ffed 	bl	800abf8 <VL53L0X_WrWord>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8006c22:	e001      	b.n	8006c28 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c24:	23fc      	movs	r3, #252	; 0xfc
 8006c26:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006c28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d106      	bne.n	8006c3e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006c30:	897b      	ldrh	r3, [r7, #10]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	330c      	adds	r3, #12
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006c3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop

08006c4c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	460b      	mov	r3, r1
 8006c56:	607a      	str	r2, [r7, #4]
 8006c58:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8006c62:	897b      	ldrh	r3, [r7, #10]
 8006c64:	2b05      	cmp	r3, #5
 8006c66:	d847      	bhi.n	8006cf8 <VL53L0X_GetLimitCheckValue+0xac>
 8006c68:	a201      	add	r2, pc, #4	; (adr r2, 8006c70 <VL53L0X_GetLimitCheckValue+0x24>)
 8006c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6e:	bf00      	nop
 8006c70:	08006c89 	.word	0x08006c89
 8006c74:	08006c95 	.word	0x08006c95
 8006c78:	08006cbb 	.word	0x08006cbb
 8006c7c:	08006cc7 	.word	0x08006cc7
 8006c80:	08006cd3 	.word	0x08006cd3
 8006c84:	08006cd3 	.word	0x08006cd3

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c8c:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	77bb      	strb	r3, [r7, #30]
		break;
 8006c92:	e033      	b.n	8006cfc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006c94:	f107 0316 	add.w	r3, r7, #22
 8006c98:	461a      	mov	r2, r3
 8006c9a:	2144      	movs	r1, #68	; 0x44
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f004 f833 	bl	800ad08 <VL53L0X_RdWord>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006ca6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d102      	bne.n	8006cb4 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006cae:	8afb      	ldrh	r3, [r7, #22]
 8006cb0:	025b      	lsls	r3, r3, #9
 8006cb2:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	77bb      	strb	r3, [r7, #30]
		break;
 8006cb8:	e020      	b.n	8006cfc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cbe:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	77bb      	strb	r3, [r7, #30]
		break;
 8006cc4:	e01a      	b.n	8006cfc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	77bb      	strb	r3, [r7, #30]
		break;
 8006cd0:	e014      	b.n	8006cfc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006cd2:	f107 0316 	add.w	r3, r7, #22
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	2164      	movs	r1, #100	; 0x64
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f004 f814 	bl	800ad08 <VL53L0X_RdWord>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8006ce4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d102      	bne.n	8006cf2 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006cec:	8afb      	ldrh	r3, [r7, #22]
 8006cee:	025b      	lsls	r3, r3, #9
 8006cf0:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	77bb      	strb	r3, [r7, #30]
		break;
 8006cf6:	e001      	b.n	8006cfc <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006cf8:	23fc      	movs	r3, #252	; 0xfc
 8006cfa:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006cfc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d12a      	bne.n	8006d5a <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8006d04:	7fbb      	ldrb	r3, [r7, #30]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d124      	bne.n	8006d54 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d110      	bne.n	8006d32 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8006d10:	897b      	ldrh	r3, [r7, #10]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	330c      	adds	r3, #12
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006d24:	897b      	ldrh	r3, [r7, #10]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	4413      	add	r3, r2
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006d30:	e013      	b.n	8006d5a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006d38:	897b      	ldrh	r3, [r7, #10]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	330c      	adds	r3, #12
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	69ba      	ldr	r2, [r7, #24]
 8006d44:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8006d46:	897b      	ldrh	r3, [r7, #10]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006d52:	e002      	b.n	8006d5a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006d5a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3720      	adds	r7, #32
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop

08006d68 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d72:	2300      	movs	r3, #0
 8006d74:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8006d76:	f107 030e 	add.w	r3, r7, #14
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	2101      	movs	r1, #1
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f003 ff98 	bl	800acb4 <VL53L0X_RdByte>
 8006d84:	4603      	mov	r3, r0
 8006d86:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8006d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10e      	bne.n	8006dae <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8006d90:	7bba      	ldrb	r2, [r7, #14]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8006d98:	7bbb      	ldrb	r3, [r7, #14]
 8006d9a:	b25b      	sxtb	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	da03      	bge.n	8006da8 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2201      	movs	r2, #1
 8006da4:	701a      	strb	r2, [r3, #0]
 8006da6:	e002      	b.n	8006dae <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	2200      	movs	r2, #0
 8006dac:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d104      	bne.n	8006dc0 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781a      	ldrb	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006dd8:	f107 030e 	add.w	r3, r7, #14
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7ff fbd2 	bl	8006588 <VL53L0X_GetDeviceMode>
 8006de4:	4603      	mov	r3, r0
 8006de6:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d107      	bne.n	8006e00 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d104      	bne.n	8006e00 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f898 	bl	8006f2c <VL53L0X_StartMeasurement>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d104      	bne.n	8006e12 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f001 fb3f 	bl	800848c <VL53L0X_measurement_poll_for_completion>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8006e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d106      	bne.n	8006e28 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006e1a:	7bbb      	ldrb	r3, [r7, #14]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d103      	bne.n	8006e28 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2203      	movs	r2, #3
 8006e24:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8006e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e40:	2300      	movs	r3, #0
 8006e42:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8006e44:	2301      	movs	r3, #1
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	68b9      	ldr	r1, [r7, #8]
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f001 fae1 	bl	8008412 <VL53L0X_perform_ref_calibration>
 8006e50:	4603      	mov	r3, r0
 8006e52:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8006e54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3718      	adds	r7, #24
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006e76:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8006e78:	7dbb      	ldrb	r3, [r7, #22]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d005      	beq.n	8006e8a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8006e7e:	7dbb      	ldrb	r3, [r7, #22]
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d002      	beq.n	8006e8a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8006e84:	7dbb      	ldrb	r3, [r7, #22]
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d147      	bne.n	8006f1a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8006e8a:	f107 030c 	add.w	r3, r7, #12
 8006e8e:	f107 0210 	add.w	r2, r7, #16
 8006e92:	2101      	movs	r1, #1
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fbc3 	bl	8007620 <VL53L0X_GetInterruptThresholds>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006ea4:	d803      	bhi.n	8006eae <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8006ea6:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8006ea8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006eac:	d935      	bls.n	8006f1a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8006eae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d131      	bne.n	8006f1a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8006eb6:	78fb      	ldrb	r3, [r7, #3]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d006      	beq.n	8006eca <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8006ebc:	491a      	ldr	r1, [pc, #104]	; (8006f28 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f002 ff56 	bl	8009d70 <VL53L0X_load_tuning_settings>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	75fb      	strb	r3, [r7, #23]
 8006ec8:	e027      	b.n	8006f1a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8006eca:	2204      	movs	r2, #4
 8006ecc:	21ff      	movs	r1, #255	; 0xff
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f003 fe6e 	bl	800abb0 <VL53L0X_WrByte>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8006ede:	2200      	movs	r2, #0
 8006ee0:	2170      	movs	r1, #112	; 0x70
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f003 fe64 	bl	800abb0 <VL53L0X_WrByte>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	461a      	mov	r2, r3
 8006eec:	7dfb      	ldrb	r3, [r7, #23]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	21ff      	movs	r1, #255	; 0xff
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f003 fe5a 	bl	800abb0 <VL53L0X_WrByte>
 8006efc:	4603      	mov	r3, r0
 8006efe:	461a      	mov	r2, r3
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006f06:	2200      	movs	r2, #0
 8006f08:	2180      	movs	r1, #128	; 0x80
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f003 fe50 	bl	800abb0 <VL53L0X_WrByte>
 8006f10:	4603      	mov	r3, r0
 8006f12:	461a      	mov	r2, r3
 8006f14:	7dfb      	ldrb	r3, [r7, #23]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8006f1a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	2000010c 	.word	0x2000010c

08006f2c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f34:	2300      	movs	r3, #0
 8006f36:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006f3c:	f107 030e 	add.w	r3, r7, #14
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7ff fb20 	bl	8006588 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006f48:	2201      	movs	r2, #1
 8006f4a:	2180      	movs	r1, #128	; 0x80
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f003 fe2f 	bl	800abb0 <VL53L0X_WrByte>
 8006f52:	4603      	mov	r3, r0
 8006f54:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006f56:	2201      	movs	r2, #1
 8006f58:	21ff      	movs	r1, #255	; 0xff
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f003 fe28 	bl	800abb0 <VL53L0X_WrByte>
 8006f60:	4603      	mov	r3, r0
 8006f62:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006f64:	2200      	movs	r2, #0
 8006f66:	2100      	movs	r1, #0
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f003 fe21 	bl	800abb0 <VL53L0X_WrByte>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8006f78:	461a      	mov	r2, r3
 8006f7a:	2191      	movs	r1, #145	; 0x91
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f003 fe17 	bl	800abb0 <VL53L0X_WrByte>
 8006f82:	4603      	mov	r3, r0
 8006f84:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006f86:	2201      	movs	r2, #1
 8006f88:	2100      	movs	r1, #0
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f003 fe10 	bl	800abb0 <VL53L0X_WrByte>
 8006f90:	4603      	mov	r3, r0
 8006f92:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006f94:	2200      	movs	r2, #0
 8006f96:	21ff      	movs	r1, #255	; 0xff
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f003 fe09 	bl	800abb0 <VL53L0X_WrByte>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	2180      	movs	r1, #128	; 0x80
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f003 fe02 	bl	800abb0 <VL53L0X_WrByte>
 8006fac:	4603      	mov	r3, r0
 8006fae:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8006fb0:	7bbb      	ldrb	r3, [r7, #14]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d037      	beq.n	8007026 <VL53L0X_StartMeasurement+0xfa>
 8006fb6:	2b03      	cmp	r3, #3
 8006fb8:	d04f      	beq.n	800705a <VL53L0X_StartMeasurement+0x12e>
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d167      	bne.n	800708e <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f003 fdf4 	bl	800abb0 <VL53L0X_WrByte>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8006fd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d15d      	bne.n	8007094 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d008      	beq.n	8006ff4 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8006fe2:	f107 030d 	add.w	r3, r7, #13
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	2100      	movs	r1, #0
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f003 fe62 	bl	800acb4 <VL53L0X_RdByte>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8006ffa:	7b7a      	ldrb	r2, [r7, #13]
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	4013      	ands	r3, r2
 8007000:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007002:	7bfa      	ldrb	r2, [r7, #15]
 8007004:	429a      	cmp	r2, r3
 8007006:	d107      	bne.n	8007018 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8007008:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d103      	bne.n	8007018 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007016:	d3e1      	bcc.n	8006fdc <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800701e:	d339      	bcc.n	8007094 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8007020:	23f9      	movs	r3, #249	; 0xf9
 8007022:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8007024:	e036      	b.n	8007094 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007026:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d105      	bne.n	800703a <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800702e:	2101      	movs	r1, #1
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7ff ff15 	bl	8006e60 <VL53L0X_CheckAndLoadInterruptSettings>
 8007036:	4603      	mov	r3, r0
 8007038:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800703a:	2202      	movs	r2, #2
 800703c:	2100      	movs	r1, #0
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f003 fdb6 	bl	800abb0 <VL53L0X_WrByte>
 8007044:	4603      	mov	r3, r0
 8007046:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8007048:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d123      	bne.n	8007098 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2204      	movs	r2, #4
 8007054:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007058:	e01e      	b.n	8007098 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800705a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d105      	bne.n	800706e <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007062:	2101      	movs	r1, #1
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f7ff fefb 	bl	8006e60 <VL53L0X_CheckAndLoadInterruptSettings>
 800706a:	4603      	mov	r3, r0
 800706c:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800706e:	2204      	movs	r2, #4
 8007070:	2100      	movs	r1, #0
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f003 fd9c 	bl	800abb0 <VL53L0X_WrByte>
 8007078:	4603      	mov	r3, r0
 800707a:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800707c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10b      	bne.n	800709c <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2204      	movs	r2, #4
 8007088:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800708c:	e006      	b.n	800709c <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800708e:	23f8      	movs	r3, #248	; 0xf8
 8007090:	75fb      	strb	r3, [r7, #23]
 8007092:	e004      	b.n	800709e <VL53L0X_StartMeasurement+0x172>
		break;
 8007094:	bf00      	nop
 8007096:	e002      	b.n	800709e <VL53L0X_StartMeasurement+0x172>
		break;
 8007098:	bf00      	nop
 800709a:	e000      	b.n	800709e <VL53L0X_StartMeasurement+0x172>
		break;
 800709c:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800709e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3718      	adds	r7, #24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b084      	sub	sp, #16
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070b4:	2300      	movs	r3, #0
 80070b6:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80070be:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80070c0:	7bbb      	ldrb	r3, [r7, #14]
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	d112      	bne.n	80070ec <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80070c6:	f107 0308 	add.w	r3, r7, #8
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fb1d 	bl	800770c <VL53L0X_GetInterruptMaskStatus>
 80070d2:	4603      	mov	r3, r0
 80070d4:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d103      	bne.n	80070e4 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2201      	movs	r2, #1
 80070e0:	701a      	strb	r2, [r3, #0]
 80070e2:	e01c      	b.n	800711e <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2200      	movs	r2, #0
 80070e8:	701a      	strb	r2, [r3, #0]
 80070ea:	e018      	b.n	800711e <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80070ec:	f107 030d 	add.w	r3, r7, #13
 80070f0:	461a      	mov	r2, r3
 80070f2:	2114      	movs	r1, #20
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f003 fddd 	bl	800acb4 <VL53L0X_RdByte>
 80070fa:	4603      	mov	r3, r0
 80070fc:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80070fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10b      	bne.n	800711e <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8007106:	7b7b      	ldrb	r3, [r7, #13]
 8007108:	f003 0301 	and.w	r3, r3, #1
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2201      	movs	r2, #1
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	e002      	b.n	800711e <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2200      	movs	r2, #0
 800711c:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800711e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
	...

0800712c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800712c:	b5b0      	push	{r4, r5, r7, lr}
 800712e:	b096      	sub	sp, #88	; 0x58
 8007130:	af02      	add	r7, sp, #8
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007136:	2300      	movs	r3, #0
 8007138:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800713c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007140:	230c      	movs	r3, #12
 8007142:	2114      	movs	r1, #20
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f003 fd07 	bl	800ab58 <VL53L0X_ReadMulti>
 800714a:	4603      	mov	r3, r0
 800714c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8007150:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007154:	2b00      	cmp	r3, #0
 8007156:	f040 80d2 	bne.w	80072fe <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2200      	movs	r2, #0
 800715e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	2200      	movs	r2, #0
 8007164:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8007166:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800716a:	b29b      	uxth	r3, r3
 800716c:	021b      	lsls	r3, r3, #8
 800716e:	b29a      	uxth	r2, r3
 8007170:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007174:	b29b      	uxth	r3, r3
 8007176:	4413      	add	r3, r2
 8007178:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	2200      	movs	r2, #0
 8007180:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8007182:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007186:	b29b      	uxth	r3, r3
 8007188:	021b      	lsls	r3, r3, #8
 800718a:	b29a      	uxth	r2, r3
 800718c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007190:	b29b      	uxth	r3, r3
 8007192:	4413      	add	r3, r2
 8007194:	b29b      	uxth	r3, r3
 8007196:	025b      	lsls	r3, r3, #9
 8007198:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800719e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80071a0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	021b      	lsls	r3, r3, #8
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	4413      	add	r3, r2
 80071b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80071b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80071ba:	025b      	lsls	r3, r3, #9
 80071bc:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80071c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	4413      	add	r3, r2
 80071d4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80071de:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80071e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80071e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 80071ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80071f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80071fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80071fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007200:	d047      	beq.n	8007292 <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8007202:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007204:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007208:	fb02 f303 	mul.w	r3, r2, r3
 800720c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007210:	4a58      	ldr	r2, [pc, #352]	; (8007374 <VL53L0X_GetRangingMeasurementData+0x248>)
 8007212:	fb82 1203 	smull	r1, r2, r2, r3
 8007216:	1192      	asrs	r2, r2, #6
 8007218:	17db      	asrs	r3, r3, #31
 800721a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800721c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	7f1b      	ldrb	r3, [r3, #28]
 800722a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800722e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007232:	2b00      	cmp	r3, #0
 8007234:	d02d      	beq.n	8007292 <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8007236:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007238:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800723c:	fb02 f303 	mul.w	r3, r2, r3
 8007240:	121b      	asrs	r3, r3, #8
 8007242:	461a      	mov	r2, r3
				if ((SignalRate
 8007244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007246:	4293      	cmp	r3, r2
 8007248:	d10d      	bne.n	8007266 <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 800724a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800724e:	2b00      	cmp	r3, #0
 8007250:	d004      	beq.n	800725c <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8007252:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8007256:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800725a:	e016      	b.n	800728a <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 800725c:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8007260:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007264:	e011      	b.n	800728a <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8007266:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800726a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800726c:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8007270:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007272:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8007276:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800727a:	121b      	asrs	r3, r3, #8
 800727c:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800727e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007280:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8007282:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8007286:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800728a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800728e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8007292:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00d      	beq.n	80072b6 <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800729a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800729e:	089b      	lsrs	r3, r3, #2
 80072a0:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80072a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	019b      	lsls	r3, r3, #6
 80072ae:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	75da      	strb	r2, [r3, #23]
 80072b4:	e006      	b.n	80072c4 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80072bc:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	2200      	movs	r2, #0
 80072c2:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80072c4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80072c8:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80072cc:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80072d0:	9301      	str	r3, [sp, #4]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	4613      	mov	r3, r2
 80072d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f003 f9f0 	bl	800a6c0 <VL53L0X_get_pal_range_status>
 80072e0:	4603      	mov	r3, r0
 80072e2:	461a      	mov	r2, r3
 80072e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80072e8:	4313      	orrs	r3, r2
 80072ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80072ee:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d103      	bne.n	80072fe <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80072f6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80072fe:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007302:	2b00      	cmp	r3, #0
 8007304:	d12f      	bne.n	8007366 <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f107 040c 	add.w	r4, r7, #12
 800730c:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8007310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007314:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007318:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8007320:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8007326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800732e:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8007334:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800733a:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8007340:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8007346:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800734c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8007356:	f107 050c 	add.w	r5, r7, #12
 800735a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800735c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800735e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007362:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007366:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800736a:	4618      	mov	r0, r3
 800736c:	3750      	adds	r7, #80	; 0x50
 800736e:	46bd      	mov	sp, r7
 8007370:	bdb0      	pop	{r4, r5, r7, pc}
 8007372:	bf00      	nop
 8007374:	10624dd3 	.word	0x10624dd3

08007378 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007382:	2300      	movs	r3, #0
 8007384:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8007386:	2100      	movs	r1, #0
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7ff f8b5 	bl	80064f8 <VL53L0X_SetDeviceMode>
 800738e:	4603      	mov	r3, r0
 8007390:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d104      	bne.n	80073a4 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7ff fd16 	bl	8006dcc <VL53L0X_PerformSingleMeasurement>
 80073a0:	4603      	mov	r3, r0
 80073a2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80073a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d105      	bne.n	80073b8 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7ff febc 	bl	800712c <VL53L0X_GetRangingMeasurementData>
 80073b4:	4603      	mov	r3, r0
 80073b6:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80073b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d105      	bne.n	80073cc <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80073c0:	2100      	movs	r1, #0
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f962 	bl	800768c <VL53L0X_ClearInterruptMask>
 80073c8:	4603      	mov	r3, r0
 80073ca:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80073cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	4608      	mov	r0, r1
 80073e2:	4611      	mov	r1, r2
 80073e4:	461a      	mov	r2, r3
 80073e6:	4603      	mov	r3, r0
 80073e8:	70fb      	strb	r3, [r7, #3]
 80073ea:	460b      	mov	r3, r1
 80073ec:	70bb      	strb	r3, [r7, #2]
 80073ee:	4613      	mov	r3, r2
 80073f0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073f2:	2300      	movs	r3, #0
 80073f4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80073f6:	78fb      	ldrb	r3, [r7, #3]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80073fc:	23f6      	movs	r3, #246	; 0xf6
 80073fe:	73fb      	strb	r3, [r7, #15]
 8007400:	e107      	b.n	8007612 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8007402:	78bb      	ldrb	r3, [r7, #2]
 8007404:	2b14      	cmp	r3, #20
 8007406:	d110      	bne.n	800742a <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007408:	7e3b      	ldrb	r3, [r7, #24]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d102      	bne.n	8007414 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800740e:	2310      	movs	r3, #16
 8007410:	73bb      	strb	r3, [r7, #14]
 8007412:	e001      	b.n	8007418 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8007414:	2301      	movs	r3, #1
 8007416:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8007418:	7bbb      	ldrb	r3, [r7, #14]
 800741a:	461a      	mov	r2, r3
 800741c:	2184      	movs	r1, #132	; 0x84
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f003 fbc6 	bl	800abb0 <VL53L0X_WrByte>
 8007424:	4603      	mov	r3, r0
 8007426:	73fb      	strb	r3, [r7, #15]
 8007428:	e0f3      	b.n	8007612 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800742a:	78bb      	ldrb	r3, [r7, #2]
 800742c:	2b15      	cmp	r3, #21
 800742e:	f040 8097 	bne.w	8007560 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007432:	2201      	movs	r2, #1
 8007434:	21ff      	movs	r1, #255	; 0xff
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f003 fbba 	bl	800abb0 <VL53L0X_WrByte>
 800743c:	4603      	mov	r3, r0
 800743e:	461a      	mov	r2, r3
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	4313      	orrs	r3, r2
 8007444:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007446:	2200      	movs	r2, #0
 8007448:	2100      	movs	r1, #0
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f003 fbb0 	bl	800abb0 <VL53L0X_WrByte>
 8007450:	4603      	mov	r3, r0
 8007452:	461a      	mov	r2, r3
 8007454:	7bfb      	ldrb	r3, [r7, #15]
 8007456:	4313      	orrs	r3, r2
 8007458:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800745a:	2200      	movs	r2, #0
 800745c:	21ff      	movs	r1, #255	; 0xff
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f003 fba6 	bl	800abb0 <VL53L0X_WrByte>
 8007464:	4603      	mov	r3, r0
 8007466:	461a      	mov	r2, r3
 8007468:	7bfb      	ldrb	r3, [r7, #15]
 800746a:	4313      	orrs	r3, r2
 800746c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800746e:	2201      	movs	r2, #1
 8007470:	2180      	movs	r1, #128	; 0x80
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f003 fb9c 	bl	800abb0 <VL53L0X_WrByte>
 8007478:	4603      	mov	r3, r0
 800747a:	461a      	mov	r2, r3
 800747c:	7bfb      	ldrb	r3, [r7, #15]
 800747e:	4313      	orrs	r3, r2
 8007480:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8007482:	2202      	movs	r2, #2
 8007484:	2185      	movs	r1, #133	; 0x85
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f003 fb92 	bl	800abb0 <VL53L0X_WrByte>
 800748c:	4603      	mov	r3, r0
 800748e:	461a      	mov	r2, r3
 8007490:	7bfb      	ldrb	r3, [r7, #15]
 8007492:	4313      	orrs	r3, r2
 8007494:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8007496:	2204      	movs	r2, #4
 8007498:	21ff      	movs	r1, #255	; 0xff
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f003 fb88 	bl	800abb0 <VL53L0X_WrByte>
 80074a0:	4603      	mov	r3, r0
 80074a2:	461a      	mov	r2, r3
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80074aa:	2200      	movs	r2, #0
 80074ac:	21cd      	movs	r1, #205	; 0xcd
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f003 fb7e 	bl	800abb0 <VL53L0X_WrByte>
 80074b4:	4603      	mov	r3, r0
 80074b6:	461a      	mov	r2, r3
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80074be:	2211      	movs	r2, #17
 80074c0:	21cc      	movs	r1, #204	; 0xcc
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f003 fb74 	bl	800abb0 <VL53L0X_WrByte>
 80074c8:	4603      	mov	r3, r0
 80074ca:	461a      	mov	r2, r3
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80074d2:	2207      	movs	r2, #7
 80074d4:	21ff      	movs	r1, #255	; 0xff
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f003 fb6a 	bl	800abb0 <VL53L0X_WrByte>
 80074dc:	4603      	mov	r3, r0
 80074de:	461a      	mov	r2, r3
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80074e6:	2200      	movs	r2, #0
 80074e8:	21be      	movs	r1, #190	; 0xbe
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f003 fb60 	bl	800abb0 <VL53L0X_WrByte>
 80074f0:	4603      	mov	r3, r0
 80074f2:	461a      	mov	r2, r3
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80074fa:	2206      	movs	r2, #6
 80074fc:	21ff      	movs	r1, #255	; 0xff
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f003 fb56 	bl	800abb0 <VL53L0X_WrByte>
 8007504:	4603      	mov	r3, r0
 8007506:	461a      	mov	r2, r3
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	4313      	orrs	r3, r2
 800750c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800750e:	2209      	movs	r2, #9
 8007510:	21cc      	movs	r1, #204	; 0xcc
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f003 fb4c 	bl	800abb0 <VL53L0X_WrByte>
 8007518:	4603      	mov	r3, r0
 800751a:	461a      	mov	r2, r3
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	4313      	orrs	r3, r2
 8007520:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007522:	2200      	movs	r2, #0
 8007524:	21ff      	movs	r1, #255	; 0xff
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f003 fb42 	bl	800abb0 <VL53L0X_WrByte>
 800752c:	4603      	mov	r3, r0
 800752e:	461a      	mov	r2, r3
 8007530:	7bfb      	ldrb	r3, [r7, #15]
 8007532:	4313      	orrs	r3, r2
 8007534:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007536:	2201      	movs	r2, #1
 8007538:	21ff      	movs	r1, #255	; 0xff
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f003 fb38 	bl	800abb0 <VL53L0X_WrByte>
 8007540:	4603      	mov	r3, r0
 8007542:	461a      	mov	r2, r3
 8007544:	7bfb      	ldrb	r3, [r7, #15]
 8007546:	4313      	orrs	r3, r2
 8007548:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800754a:	2200      	movs	r2, #0
 800754c:	2100      	movs	r1, #0
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f003 fb2e 	bl	800abb0 <VL53L0X_WrByte>
 8007554:	4603      	mov	r3, r0
 8007556:	461a      	mov	r2, r3
 8007558:	7bfb      	ldrb	r3, [r7, #15]
 800755a:	4313      	orrs	r3, r2
 800755c:	73fb      	strb	r3, [r7, #15]
 800755e:	e058      	b.n	8007612 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8007560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d121      	bne.n	80075ac <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8007568:	787b      	ldrb	r3, [r7, #1]
 800756a:	2b04      	cmp	r3, #4
 800756c:	d81b      	bhi.n	80075a6 <VL53L0X_SetGpioConfig+0x1ce>
 800756e:	a201      	add	r2, pc, #4	; (adr r2, 8007574 <VL53L0X_SetGpioConfig+0x19c>)
 8007570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007574:	08007589 	.word	0x08007589
 8007578:	0800758f 	.word	0x0800758f
 800757c:	08007595 	.word	0x08007595
 8007580:	0800759b 	.word	0x0800759b
 8007584:	080075a1 	.word	0x080075a1
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8007588:	2300      	movs	r3, #0
 800758a:	73bb      	strb	r3, [r7, #14]
				break;
 800758c:	e00f      	b.n	80075ae <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800758e:	2301      	movs	r3, #1
 8007590:	73bb      	strb	r3, [r7, #14]
				break;
 8007592:	e00c      	b.n	80075ae <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8007594:	2302      	movs	r3, #2
 8007596:	73bb      	strb	r3, [r7, #14]
				break;
 8007598:	e009      	b.n	80075ae <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800759a:	2303      	movs	r3, #3
 800759c:	73bb      	strb	r3, [r7, #14]
				break;
 800759e:	e006      	b.n	80075ae <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80075a0:	2304      	movs	r3, #4
 80075a2:	73bb      	strb	r3, [r7, #14]
				break;
 80075a4:	e003      	b.n	80075ae <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80075a6:	23f5      	movs	r3, #245	; 0xf5
 80075a8:	73fb      	strb	r3, [r7, #15]
 80075aa:	e000      	b.n	80075ae <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80075ac:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80075ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d107      	bne.n	80075c6 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80075b6:	7bbb      	ldrb	r3, [r7, #14]
 80075b8:	461a      	mov	r2, r3
 80075ba:	210a      	movs	r1, #10
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f003 faf7 	bl	800abb0 <VL53L0X_WrByte>
 80075c2:	4603      	mov	r3, r0
 80075c4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80075c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10f      	bne.n	80075ee <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80075ce:	7e3b      	ldrb	r3, [r7, #24]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d102      	bne.n	80075da <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73bb      	strb	r3, [r7, #14]
 80075d8:	e001      	b.n	80075de <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80075da:	2310      	movs	r3, #16
 80075dc:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80075de:	7bbb      	ldrb	r3, [r7, #14]
 80075e0:	22ef      	movs	r2, #239	; 0xef
 80075e2:	2184      	movs	r1, #132	; 0x84
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f003 fb31 	bl	800ac4c <VL53L0X_UpdateByte>
 80075ea:	4603      	mov	r3, r0
 80075ec:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80075ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d103      	bne.n	80075fe <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	787a      	ldrb	r2, [r7, #1]
 80075fa:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80075fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d105      	bne.n	8007612 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007606:	2100      	movs	r1, #0
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f83f 	bl	800768c <VL53L0X_ClearInterruptMask>
 800760e:	4603      	mov	r3, r0
 8007610:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007612:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop

08007620 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	607a      	str	r2, [r7, #4]
 800762a:	603b      	str	r3, [r7, #0]
 800762c:	460b      	mov	r3, r1
 800762e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007630:	2300      	movs	r3, #0
 8007632:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8007634:	f107 0314 	add.w	r3, r7, #20
 8007638:	461a      	mov	r2, r3
 800763a:	210e      	movs	r1, #14
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f003 fb63 	bl	800ad08 <VL53L0X_RdWord>
 8007642:	4603      	mov	r3, r0
 8007644:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007646:	8abb      	ldrh	r3, [r7, #20]
 8007648:	045b      	lsls	r3, r3, #17
 800764a:	461a      	mov	r2, r3
 800764c:	4b0e      	ldr	r3, [pc, #56]	; (8007688 <VL53L0X_GetInterruptThresholds+0x68>)
 800764e:	4013      	ands	r3, r2
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8007654:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10f      	bne.n	800767c <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800765c:	f107 0314 	add.w	r3, r7, #20
 8007660:	461a      	mov	r2, r3
 8007662:	210c      	movs	r1, #12
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f003 fb4f 	bl	800ad08 <VL53L0X_RdWord>
 800766a:	4603      	mov	r3, r0
 800766c:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800766e:	8abb      	ldrh	r3, [r7, #20]
 8007670:	045b      	lsls	r3, r3, #17
 8007672:	461a      	mov	r2, r3
 8007674:	4b04      	ldr	r3, [pc, #16]	; (8007688 <VL53L0X_GetInterruptThresholds+0x68>)
 8007676:	4013      	ands	r3, r2
		*pThresholdHigh =
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800767c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3718      	adds	r7, #24
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	1ffe0000 	.word	0x1ffe0000

0800768c <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007696:	2300      	movs	r3, #0
 8007698:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800769a:	2300      	movs	r3, #0
 800769c:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800769e:	2201      	movs	r2, #1
 80076a0:	210b      	movs	r1, #11
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f003 fa84 	bl	800abb0 <VL53L0X_WrByte>
 80076a8:	4603      	mov	r3, r0
 80076aa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80076ac:	2200      	movs	r2, #0
 80076ae:	210b      	movs	r1, #11
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f003 fa7d 	bl	800abb0 <VL53L0X_WrByte>
 80076b6:	4603      	mov	r3, r0
 80076b8:	461a      	mov	r2, r3
 80076ba:	7bfb      	ldrb	r3, [r7, #15]
 80076bc:	4313      	orrs	r3, r2
 80076be:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80076c0:	f107 030d 	add.w	r3, r7, #13
 80076c4:	461a      	mov	r2, r3
 80076c6:	2113      	movs	r1, #19
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f003 faf3 	bl	800acb4 <VL53L0X_RdByte>
 80076ce:	4603      	mov	r3, r0
 80076d0:	461a      	mov	r2, r3
 80076d2:	7bfb      	ldrb	r3, [r7, #15]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80076d8:	7bbb      	ldrb	r3, [r7, #14]
 80076da:	3301      	adds	r3, #1
 80076dc:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80076de:	7b7b      	ldrb	r3, [r7, #13]
 80076e0:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d006      	beq.n	80076f6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d803      	bhi.n	80076f6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80076ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0d3      	beq.n	800769e <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d901      	bls.n	8007700 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80076fc:	23f4      	movs	r3, #244	; 0xf4
 80076fe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007700:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007716:	2300      	movs	r3, #0
 8007718:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800771a:	f107 030e 	add.w	r3, r7, #14
 800771e:	461a      	mov	r2, r3
 8007720:	2113      	movs	r1, #19
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f003 fac6 	bl	800acb4 <VL53L0X_RdByte>
 8007728:	4603      	mov	r3, r0
 800772a:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	f003 0207 	and.w	r2, r3, #7
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8007736:	7bbb      	ldrb	r3, [r7, #14]
 8007738:	f003 0318 	and.w	r3, r3, #24
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8007740:	23fa      	movs	r3, #250	; 0xfa
 8007742:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007744:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800775c:	2300      	movs	r3, #0
 800775e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	68b9      	ldr	r1, [r7, #8]
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f000 fa03 	bl	8007b70 <VL53L0X_perform_ref_spad_management>
 800776a:	4603      	mov	r3, r0
 800776c:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800776e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3718      	adds	r7, #24
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b084      	sub	sp, #16
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007784:	2300      	movs	r3, #0
 8007786:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8007788:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800778c:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800778e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007792:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8007794:	f107 0308 	add.w	r3, r7, #8
 8007798:	461a      	mov	r2, r3
 800779a:	2128      	movs	r1, #40	; 0x28
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f003 fab3 	bl	800ad08 <VL53L0X_RdWord>
 80077a2:	4603      	mov	r3, r0
 80077a4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80077a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d11e      	bne.n	80077ec <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80077ae:	893b      	ldrh	r3, [r7, #8]
 80077b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80077b8:	893b      	ldrh	r3, [r7, #8]
 80077ba:	461a      	mov	r2, r3
 80077bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	dd0b      	ble.n	80077dc <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80077c4:	893a      	ldrh	r2, [r7, #8]
 80077c6:	897b      	ldrh	r3, [r7, #10]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	b21b      	sxth	r3, r3
 80077ce:	461a      	mov	r2, r3
					* 250;
 80077d0:	23fa      	movs	r3, #250	; 0xfa
 80077d2:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	601a      	str	r2, [r3, #0]
 80077da:	e007      	b.n	80077ec <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80077dc:	893b      	ldrh	r3, [r7, #8]
 80077de:	b21b      	sxth	r3, r3
 80077e0:	461a      	mov	r2, r3
 80077e2:	23fa      	movs	r3, #250	; 0xfa
 80077e4:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80077ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b08b      	sub	sp, #44	; 0x2c
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
 8007804:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8007806:	2308      	movs	r3, #8
 8007808:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800780a:	2300      	movs	r3, #0
 800780c:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	f04f 32ff 	mov.w	r2, #4294967295
 8007814:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	fbb2 f3f3 	udiv	r3, r2, r3
 800781e:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	69ba      	ldr	r2, [r7, #24]
 8007824:	fbb3 f2f2 	udiv	r2, r3, r2
 8007828:	69b9      	ldr	r1, [r7, #24]
 800782a:	fb01 f202 	mul.w	r2, r1, r2
 800782e:	1a9b      	subs	r3, r3, r2
 8007830:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	627b      	str	r3, [r7, #36]	; 0x24
 8007836:	e030      	b.n	800789a <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8007838:	2300      	movs	r3, #0
 800783a:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007840:	4413      	add	r3, r2
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8007846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	429a      	cmp	r2, r3
 800784c:	d11e      	bne.n	800788c <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800784e:	7ffa      	ldrb	r2, [r7, #31]
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	fa42 f303 	asr.w	r3, r2, r3
 8007856:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800785c:	e016      	b.n	800788c <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800785e:	7ffb      	ldrb	r3, [r7, #31]
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00b      	beq.n	8007880 <get_next_good_spad+0x88>
				success = 1;
 8007868:	2301      	movs	r3, #1
 800786a:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	fb02 f203 	mul.w	r2, r2, r3
 8007874:	6a3b      	ldr	r3, [r7, #32]
 8007876:	4413      	add	r3, r2
 8007878:	461a      	mov	r2, r3
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	601a      	str	r2, [r3, #0]
				break;
 800787e:	e009      	b.n	8007894 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8007880:	7ffb      	ldrb	r3, [r7, #31]
 8007882:	085b      	lsrs	r3, r3, #1
 8007884:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	3301      	adds	r3, #1
 800788a:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800788c:	6a3a      	ldr	r2, [r7, #32]
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	429a      	cmp	r2, r3
 8007892:	d3e4      	bcc.n	800785e <get_next_good_spad+0x66>
				coarseIndex++) {
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	3301      	adds	r3, #1
 8007898:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800789a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d202      	bcs.n	80078a8 <get_next_good_spad+0xb0>
 80078a2:	7fbb      	ldrb	r3, [r7, #30]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d0c7      	beq.n	8007838 <get_next_good_spad+0x40>
		}
	}
}
 80078a8:	bf00      	nop
 80078aa:	372c      	adds	r7, #44	; 0x2c
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80078bc:	2301      	movs	r3, #1
 80078be:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	099b      	lsrs	r3, r3, #6
 80078c4:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80078c6:	4a07      	ldr	r2, [pc, #28]	; (80078e4 <is_aperture+0x30>)
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d101      	bne.n	80078d6 <is_aperture+0x22>
		isAperture = 0;
 80078d2:	2300      	movs	r3, #0
 80078d4:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	200002c4 	.word	0x200002c4

080078e8 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b089      	sub	sp, #36	; 0x24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80078f4:	2300      	movs	r3, #0
 80078f6:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80078f8:	2308      	movs	r3, #8
 80078fa:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	fbb2 f3f3 	udiv	r3, r2, r3
 8007904:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	69ba      	ldr	r2, [r7, #24]
 800790a:	fbb3 f2f2 	udiv	r2, r3, r2
 800790e:	69b9      	ldr	r1, [r7, #24]
 8007910:	fb01 f202 	mul.w	r2, r1, r2
 8007914:	1a9b      	subs	r3, r3, r2
 8007916:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	429a      	cmp	r2, r3
 800791e:	d302      	bcc.n	8007926 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007920:	23ce      	movs	r3, #206	; 0xce
 8007922:	77fb      	strb	r3, [r7, #31]
 8007924:	e010      	b.n	8007948 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	4413      	add	r3, r2
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	b25a      	sxtb	r2, r3
 8007930:	2101      	movs	r1, #1
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	fa01 f303 	lsl.w	r3, r1, r3
 8007938:	b25b      	sxtb	r3, r3
 800793a:	4313      	orrs	r3, r2
 800793c:	b259      	sxtb	r1, r3
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	4413      	add	r3, r2
 8007944:	b2ca      	uxtb	r2, r1
 8007946:	701a      	strb	r2, [r3, #0]

	return status;
 8007948:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3724      	adds	r7, #36	; 0x24
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8007962:	2306      	movs	r3, #6
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	21b0      	movs	r1, #176	; 0xb0
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f003 f8c5 	bl	800aaf8 <VL53L0X_WriteMulti>
 800796e:	4603      	mov	r3, r0
 8007970:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8007972:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b084      	sub	sp, #16
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8007988:	2306      	movs	r3, #6
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	21b0      	movs	r1, #176	; 0xb0
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f003 f8e2 	bl	800ab58 <VL53L0X_ReadMulti>
 8007994:	4603      	mov	r3, r0
 8007996:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8007998:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b08c      	sub	sp, #48	; 0x30
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	607a      	str	r2, [r7, #4]
 80079ae:	603b      	str	r3, [r7, #0]
 80079b0:	460b      	mov	r3, r1
 80079b2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80079b4:	2300      	movs	r3, #0
 80079b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80079ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079bc:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80079be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079c0:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80079c2:	2300      	movs	r3, #0
 80079c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80079c6:	e02b      	b.n	8007a20 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80079c8:	f107 031c 	add.w	r3, r7, #28
 80079cc:	6a3a      	ldr	r2, [r7, #32]
 80079ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7ff ff11 	bl	80077f8 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079dc:	d103      	bne.n	80079e6 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80079de:	23ce      	movs	r3, #206	; 0xce
 80079e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80079e4:	e020      	b.n	8007a28 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	461a      	mov	r2, r3
 80079ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ec:	4413      	add	r3, r2
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7ff ff60 	bl	80078b4 <is_aperture>
 80079f4:	4603      	mov	r3, r0
 80079f6:	461a      	mov	r2, r3
 80079f8:	7afb      	ldrb	r3, [r7, #11]
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d003      	beq.n	8007a06 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80079fe:	23ce      	movs	r3, #206	; 0xce
 8007a00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007a04:	e010      	b.n	8007a28 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8007a0a:	6a3a      	ldr	r2, [r7, #32]
 8007a0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a0e:	6838      	ldr	r0, [r7, #0]
 8007a10:	f7ff ff6a 	bl	80078e8 <enable_spad_bit>
		currentSpad++;
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	3301      	adds	r3, #1
 8007a18:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d3cf      	bcc.n	80079c8 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8007a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a2a:	6a3a      	ldr	r2, [r7, #32]
 8007a2c:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8007a2e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d106      	bne.n	8007a44 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f7ff ff8d 	bl	8007958 <set_ref_spad_map>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8007a44:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d121      	bne.n	8007a90 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8007a4c:	f107 0314 	add.w	r3, r7, #20
 8007a50:	4619      	mov	r1, r3
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f7ff ff93 	bl	800797e <get_ref_spad_map>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8007a62:	e011      	b.n	8007a88 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a68:	4413      	add	r3, r2
 8007a6a:	781a      	ldrb	r2, [r3, #0]
 8007a6c:	f107 0114 	add.w	r1, r7, #20
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	440b      	add	r3, r1
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d003      	beq.n	8007a82 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007a7a:	23ce      	movs	r3, #206	; 0xce
 8007a7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8007a80:	e006      	b.n	8007a90 <enable_ref_spads+0xec>
			}
			i++;
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	3301      	adds	r3, #1
 8007a86:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8007a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d3e9      	bcc.n	8007a64 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8007a90:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3730      	adds	r7, #48	; 0x30
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b08a      	sub	sp, #40	; 0x28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8007aac:	2300      	movs	r3, #0
 8007aae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007ab8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8007abc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d107      	bne.n	8007ad4 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8007ac4:	22c0      	movs	r2, #192	; 0xc0
 8007ac6:	2101      	movs	r1, #1
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f003 f871 	bl	800abb0 <VL53L0X_WrByte>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8007ad4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d108      	bne.n	8007aee <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8007adc:	f107 0308 	add.w	r3, r7, #8
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7ff fc48 	bl	8007378 <VL53L0X_PerformSingleRangingMeasurement>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8007aee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d107      	bne.n	8007b06 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007af6:	2201      	movs	r2, #1
 8007af8:	21ff      	movs	r1, #255	; 0xff
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f003 f858 	bl	800abb0 <VL53L0X_WrByte>
 8007b00:	4603      	mov	r3, r0
 8007b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8007b06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d107      	bne.n	8007b1e <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	21b6      	movs	r1, #182	; 0xb6
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f003 f8f8 	bl	800ad08 <VL53L0X_RdWord>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8007b1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d107      	bne.n	8007b36 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007b26:	2200      	movs	r2, #0
 8007b28:	21ff      	movs	r1, #255	; 0xff
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f003 f840 	bl	800abb0 <VL53L0X_WrByte>
 8007b30:	4603      	mov	r3, r0
 8007b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8007b36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d112      	bne.n	8007b64 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007b3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b42:	461a      	mov	r2, r3
 8007b44:	2101      	movs	r1, #1
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f003 f832 	bl	800abb0 <VL53L0X_WrByte>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8007b52:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d104      	bne.n	8007b64 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007b60:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8007b64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3728      	adds	r7, #40	; 0x28
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8007b70:	b590      	push	{r4, r7, lr}
 8007b72:	b09d      	sub	sp, #116	; 0x74
 8007b74:	af06      	add	r7, sp, #24
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8007b82:	23b4      	movs	r3, #180	; 0xb4
 8007b84:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8007b8c:	232c      	movs	r3, #44	; 0x2c
 8007b8e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8007b90:	2300      	movs	r3, #0
 8007b92:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8007b94:	2300      	movs	r3, #0
 8007b96:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8007b9c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007ba0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8007baa:	2306      	movs	r3, #6
 8007bac:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8007bd4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bda:	e009      	b.n	8007bf0 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007be6:	2200      	movs	r2, #0
 8007be8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8007bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bec:	3301      	adds	r3, #1
 8007bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d3f1      	bcc.n	8007bdc <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	21ff      	movs	r1, #255	; 0xff
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f002 ffd7 	bl	800abb0 <VL53L0X_WrByte>
 8007c02:	4603      	mov	r3, r0
 8007c04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007c08:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d107      	bne.n	8007c20 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8007c10:	2200      	movs	r2, #0
 8007c12:	214f      	movs	r1, #79	; 0x4f
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f002 ffcb 	bl	800abb0 <VL53L0X_WrByte>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007c20:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d107      	bne.n	8007c38 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8007c28:	222c      	movs	r2, #44	; 0x2c
 8007c2a:	214e      	movs	r1, #78	; 0x4e
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f002 ffbf 	bl	800abb0 <VL53L0X_WrByte>
 8007c32:	4603      	mov	r3, r0
 8007c34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007c38:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d107      	bne.n	8007c50 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007c40:	2200      	movs	r2, #0
 8007c42:	21ff      	movs	r1, #255	; 0xff
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f002 ffb3 	bl	800abb0 <VL53L0X_WrByte>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007c50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d109      	bne.n	8007c6c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8007c58:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	21b6      	movs	r1, #182	; 0xb6
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f002 ffa5 	bl	800abb0 <VL53L0X_WrByte>
 8007c66:	4603      	mov	r3, r0
 8007c68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8007c6c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d107      	bne.n	8007c84 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8007c74:	2200      	movs	r2, #0
 8007c76:	2180      	movs	r1, #128	; 0x80
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f002 ff99 	bl	800abb0 <VL53L0X_WrByte>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8007c84:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10a      	bne.n	8007ca2 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8007c8c:	f107 0210 	add.w	r2, r7, #16
 8007c90:	f107 0111 	add.w	r1, r7, #17
 8007c94:	2300      	movs	r3, #0
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f000 fbbb 	bl	8008412 <VL53L0X_perform_ref_calibration>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8007ca2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d121      	bne.n	8007cee <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8007caa:	2300      	movs	r3, #0
 8007cac:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8007cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cb0:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8007cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cb8:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8007cc6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007cca:	f107 0218 	add.w	r2, r7, #24
 8007cce:	9204      	str	r2, [sp, #16]
 8007cd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cd2:	9203      	str	r2, [sp, #12]
 8007cd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007cd6:	9202      	str	r2, [sp, #8]
 8007cd8:	9301      	str	r3, [sp, #4]
 8007cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	4623      	mov	r3, r4
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f7ff fe5e 	bl	80079a4 <enable_ref_spads>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007cee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d174      	bne.n	8007de0 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8007cfa:	f107 0312 	add.w	r3, r7, #18
 8007cfe:	4619      	mov	r1, r3
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f7ff fecb 	bl	8007a9c <perform_ref_signal_measurement>
 8007d06:	4603      	mov	r3, r0
 8007d08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007d0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d161      	bne.n	8007dd8 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8007d14:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8007d16:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d25d      	bcs.n	8007dd8 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d20:	e009      	b.n	8007d36 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8007d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d32:	3301      	adds	r3, #1
 8007d34:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d3f1      	bcc.n	8007d22 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8007d3e:	e002      	b.n	8007d46 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8007d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d42:	3301      	adds	r3, #1
 8007d44:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8007d46:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8007d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d4c:	4413      	add	r3, r2
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7ff fdb0 	bl	80078b4 <is_aperture>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d103      	bne.n	8007d62 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8007d5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d3ee      	bcc.n	8007d40 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8007d62:	2301      	movs	r3, #1
 8007d64:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8007d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d68:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8007d76:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007d7a:	f107 0218 	add.w	r2, r7, #24
 8007d7e:	9204      	str	r2, [sp, #16]
 8007d80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d82:	9203      	str	r2, [sp, #12]
 8007d84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d86:	9202      	str	r2, [sp, #8]
 8007d88:	9301      	str	r3, [sp, #4]
 8007d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	4623      	mov	r3, r4
 8007d90:	4602      	mov	r2, r0
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f7ff fe06 	bl	80079a4 <enable_ref_spads>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007d9e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d11b      	bne.n	8007dde <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8007daa:	f107 0312 	add.w	r3, r7, #18
 8007dae:	4619      	mov	r1, r3
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f7ff fe73 	bl	8007a9c <perform_ref_signal_measurement>
 8007db6:	4603      	mov	r3, r0
 8007db8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8007dbc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10c      	bne.n	8007dde <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8007dc4:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8007dc6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d208      	bcs.n	8007dde <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8007dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8007dd6:	e002      	b.n	8007dde <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ddc:	e000      	b.n	8007de0 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8007dde:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007de0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f040 80af 	bne.w	8007f48 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8007dea:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8007dec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007dee:	429a      	cmp	r2, r3
 8007df0:	f240 80aa 	bls.w	8007f48 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8007df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007df6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8007dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dfc:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8007e04:	f107 031c 	add.w	r3, r7, #28
 8007e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f003 f82a 	bl	800ae64 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8007e10:	8a7b      	ldrh	r3, [r7, #18]
 8007e12:	461a      	mov	r2, r3
 8007e14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	bfb8      	it	lt
 8007e1c:	425b      	neglt	r3, r3
 8007e1e:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8007e20:	2300      	movs	r3, #0
 8007e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8007e26:	e086      	b.n	8007f36 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8007e2e:	f107 0314 	add.w	r3, r7, #20
 8007e32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e36:	f7ff fcdf 	bl	80077f8 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e40:	d103      	bne.n	8007e4a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007e42:	23ce      	movs	r3, #206	; 0xce
 8007e44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8007e48:	e07e      	b.n	8007f48 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8007e4a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	4413      	add	r3, r2
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7ff fd2e 	bl	80078b4 <is_aperture>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d003      	beq.n	8007e6a <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8007e62:	2301      	movs	r3, #1
 8007e64:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8007e68:	e06e      	b.n	8007f48 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8007e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8007e7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7ff fd32 	bl	80078e8 <enable_spad_bit>
 8007e84:	4603      	mov	r3, r0
 8007e86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007e8a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10c      	bne.n	8007eac <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8007e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e94:	3301      	adds	r3, #1
 8007e96:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f7ff fd59 	bl	8007958 <set_ref_spad_map>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8007eac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d146      	bne.n	8007f42 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8007eb4:	f107 0312 	add.w	r3, r7, #18
 8007eb8:	4619      	mov	r1, r3
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f7ff fdee 	bl	8007a9c <perform_ref_signal_measurement>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8007ec6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d13b      	bne.n	8007f46 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8007ece:	8a7b      	ldrh	r3, [r7, #18]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	bfb8      	it	lt
 8007eda:	425b      	neglt	r3, r3
 8007edc:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8007ede:	8a7b      	ldrh	r3, [r7, #18]
 8007ee0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d21c      	bcs.n	8007f20 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8007ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d914      	bls.n	8007f18 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8007eee:	f107 031c 	add.w	r3, r7, #28
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f7ff fd2f 	bl	8007958 <set_ref_spad_map>
 8007efa:	4603      	mov	r3, r0
 8007efc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8007f06:	f107 011c 	add.w	r1, r7, #28
 8007f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f002 ffa9 	bl	800ae64 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8007f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f14:	3b01      	subs	r3, #1
 8007f16:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f1e:	e00a      	b.n	8007f36 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8007f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f22:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8007f2a:	f107 031c 	add.w	r3, r7, #28
 8007f2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f30:	4618      	mov	r0, r3
 8007f32:	f002 ff97 	bl	800ae64 <memcpy>
		while (!complete) {
 8007f36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f43f af74 	beq.w	8007e28 <VL53L0X_perform_ref_spad_management+0x2b8>
 8007f40:	e002      	b.n	8007f48 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007f42:	bf00      	nop
 8007f44:	e000      	b.n	8007f48 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007f46:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007f48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d115      	bne.n	8007f7c <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f54:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8007f5c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	781a      	ldrb	r2, [r3, #0]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8007f7c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	375c      	adds	r7, #92	; 0x5c
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd90      	pop	{r4, r7, pc}

08007f88 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8007f88:	b590      	push	{r4, r7, lr}
 8007f8a:	b093      	sub	sp, #76	; 0x4c
 8007f8c:	af06      	add	r7, sp, #24
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	4613      	mov	r3, r2
 8007f94:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f96:	2300      	movs	r3, #0
 8007f98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8007fa0:	23b4      	movs	r3, #180	; 0xb4
 8007fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8007fa6:	2306      	movs	r3, #6
 8007fa8:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8007faa:	232c      	movs	r3, #44	; 0x2c
 8007fac:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007fae:	2201      	movs	r2, #1
 8007fb0:	21ff      	movs	r1, #255	; 0xff
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f002 fdfc 	bl	800abb0 <VL53L0X_WrByte>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007fbe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d107      	bne.n	8007fd6 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	214f      	movs	r1, #79	; 0x4f
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f002 fdf0 	bl	800abb0 <VL53L0X_WrByte>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8007fd6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d107      	bne.n	8007fee <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8007fde:	222c      	movs	r2, #44	; 0x2c
 8007fe0:	214e      	movs	r1, #78	; 0x4e
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f002 fde4 	bl	800abb0 <VL53L0X_WrByte>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8007fee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d107      	bne.n	8008006 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	21ff      	movs	r1, #255	; 0xff
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f002 fdd8 	bl	800abb0 <VL53L0X_WrByte>
 8008000:	4603      	mov	r3, r0
 8008002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008006:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800800a:	2b00      	cmp	r3, #0
 800800c:	d109      	bne.n	8008022 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800800e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008012:	461a      	mov	r2, r3
 8008014:	21b6      	movs	r1, #182	; 0xb6
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f002 fdca 	bl	800abb0 <VL53L0X_WrByte>
 800801c:	4603      	mov	r3, r0
 800801e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8008022:	2300      	movs	r3, #0
 8008024:	627b      	str	r3, [r7, #36]	; 0x24
 8008026:	e009      	b.n	800803c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	4413      	add	r3, r2
 800802e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008032:	2200      	movs	r2, #0
 8008034:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	3301      	adds	r3, #1
 800803a:	627b      	str	r3, [r7, #36]	; 0x24
 800803c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	429a      	cmp	r2, r3
 8008042:	d3f1      	bcc.n	8008028 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8008044:	79fb      	ldrb	r3, [r7, #7]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d011      	beq.n	800806e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800804a:	e002      	b.n	8008052 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800804c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804e:	3301      	adds	r3, #1
 8008050:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008052:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008058:	4413      	add	r3, r2
 800805a:	4618      	mov	r0, r3
 800805c:	f7ff fc2a 	bl	80078b4 <is_aperture>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d103      	bne.n	800806e <VL53L0X_set_reference_spads+0xe6>
 8008066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	429a      	cmp	r2, r3
 800806c:	d3ee      	bcc.n	800804c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800807a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800807e:	79f9      	ldrb	r1, [r7, #7]
 8008080:	f107 0214 	add.w	r2, r7, #20
 8008084:	9204      	str	r2, [sp, #16]
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	9203      	str	r2, [sp, #12]
 800808a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800808c:	9202      	str	r2, [sp, #8]
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	4623      	mov	r3, r4
 8008096:	4602      	mov	r2, r0
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f7ff fc83 	bl	80079a4 <enable_ref_spads>
 800809e:	4603      	mov	r3, r0
 80080a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80080a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10c      	bne.n	80080c6 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	79fa      	ldrb	r2, [r7, #7]
 80080c2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80080c6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3734      	adds	r7, #52	; 0x34
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd90      	pop	{r4, r7, pc}

080080d2 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b084      	sub	sp, #16
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
 80080da:	460b      	mov	r3, r1
 80080dc:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080de:	2300      	movs	r3, #0
 80080e0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80080e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10a      	bne.n	8008100 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80080ea:	78fb      	ldrb	r3, [r7, #3]
 80080ec:	f043 0301 	orr.w	r3, r3, #1
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	461a      	mov	r2, r3
 80080f4:	2100      	movs	r1, #0
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f002 fd5a 	bl	800abb0 <VL53L0X_WrByte>
 80080fc:	4603      	mov	r3, r0
 80080fe:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8008100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d104      	bne.n	8008112 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f9bf 	bl	800848c <VL53L0X_measurement_poll_for_completion>
 800810e:	4603      	mov	r3, r0
 8008110:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d105      	bne.n	8008126 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800811a:	2100      	movs	r1, #0
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7ff fab5 	bl	800768c <VL53L0X_ClearInterruptMask>
 8008122:	4603      	mov	r3, r0
 8008124:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d106      	bne.n	800813c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800812e:	2200      	movs	r2, #0
 8008130:	2100      	movs	r1, #0
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f002 fd3c 	bl	800abb0 <VL53L0X_WrByte>
 8008138:	4603      	mov	r3, r0
 800813a:	73fb      	strb	r3, [r7, #15]

	return Status;
 800813c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	4608      	mov	r0, r1
 8008152:	4611      	mov	r1, r2
 8008154:	461a      	mov	r2, r3
 8008156:	4603      	mov	r3, r0
 8008158:	70fb      	strb	r3, [r7, #3]
 800815a:	460b      	mov	r3, r1
 800815c:	70bb      	strb	r3, [r7, #2]
 800815e:	4613      	mov	r3, r2
 8008160:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008162:	2300      	movs	r3, #0
 8008164:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8008166:	2300      	movs	r3, #0
 8008168:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800816a:	2201      	movs	r2, #1
 800816c:	21ff      	movs	r1, #255	; 0xff
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f002 fd1e 	bl	800abb0 <VL53L0X_WrByte>
 8008174:	4603      	mov	r3, r0
 8008176:	461a      	mov	r2, r3
 8008178:	7bfb      	ldrb	r3, [r7, #15]
 800817a:	4313      	orrs	r3, r2
 800817c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800817e:	2200      	movs	r2, #0
 8008180:	2100      	movs	r1, #0
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f002 fd14 	bl	800abb0 <VL53L0X_WrByte>
 8008188:	4603      	mov	r3, r0
 800818a:	461a      	mov	r2, r3
 800818c:	7bfb      	ldrb	r3, [r7, #15]
 800818e:	4313      	orrs	r3, r2
 8008190:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008192:	2200      	movs	r2, #0
 8008194:	21ff      	movs	r1, #255	; 0xff
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f002 fd0a 	bl	800abb0 <VL53L0X_WrByte>
 800819c:	4603      	mov	r3, r0
 800819e:	461a      	mov	r2, r3
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80081a6:	78fb      	ldrb	r3, [r7, #3]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d01e      	beq.n	80081ea <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80081ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d009      	beq.n	80081c8 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80081b4:	69ba      	ldr	r2, [r7, #24]
 80081b6:	21cb      	movs	r1, #203	; 0xcb
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f002 fd7b 	bl	800acb4 <VL53L0X_RdByte>
 80081be:	4603      	mov	r3, r0
 80081c0:	461a      	mov	r2, r3
 80081c2:	7bfb      	ldrb	r3, [r7, #15]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80081c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d02a      	beq.n	8008226 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80081d0:	f107 030e 	add.w	r3, r7, #14
 80081d4:	461a      	mov	r2, r3
 80081d6:	21ee      	movs	r1, #238	; 0xee
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f002 fd6b 	bl	800acb4 <VL53L0X_RdByte>
 80081de:	4603      	mov	r3, r0
 80081e0:	461a      	mov	r2, r3
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	73fb      	strb	r3, [r7, #15]
 80081e8:	e01d      	b.n	8008226 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80081ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00a      	beq.n	8008208 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80081f2:	78bb      	ldrb	r3, [r7, #2]
 80081f4:	461a      	mov	r2, r3
 80081f6:	21cb      	movs	r1, #203	; 0xcb
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f002 fcd9 	bl	800abb0 <VL53L0X_WrByte>
 80081fe:	4603      	mov	r3, r0
 8008200:	461a      	mov	r2, r3
 8008202:	7bfb      	ldrb	r3, [r7, #15]
 8008204:	4313      	orrs	r3, r2
 8008206:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008208:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00a      	beq.n	8008226 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8008210:	787b      	ldrb	r3, [r7, #1]
 8008212:	2280      	movs	r2, #128	; 0x80
 8008214:	21ee      	movs	r1, #238	; 0xee
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f002 fd18 	bl	800ac4c <VL53L0X_UpdateByte>
 800821c:	4603      	mov	r3, r0
 800821e:	461a      	mov	r2, r3
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	4313      	orrs	r3, r2
 8008224:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008226:	2201      	movs	r2, #1
 8008228:	21ff      	movs	r1, #255	; 0xff
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f002 fcc0 	bl	800abb0 <VL53L0X_WrByte>
 8008230:	4603      	mov	r3, r0
 8008232:	461a      	mov	r2, r3
 8008234:	7bfb      	ldrb	r3, [r7, #15]
 8008236:	4313      	orrs	r3, r2
 8008238:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800823a:	2201      	movs	r2, #1
 800823c:	2100      	movs	r1, #0
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f002 fcb6 	bl	800abb0 <VL53L0X_WrByte>
 8008244:	4603      	mov	r3, r0
 8008246:	461a      	mov	r2, r3
 8008248:	7bfb      	ldrb	r3, [r7, #15]
 800824a:	4313      	orrs	r3, r2
 800824c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800824e:	2200      	movs	r2, #0
 8008250:	21ff      	movs	r1, #255	; 0xff
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f002 fcac 	bl	800abb0 <VL53L0X_WrByte>
 8008258:	4603      	mov	r3, r0
 800825a:	461a      	mov	r2, r3
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	4313      	orrs	r3, r2
 8008260:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	f023 0310 	bic.w	r3, r3, #16
 8008268:	b2da      	uxtb	r2, r3
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	701a      	strb	r2, [r3, #0]

	return Status;
 800826e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b08a      	sub	sp, #40	; 0x28
 800827e:	af04      	add	r7, sp, #16
 8008280:	60f8      	str	r0, [r7, #12]
 8008282:	60b9      	str	r1, [r7, #8]
 8008284:	4611      	mov	r1, r2
 8008286:	461a      	mov	r2, r3
 8008288:	460b      	mov	r3, r1
 800828a:	71fb      	strb	r3, [r7, #7]
 800828c:	4613      	mov	r3, r2
 800828e:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008290:	2300      	movs	r3, #0
 8008292:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008294:	2300      	movs	r3, #0
 8008296:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008298:	2300      	movs	r3, #0
 800829a:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800829c:	2300      	movs	r3, #0
 800829e:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80082a0:	2300      	movs	r3, #0
 80082a2:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80082a4:	79bb      	ldrb	r3, [r7, #6]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d003      	beq.n	80082b2 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80082b0:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80082b2:	2201      	movs	r2, #1
 80082b4:	2101      	movs	r1, #1
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	f002 fc7a 	bl	800abb0 <VL53L0X_WrByte>
 80082bc:	4603      	mov	r3, r0
 80082be:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80082c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d105      	bne.n	80082d4 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80082c8:	2140      	movs	r1, #64	; 0x40
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f7ff ff01 	bl	80080d2 <VL53L0X_perform_single_ref_calibration>
 80082d0:	4603      	mov	r3, r0
 80082d2:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80082d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d115      	bne.n	8008308 <VL53L0X_perform_vhv_calibration+0x8e>
 80082dc:	79fb      	ldrb	r3, [r7, #7]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d112      	bne.n	8008308 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80082e2:	7d39      	ldrb	r1, [r7, #20]
 80082e4:	7d7a      	ldrb	r2, [r7, #21]
 80082e6:	2300      	movs	r3, #0
 80082e8:	9303      	str	r3, [sp, #12]
 80082ea:	2301      	movs	r3, #1
 80082ec:	9302      	str	r3, [sp, #8]
 80082ee:	f107 0313 	add.w	r3, r7, #19
 80082f2:	9301      	str	r3, [sp, #4]
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	460b      	mov	r3, r1
 80082fa:	2101      	movs	r1, #1
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f7ff ff23 	bl	8008148 <VL53L0X_ref_calibration_io>
 8008302:	4603      	mov	r3, r0
 8008304:	75fb      	strb	r3, [r7, #23]
 8008306:	e002      	b.n	800830e <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2200      	movs	r2, #0
 800830c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800830e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d112      	bne.n	800833c <VL53L0X_perform_vhv_calibration+0xc2>
 8008316:	79bb      	ldrb	r3, [r7, #6]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00f      	beq.n	800833c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800831c:	7dbb      	ldrb	r3, [r7, #22]
 800831e:	461a      	mov	r2, r3
 8008320:	2101      	movs	r1, #1
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f002 fc44 	bl	800abb0 <VL53L0X_WrByte>
 8008328:	4603      	mov	r3, r0
 800832a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800832c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d103      	bne.n	800833c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	7dba      	ldrb	r2, [r7, #22]
 8008338:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800833c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b08a      	sub	sp, #40	; 0x28
 800834c:	af04      	add	r7, sp, #16
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	4611      	mov	r1, r2
 8008354:	461a      	mov	r2, r3
 8008356:	460b      	mov	r3, r1
 8008358:	71fb      	strb	r3, [r7, #7]
 800835a:	4613      	mov	r3, r2
 800835c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800835e:	2300      	movs	r3, #0
 8008360:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008362:	2300      	movs	r3, #0
 8008364:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008366:	2300      	movs	r3, #0
 8008368:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800836a:	2300      	movs	r3, #0
 800836c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800836e:	79bb      	ldrb	r3, [r7, #6]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d003      	beq.n	800837c <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800837a:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800837c:	2202      	movs	r2, #2
 800837e:	2101      	movs	r1, #1
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f002 fc15 	bl	800abb0 <VL53L0X_WrByte>
 8008386:	4603      	mov	r3, r0
 8008388:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800838a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d105      	bne.n	800839e <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8008392:	2100      	movs	r1, #0
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f7ff fe9c 	bl	80080d2 <VL53L0X_perform_single_ref_calibration>
 800839a:	4603      	mov	r3, r0
 800839c:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800839e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d115      	bne.n	80083d2 <VL53L0X_perform_phase_calibration+0x8a>
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d112      	bne.n	80083d2 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80083ac:	7d39      	ldrb	r1, [r7, #20]
 80083ae:	7d7a      	ldrb	r2, [r7, #21]
 80083b0:	2301      	movs	r3, #1
 80083b2:	9303      	str	r3, [sp, #12]
 80083b4:	2300      	movs	r3, #0
 80083b6:	9302      	str	r3, [sp, #8]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	9301      	str	r3, [sp, #4]
 80083bc:	f107 0313 	add.w	r3, r7, #19
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	460b      	mov	r3, r1
 80083c4:	2101      	movs	r1, #1
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f7ff febe 	bl	8008148 <VL53L0X_ref_calibration_io>
 80083cc:	4603      	mov	r3, r0
 80083ce:	75fb      	strb	r3, [r7, #23]
 80083d0:	e002      	b.n	80083d8 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	2200      	movs	r2, #0
 80083d6:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80083d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d112      	bne.n	8008406 <VL53L0X_perform_phase_calibration+0xbe>
 80083e0:	79bb      	ldrb	r3, [r7, #6]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00f      	beq.n	8008406 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80083e6:	7dbb      	ldrb	r3, [r7, #22]
 80083e8:	461a      	mov	r2, r3
 80083ea:	2101      	movs	r1, #1
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f002 fbdf 	bl	800abb0 <VL53L0X_WrByte>
 80083f2:	4603      	mov	r3, r0
 80083f4:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80083f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d103      	bne.n	8008406 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	7dba      	ldrb	r2, [r7, #22]
 8008402:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008406:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800840a:	4618      	mov	r0, r3
 800840c:	3718      	adds	r7, #24
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b086      	sub	sp, #24
 8008416:	af00      	add	r7, sp, #0
 8008418:	60f8      	str	r0, [r7, #12]
 800841a:	60b9      	str	r1, [r7, #8]
 800841c:	607a      	str	r2, [r7, #4]
 800841e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008420:	2300      	movs	r3, #0
 8008422:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008424:	2300      	movs	r3, #0
 8008426:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800842e:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8008430:	78fa      	ldrb	r2, [r7, #3]
 8008432:	2300      	movs	r3, #0
 8008434:	68b9      	ldr	r1, [r7, #8]
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f7ff ff1f 	bl	800827a <VL53L0X_perform_vhv_calibration>
 800843c:	4603      	mov	r3, r0
 800843e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8008440:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d107      	bne.n	8008458 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8008448:	78fa      	ldrb	r2, [r7, #3]
 800844a:	2300      	movs	r3, #0
 800844c:	6879      	ldr	r1, [r7, #4]
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f7ff ff7a 	bl	8008348 <VL53L0X_perform_phase_calibration>
 8008454:	4603      	mov	r3, r0
 8008456:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8008458:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10f      	bne.n	8008480 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008460:	7dbb      	ldrb	r3, [r7, #22]
 8008462:	461a      	mov	r2, r3
 8008464:	2101      	movs	r1, #1
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f002 fba2 	bl	800abb0 <VL53L0X_WrByte>
 800846c:	4603      	mov	r3, r0
 800846e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008470:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d103      	bne.n	8008480 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	7dba      	ldrb	r2, [r7, #22]
 800847c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008480:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008484:	4618      	mov	r0, r3
 8008486:	3718      	adds	r7, #24
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b086      	sub	sp, #24
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008494:	2300      	movs	r3, #0
 8008496:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8008498:	2300      	movs	r3, #0
 800849a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800849c:	2300      	movs	r3, #0
 800849e:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80084a0:	f107 030f 	add.w	r3, r7, #15
 80084a4:	4619      	mov	r1, r3
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7fe fdff 	bl	80070aa <VL53L0X_GetMeasurementDataReady>
 80084ac:	4603      	mov	r3, r0
 80084ae:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80084b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d110      	bne.n	80084da <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80084b8:	7bfb      	ldrb	r3, [r7, #15]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d00f      	beq.n	80084de <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	3301      	adds	r3, #1
 80084c2:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80084ca:	d302      	bcc.n	80084d2 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80084cc:	23f9      	movs	r3, #249	; 0xf9
 80084ce:	75fb      	strb	r3, [r7, #23]
			break;
 80084d0:	e006      	b.n	80084e0 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f002 fc8c 	bl	800adf0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80084d8:	e7e2      	b.n	80084a0 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80084da:	bf00      	nop
 80084dc:	e000      	b.n	80084e0 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80084de:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80084e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	4603      	mov	r3, r0
 80084f4:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80084f6:	2300      	movs	r3, #0
 80084f8:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80084fa:	79fb      	ldrb	r3, [r7, #7]
 80084fc:	3301      	adds	r3, #1
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	005b      	lsls	r3, r3, #1
 8008502:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8008504:	7bfb      	ldrb	r3, [r7, #15]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8008512:	b480      	push	{r7}
 8008514:	b085      	sub	sp, #20
 8008516:	af00      	add	r7, sp, #0
 8008518:	4603      	mov	r3, r0
 800851a:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800851c:	2300      	movs	r3, #0
 800851e:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8008520:	79fb      	ldrb	r3, [r7, #7]
 8008522:	085b      	lsrs	r3, r3, #1
 8008524:	b2db      	uxtb	r3, r3
 8008526:	3b01      	subs	r3, #1
 8008528:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800852a:	7bfb      	ldrb	r3, [r7, #15]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8008540:	2300      	movs	r3, #0
 8008542:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8008544:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008548:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800854a:	e002      	b.n	8008552 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	089b      	lsrs	r3, r3, #2
 8008550:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	429a      	cmp	r2, r3
 8008558:	d8f8      	bhi.n	800854c <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800855a:	e017      	b.n	800858c <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	4413      	add	r3, r2
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	429a      	cmp	r2, r3
 8008566:	d30b      	bcc.n	8008580 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	4413      	add	r3, r2
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	085b      	lsrs	r3, r3, #1
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	4413      	add	r3, r2
 800857c:	60fb      	str	r3, [r7, #12]
 800857e:	e002      	b.n	8008586 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	085b      	lsrs	r3, r3, #1
 8008584:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	089b      	lsrs	r3, r3, #2
 800858a:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e4      	bne.n	800855c <VL53L0X_isqrt+0x24>
	}

	return res;
 8008592:	68fb      	ldr	r3, [r7, #12]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085a8:	2300      	movs	r3, #0
 80085aa:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80085ac:	2200      	movs	r2, #0
 80085ae:	2183      	movs	r1, #131	; 0x83
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f002 fafd 	bl	800abb0 <VL53L0X_WrByte>
 80085b6:	4603      	mov	r3, r0
 80085b8:	461a      	mov	r2, r3
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
 80085bc:	4313      	orrs	r3, r2
 80085be:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80085c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d11e      	bne.n	8008606 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80085c8:	2300      	movs	r3, #0
 80085ca:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80085cc:	f107 030f 	add.w	r3, r7, #15
 80085d0:	461a      	mov	r2, r3
 80085d2:	2183      	movs	r1, #131	; 0x83
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f002 fb6d 	bl	800acb4 <VL53L0X_RdByte>
 80085da:	4603      	mov	r3, r0
 80085dc:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80085de:	7bfb      	ldrb	r3, [r7, #15]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10a      	bne.n	80085fa <VL53L0X_device_read_strobe+0x5a>
 80085e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d106      	bne.n	80085fa <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	3301      	adds	r3, #1
 80085f0:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80085f8:	d3e8      	bcc.n	80085cc <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008600:	d301      	bcc.n	8008606 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008602:	23f9      	movs	r3, #249	; 0xf9
 8008604:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8008606:	2201      	movs	r2, #1
 8008608:	2183      	movs	r1, #131	; 0x83
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f002 fad0 	bl	800abb0 <VL53L0X_WrByte>
 8008610:	4603      	mov	r3, r0
 8008612:	461a      	mov	r2, r3
 8008614:	7dfb      	ldrb	r3, [r7, #23]
 8008616:	4313      	orrs	r3, r2
 8008618:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800861a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800861e:	4618      	mov	r0, r3
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b098      	sub	sp, #96	; 0x60
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	460b      	mov	r3, r1
 8008630:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008632:	2300      	movs	r3, #0
 8008634:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8008638:	2300      	movs	r3, #0
 800863a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8008644:	2300      	movs	r3, #0
 8008646:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8008648:	2300      	movs	r3, #0
 800864a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800864c:	2300      	movs	r3, #0
 800864e:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8008650:	2300      	movs	r3, #0
 8008652:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8008656:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800865a:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800865c:	2300      	movs	r3, #0
 800865e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8008660:	2300      	movs	r3, #0
 8008662:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8008664:	2300      	movs	r3, #0
 8008666:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800866e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8008672:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008676:	2b07      	cmp	r3, #7
 8008678:	f000 8408 	beq.w	8008e8c <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800867c:	2201      	movs	r2, #1
 800867e:	2180      	movs	r1, #128	; 0x80
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f002 fa95 	bl	800abb0 <VL53L0X_WrByte>
 8008686:	4603      	mov	r3, r0
 8008688:	461a      	mov	r2, r3
 800868a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800868e:	4313      	orrs	r3, r2
 8008690:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008694:	2201      	movs	r2, #1
 8008696:	21ff      	movs	r1, #255	; 0xff
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f002 fa89 	bl	800abb0 <VL53L0X_WrByte>
 800869e:	4603      	mov	r3, r0
 80086a0:	461a      	mov	r2, r3
 80086a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086a6:	4313      	orrs	r3, r2
 80086a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80086ac:	2200      	movs	r2, #0
 80086ae:	2100      	movs	r1, #0
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f002 fa7d 	bl	800abb0 <VL53L0X_WrByte>
 80086b6:	4603      	mov	r3, r0
 80086b8:	461a      	mov	r2, r3
 80086ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086be:	4313      	orrs	r3, r2
 80086c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80086c4:	2206      	movs	r2, #6
 80086c6:	21ff      	movs	r1, #255	; 0xff
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f002 fa71 	bl	800abb0 <VL53L0X_WrByte>
 80086ce:	4603      	mov	r3, r0
 80086d0:	461a      	mov	r2, r3
 80086d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086d6:	4313      	orrs	r3, r2
 80086d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80086dc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80086e0:	461a      	mov	r2, r3
 80086e2:	2183      	movs	r1, #131	; 0x83
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f002 fae5 	bl	800acb4 <VL53L0X_RdByte>
 80086ea:	4603      	mov	r3, r0
 80086ec:	461a      	mov	r2, r3
 80086ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086f2:	4313      	orrs	r3, r2
 80086f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80086f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086fc:	f043 0304 	orr.w	r3, r3, #4
 8008700:	b2db      	uxtb	r3, r3
 8008702:	461a      	mov	r2, r3
 8008704:	2183      	movs	r1, #131	; 0x83
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f002 fa52 	bl	800abb0 <VL53L0X_WrByte>
 800870c:	4603      	mov	r3, r0
 800870e:	461a      	mov	r2, r3
 8008710:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008714:	4313      	orrs	r3, r2
 8008716:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800871a:	2207      	movs	r2, #7
 800871c:	21ff      	movs	r1, #255	; 0xff
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f002 fa46 	bl	800abb0 <VL53L0X_WrByte>
 8008724:	4603      	mov	r3, r0
 8008726:	461a      	mov	r2, r3
 8008728:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800872c:	4313      	orrs	r3, r2
 800872e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8008732:	2201      	movs	r2, #1
 8008734:	2181      	movs	r1, #129	; 0x81
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f002 fa3a 	bl	800abb0 <VL53L0X_WrByte>
 800873c:	4603      	mov	r3, r0
 800873e:	461a      	mov	r2, r3
 8008740:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008744:	4313      	orrs	r3, r2
 8008746:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f002 fb50 	bl	800adf0 <VL53L0X_PollingDelay>
 8008750:	4603      	mov	r3, r0
 8008752:	461a      	mov	r2, r3
 8008754:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008758:	4313      	orrs	r3, r2
 800875a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800875e:	2201      	movs	r2, #1
 8008760:	2180      	movs	r1, #128	; 0x80
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f002 fa24 	bl	800abb0 <VL53L0X_WrByte>
 8008768:	4603      	mov	r3, r0
 800876a:	461a      	mov	r2, r3
 800876c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008770:	4313      	orrs	r3, r2
 8008772:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8008776:	78fb      	ldrb	r3, [r7, #3]
 8008778:	f003 0301 	and.w	r3, r3, #1
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 8098 	beq.w	80088b2 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008782:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008786:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800878a:	2b00      	cmp	r3, #0
 800878c:	f040 8091 	bne.w	80088b2 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8008790:	226b      	movs	r2, #107	; 0x6b
 8008792:	2194      	movs	r1, #148	; 0x94
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f002 fa0b 	bl	800abb0 <VL53L0X_WrByte>
 800879a:	4603      	mov	r3, r0
 800879c:	461a      	mov	r2, r3
 800879e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087a2:	4313      	orrs	r3, r2
 80087a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7ff fef9 	bl	80085a0 <VL53L0X_device_read_strobe>
 80087ae:	4603      	mov	r3, r0
 80087b0:	461a      	mov	r2, r3
 80087b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087b6:	4313      	orrs	r3, r2
 80087b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80087bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80087c0:	461a      	mov	r2, r3
 80087c2:	2190      	movs	r1, #144	; 0x90
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f002 fad7 	bl	800ad78 <VL53L0X_RdDWord>
 80087ca:	4603      	mov	r3, r0
 80087cc:	461a      	mov	r2, r3
 80087ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087d2:	4313      	orrs	r3, r2
 80087d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80087d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087da:	0a1b      	lsrs	r3, r3, #8
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087e2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80087e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e8:	0bdb      	lsrs	r3, r3, #15
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80087f4:	2224      	movs	r2, #36	; 0x24
 80087f6:	2194      	movs	r1, #148	; 0x94
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f002 f9d9 	bl	800abb0 <VL53L0X_WrByte>
 80087fe:	4603      	mov	r3, r0
 8008800:	461a      	mov	r2, r3
 8008802:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008806:	4313      	orrs	r3, r2
 8008808:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f7ff fec7 	bl	80085a0 <VL53L0X_device_read_strobe>
 8008812:	4603      	mov	r3, r0
 8008814:	461a      	mov	r2, r3
 8008816:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800881a:	4313      	orrs	r3, r2
 800881c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008820:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008824:	461a      	mov	r2, r3
 8008826:	2190      	movs	r1, #144	; 0x90
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f002 faa5 	bl	800ad78 <VL53L0X_RdDWord>
 800882e:	4603      	mov	r3, r0
 8008830:	461a      	mov	r2, r3
 8008832:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008836:	4313      	orrs	r3, r2
 8008838:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800883c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883e:	0e1b      	lsrs	r3, r3, #24
 8008840:	b2db      	uxtb	r3, r3
 8008842:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8008844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008846:	0c1b      	lsrs	r3, r3, #16
 8008848:	b2db      	uxtb	r3, r3
 800884a:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800884c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884e:	0a1b      	lsrs	r3, r3, #8
 8008850:	b2db      	uxtb	r3, r3
 8008852:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8008854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008856:	b2db      	uxtb	r3, r3
 8008858:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800885a:	2225      	movs	r2, #37	; 0x25
 800885c:	2194      	movs	r1, #148	; 0x94
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f002 f9a6 	bl	800abb0 <VL53L0X_WrByte>
 8008864:	4603      	mov	r3, r0
 8008866:	461a      	mov	r2, r3
 8008868:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800886c:	4313      	orrs	r3, r2
 800886e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7ff fe94 	bl	80085a0 <VL53L0X_device_read_strobe>
 8008878:	4603      	mov	r3, r0
 800887a:	461a      	mov	r2, r3
 800887c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008880:	4313      	orrs	r3, r2
 8008882:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008886:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800888a:	461a      	mov	r2, r3
 800888c:	2190      	movs	r1, #144	; 0x90
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f002 fa72 	bl	800ad78 <VL53L0X_RdDWord>
 8008894:	4603      	mov	r3, r0
 8008896:	461a      	mov	r2, r3
 8008898:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800889c:	4313      	orrs	r3, r2
 800889e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	0e1b      	lsrs	r3, r3, #24
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	0c1b      	lsrs	r3, r3, #16
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80088b2:	78fb      	ldrb	r3, [r7, #3]
 80088b4:	f003 0302 	and.w	r3, r3, #2
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f000 8189 	beq.w	8008bd0 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80088be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80088c2:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f040 8182 	bne.w	8008bd0 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80088cc:	2202      	movs	r2, #2
 80088ce:	2194      	movs	r1, #148	; 0x94
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f002 f96d 	bl	800abb0 <VL53L0X_WrByte>
 80088d6:	4603      	mov	r3, r0
 80088d8:	461a      	mov	r2, r3
 80088da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088de:	4313      	orrs	r3, r2
 80088e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f7ff fe5b 	bl	80085a0 <VL53L0X_device_read_strobe>
 80088ea:	4603      	mov	r3, r0
 80088ec:	461a      	mov	r2, r3
 80088ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088f2:	4313      	orrs	r3, r2
 80088f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80088f8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80088fc:	461a      	mov	r2, r3
 80088fe:	2190      	movs	r1, #144	; 0x90
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f002 f9d7 	bl	800acb4 <VL53L0X_RdByte>
 8008906:	4603      	mov	r3, r0
 8008908:	461a      	mov	r2, r3
 800890a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800890e:	4313      	orrs	r3, r2
 8008910:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008914:	227b      	movs	r2, #123	; 0x7b
 8008916:	2194      	movs	r1, #148	; 0x94
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f002 f949 	bl	800abb0 <VL53L0X_WrByte>
 800891e:	4603      	mov	r3, r0
 8008920:	461a      	mov	r2, r3
 8008922:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008926:	4313      	orrs	r3, r2
 8008928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7ff fe37 	bl	80085a0 <VL53L0X_device_read_strobe>
 8008932:	4603      	mov	r3, r0
 8008934:	461a      	mov	r2, r3
 8008936:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800893a:	4313      	orrs	r3, r2
 800893c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8008940:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8008944:	461a      	mov	r2, r3
 8008946:	2190      	movs	r1, #144	; 0x90
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f002 f9b3 	bl	800acb4 <VL53L0X_RdByte>
 800894e:	4603      	mov	r3, r0
 8008950:	461a      	mov	r2, r3
 8008952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008956:	4313      	orrs	r3, r2
 8008958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800895c:	2277      	movs	r2, #119	; 0x77
 800895e:	2194      	movs	r1, #148	; 0x94
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f002 f925 	bl	800abb0 <VL53L0X_WrByte>
 8008966:	4603      	mov	r3, r0
 8008968:	461a      	mov	r2, r3
 800896a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800896e:	4313      	orrs	r3, r2
 8008970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7ff fe13 	bl	80085a0 <VL53L0X_device_read_strobe>
 800897a:	4603      	mov	r3, r0
 800897c:	461a      	mov	r2, r3
 800897e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008982:	4313      	orrs	r3, r2
 8008984:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008988:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800898c:	461a      	mov	r2, r3
 800898e:	2190      	movs	r1, #144	; 0x90
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f002 f9f1 	bl	800ad78 <VL53L0X_RdDWord>
 8008996:	4603      	mov	r3, r0
 8008998:	461a      	mov	r2, r3
 800899a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800899e:	4313      	orrs	r3, r2
 80089a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80089a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a6:	0e5b      	lsrs	r3, r3, #25
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80089b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b4:	0c9b      	lsrs	r3, r3, #18
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80089c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c2:	0adb      	lsrs	r3, r3, #11
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80089ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d0:	091b      	lsrs	r3, r3, #4
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80089dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	00db      	lsls	r3, r3, #3
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80089ee:	2278      	movs	r2, #120	; 0x78
 80089f0:	2194      	movs	r1, #148	; 0x94
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f002 f8dc 	bl	800abb0 <VL53L0X_WrByte>
 80089f8:	4603      	mov	r3, r0
 80089fa:	461a      	mov	r2, r3
 80089fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a00:	4313      	orrs	r3, r2
 8008a02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7ff fdca 	bl	80085a0 <VL53L0X_device_read_strobe>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	461a      	mov	r2, r3
 8008a10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a14:	4313      	orrs	r3, r2
 8008a16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008a1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a1e:	461a      	mov	r2, r3
 8008a20:	2190      	movs	r1, #144	; 0x90
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f002 f9a8 	bl	800ad78 <VL53L0X_RdDWord>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a30:	4313      	orrs	r3, r2
 8008a32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8008a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a38:	0f5b      	lsrs	r3, r3, #29
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a40:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8008a42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a46:	4413      	add	r3, r2
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8008a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4e:	0d9b      	lsrs	r3, r3, #22
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5c:	0bdb      	lsrs	r3, r3, #15
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8008a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6a:	0a1b      	lsrs	r3, r3, #8
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8008a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a78:	085b      	lsrs	r3, r3, #1
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8008a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	019b      	lsls	r3, r3, #6
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8008a96:	2279      	movs	r2, #121	; 0x79
 8008a98:	2194      	movs	r1, #148	; 0x94
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f002 f888 	bl	800abb0 <VL53L0X_WrByte>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f7ff fd76 	bl	80085a0 <VL53L0X_device_read_strobe>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008abc:	4313      	orrs	r3, r2
 8008abe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008ac2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	2190      	movs	r1, #144	; 0x90
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f002 f954 	bl	800ad78 <VL53L0X_RdDWord>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8008ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae0:	0e9b      	lsrs	r3, r3, #26
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ae8:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8008aea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008aee:	4413      	add	r3, r2
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8008af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af6:	0cdb      	lsrs	r3, r3, #19
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8008b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b04:	0b1b      	lsrs	r3, r3, #12
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8008b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b12:	095b      	lsrs	r3, r3, #5
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8008b30:	227a      	movs	r2, #122	; 0x7a
 8008b32:	2194      	movs	r1, #148	; 0x94
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f002 f83b 	bl	800abb0 <VL53L0X_WrByte>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b42:	4313      	orrs	r3, r2
 8008b44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff fd29 	bl	80085a0 <VL53L0X_device_read_strobe>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	461a      	mov	r2, r3
 8008b52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b56:	4313      	orrs	r3, r2
 8008b58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008b5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008b60:	461a      	mov	r2, r3
 8008b62:	2190      	movs	r1, #144	; 0x90
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f002 f907 	bl	800ad78 <VL53L0X_RdDWord>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b72:	4313      	orrs	r3, r2
 8008b74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8008b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7a:	0f9b      	lsrs	r3, r3, #30
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b82:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8008b84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b88:	4413      	add	r3, r2
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b90:	0ddb      	lsrs	r3, r3, #23
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9e:	0c1b      	lsrs	r3, r3, #16
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8008baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bac:	0a5b      	lsrs	r3, r3, #9
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8008bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bbc:	089b      	lsrs	r3, r3, #2
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8008bca:	2300      	movs	r3, #0
 8008bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8008bd0:	78fb      	ldrb	r3, [r7, #3]
 8008bd2:	f003 0304 	and.w	r3, r3, #4
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f000 80f1 	beq.w	8008dbe <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008bdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008be0:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f040 80ea 	bne.w	8008dbe <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008bea:	227b      	movs	r2, #123	; 0x7b
 8008bec:	2194      	movs	r1, #148	; 0x94
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f001 ffde 	bl	800abb0 <VL53L0X_WrByte>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7ff fccc 	bl	80085a0 <VL53L0X_device_read_strobe>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c10:	4313      	orrs	r3, r2
 8008c12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8008c16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	2190      	movs	r1, #144	; 0x90
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f002 f8aa 	bl	800ad78 <VL53L0X_RdDWord>
 8008c24:	4603      	mov	r3, r0
 8008c26:	461a      	mov	r2, r3
 8008c28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8008c32:	227c      	movs	r2, #124	; 0x7c
 8008c34:	2194      	movs	r1, #148	; 0x94
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f001 ffba 	bl	800abb0 <VL53L0X_WrByte>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	461a      	mov	r2, r3
 8008c40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c44:	4313      	orrs	r3, r2
 8008c46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7ff fca8 	bl	80085a0 <VL53L0X_device_read_strobe>
 8008c50:	4603      	mov	r3, r0
 8008c52:	461a      	mov	r2, r3
 8008c54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8008c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c62:	461a      	mov	r2, r3
 8008c64:	2190      	movs	r1, #144	; 0x90
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f002 f886 	bl	800ad78 <VL53L0X_RdDWord>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	461a      	mov	r2, r3
 8008c70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c74:	4313      	orrs	r3, r2
 8008c76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8008c7a:	2273      	movs	r2, #115	; 0x73
 8008c7c:	2194      	movs	r1, #148	; 0x94
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f001 ff96 	bl	800abb0 <VL53L0X_WrByte>
 8008c84:	4603      	mov	r3, r0
 8008c86:	461a      	mov	r2, r3
 8008c88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7ff fc84 	bl	80085a0 <VL53L0X_device_read_strobe>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008ca6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008caa:	461a      	mov	r2, r3
 8008cac:	2190      	movs	r1, #144	; 0x90
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f002 f862 	bl	800ad78 <VL53L0X_RdDWord>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8008cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc4:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8008cca:	2274      	movs	r2, #116	; 0x74
 8008ccc:	2194      	movs	r1, #148	; 0x94
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f001 ff6e 	bl	800abb0 <VL53L0X_WrByte>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7ff fc5c 	bl	80085a0 <VL53L0X_device_read_strobe>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	461a      	mov	r2, r3
 8008cec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008cf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	2190      	movs	r1, #144	; 0x90
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f002 f83a 	bl	800ad78 <VL53L0X_RdDWord>
 8008d04:	4603      	mov	r3, r0
 8008d06:	461a      	mov	r2, r3
 8008d08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8008d16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8008d1c:	2275      	movs	r2, #117	; 0x75
 8008d1e:	2194      	movs	r1, #148	; 0x94
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f001 ff45 	bl	800abb0 <VL53L0X_WrByte>
 8008d26:	4603      	mov	r3, r0
 8008d28:	461a      	mov	r2, r3
 8008d2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7ff fc33 	bl	80085a0 <VL53L0X_device_read_strobe>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d42:	4313      	orrs	r3, r2
 8008d44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008d48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	2190      	movs	r1, #144	; 0x90
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f002 f811 	bl	800ad78 <VL53L0X_RdDWord>
 8008d56:	4603      	mov	r3, r0
 8008d58:	461a      	mov	r2, r3
 8008d5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8008d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d66:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8008d6c:	2276      	movs	r2, #118	; 0x76
 8008d6e:	2194      	movs	r1, #148	; 0x94
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f001 ff1d 	bl	800abb0 <VL53L0X_WrByte>
 8008d76:	4603      	mov	r3, r0
 8008d78:	461a      	mov	r2, r3
 8008d7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7ff fc0b 	bl	80085a0 <VL53L0X_device_read_strobe>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d92:	4313      	orrs	r3, r2
 8008d94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008d98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	2190      	movs	r1, #144	; 0x90
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f001 ffe9 	bl	800ad78 <VL53L0X_RdDWord>
 8008da6:	4603      	mov	r3, r0
 8008da8:	461a      	mov	r2, r3
 8008daa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dae:	4313      	orrs	r3, r2
 8008db0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8008db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db6:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8008db8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	2181      	movs	r1, #129	; 0x81
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f001 fef4 	bl	800abb0 <VL53L0X_WrByte>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008dd6:	2206      	movs	r2, #6
 8008dd8:	21ff      	movs	r1, #255	; 0xff
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f001 fee8 	bl	800abb0 <VL53L0X_WrByte>
 8008de0:	4603      	mov	r3, r0
 8008de2:	461a      	mov	r2, r3
 8008de4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008de8:	4313      	orrs	r3, r2
 8008dea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008dee:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008df2:	461a      	mov	r2, r3
 8008df4:	2183      	movs	r1, #131	; 0x83
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f001 ff5c 	bl	800acb4 <VL53L0X_RdByte>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	461a      	mov	r2, r3
 8008e00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e04:	4313      	orrs	r3, r2
 8008e06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8008e0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e0e:	f023 0304 	bic.w	r3, r3, #4
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	461a      	mov	r2, r3
 8008e16:	2183      	movs	r1, #131	; 0x83
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f001 fec9 	bl	800abb0 <VL53L0X_WrByte>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	461a      	mov	r2, r3
 8008e22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e26:	4313      	orrs	r3, r2
 8008e28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	21ff      	movs	r1, #255	; 0xff
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f001 febd 	bl	800abb0 <VL53L0X_WrByte>
 8008e36:	4603      	mov	r3, r0
 8008e38:	461a      	mov	r2, r3
 8008e3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008e44:	2201      	movs	r2, #1
 8008e46:	2100      	movs	r1, #0
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f001 feb1 	bl	800abb0 <VL53L0X_WrByte>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	461a      	mov	r2, r3
 8008e52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e56:	4313      	orrs	r3, r2
 8008e58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	21ff      	movs	r1, #255	; 0xff
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f001 fea5 	bl	800abb0 <VL53L0X_WrByte>
 8008e66:	4603      	mov	r3, r0
 8008e68:	461a      	mov	r2, r3
 8008e6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008e74:	2200      	movs	r2, #0
 8008e76:	2180      	movs	r1, #128	; 0x80
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f001 fe99 	bl	800abb0 <VL53L0X_WrByte>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	461a      	mov	r2, r3
 8008e82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e86:	4313      	orrs	r3, r2
 8008e88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008e8c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f040 808f 	bne.w	8008fb4 <VL53L0X_get_info_from_device+0x98e>
 8008e96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e9a:	2b07      	cmp	r3, #7
 8008e9c:	f000 808a 	beq.w	8008fb4 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8008ea0:	78fb      	ldrb	r3, [r7, #3]
 8008ea2:	f003 0301 	and.w	r3, r3, #1
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d024      	beq.n	8008ef4 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008eaa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008eae:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d11e      	bne.n	8008ef4 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8008ebc:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8008ec6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008eca:	2300      	movs	r3, #0
 8008ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ece:	e00e      	b.n	8008eee <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8008ed0:	f107 0208 	add.w	r2, r7, #8
 8008ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ed6:	4413      	add	r3, r2
 8008ed8:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ede:	4413      	add	r3, r2
 8008ee0:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008ee4:	460a      	mov	r2, r1
 8008ee6:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eea:	3301      	adds	r3, #1
 8008eec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ef0:	2b05      	cmp	r3, #5
 8008ef2:	dded      	ble.n	8008ed0 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8008ef4:	78fb      	ldrb	r3, [r7, #3]
 8008ef6:	f003 0302 	and.w	r3, r3, #2
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d018      	beq.n	8008f30 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008efe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008f02:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d112      	bne.n	8008f30 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008f0a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008f14:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	33f3      	adds	r3, #243	; 0xf3
 8008f22:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8008f24:	f107 0310 	add.w	r3, r7, #16
 8008f28:	4619      	mov	r1, r3
 8008f2a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f2c:	f002 f835 	bl	800af9a <strcpy>

		}

		if (((option & 4) == 4) &&
 8008f30:	78fb      	ldrb	r3, [r7, #3]
 8008f32:	f003 0304 	and.w	r3, r3, #4
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d030      	beq.n	8008f9c <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8008f3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008f3e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d12a      	bne.n	8008f9c <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008f46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8008f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f58:	025b      	lsls	r3, r3, #9
 8008f5a:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f60:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8008f64:	2300      	movs	r3, #0
 8008f66:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8008f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d011      	beq.n	8008f94 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8008f70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8008f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f7e:	fb02 f303 	mul.w	r3, r2, r3
 8008f82:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8008f84:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8008f88:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008f8c:	425b      	negs	r3, r3
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8008f94:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8008f9c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008fa0:	78fb      	ldrb	r3, [r7, #3]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8008faa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008fb4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3760      	adds	r7, #96	; 0x60
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8008fc0:	b490      	push	{r4, r7}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8008fcc:	f240 6377 	movw	r3, #1655	; 0x677
 8008fd0:	f04f 0400 	mov.w	r4, #0
 8008fd4:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8008fd8:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8008fdc:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8008fde:	78fb      	ldrb	r3, [r7, #3]
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8008fe6:	693a      	ldr	r2, [r7, #16]
 8008fe8:	fb02 f303 	mul.w	r3, r2, r3
 8008fec:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8008fee:	68bb      	ldr	r3, [r7, #8]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3718      	adds	r7, #24
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bc90      	pop	{r4, r7}
 8008ff8:	4770      	bx	lr

08008ffa <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8008ffa:	b480      	push	{r7}
 8008ffc:	b087      	sub	sp, #28
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8009002:	2300      	movs	r3, #0
 8009004:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8009006:	2300      	movs	r3, #0
 8009008:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800900a:	2300      	movs	r3, #0
 800900c:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d017      	beq.n	8009044 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	3b01      	subs	r3, #1
 8009018:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800901a:	e005      	b.n	8009028 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	085b      	lsrs	r3, r3, #1
 8009020:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8009022:	89fb      	ldrh	r3, [r7, #14]
 8009024:	3301      	adds	r3, #1
 8009026:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1f4      	bne.n	800901c <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8009032:	89fb      	ldrh	r3, [r7, #14]
 8009034:	021b      	lsls	r3, r3, #8
 8009036:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	b29b      	uxth	r3, r3
 800903c:	b2db      	uxtb	r3, r3
 800903e:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8009040:	4413      	add	r3, r2
 8009042:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8009044:	8afb      	ldrh	r3, [r7, #22]

}
 8009046:	4618      	mov	r0, r3
 8009048:	371c      	adds	r7, #28
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8009052:	b480      	push	{r7}
 8009054:	b085      	sub	sp, #20
 8009056:	af00      	add	r7, sp, #0
 8009058:	4603      	mov	r3, r0
 800905a:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800905c:	2300      	movs	r3, #0
 800905e:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009060:	88fb      	ldrh	r3, [r7, #6]
 8009062:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8009064:	88fa      	ldrh	r2, [r7, #6]
 8009066:	0a12      	lsrs	r2, r2, #8
 8009068:	b292      	uxth	r2, r2
 800906a:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800906c:	3301      	adds	r3, #1
 800906e:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8009070:	68fb      	ldr	r3, [r7, #12]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3714      	adds	r7, #20
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr
	...

08009080 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b088      	sub	sp, #32
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	4613      	mov	r3, r2
 800908c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800908e:	2300      	movs	r3, #0
 8009090:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009092:	79fb      	ldrb	r3, [r7, #7]
 8009094:	4619      	mov	r1, r3
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f7ff ff92 	bl	8008fc0 <VL53L0X_calc_macro_period_ps>
 800909c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80090a4:	4a0a      	ldr	r2, [pc, #40]	; (80090d0 <VL53L0X_calc_timeout_mclks+0x50>)
 80090a6:	fba2 2303 	umull	r2, r3, r2, r3
 80090aa:	099b      	lsrs	r3, r3, #6
 80090ac:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80090b4:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	085b      	lsrs	r3, r3, #1
 80090bc:	441a      	add	r2, r3
	timeout_period_mclks =
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80090c4:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 80090c6:	69fb      	ldr	r3, [r7, #28]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3720      	adds	r7, #32
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	10624dd3 	.word	0x10624dd3

080090d4 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	807b      	strh	r3, [r7, #2]
 80090e0:	4613      	mov	r3, r2
 80090e2:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 80090e4:	2300      	movs	r3, #0
 80090e6:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80090e8:	787b      	ldrb	r3, [r7, #1]
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f7ff ff67 	bl	8008fc0 <VL53L0X_calc_macro_period_ps>
 80090f2:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80090fa:	4a0a      	ldr	r2, [pc, #40]	; (8009124 <VL53L0X_calc_timeout_us+0x50>)
 80090fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009100:	099b      	lsrs	r3, r3, #6
 8009102:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8009104:	887b      	ldrh	r3, [r7, #2]
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	fb02 f303 	mul.w	r3, r2, r3
 800910c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8009110:	4a04      	ldr	r2, [pc, #16]	; (8009124 <VL53L0X_calc_timeout_us+0x50>)
 8009112:	fba2 2303 	umull	r2, r3, r2, r3
 8009116:	099b      	lsrs	r3, r3, #6
 8009118:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800911a:	697b      	ldr	r3, [r7, #20]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3718      	adds	r7, #24
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	10624dd3 	.word	0x10624dd3

08009128 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b08c      	sub	sp, #48	; 0x30
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	460b      	mov	r3, r1
 8009132:	607a      	str	r2, [r7, #4]
 8009134:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009136:	2300      	movs	r3, #0
 8009138:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800913c:	2300      	movs	r3, #0
 800913e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8009142:	2300      	movs	r3, #0
 8009144:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8009146:	2300      	movs	r3, #0
 8009148:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800914a:	2300      	movs	r3, #0
 800914c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800914e:	7afb      	ldrb	r3, [r7, #11]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d005      	beq.n	8009160 <get_sequence_step_timeout+0x38>
 8009154:	7afb      	ldrb	r3, [r7, #11]
 8009156:	2b01      	cmp	r3, #1
 8009158:	d002      	beq.n	8009160 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800915a:	7afb      	ldrb	r3, [r7, #11]
 800915c:	2b02      	cmp	r3, #2
 800915e:	d128      	bne.n	80091b2 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009160:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009164:	461a      	mov	r2, r3
 8009166:	2100      	movs	r1, #0
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f7fd fa7d 	bl	8006668 <VL53L0X_GetVcselPulsePeriod>
 800916e:	4603      	mov	r3, r0
 8009170:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8009174:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009178:	2b00      	cmp	r3, #0
 800917a:	d109      	bne.n	8009190 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800917c:	f107 0320 	add.w	r3, r7, #32
 8009180:	461a      	mov	r2, r3
 8009182:	2146      	movs	r1, #70	; 0x46
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f001 fd95 	bl	800acb4 <VL53L0X_RdByte>
 800918a:	4603      	mov	r3, r0
 800918c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8009190:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009194:	b29b      	uxth	r3, r3
 8009196:	4618      	mov	r0, r3
 8009198:	f7ff ff5b 	bl	8009052 <VL53L0X_decode_timeout>
 800919c:	4603      	mov	r3, r0
 800919e:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80091a0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80091a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80091a6:	4619      	mov	r1, r3
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f7ff ff93 	bl	80090d4 <VL53L0X_calc_timeout_us>
 80091ae:	62b8      	str	r0, [r7, #40]	; 0x28
 80091b0:	e092      	b.n	80092d8 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80091b2:	7afb      	ldrb	r3, [r7, #11]
 80091b4:	2b03      	cmp	r3, #3
 80091b6:	d135      	bne.n	8009224 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80091b8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80091bc:	461a      	mov	r2, r3
 80091be:	2100      	movs	r1, #0
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f7fd fa51 	bl	8006668 <VL53L0X_GetVcselPulsePeriod>
 80091c6:	4603      	mov	r3, r0
 80091c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80091cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f040 8081 	bne.w	80092d8 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80091d6:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80091da:	461a      	mov	r2, r3
 80091dc:	2100      	movs	r1, #0
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f7fd fa42 	bl	8006668 <VL53L0X_GetVcselPulsePeriod>
 80091e4:	4603      	mov	r3, r0
 80091e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80091ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d109      	bne.n	8009206 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 80091f2:	f107 031e 	add.w	r3, r7, #30
 80091f6:	461a      	mov	r2, r3
 80091f8:	2151      	movs	r1, #81	; 0x51
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f001 fd84 	bl	800ad08 <VL53L0X_RdWord>
 8009200:	4603      	mov	r3, r0
 8009202:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009206:	8bfb      	ldrh	r3, [r7, #30]
 8009208:	4618      	mov	r0, r3
 800920a:	f7ff ff22 	bl	8009052 <VL53L0X_decode_timeout>
 800920e:	4603      	mov	r3, r0
 8009210:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009212:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009216:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009218:	4619      	mov	r1, r3
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	f7ff ff5a 	bl	80090d4 <VL53L0X_calc_timeout_us>
 8009220:	62b8      	str	r0, [r7, #40]	; 0x28
 8009222:	e059      	b.n	80092d8 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009224:	7afb      	ldrb	r3, [r7, #11]
 8009226:	2b04      	cmp	r3, #4
 8009228:	d156      	bne.n	80092d8 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800922a:	f107 0314 	add.w	r3, r7, #20
 800922e:	4619      	mov	r1, r3
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f7fd fb25 	bl	8006880 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8009236:	2300      	movs	r3, #0
 8009238:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800923a:	7dfb      	ldrb	r3, [r7, #23]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d01d      	beq.n	800927c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009240:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009244:	461a      	mov	r2, r3
 8009246:	2100      	movs	r1, #0
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f7fd fa0d 	bl	8006668 <VL53L0X_GetVcselPulsePeriod>
 800924e:	4603      	mov	r3, r0
 8009250:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8009254:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10f      	bne.n	800927c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800925c:	f107 031e 	add.w	r3, r7, #30
 8009260:	461a      	mov	r2, r3
 8009262:	2151      	movs	r1, #81	; 0x51
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f001 fd4f 	bl	800ad08 <VL53L0X_RdWord>
 800926a:	4603      	mov	r3, r0
 800926c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009270:	8bfb      	ldrh	r3, [r7, #30]
 8009272:	4618      	mov	r0, r3
 8009274:	f7ff feed 	bl	8009052 <VL53L0X_decode_timeout>
 8009278:	4603      	mov	r3, r0
 800927a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800927c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009280:	2b00      	cmp	r3, #0
 8009282:	d109      	bne.n	8009298 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009284:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009288:	461a      	mov	r2, r3
 800928a:	2101      	movs	r1, #1
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f7fd f9eb 	bl	8006668 <VL53L0X_GetVcselPulsePeriod>
 8009292:	4603      	mov	r3, r0
 8009294:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009298:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10f      	bne.n	80092c0 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80092a0:	f107 031c 	add.w	r3, r7, #28
 80092a4:	461a      	mov	r2, r3
 80092a6:	2171      	movs	r1, #113	; 0x71
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f001 fd2d 	bl	800ad08 <VL53L0X_RdWord>
 80092ae:	4603      	mov	r3, r0
 80092b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80092b4:	8bbb      	ldrh	r3, [r7, #28]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7ff fecb 	bl	8009052 <VL53L0X_decode_timeout>
 80092bc:	4603      	mov	r3, r0
 80092be:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80092c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80092c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80092c8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80092cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092ce:	4619      	mov	r1, r3
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f7ff feff 	bl	80090d4 <VL53L0X_calc_timeout_us>
 80092d6:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092dc:	601a      	str	r2, [r3, #0]

	return Status;
 80092de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3730      	adds	r7, #48	; 0x30
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b08a      	sub	sp, #40	; 0x28
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	60f8      	str	r0, [r7, #12]
 80092f2:	460b      	mov	r3, r1
 80092f4:	607a      	str	r2, [r7, #4]
 80092f6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092f8:	2300      	movs	r3, #0
 80092fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80092fe:	7afb      	ldrb	r3, [r7, #11]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d005      	beq.n	8009310 <set_sequence_step_timeout+0x26>
 8009304:	7afb      	ldrb	r3, [r7, #11]
 8009306:	2b01      	cmp	r3, #1
 8009308:	d002      	beq.n	8009310 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800930a:	7afb      	ldrb	r3, [r7, #11]
 800930c:	2b02      	cmp	r3, #2
 800930e:	d138      	bne.n	8009382 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009310:	f107 031b 	add.w	r3, r7, #27
 8009314:	461a      	mov	r2, r3
 8009316:	2100      	movs	r1, #0
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f7fd f9a5 	bl	8006668 <VL53L0X_GetVcselPulsePeriod>
 800931e:	4603      	mov	r3, r0
 8009320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8009324:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009328:	2b00      	cmp	r3, #0
 800932a:	d11a      	bne.n	8009362 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800932c:	7efb      	ldrb	r3, [r7, #27]
 800932e:	461a      	mov	r2, r3
 8009330:	6879      	ldr	r1, [r7, #4]
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f7ff fea4 	bl	8009080 <VL53L0X_calc_timeout_mclks>
 8009338:	4603      	mov	r3, r0
 800933a:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800933c:	8bbb      	ldrh	r3, [r7, #28]
 800933e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009342:	d903      	bls.n	800934c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8009344:	23ff      	movs	r3, #255	; 0xff
 8009346:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800934a:	e004      	b.n	8009356 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800934c:	8bbb      	ldrh	r3, [r7, #28]
 800934e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8009350:	3b01      	subs	r3, #1
 8009352:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009356:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800935a:	b29a      	uxth	r2, r3
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009362:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009366:	2b00      	cmp	r3, #0
 8009368:	f040 80ab 	bne.w	80094c2 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800936c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009370:	461a      	mov	r2, r3
 8009372:	2146      	movs	r1, #70	; 0x46
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f001 fc1b 	bl	800abb0 <VL53L0X_WrByte>
 800937a:	4603      	mov	r3, r0
 800937c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8009380:	e09f      	b.n	80094c2 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8009382:	7afb      	ldrb	r3, [r7, #11]
 8009384:	2b03      	cmp	r3, #3
 8009386:	d135      	bne.n	80093f4 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8009388:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800938c:	2b00      	cmp	r3, #0
 800938e:	d11b      	bne.n	80093c8 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009390:	f107 031b 	add.w	r3, r7, #27
 8009394:	461a      	mov	r2, r3
 8009396:	2100      	movs	r1, #0
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f7fd f965 	bl	8006668 <VL53L0X_GetVcselPulsePeriod>
 800939e:	4603      	mov	r3, r0
 80093a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80093a4:	7efb      	ldrb	r3, [r7, #27]
 80093a6:	461a      	mov	r2, r3
 80093a8:	6879      	ldr	r1, [r7, #4]
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f7ff fe68 	bl	8009080 <VL53L0X_calc_timeout_mclks>
 80093b0:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80093b2:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80093b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7ff fe1f 	bl	8008ffa <VL53L0X_encode_timeout>
 80093bc:	4603      	mov	r3, r0
 80093be:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80093c0:	8b3a      	ldrh	r2, [r7, #24]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80093c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d108      	bne.n	80093e2 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80093d0:	8b3b      	ldrh	r3, [r7, #24]
 80093d2:	461a      	mov	r2, r3
 80093d4:	2151      	movs	r1, #81	; 0x51
 80093d6:	68f8      	ldr	r0, [r7, #12]
 80093d8:	f001 fc0e 	bl	800abf8 <VL53L0X_WrWord>
 80093dc:	4603      	mov	r3, r0
 80093de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80093e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d16b      	bne.n	80094c2 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80093f2:	e066      	b.n	80094c2 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80093f4:	7afb      	ldrb	r3, [r7, #11]
 80093f6:	2b04      	cmp	r3, #4
 80093f8:	d160      	bne.n	80094bc <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80093fa:	f107 0310 	add.w	r3, r7, #16
 80093fe:	4619      	mov	r1, r3
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f7fd fa3d 	bl	8006880 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8009406:	2300      	movs	r3, #0
 8009408:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800940a:	7cfb      	ldrb	r3, [r7, #19]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d01d      	beq.n	800944c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009410:	f107 031b 	add.w	r3, r7, #27
 8009414:	461a      	mov	r2, r3
 8009416:	2100      	movs	r1, #0
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f7fd f925 	bl	8006668 <VL53L0X_GetVcselPulsePeriod>
 800941e:	4603      	mov	r3, r0
 8009420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8009424:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10f      	bne.n	800944c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800942c:	f107 0318 	add.w	r3, r7, #24
 8009430:	461a      	mov	r2, r3
 8009432:	2151      	movs	r1, #81	; 0x51
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f001 fc67 	bl	800ad08 <VL53L0X_RdWord>
 800943a:	4603      	mov	r3, r0
 800943c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8009440:	8b3b      	ldrh	r3, [r7, #24]
 8009442:	4618      	mov	r0, r3
 8009444:	f7ff fe05 	bl	8009052 <VL53L0X_decode_timeout>
 8009448:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800944a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800944c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009450:	2b00      	cmp	r3, #0
 8009452:	d109      	bne.n	8009468 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009454:	f107 031b 	add.w	r3, r7, #27
 8009458:	461a      	mov	r2, r3
 800945a:	2101      	movs	r1, #1
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f7fd f903 	bl	8006668 <VL53L0X_GetVcselPulsePeriod>
 8009462:	4603      	mov	r3, r0
 8009464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8009468:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800946c:	2b00      	cmp	r3, #0
 800946e:	d128      	bne.n	80094c2 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009470:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 8009472:	461a      	mov	r2, r3
 8009474:	6879      	ldr	r1, [r7, #4]
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f7ff fe02 	bl	8009080 <VL53L0X_calc_timeout_mclks>
 800947c:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800947e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009480:	6a3a      	ldr	r2, [r7, #32]
 8009482:	4413      	add	r3, r2
 8009484:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 8009486:	6a38      	ldr	r0, [r7, #32]
 8009488:	f7ff fdb7 	bl	8008ffa <VL53L0X_encode_timeout>
 800948c:	4603      	mov	r3, r0
 800948e:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 8009490:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009494:	2b00      	cmp	r3, #0
 8009496:	d108      	bne.n	80094aa <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8009498:	8bfb      	ldrh	r3, [r7, #30]
 800949a:	461a      	mov	r2, r3
 800949c:	2171      	movs	r1, #113	; 0x71
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f001 fbaa 	bl	800abf8 <VL53L0X_WrWord>
 80094a4:	4603      	mov	r3, r0
 80094a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80094aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d107      	bne.n	80094c2 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80094ba:	e002      	b.n	80094c2 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80094bc:	23fc      	movs	r3, #252	; 0xfc
 80094be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80094c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3728      	adds	r7, #40	; 0x28
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b08a      	sub	sp, #40	; 0x28
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	460b      	mov	r3, r1
 80094d8:	70fb      	strb	r3, [r7, #3]
 80094da:	4613      	mov	r3, r2
 80094dc:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80094de:	2300      	movs	r3, #0
 80094e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 80094e4:	230c      	movs	r3, #12
 80094e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 80094ea:	2312      	movs	r3, #18
 80094ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 80094f0:	2308      	movs	r3, #8
 80094f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 80094f6:	230e      	movs	r3, #14
 80094f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 80094fc:	2300      	movs	r3, #0
 80094fe:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8009500:	78bb      	ldrb	r3, [r7, #2]
 8009502:	f003 0301 	and.w	r3, r3, #1
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b00      	cmp	r3, #0
 800950a:	d003      	beq.n	8009514 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800950c:	23fc      	movs	r3, #252	; 0xfc
 800950e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009512:	e020      	b.n	8009556 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8009514:	78fb      	ldrb	r3, [r7, #3]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d10d      	bne.n	8009536 <VL53L0X_set_vcsel_pulse_period+0x68>
 800951a:	78ba      	ldrb	r2, [r7, #2]
 800951c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009520:	429a      	cmp	r2, r3
 8009522:	d304      	bcc.n	800952e <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8009524:	78ba      	ldrb	r2, [r7, #2]
 8009526:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800952a:	429a      	cmp	r2, r3
 800952c:	d903      	bls.n	8009536 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800952e:	23fc      	movs	r3, #252	; 0xfc
 8009530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009534:	e00f      	b.n	8009556 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8009536:	78fb      	ldrb	r3, [r7, #3]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d10c      	bne.n	8009556 <VL53L0X_set_vcsel_pulse_period+0x88>
 800953c:	78ba      	ldrb	r2, [r7, #2]
 800953e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009542:	429a      	cmp	r2, r3
 8009544:	d304      	bcc.n	8009550 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8009546:	78ba      	ldrb	r2, [r7, #2]
 8009548:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800954c:	429a      	cmp	r2, r3
 800954e:	d902      	bls.n	8009556 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009550:	23fc      	movs	r3, #252	; 0xfc
 8009552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8009556:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800955a:	2b00      	cmp	r3, #0
 800955c:	d002      	beq.n	8009564 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800955e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009562:	e239      	b.n	80099d8 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8009564:	78fb      	ldrb	r3, [r7, #3]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d150      	bne.n	800960c <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800956a:	78bb      	ldrb	r3, [r7, #2]
 800956c:	2b0c      	cmp	r3, #12
 800956e:	d110      	bne.n	8009592 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8009570:	2218      	movs	r2, #24
 8009572:	2157      	movs	r1, #87	; 0x57
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f001 fb1b 	bl	800abb0 <VL53L0X_WrByte>
 800957a:	4603      	mov	r3, r0
 800957c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8009580:	2208      	movs	r2, #8
 8009582:	2156      	movs	r1, #86	; 0x56
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f001 fb13 	bl	800abb0 <VL53L0X_WrByte>
 800958a:	4603      	mov	r3, r0
 800958c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009590:	e17f      	b.n	8009892 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009592:	78bb      	ldrb	r3, [r7, #2]
 8009594:	2b0e      	cmp	r3, #14
 8009596:	d110      	bne.n	80095ba <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8009598:	2230      	movs	r2, #48	; 0x30
 800959a:	2157      	movs	r1, #87	; 0x57
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f001 fb07 	bl	800abb0 <VL53L0X_WrByte>
 80095a2:	4603      	mov	r3, r0
 80095a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80095a8:	2208      	movs	r2, #8
 80095aa:	2156      	movs	r1, #86	; 0x56
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f001 faff 	bl	800abb0 <VL53L0X_WrByte>
 80095b2:	4603      	mov	r3, r0
 80095b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80095b8:	e16b      	b.n	8009892 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80095ba:	78bb      	ldrb	r3, [r7, #2]
 80095bc:	2b10      	cmp	r3, #16
 80095be:	d110      	bne.n	80095e2 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80095c0:	2240      	movs	r2, #64	; 0x40
 80095c2:	2157      	movs	r1, #87	; 0x57
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f001 faf3 	bl	800abb0 <VL53L0X_WrByte>
 80095ca:	4603      	mov	r3, r0
 80095cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80095d0:	2208      	movs	r2, #8
 80095d2:	2156      	movs	r1, #86	; 0x56
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f001 faeb 	bl	800abb0 <VL53L0X_WrByte>
 80095da:	4603      	mov	r3, r0
 80095dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80095e0:	e157      	b.n	8009892 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 80095e2:	78bb      	ldrb	r3, [r7, #2]
 80095e4:	2b12      	cmp	r3, #18
 80095e6:	f040 8154 	bne.w	8009892 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80095ea:	2250      	movs	r2, #80	; 0x50
 80095ec:	2157      	movs	r1, #87	; 0x57
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f001 fade 	bl	800abb0 <VL53L0X_WrByte>
 80095f4:	4603      	mov	r3, r0
 80095f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 80095fa:	2208      	movs	r2, #8
 80095fc:	2156      	movs	r1, #86	; 0x56
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f001 fad6 	bl	800abb0 <VL53L0X_WrByte>
 8009604:	4603      	mov	r3, r0
 8009606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800960a:	e142      	b.n	8009892 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800960c:	78fb      	ldrb	r3, [r7, #3]
 800960e:	2b01      	cmp	r3, #1
 8009610:	f040 813f 	bne.w	8009892 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8009614:	78bb      	ldrb	r3, [r7, #2]
 8009616:	2b08      	cmp	r3, #8
 8009618:	d14c      	bne.n	80096b4 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800961a:	2210      	movs	r2, #16
 800961c:	2148      	movs	r1, #72	; 0x48
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f001 fac6 	bl	800abb0 <VL53L0X_WrByte>
 8009624:	4603      	mov	r3, r0
 8009626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800962a:	2208      	movs	r2, #8
 800962c:	2147      	movs	r1, #71	; 0x47
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f001 fabe 	bl	800abb0 <VL53L0X_WrByte>
 8009634:	4603      	mov	r3, r0
 8009636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800963a:	2202      	movs	r2, #2
 800963c:	2132      	movs	r1, #50	; 0x32
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f001 fab6 	bl	800abb0 <VL53L0X_WrByte>
 8009644:	4603      	mov	r3, r0
 8009646:	461a      	mov	r2, r3
 8009648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800964c:	4313      	orrs	r3, r2
 800964e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8009652:	220c      	movs	r2, #12
 8009654:	2130      	movs	r1, #48	; 0x30
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f001 faaa 	bl	800abb0 <VL53L0X_WrByte>
 800965c:	4603      	mov	r3, r0
 800965e:	461a      	mov	r2, r3
 8009660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009664:	4313      	orrs	r3, r2
 8009666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800966a:	2201      	movs	r2, #1
 800966c:	21ff      	movs	r1, #255	; 0xff
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f001 fa9e 	bl	800abb0 <VL53L0X_WrByte>
 8009674:	4603      	mov	r3, r0
 8009676:	461a      	mov	r2, r3
 8009678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800967c:	4313      	orrs	r3, r2
 800967e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009682:	2230      	movs	r2, #48	; 0x30
 8009684:	2130      	movs	r1, #48	; 0x30
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f001 fa92 	bl	800abb0 <VL53L0X_WrByte>
 800968c:	4603      	mov	r3, r0
 800968e:	461a      	mov	r2, r3
 8009690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009694:	4313      	orrs	r3, r2
 8009696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800969a:	2200      	movs	r2, #0
 800969c:	21ff      	movs	r1, #255	; 0xff
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f001 fa86 	bl	800abb0 <VL53L0X_WrByte>
 80096a4:	4603      	mov	r3, r0
 80096a6:	461a      	mov	r2, r3
 80096a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096ac:	4313      	orrs	r3, r2
 80096ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80096b2:	e0ee      	b.n	8009892 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80096b4:	78bb      	ldrb	r3, [r7, #2]
 80096b6:	2b0a      	cmp	r3, #10
 80096b8:	d14c      	bne.n	8009754 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80096ba:	2228      	movs	r2, #40	; 0x28
 80096bc:	2148      	movs	r1, #72	; 0x48
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f001 fa76 	bl	800abb0 <VL53L0X_WrByte>
 80096c4:	4603      	mov	r3, r0
 80096c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80096ca:	2208      	movs	r2, #8
 80096cc:	2147      	movs	r1, #71	; 0x47
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f001 fa6e 	bl	800abb0 <VL53L0X_WrByte>
 80096d4:	4603      	mov	r3, r0
 80096d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80096da:	2203      	movs	r2, #3
 80096dc:	2132      	movs	r1, #50	; 0x32
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f001 fa66 	bl	800abb0 <VL53L0X_WrByte>
 80096e4:	4603      	mov	r3, r0
 80096e6:	461a      	mov	r2, r3
 80096e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096ec:	4313      	orrs	r3, r2
 80096ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80096f2:	2209      	movs	r2, #9
 80096f4:	2130      	movs	r1, #48	; 0x30
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f001 fa5a 	bl	800abb0 <VL53L0X_WrByte>
 80096fc:	4603      	mov	r3, r0
 80096fe:	461a      	mov	r2, r3
 8009700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009704:	4313      	orrs	r3, r2
 8009706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800970a:	2201      	movs	r2, #1
 800970c:	21ff      	movs	r1, #255	; 0xff
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f001 fa4e 	bl	800abb0 <VL53L0X_WrByte>
 8009714:	4603      	mov	r3, r0
 8009716:	461a      	mov	r2, r3
 8009718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800971c:	4313      	orrs	r3, r2
 800971e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009722:	2220      	movs	r2, #32
 8009724:	2130      	movs	r1, #48	; 0x30
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f001 fa42 	bl	800abb0 <VL53L0X_WrByte>
 800972c:	4603      	mov	r3, r0
 800972e:	461a      	mov	r2, r3
 8009730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009734:	4313      	orrs	r3, r2
 8009736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800973a:	2200      	movs	r2, #0
 800973c:	21ff      	movs	r1, #255	; 0xff
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f001 fa36 	bl	800abb0 <VL53L0X_WrByte>
 8009744:	4603      	mov	r3, r0
 8009746:	461a      	mov	r2, r3
 8009748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800974c:	4313      	orrs	r3, r2
 800974e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009752:	e09e      	b.n	8009892 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8009754:	78bb      	ldrb	r3, [r7, #2]
 8009756:	2b0c      	cmp	r3, #12
 8009758:	d14c      	bne.n	80097f4 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800975a:	2238      	movs	r2, #56	; 0x38
 800975c:	2148      	movs	r1, #72	; 0x48
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f001 fa26 	bl	800abb0 <VL53L0X_WrByte>
 8009764:	4603      	mov	r3, r0
 8009766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800976a:	2208      	movs	r2, #8
 800976c:	2147      	movs	r1, #71	; 0x47
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f001 fa1e 	bl	800abb0 <VL53L0X_WrByte>
 8009774:	4603      	mov	r3, r0
 8009776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800977a:	2203      	movs	r2, #3
 800977c:	2132      	movs	r1, #50	; 0x32
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f001 fa16 	bl	800abb0 <VL53L0X_WrByte>
 8009784:	4603      	mov	r3, r0
 8009786:	461a      	mov	r2, r3
 8009788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800978c:	4313      	orrs	r3, r2
 800978e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009792:	2208      	movs	r2, #8
 8009794:	2130      	movs	r1, #48	; 0x30
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f001 fa0a 	bl	800abb0 <VL53L0X_WrByte>
 800979c:	4603      	mov	r3, r0
 800979e:	461a      	mov	r2, r3
 80097a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097a4:	4313      	orrs	r3, r2
 80097a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80097aa:	2201      	movs	r2, #1
 80097ac:	21ff      	movs	r1, #255	; 0xff
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f001 f9fe 	bl	800abb0 <VL53L0X_WrByte>
 80097b4:	4603      	mov	r3, r0
 80097b6:	461a      	mov	r2, r3
 80097b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097bc:	4313      	orrs	r3, r2
 80097be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80097c2:	2220      	movs	r2, #32
 80097c4:	2130      	movs	r1, #48	; 0x30
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f001 f9f2 	bl	800abb0 <VL53L0X_WrByte>
 80097cc:	4603      	mov	r3, r0
 80097ce:	461a      	mov	r2, r3
 80097d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097d4:	4313      	orrs	r3, r2
 80097d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80097da:	2200      	movs	r2, #0
 80097dc:	21ff      	movs	r1, #255	; 0xff
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f001 f9e6 	bl	800abb0 <VL53L0X_WrByte>
 80097e4:	4603      	mov	r3, r0
 80097e6:	461a      	mov	r2, r3
 80097e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097ec:	4313      	orrs	r3, r2
 80097ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80097f2:	e04e      	b.n	8009892 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 80097f4:	78bb      	ldrb	r3, [r7, #2]
 80097f6:	2b0e      	cmp	r3, #14
 80097f8:	d14b      	bne.n	8009892 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80097fa:	2248      	movs	r2, #72	; 0x48
 80097fc:	2148      	movs	r1, #72	; 0x48
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f001 f9d6 	bl	800abb0 <VL53L0X_WrByte>
 8009804:	4603      	mov	r3, r0
 8009806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800980a:	2208      	movs	r2, #8
 800980c:	2147      	movs	r1, #71	; 0x47
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f001 f9ce 	bl	800abb0 <VL53L0X_WrByte>
 8009814:	4603      	mov	r3, r0
 8009816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800981a:	2203      	movs	r2, #3
 800981c:	2132      	movs	r1, #50	; 0x32
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f001 f9c6 	bl	800abb0 <VL53L0X_WrByte>
 8009824:	4603      	mov	r3, r0
 8009826:	461a      	mov	r2, r3
 8009828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800982c:	4313      	orrs	r3, r2
 800982e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009832:	2207      	movs	r2, #7
 8009834:	2130      	movs	r1, #48	; 0x30
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f001 f9ba 	bl	800abb0 <VL53L0X_WrByte>
 800983c:	4603      	mov	r3, r0
 800983e:	461a      	mov	r2, r3
 8009840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009844:	4313      	orrs	r3, r2
 8009846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800984a:	2201      	movs	r2, #1
 800984c:	21ff      	movs	r1, #255	; 0xff
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f001 f9ae 	bl	800abb0 <VL53L0X_WrByte>
 8009854:	4603      	mov	r3, r0
 8009856:	461a      	mov	r2, r3
 8009858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800985c:	4313      	orrs	r3, r2
 800985e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009862:	2220      	movs	r2, #32
 8009864:	2130      	movs	r1, #48	; 0x30
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f001 f9a2 	bl	800abb0 <VL53L0X_WrByte>
 800986c:	4603      	mov	r3, r0
 800986e:	461a      	mov	r2, r3
 8009870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009874:	4313      	orrs	r3, r2
 8009876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800987a:	2200      	movs	r2, #0
 800987c:	21ff      	movs	r1, #255	; 0xff
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f001 f996 	bl	800abb0 <VL53L0X_WrByte>
 8009884:	4603      	mov	r3, r0
 8009886:	461a      	mov	r2, r3
 8009888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800988c:	4313      	orrs	r3, r2
 800988e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8009892:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009896:	2b00      	cmp	r3, #0
 8009898:	d17f      	bne.n	800999a <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800989a:	78bb      	ldrb	r3, [r7, #2]
 800989c:	4618      	mov	r0, r3
 800989e:	f7fe fe38 	bl	8008512 <VL53L0X_encode_vcsel_period>
 80098a2:	4603      	mov	r3, r0
 80098a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80098a8:	78fb      	ldrb	r3, [r7, #3]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d002      	beq.n	80098b4 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d045      	beq.n	800993e <VL53L0X_set_vcsel_pulse_period+0x470>
 80098b2:	e06e      	b.n	8009992 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80098b4:	f107 0314 	add.w	r3, r7, #20
 80098b8:	461a      	mov	r2, r3
 80098ba:	2103      	movs	r1, #3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7ff fc33 	bl	8009128 <get_sequence_step_timeout>
 80098c2:	4603      	mov	r3, r0
 80098c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80098c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d109      	bne.n	80098e4 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 80098d0:	f107 0310 	add.w	r3, r7, #16
 80098d4:	461a      	mov	r2, r3
 80098d6:	2102      	movs	r1, #2
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7ff fc25 	bl	8009128 <get_sequence_step_timeout>
 80098de:	4603      	mov	r3, r0
 80098e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80098e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d109      	bne.n	8009900 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 80098ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80098f0:	461a      	mov	r2, r3
 80098f2:	2150      	movs	r1, #80	; 0x50
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f001 f95b 	bl	800abb0 <VL53L0X_WrByte>
 80098fa:	4603      	mov	r3, r0
 80098fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009900:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009904:	2b00      	cmp	r3, #0
 8009906:	d108      	bne.n	800991a <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	461a      	mov	r2, r3
 800990c:	2103      	movs	r1, #3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f7ff fceb 	bl	80092ea <set_sequence_step_timeout>
 8009914:	4603      	mov	r3, r0
 8009916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800991a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800991e:	2b00      	cmp	r3, #0
 8009920:	d108      	bne.n	8009934 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	461a      	mov	r2, r3
 8009926:	2102      	movs	r1, #2
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f7ff fcde 	bl	80092ea <set_sequence_step_timeout>
 800992e:	4603      	mov	r3, r0
 8009930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	78ba      	ldrb	r2, [r7, #2]
 8009938:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800993c:	e02e      	b.n	800999c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800993e:	f107 0318 	add.w	r3, r7, #24
 8009942:	461a      	mov	r2, r3
 8009944:	2104      	movs	r1, #4
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f7ff fbee 	bl	8009128 <get_sequence_step_timeout>
 800994c:	4603      	mov	r3, r0
 800994e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009952:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009956:	2b00      	cmp	r3, #0
 8009958:	d109      	bne.n	800996e <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800995a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800995e:	461a      	mov	r2, r3
 8009960:	2170      	movs	r1, #112	; 0x70
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f001 f924 	bl	800abb0 <VL53L0X_WrByte>
 8009968:	4603      	mov	r3, r0
 800996a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800996e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009972:	2b00      	cmp	r3, #0
 8009974:	d108      	bne.n	8009988 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	461a      	mov	r2, r3
 800997a:	2104      	movs	r1, #4
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7ff fcb4 	bl	80092ea <set_sequence_step_timeout>
 8009982:	4603      	mov	r3, r0
 8009984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	78ba      	ldrb	r2, [r7, #2]
 800998c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009990:	e004      	b.n	800999c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009992:	23fc      	movs	r3, #252	; 0xfc
 8009994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009998:	e000      	b.n	800999c <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800999a:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800999c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d109      	bne.n	80099b8 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	695b      	ldr	r3, [r3, #20]
 80099a8:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80099aa:	69f9      	ldr	r1, [r7, #28]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f7fc fe1d 	bl	80065ec <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80099b2:	4603      	mov	r3, r0
 80099b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 80099b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d109      	bne.n	80099d4 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 80099c0:	f107 010f 	add.w	r1, r7, #15
 80099c4:	2301      	movs	r3, #1
 80099c6:	2200      	movs	r2, #0
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7fe fcbd 	bl	8008348 <VL53L0X_perform_phase_calibration>
 80099ce:	4603      	mov	r3, r0
 80099d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 80099d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3728      	adds	r7, #40	; 0x28
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	460b      	mov	r3, r1
 80099ea:	607a      	str	r2, [r7, #4]
 80099ec:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099ee:	2300      	movs	r3, #0
 80099f0:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80099f2:	7afb      	ldrb	r3, [r7, #11]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d002      	beq.n	80099fe <VL53L0X_get_vcsel_pulse_period+0x1e>
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d00a      	beq.n	8009a12 <VL53L0X_get_vcsel_pulse_period+0x32>
 80099fc:	e013      	b.n	8009a26 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80099fe:	f107 0316 	add.w	r3, r7, #22
 8009a02:	461a      	mov	r2, r3
 8009a04:	2150      	movs	r1, #80	; 0x50
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f001 f954 	bl	800acb4 <VL53L0X_RdByte>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009a10:	e00b      	b.n	8009a2a <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009a12:	f107 0316 	add.w	r3, r7, #22
 8009a16:	461a      	mov	r2, r3
 8009a18:	2170      	movs	r1, #112	; 0x70
 8009a1a:	68f8      	ldr	r0, [r7, #12]
 8009a1c:	f001 f94a 	bl	800acb4 <VL53L0X_RdByte>
 8009a20:	4603      	mov	r3, r0
 8009a22:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009a24:	e001      	b.n	8009a2a <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a26:	23fc      	movs	r3, #252	; 0xfc
 8009a28:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009a2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d107      	bne.n	8009a42 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8009a32:	7dbb      	ldrb	r3, [r7, #22]
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7fe fd59 	bl	80084ec <VL53L0X_decode_vcsel_period>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	701a      	strb	r2, [r3, #0]

	return Status;
 8009a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3718      	adds	r7, #24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b092      	sub	sp, #72	; 0x48
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009a5e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009a62:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009a64:	f240 7376 	movw	r3, #1910	; 0x776
 8009a68:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8009a6a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009a6e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009a70:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009a74:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8009a76:	f240 234e 	movw	r3, #590	; 0x24e
 8009a7a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8009a7c:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009a80:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009a82:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009a86:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009a88:	f240 2326 	movw	r3, #550	; 0x226
 8009a8c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8009a92:	f644 6320 	movw	r3, #20000	; 0x4e20
 8009a96:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8009a9c:	683a      	ldr	r2, [r7, #0]
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d205      	bcs.n	8009ab0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009aa4:	23fc      	movs	r3, #252	; 0xfc
 8009aa6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8009aaa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009aae:	e0aa      	b.n	8009c06 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8009ab0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab4:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8009ab6:	683a      	ldr	r2, [r7, #0]
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009abc:	f107 0314 	add.w	r3, r7, #20
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7fc fedc 	bl	8006880 <VL53L0X_GetSequenceStepEnables>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8009ace:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d15b      	bne.n	8009b8e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8009ad6:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d105      	bne.n	8009ae8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8009adc:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d102      	bne.n	8009ae8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8009ae2:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d052      	beq.n	8009b8e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8009ae8:	f107 0310 	add.w	r3, r7, #16
 8009aec:	461a      	mov	r2, r3
 8009aee:	2102      	movs	r1, #2
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f7ff fb19 	bl	8009128 <get_sequence_step_timeout>
 8009af6:	4603      	mov	r3, r0
 8009af8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8009afc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d002      	beq.n	8009b0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8009b04:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009b08:	e07d      	b.n	8009c06 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8009b0a:	7d3b      	ldrb	r3, [r7, #20]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00f      	beq.n	8009b30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8009b10:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8009b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b14:	4413      	add	r3, r2
 8009b16:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8009b18:	69fa      	ldr	r2, [r7, #28]
 8009b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d204      	bcs.n	8009b2a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8009b20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	1ad3      	subs	r3, r2, r3
 8009b26:	643b      	str	r3, [r7, #64]	; 0x40
 8009b28:	e002      	b.n	8009b30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009b2a:	23fc      	movs	r3, #252	; 0xfc
 8009b2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8009b30:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d002      	beq.n	8009b3e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8009b38:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009b3c:	e063      	b.n	8009c06 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8009b3e:	7dbb      	ldrb	r3, [r7, #22]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d011      	beq.n	8009b68 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8009b44:	693a      	ldr	r2, [r7, #16]
 8009b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b48:	4413      	add	r3, r2
 8009b4a:	005b      	lsls	r3, r3, #1
 8009b4c:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009b4e:	69fa      	ldr	r2, [r7, #28]
 8009b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d204      	bcs.n	8009b60 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009b56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	643b      	str	r3, [r7, #64]	; 0x40
 8009b5e:	e016      	b.n	8009b8e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009b60:	23fc      	movs	r3, #252	; 0xfc
 8009b62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009b66:	e012      	b.n	8009b8e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8009b68:	7d7b      	ldrb	r3, [r7, #21]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00f      	beq.n	8009b8e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b72:	4413      	add	r3, r2
 8009b74:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009b76:	69fa      	ldr	r2, [r7, #28]
 8009b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d204      	bcs.n	8009b88 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8009b7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	1ad3      	subs	r3, r2, r3
 8009b84:	643b      	str	r3, [r7, #64]	; 0x40
 8009b86:	e002      	b.n	8009b8e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009b88:	23fc      	movs	r3, #252	; 0xfc
 8009b8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8009b8e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d002      	beq.n	8009b9c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8009b96:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009b9a:	e034      	b.n	8009c06 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8009b9c:	7dfb      	ldrb	r3, [r7, #23]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d019      	beq.n	8009bd6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8009ba2:	f107 030c 	add.w	r3, r7, #12
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	2103      	movs	r1, #3
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f7ff fabc 	bl	8009128 <get_sequence_step_timeout>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bba:	4413      	add	r3, r2
 8009bbc:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8009bbe:	69fa      	ldr	r2, [r7, #28]
 8009bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d204      	bcs.n	8009bd0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8009bc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	643b      	str	r3, [r7, #64]	; 0x40
 8009bce:	e002      	b.n	8009bd6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009bd0:	23fc      	movs	r3, #252	; 0xfc
 8009bd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8009bd6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d111      	bne.n	8009c02 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8009bde:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d00e      	beq.n	8009c02 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8009be4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be8:	1ad3      	subs	r3, r2, r3
 8009bea:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8009bec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009bee:	2104      	movs	r1, #4
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f7ff fb7a 	bl	80092ea <set_sequence_step_timeout>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009c02:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3748      	adds	r7, #72	; 0x48
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b090      	sub	sp, #64	; 0x40
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009c1e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009c22:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009c24:	f240 7376 	movw	r3, #1910	; 0x776
 8009c28:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8009c2a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009c2e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009c30:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009c34:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8009c36:	f240 234e 	movw	r3, #590	; 0x24e
 8009c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8009c3c:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009c40:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009c42:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009c46:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009c48:	f240 2326 	movw	r3, #550	; 0x226
 8009c4c:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8009c52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c56:	441a      	add	r2, r3
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009c5c:	f107 0318 	add.w	r3, r7, #24
 8009c60:	4619      	mov	r1, r3
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f7fc fe0c 	bl	8006880 <VL53L0X_GetSequenceStepEnables>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8009c6e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d002      	beq.n	8009c7c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8009c76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009c7a:	e075      	b.n	8009d68 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8009c7c:	7e3b      	ldrb	r3, [r7, #24]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d105      	bne.n	8009c8e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8009c82:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d102      	bne.n	8009c8e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8009c88:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d030      	beq.n	8009cf0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8009c8e:	f107 0310 	add.w	r3, r7, #16
 8009c92:	461a      	mov	r2, r3
 8009c94:	2102      	movs	r1, #2
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7ff fa46 	bl	8009128 <get_sequence_step_timeout>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8009ca2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d122      	bne.n	8009cf0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8009caa:	7e3b      	ldrb	r3, [r7, #24]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d007      	beq.n	8009cc0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009cb4:	6939      	ldr	r1, [r7, #16]
 8009cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb8:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009cba:	441a      	add	r2, r3
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8009cc0:	7ebb      	ldrb	r3, [r7, #26]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d009      	beq.n	8009cda <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8009cca:	6939      	ldr	r1, [r7, #16]
 8009ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cce:	440b      	add	r3, r1
 8009cd0:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009cd2:	441a      	add	r2, r3
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	601a      	str	r2, [r3, #0]
 8009cd8:	e00a      	b.n	8009cf0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8009cda:	7e7b      	ldrb	r3, [r7, #25]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d007      	beq.n	8009cf0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009ce4:	6939      	ldr	r1, [r7, #16]
 8009ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce8:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009cea:	441a      	add	r2, r3
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009cf0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d114      	bne.n	8009d22 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8009cf8:	7efb      	ldrb	r3, [r7, #27]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d011      	beq.n	8009d22 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8009cfe:	f107 030c 	add.w	r3, r7, #12
 8009d02:	461a      	mov	r2, r3
 8009d04:	2103      	movs	r1, #3
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f7ff fa0e 	bl	8009128 <get_sequence_step_timeout>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8009d16:	68f9      	ldr	r1, [r7, #12]
 8009d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009d1c:	441a      	add	r2, r3
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009d22:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d114      	bne.n	8009d54 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8009d2a:	7f3b      	ldrb	r3, [r7, #28]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d011      	beq.n	8009d54 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8009d30:	f107 0314 	add.w	r3, r7, #20
 8009d34:	461a      	mov	r2, r3
 8009d36:	2104      	movs	r1, #4
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7ff f9f5 	bl	8009128 <get_sequence_step_timeout>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8009d48:	6979      	ldr	r1, [r7, #20]
 8009d4a:	6a3b      	ldr	r3, [r7, #32]
 8009d4c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8009d4e:	441a      	add	r2, r3
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009d54:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d103      	bne.n	8009d64 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009d64:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3740      	adds	r7, #64	; 0x40
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b088      	sub	sp, #32
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8009d82:	e0c6      	b.n	8009f12 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	4413      	add	r3, r2
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	74fb      	strb	r3, [r7, #19]
		Index++;
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	3301      	adds	r3, #1
 8009d92:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8009d94:	7cfb      	ldrb	r3, [r7, #19]
 8009d96:	2bff      	cmp	r3, #255	; 0xff
 8009d98:	f040 808d 	bne.w	8009eb6 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	683a      	ldr	r2, [r7, #0]
 8009da0:	4413      	add	r3, r2
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	747b      	strb	r3, [r7, #17]
			Index++;
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	3301      	adds	r3, #1
 8009daa:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8009dac:	7c7b      	ldrb	r3, [r7, #17]
 8009dae:	2b03      	cmp	r3, #3
 8009db0:	d87e      	bhi.n	8009eb0 <VL53L0X_load_tuning_settings+0x140>
 8009db2:	a201      	add	r2, pc, #4	; (adr r2, 8009db8 <VL53L0X_load_tuning_settings+0x48>)
 8009db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db8:	08009dc9 	.word	0x08009dc9
 8009dbc:	08009e03 	.word	0x08009e03
 8009dc0:	08009e3d 	.word	0x08009e3d
 8009dc4:	08009e77 	.word	0x08009e77
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	683a      	ldr	r2, [r7, #0]
 8009dcc:	4413      	add	r3, r2
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	743b      	strb	r3, [r7, #16]
				Index++;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	683a      	ldr	r2, [r7, #0]
 8009ddc:	4413      	add	r3, r2
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	3301      	adds	r3, #1
 8009de6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009de8:	7c3b      	ldrb	r3, [r7, #16]
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	021b      	lsls	r3, r3, #8
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	7bfb      	ldrb	r3, [r7, #15]
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	4413      	add	r3, r2
 8009df6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	89ba      	ldrh	r2, [r7, #12]
 8009dfc:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8009e00:	e087      	b.n	8009f12 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	683a      	ldr	r2, [r7, #0]
 8009e06:	4413      	add	r3, r2
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	743b      	strb	r3, [r7, #16]
				Index++;
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	4413      	add	r3, r2
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009e22:	7c3b      	ldrb	r3, [r7, #16]
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	021b      	lsls	r3, r3, #8
 8009e28:	b29a      	uxth	r2, r3
 8009e2a:	7bfb      	ldrb	r3, [r7, #15]
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	4413      	add	r3, r2
 8009e30:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	89ba      	ldrh	r2, [r7, #12]
 8009e36:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8009e3a:	e06a      	b.n	8009f12 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	683a      	ldr	r2, [r7, #0]
 8009e40:	4413      	add	r3, r2
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	743b      	strb	r3, [r7, #16]
				Index++;
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	683a      	ldr	r2, [r7, #0]
 8009e50:	4413      	add	r3, r2
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009e5c:	7c3b      	ldrb	r3, [r7, #16]
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	021b      	lsls	r3, r3, #8
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	7bfb      	ldrb	r3, [r7, #15]
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	4413      	add	r3, r2
 8009e6a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	89ba      	ldrh	r2, [r7, #12]
 8009e70:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8009e74:	e04d      	b.n	8009f12 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	683a      	ldr	r2, [r7, #0]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	743b      	strb	r3, [r7, #16]
				Index++;
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	3301      	adds	r3, #1
 8009e84:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	683a      	ldr	r2, [r7, #0]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	3301      	adds	r3, #1
 8009e94:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009e96:	7c3b      	ldrb	r3, [r7, #16]
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	021b      	lsls	r3, r3, #8
 8009e9c:	b29a      	uxth	r2, r3
 8009e9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	4413      	add	r3, r2
 8009ea4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	89ba      	ldrh	r2, [r7, #12]
 8009eaa:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8009eae:	e030      	b.n	8009f12 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009eb0:	23fc      	movs	r3, #252	; 0xfc
 8009eb2:	77fb      	strb	r3, [r7, #31]
 8009eb4:	e02d      	b.n	8009f12 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8009eb6:	7cfb      	ldrb	r3, [r7, #19]
 8009eb8:	2b04      	cmp	r3, #4
 8009eba:	d828      	bhi.n	8009f0e <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	74bb      	strb	r3, [r7, #18]
			Index++;
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8009ecc:	2300      	movs	r3, #0
 8009ece:	61bb      	str	r3, [r7, #24]
 8009ed0:	e00f      	b.n	8009ef2 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	683a      	ldr	r2, [r7, #0]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	7819      	ldrb	r1, [r3, #0]
 8009eda:	f107 0208 	add.w	r2, r7, #8
 8009ede:	69bb      	ldr	r3, [r7, #24]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	460a      	mov	r2, r1
 8009ee4:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	61bb      	str	r3, [r7, #24]
 8009ef2:	7cfb      	ldrb	r3, [r7, #19]
 8009ef4:	69ba      	ldr	r2, [r7, #24]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	dbeb      	blt.n	8009ed2 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8009efa:	7cfb      	ldrb	r3, [r7, #19]
 8009efc:	f107 0208 	add.w	r2, r7, #8
 8009f00:	7cb9      	ldrb	r1, [r7, #18]
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 fdf8 	bl	800aaf8 <VL53L0X_WriteMulti>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	77fb      	strb	r3, [r7, #31]
 8009f0c:	e001      	b.n	8009f12 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009f0e:	23fc      	movs	r3, #252	; 0xfc
 8009f10:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	4413      	add	r3, r2
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d004      	beq.n	8009f28 <VL53L0X_load_tuning_settings+0x1b8>
 8009f1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f43f af2e 	beq.w	8009d84 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009f28:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3720      	adds	r7, #32
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b088      	sub	sp, #32
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f40:	2300      	movs	r3, #0
 8009f42:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8009f4a:	f107 0313 	add.w	r3, r7, #19
 8009f4e:	4619      	mov	r1, r3
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f7fc fd21 	bl	8006998 <VL53L0X_GetXTalkCompensationEnable>
 8009f56:	4603      	mov	r3, r0
 8009f58:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8009f5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d111      	bne.n	8009f86 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8009f62:	7cfb      	ldrb	r3, [r7, #19]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00e      	beq.n	8009f86 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6a1b      	ldr	r3, [r3, #32]
 8009f6c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	8a9b      	ldrh	r3, [r3, #20]
 8009f72:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	fb02 f303 	mul.w	r3, r2, r3
 8009f7a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	3380      	adds	r3, #128	; 0x80
 8009f80:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8009f86:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3720      	adds	r7, #32
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b086      	sub	sp, #24
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	60f8      	str	r0, [r7, #12]
 8009f9a:	60b9      	str	r1, [r7, #8]
 8009f9c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8009faa:	f107 0310 	add.w	r3, r7, #16
 8009fae:	461a      	mov	r2, r3
 8009fb0:	68b9      	ldr	r1, [r7, #8]
 8009fb2:	68f8      	ldr	r0, [r7, #12]
 8009fb4:	f7ff ffbe 	bl	8009f34 <VL53L0X_get_total_xtalk_rate>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8009fbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d105      	bne.n	8009fd0 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	441a      	add	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	601a      	str	r2, [r3, #0]

	return Status;
 8009fd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3718      	adds	r7, #24
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b09a      	sub	sp, #104	; 0x68
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]
 8009fe8:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8009fea:	2312      	movs	r3, #18
 8009fec:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8009fee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009ff2:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8009ff4:	2342      	movs	r3, #66	; 0x42
 8009ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8009ff8:	2306      	movs	r3, #6
 8009ffa:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8009ffc:	2307      	movs	r3, #7
 8009ffe:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a000:	2300      	movs	r3, #0
 800a002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800a00c:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a014:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800a016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a01a:	fb02 f303 	mul.w	r3, r2, r3
 800a01e:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800a020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a022:	3380      	adds	r3, #128	; 0x80
 800a024:	0a1b      	lsrs	r3, r3, #8
 800a026:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800a028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a02a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a02c:	fb02 f303 	mul.w	r3, r2, r3
 800a030:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800a032:	2300      	movs	r3, #0
 800a034:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d01b      	beq.n	800a074 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	029b      	lsls	r3, r3, #10
 800a040:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800a046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a048:	4413      	add	r3, r2
 800a04a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800a04c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	fbb2 f3f3 	udiv	r3, r2, r3
 800a054:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800a056:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a058:	4613      	mov	r3, r2
 800a05a:	005b      	lsls	r3, r3, #1
 800a05c:	4413      	add	r3, r2
 800a05e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800a060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a062:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a064:	fb02 f303 	mul.w	r3, r2, r3
 800a068:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800a06a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a06c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a070:	0c1b      	lsrs	r3, r3, #16
 800a072:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a078:	fb02 f303 	mul.w	r3, r2, r3
 800a07c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800a07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a080:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a084:	0c1b      	lsrs	r3, r3, #16
 800a086:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800a088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a08c:	fb02 f303 	mul.w	r3, r2, r3
 800a090:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800a092:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a094:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a098:	0c1b      	lsrs	r3, r3, #16
 800a09a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800a09c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a09e:	085a      	lsrs	r2, r3, #1
 800a0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a2:	441a      	add	r2, r3
 800a0a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0aa:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800a0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0b0:	fb02 f303 	mul.w	r3, r2, r3
 800a0b4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800a0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0bc:	d302      	bcc.n	800a0c4 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 800a0be:	4b55      	ldr	r3, [pc, #340]	; (800a214 <VL53L0X_calc_dmax+0x238>)
 800a0c0:	663b      	str	r3, [r7, #96]	; 0x60
 800a0c2:	e016      	b.n	800a0f2 <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800a0c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0c6:	085a      	lsrs	r2, r3, #1
 800a0c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0ca:	441a      	add	r2, r3
 800a0cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0d2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800a0d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0d8:	fb02 f303 	mul.w	r3, r2, r3
 800a0dc:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800a0de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a0e4:	0c1b      	lsrs	r3, r3, #16
 800a0e6:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800a0e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a0ec:	fb02 f303 	mul.w	r3, r2, r3
 800a0f0:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800a0f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0f4:	039b      	lsls	r3, r3, #14
 800a0f6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a0fa:	4a47      	ldr	r2, [pc, #284]	; (800a218 <VL53L0X_calc_dmax+0x23c>)
 800a0fc:	fba2 2303 	umull	r2, r3, r2, r3
 800a100:	099b      	lsrs	r3, r3, #6
 800a102:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800a104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a108:	fb02 f303 	mul.w	r3, r2, r3
 800a10c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800a10e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a110:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a112:	fb02 f303 	mul.w	r3, r2, r3
 800a116:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800a118:	6a3b      	ldr	r3, [r7, #32]
 800a11a:	3308      	adds	r3, #8
 800a11c:	091b      	lsrs	r3, r3, #4
 800a11e:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800a120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a122:	6a3b      	ldr	r3, [r7, #32]
 800a124:	1ad3      	subs	r3, r2, r3
 800a126:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800a128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a12a:	4613      	mov	r3, r2
 800a12c:	005b      	lsls	r3, r3, #1
 800a12e:	4413      	add	r3, r2
 800a130:	011b      	lsls	r3, r3, #4
 800a132:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a13a:	0b9b      	lsrs	r3, r3, #14
 800a13c:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800a13e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a140:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a142:	4413      	add	r3, r2
 800a144:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800a146:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a148:	085b      	lsrs	r3, r3, #1
 800a14a:	69ba      	ldr	r2, [r7, #24]
 800a14c:	4413      	add	r3, r2
 800a14e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800a150:	69ba      	ldr	r2, [r7, #24]
 800a152:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a154:	fbb2 f3f3 	udiv	r3, r2, r3
 800a158:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	039b      	lsls	r3, r3, #14
 800a15e:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	085b      	lsrs	r3, r3, #1
 800a164:	69ba      	ldr	r2, [r7, #24]
 800a166:	4413      	add	r3, r2
 800a168:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800a16a:	69ba      	ldr	r2, [r7, #24]
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a172:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a178:	fb02 f303 	mul.w	r3, r2, r3
 800a17c:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a184:	4a24      	ldr	r2, [pc, #144]	; (800a218 <VL53L0X_calc_dmax+0x23c>)
 800a186:	fba2 2303 	umull	r2, r3, r2, r3
 800a18a:	099b      	lsrs	r3, r3, #6
 800a18c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	011b      	lsls	r3, r3, #4
 800a192:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a19a:	4a1f      	ldr	r2, [pc, #124]	; (800a218 <VL53L0X_calc_dmax+0x23c>)
 800a19c:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a0:	099b      	lsrs	r3, r3, #6
 800a1a2:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800a1a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1a6:	3380      	adds	r3, #128	; 0x80
 800a1a8:	0a1b      	lsrs	r3, r3, #8
 800a1aa:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d008      	beq.n	800a1c4 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	085a      	lsrs	r2, r3, #1
 800a1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b8:	441a      	add	r2, r3
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1c0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a1c2:	e001      	b.n	800a1c8 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800a1c8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a1ca:	f7fe f9b5 	bl	8008538 <VL53L0X_isqrt>
 800a1ce:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d008      	beq.n	800a1e8 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	085a      	lsrs	r2, r3, #1
 800a1da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1dc:	441a      	add	r2, r3
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1e6:	e001      	b.n	800a1ec <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800a1ec:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a1ee:	f7fe f9a3 	bl	8008538 <VL53L0X_isqrt>
 800a1f2:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800a1f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a1f6:	693a      	ldr	r2, [r7, #16]
 800a1f8:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800a1fa:	693a      	ldr	r2, [r7, #16]
 800a1fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d902      	bls.n	800a208 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 800a202:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a204:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a206:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800a208:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3768      	adds	r7, #104	; 0x68
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	fff00000 	.word	0xfff00000
 800a218:	10624dd3 	.word	0x10624dd3

0800a21c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b0b4      	sub	sp, #208	; 0xd0
 800a220:	af04      	add	r7, sp, #16
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
 800a228:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800a22a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a22e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800a232:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a236:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800a23a:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800a23e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800a242:	f241 235c 	movw	r3, #4700	; 0x125c
 800a246:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800a24a:	4b9e      	ldr	r3, [pc, #632]	; (800a4c4 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800a24c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800a250:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a254:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800a256:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800a25a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a25e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a262:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800a264:	4b98      	ldr	r3, [pc, #608]	; (800a4c8 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800a266:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800a268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a26c:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800a26e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800a272:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800a274:	f240 6377 	movw	r3, #1655	; 0x677
 800a278:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a27a:	2300      	movs	r3, #0
 800a27c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6a1b      	ldr	r3, [r3, #32]
 800a284:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a28e:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800a292:	0c1b      	lsrs	r3, r3, #16
 800a294:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800a29c:	f107 0310 	add.w	r3, r7, #16
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	68b9      	ldr	r1, [r7, #8]
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f7ff fe74 	bl	8009f92 <VL53L0X_get_total_signal_rate>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800a2b0:	f107 0314 	add.w	r3, r7, #20
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	68b9      	ldr	r1, [r7, #8]
 800a2b8:	68f8      	ldr	r0, [r7, #12]
 800a2ba:	f7ff fe3b 	bl	8009f34 <VL53L0X_get_total_xtalk_rate>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a2ca:	fb02 f303 	mul.w	r3, r2, r3
 800a2ce:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800a2d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a2d6:	0c1b      	lsrs	r3, r3, #16
 800a2d8:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a2e0:	fb02 f303 	mul.w	r3, r2, r3
 800a2e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800a2e8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a2ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d902      	bls.n	800a2f8 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800a2f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800a2f8:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d168      	bne.n	800a3d2 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a306:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800a310:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a314:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a318:	461a      	mov	r2, r3
 800a31a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f7fe feae 	bl	8009080 <VL53L0X_calc_timeout_mclks>
 800a324:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a32c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800a336:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a33a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800a33e:	461a      	mov	r2, r3
 800a340:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800a344:	68f8      	ldr	r0, [r7, #12]
 800a346:	f7fe fe9b 	bl	8009080 <VL53L0X_calc_timeout_mclks>
 800a34a:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800a34c:	2303      	movs	r3, #3
 800a34e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800a352:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a356:	2b08      	cmp	r3, #8
 800a358:	d102      	bne.n	800a360 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800a35a:	2302      	movs	r3, #2
 800a35c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800a360:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a364:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800a366:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a36a:	fb02 f303 	mul.w	r3, r2, r3
 800a36e:	02db      	lsls	r3, r3, #11
 800a370:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a374:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a378:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a37c:	4a53      	ldr	r2, [pc, #332]	; (800a4cc <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a37e:	fba2 2303 	umull	r2, r3, r2, r3
 800a382:	099b      	lsrs	r3, r3, #6
 800a384:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800a388:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a38c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a38e:	fb02 f303 	mul.w	r3, r2, r3
 800a392:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a396:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a39a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a39e:	4a4b      	ldr	r2, [pc, #300]	; (800a4cc <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a3a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a3a4:	099b      	lsrs	r3, r3, #6
 800a3a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	3380      	adds	r3, #128	; 0x80
 800a3ae:	0a1b      	lsrs	r3, r3, #8
 800a3b0:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800a3b2:	693a      	ldr	r2, [r7, #16]
 800a3b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a3b8:	fb02 f303 	mul.w	r3, r2, r3
 800a3bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800a3c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a3c4:	3380      	adds	r3, #128	; 0x80
 800a3c6:	0a1b      	lsrs	r3, r3, #8
 800a3c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	021b      	lsls	r3, r3, #8
 800a3d0:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a3d2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d002      	beq.n	800a3e0 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800a3da:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a3de:	e165      	b.n	800a6ac <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 800a3e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d10c      	bne.n	800a400 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a3ec:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a3f4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	601a      	str	r2, [r3, #0]
 800a3fe:	e153      	b.n	800a6a8 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 800a400:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a404:	2b00      	cmp	r3, #0
 800a406:	d102      	bne.n	800a40e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800a408:	2301      	movs	r3, #1
 800a40a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800a40e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a412:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800a414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a416:	041a      	lsls	r2, r3, #16
 800a418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a41a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a41e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800a422:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a426:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a428:	429a      	cmp	r2, r3
 800a42a:	d902      	bls.n	800a432 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800a42c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a42e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800a432:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a436:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a43a:	fb02 f303 	mul.w	r3, r2, r3
 800a43e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800a442:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a446:	4613      	mov	r3, r2
 800a448:	005b      	lsls	r3, r3, #1
 800a44a:	4413      	add	r3, r2
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fe f872 	bl	8008538 <VL53L0X_isqrt>
 800a454:	4603      	mov	r3, r0
 800a456:	005b      	lsls	r3, r3, #1
 800a458:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	891b      	ldrh	r3, [r3, #8]
 800a45e:	461a      	mov	r2, r3
 800a460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a462:	fb02 f303 	mul.w	r3, r2, r3
 800a466:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a46a:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800a46c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a470:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a472:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800a474:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a478:	4a14      	ldr	r2, [pc, #80]	; (800a4cc <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a47a:	fba2 2303 	umull	r2, r3, r2, r3
 800a47e:	099b      	lsrs	r3, r3, #6
 800a480:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800a482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a484:	041b      	lsls	r3, r3, #16
 800a486:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a48a:	4a10      	ldr	r2, [pc, #64]	; (800a4cc <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a48c:	fba2 2303 	umull	r2, r3, r2, r3
 800a490:	099b      	lsrs	r3, r3, #6
 800a492:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800a494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a496:	021b      	lsls	r3, r3, #8
 800a498:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800a49a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	bfb8      	it	lt
 800a4a6:	425b      	neglt	r3, r3
 800a4a8:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800a4aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ac:	021b      	lsls	r3, r3, #8
 800a4ae:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	7e1b      	ldrb	r3, [r3, #24]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d00b      	beq.n	800a4d0 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800a4b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a4bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a4c0:	e035      	b.n	800a52e <VL53L0X_calc_sigma_estimate+0x312>
 800a4c2:	bf00      	nop
 800a4c4:	028f87ae 	.word	0x028f87ae
 800a4c8:	0006999a 	.word	0x0006999a
 800a4cc:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800a4d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a4d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a4d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800a4de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e0:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800a4e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4e8:	fb02 f303 	mul.w	r3, r2, r3
 800a4ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800a4f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a4f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4f6:	4413      	add	r3, r2
 800a4f8:	0c1b      	lsrs	r3, r3, #16
 800a4fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800a4fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a502:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a506:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800a50a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a50e:	085b      	lsrs	r3, r3, #1
 800a510:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800a514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a518:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a51c:	fb02 f303 	mul.w	r3, r2, r3
 800a520:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800a524:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a528:	0b9b      	lsrs	r3, r3, #14
 800a52a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800a52e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a532:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a534:	fb02 f303 	mul.w	r3, r2, r3
 800a538:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800a53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a540:	0c1b      	lsrs	r3, r3, #16
 800a542:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800a544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a548:	fb02 f303 	mul.w	r3, r2, r3
 800a54c:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800a54e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a552:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800a554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a556:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a55a:	0c1b      	lsrs	r3, r3, #16
 800a55c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800a55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a562:	fb02 f303 	mul.w	r3, r2, r3
 800a566:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800a568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56c:	4413      	add	r3, r2
 800a56e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800a570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a572:	f7fd ffe1 	bl	8008538 <VL53L0X_isqrt>
 800a576:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800a578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57a:	041b      	lsls	r3, r3, #16
 800a57c:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800a57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a580:	3332      	adds	r3, #50	; 0x32
 800a582:	4a4c      	ldr	r2, [pc, #304]	; (800a6b4 <VL53L0X_calc_sigma_estimate+0x498>)
 800a584:	fba2 2303 	umull	r2, r3, r2, r3
 800a588:	095a      	lsrs	r2, r3, #5
 800a58a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a58c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a590:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800a594:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a598:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800a59c:	fb02 f303 	mul.w	r3, r2, r3
 800a5a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800a5a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a5a8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800a5ac:	3308      	adds	r3, #8
 800a5ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800a5b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a5b6:	4a40      	ldr	r2, [pc, #256]	; (800a6b8 <VL53L0X_calc_sigma_estimate+0x49c>)
 800a5b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a5bc:	0b5b      	lsrs	r3, r3, #13
 800a5be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800a5c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a5c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d902      	bls.n	800a5d2 <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800a5cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a5ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800a5d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a5d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a5da:	4413      	add	r3, r2
 800a5dc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800a5e0:	4a36      	ldr	r2, [pc, #216]	; (800a6bc <VL53L0X_calc_sigma_estimate+0x4a0>)
 800a5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5e6:	099b      	lsrs	r3, r3, #6
 800a5e8:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800a5ea:	6a3b      	ldr	r3, [r7, #32]
 800a5ec:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800a5ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a5f2:	441a      	add	r2, r3
 800a5f4:	6a3b      	ldr	r3, [r7, #32]
 800a5f6:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fd ff9c 	bl	8008538 <VL53L0X_isqrt>
 800a600:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	021b      	lsls	r3, r3, #8
 800a606:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a60e:	4a2b      	ldr	r2, [pc, #172]	; (800a6bc <VL53L0X_calc_sigma_estimate+0x4a0>)
 800a610:	fba2 2303 	umull	r2, r3, r2, r3
 800a614:	099b      	lsrs	r3, r3, #6
 800a616:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800a618:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a61c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a620:	fb02 f303 	mul.w	r3, r2, r3
 800a624:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	69fa      	ldr	r2, [r7, #28]
 800a62a:	fb02 f303 	mul.w	r3, r2, r3
 800a62e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800a630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a634:	4413      	add	r3, r2
 800a636:	4618      	mov	r0, r3
 800a638:	f7fd ff7e 	bl	8008538 <VL53L0X_isqrt>
 800a63c:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a644:	fb02 f303 	mul.w	r3, r2, r3
 800a648:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800a64c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d009      	beq.n	800a666 <VL53L0X_calc_sigma_estimate+0x44a>
 800a652:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a656:	2b00      	cmp	r3, #0
 800a658:	d005      	beq.n	800a666 <VL53L0X_calc_sigma_estimate+0x44a>
 800a65a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a65e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a662:	429a      	cmp	r2, r3
 800a664:	d903      	bls.n	800a66e <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800a666:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a66a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a674:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800a680:	6939      	ldr	r1, [r7, #16]
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	9303      	str	r3, [sp, #12]
 800a686:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a68a:	9302      	str	r3, [sp, #8]
 800a68c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a690:	9301      	str	r3, [sp, #4]
 800a692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a694:	9300      	str	r3, [sp, #0]
 800a696:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a69a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f7ff fc9d 	bl	8009fdc <VL53L0X_calc_dmax>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a6a8:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	37c0      	adds	r7, #192	; 0xc0
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	51eb851f 	.word	0x51eb851f
 800a6b8:	d1b71759 	.word	0xd1b71759
 800a6bc:	10624dd3 	.word	0x10624dd3

0800a6c0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b090      	sub	sp, #64	; 0x40
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	607a      	str	r2, [r7, #4]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	72fb      	strb	r3, [r7, #11]
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800a6fe:	2300      	movs	r3, #0
 800a700:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800a704:	2300      	movs	r3, #0
 800a706:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800a70a:	2300      	movs	r3, #0
 800a70c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800a70e:	2300      	movs	r3, #0
 800a710:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800a712:	7afb      	ldrb	r3, [r7, #11]
 800a714:	10db      	asrs	r3, r3, #3
 800a716:	b2db      	uxtb	r3, r3
 800a718:	f003 030f 	and.w	r3, r3, #15
 800a71c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800a720:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a724:	2b00      	cmp	r3, #0
 800a726:	d017      	beq.n	800a758 <VL53L0X_get_pal_range_status+0x98>
 800a728:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a72c:	2b05      	cmp	r3, #5
 800a72e:	d013      	beq.n	800a758 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800a730:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a734:	2b07      	cmp	r3, #7
 800a736:	d00f      	beq.n	800a758 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800a738:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a73c:	2b0c      	cmp	r3, #12
 800a73e:	d00b      	beq.n	800a758 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800a740:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a744:	2b0d      	cmp	r3, #13
 800a746:	d007      	beq.n	800a758 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800a748:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a74c:	2b0e      	cmp	r3, #14
 800a74e:	d003      	beq.n	800a758 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800a750:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a754:	2b0f      	cmp	r3, #15
 800a756:	d103      	bne.n	800a760 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800a758:	2301      	movs	r3, #1
 800a75a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800a75e:	e002      	b.n	800a766 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a766:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d109      	bne.n	800a782 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a76e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800a772:	461a      	mov	r2, r3
 800a774:	2100      	movs	r1, #0
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f7fc f9e2 	bl	8006b40 <VL53L0X_GetLimitCheckEnable>
 800a77c:	4603      	mov	r3, r0
 800a77e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800a782:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a786:	2b00      	cmp	r3, #0
 800a788:	d02e      	beq.n	800a7e8 <VL53L0X_get_pal_range_status+0x128>
 800a78a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d12a      	bne.n	800a7e8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800a792:	f107 0310 	add.w	r3, r7, #16
 800a796:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a79a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f7ff fd3d 	bl	800a21c <VL53L0X_calc_sigma_estimate>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800a7a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d103      	bne.n	800a7b8 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	b29a      	uxth	r2, r3
 800a7b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7b6:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800a7b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d113      	bne.n	800a7e8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800a7c0:	f107 0320 	add.w	r3, r7, #32
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f7fc fa3f 	bl	8006c4c <VL53L0X_GetLimitCheckValue>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800a7d4:	6a3b      	ldr	r3, [r7, #32]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d006      	beq.n	800a7e8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800a7da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7dc:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d902      	bls.n	800a7e8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a7e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d109      	bne.n	800a804 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a7f0:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	2102      	movs	r1, #2
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f7fc f9a1 	bl	8006b40 <VL53L0X_GetLimitCheckEnable>
 800a7fe:	4603      	mov	r3, r0
 800a800:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800a804:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d044      	beq.n	800a896 <VL53L0X_get_pal_range_status+0x1d6>
 800a80c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a810:	2b00      	cmp	r3, #0
 800a812:	d140      	bne.n	800a896 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a814:	f107 031c 	add.w	r3, r7, #28
 800a818:	461a      	mov	r2, r3
 800a81a:	2102      	movs	r1, #2
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f7fc fa15 	bl	8006c4c <VL53L0X_GetLimitCheckValue>
 800a822:	4603      	mov	r3, r0
 800a824:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800a828:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d107      	bne.n	800a840 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a830:	2201      	movs	r2, #1
 800a832:	21ff      	movs	r1, #255	; 0xff
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	f000 f9bb 	bl	800abb0 <VL53L0X_WrByte>
 800a83a:	4603      	mov	r3, r0
 800a83c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800a840:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a844:	2b00      	cmp	r3, #0
 800a846:	d109      	bne.n	800a85c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800a848:	f107 0316 	add.w	r3, r7, #22
 800a84c:	461a      	mov	r2, r3
 800a84e:	21b6      	movs	r1, #182	; 0xb6
 800a850:	68f8      	ldr	r0, [r7, #12]
 800a852:	f000 fa59 	bl	800ad08 <VL53L0X_RdWord>
 800a856:	4603      	mov	r3, r0
 800a858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800a85c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a860:	2b00      	cmp	r3, #0
 800a862:	d107      	bne.n	800a874 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a864:	2200      	movs	r2, #0
 800a866:	21ff      	movs	r1, #255	; 0xff
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f000 f9a1 	bl	800abb0 <VL53L0X_WrByte>
 800a86e:	4603      	mov	r3, r0
 800a870:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800a874:	8afb      	ldrh	r3, [r7, #22]
 800a876:	025b      	lsls	r3, r3, #9
 800a878:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a87e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800a882:	69fb      	ldr	r3, [r7, #28]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d006      	beq.n	800a896 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800a888:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800a88a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d902      	bls.n	800a896 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800a890:	2301      	movs	r3, #1
 800a892:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800a896:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d109      	bne.n	800a8b2 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a89e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	2103      	movs	r1, #3
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f7fc f94a 	bl	8006b40 <VL53L0X_GetLimitCheckEnable>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800a8b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d023      	beq.n	800a902 <VL53L0X_get_pal_range_status+0x242>
 800a8ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d11f      	bne.n	800a902 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800a8c2:	893b      	ldrh	r3, [r7, #8]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d102      	bne.n	800a8ce <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	637b      	str	r3, [r7, #52]	; 0x34
 800a8cc:	e005      	b.n	800a8da <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	021a      	lsls	r2, r3, #8
 800a8d2:	893b      	ldrh	r3, [r7, #8]
 800a8d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8d8:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800a8da:	f107 0318 	add.w	r3, r7, #24
 800a8de:	461a      	mov	r2, r3
 800a8e0:	2103      	movs	r1, #3
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f7fc f9b2 	bl	8006c4c <VL53L0X_GetLimitCheckValue>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d006      	beq.n	800a902 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800a8f4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800a8f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d202      	bcs.n	800a902 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a902:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a906:	2b00      	cmp	r3, #0
 800a908:	d14a      	bne.n	800a9a0 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800a90a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d103      	bne.n	800a91a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800a912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a914:	22ff      	movs	r2, #255	; 0xff
 800a916:	701a      	strb	r2, [r3, #0]
 800a918:	e042      	b.n	800a9a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800a91a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d007      	beq.n	800a932 <VL53L0X_get_pal_range_status+0x272>
 800a922:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a926:	2b02      	cmp	r3, #2
 800a928:	d003      	beq.n	800a932 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800a92a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a92e:	2b03      	cmp	r3, #3
 800a930:	d103      	bne.n	800a93a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800a932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a934:	2205      	movs	r2, #5
 800a936:	701a      	strb	r2, [r3, #0]
 800a938:	e032      	b.n	800a9a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800a93a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a93e:	2b06      	cmp	r3, #6
 800a940:	d003      	beq.n	800a94a <VL53L0X_get_pal_range_status+0x28a>
 800a942:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a946:	2b09      	cmp	r3, #9
 800a948:	d103      	bne.n	800a952 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800a94a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a94c:	2204      	movs	r2, #4
 800a94e:	701a      	strb	r2, [r3, #0]
 800a950:	e026      	b.n	800a9a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800a952:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a956:	2b08      	cmp	r3, #8
 800a958:	d007      	beq.n	800a96a <VL53L0X_get_pal_range_status+0x2aa>
 800a95a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a95e:	2b0a      	cmp	r3, #10
 800a960:	d003      	beq.n	800a96a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800a962:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a966:	2b01      	cmp	r3, #1
 800a968:	d103      	bne.n	800a972 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800a96a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a96c:	2203      	movs	r2, #3
 800a96e:	701a      	strb	r2, [r3, #0]
 800a970:	e016      	b.n	800a9a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800a972:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a976:	2b04      	cmp	r3, #4
 800a978:	d003      	beq.n	800a982 <VL53L0X_get_pal_range_status+0x2c2>
 800a97a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d103      	bne.n	800a98a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800a982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a984:	2202      	movs	r2, #2
 800a986:	701a      	strb	r2, [r3, #0]
 800a988:	e00a      	b.n	800a9a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800a98a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d103      	bne.n	800a99a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800a992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a994:	2201      	movs	r2, #1
 800a996:	701a      	strb	r2, [r3, #0]
 800a998:	e002      	b.n	800a9a0 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800a99a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a99c:	2200      	movs	r2, #0
 800a99e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800a9a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d102      	bne.n	800a9ae <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800a9a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800a9ae:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	2101      	movs	r1, #1
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f7fc f8c2 	bl	8006b40 <VL53L0X_GetLimitCheckEnable>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800a9c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d14f      	bne.n	800aa6a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800a9ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d003      	beq.n	800a9da <VL53L0X_get_pal_range_status+0x31a>
 800a9d2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d103      	bne.n	800a9e2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9e0:	e002      	b.n	800a9e8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a9ee:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800a9f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a9f6:	2b04      	cmp	r3, #4
 800a9f8:	d003      	beq.n	800aa02 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800a9fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d103      	bne.n	800aa0a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800aa02:	2301      	movs	r3, #1
 800aa04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa08:	e002      	b.n	800aa10 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800aa16:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800aa1a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d003      	beq.n	800aa2a <VL53L0X_get_pal_range_status+0x36a>
 800aa22:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d103      	bne.n	800aa32 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa30:	e002      	b.n	800aa38 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800aa32:	2300      	movs	r3, #0
 800aa34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800aa3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800aa42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d003      	beq.n	800aa52 <VL53L0X_get_pal_range_status+0x392>
 800aa4a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d103      	bne.n	800aa5a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800aa52:	2301      	movs	r3, #1
 800aa54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa58:	e002      	b.n	800aa60 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800aa66:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aa6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3740      	adds	r7, #64	; 0x40
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b088      	sub	sp, #32
 800aa7a:	af02      	add	r7, sp, #8
 800aa7c:	60f8      	str	r0, [r7, #12]
 800aa7e:	60b9      	str	r1, [r7, #8]
 800aa80:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	330a      	adds	r3, #10
 800aa86:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800aa94:	b299      	uxth	r1, r3
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	b29a      	uxth	r2, r3
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	9300      	str	r3, [sp, #0]
 800aa9e:	4613      	mov	r3, r2
 800aaa0:	68ba      	ldr	r2, [r7, #8]
 800aaa2:	f7f7 fee5 	bl	8002870 <HAL_I2C_Master_Transmit>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800aaaa:	693b      	ldr	r3, [r7, #16]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3718      	adds	r7, #24
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b088      	sub	sp, #32
 800aab8:	af02      	add	r7, sp, #8
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	330a      	adds	r3, #10
 800aac4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800aad2:	f043 0301 	orr.w	r3, r3, #1
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	b299      	uxth	r1, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	b29a      	uxth	r2, r3
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	4613      	mov	r3, r2
 800aae4:	68ba      	ldr	r2, [r7, #8]
 800aae6:	f7f7 ffb7 	bl	8002a58 <HAL_I2C_Master_Receive>
 800aaea:	4603      	mov	r3, r0
 800aaec:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800aaee:	693b      	ldr	r3, [r7, #16]
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3718      	adds	r7, #24
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	607a      	str	r2, [r7, #4]
 800ab02:	603b      	str	r3, [r7, #0]
 800ab04:	460b      	mov	r3, r1
 800ab06:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	2b3f      	cmp	r3, #63	; 0x3f
 800ab10:	d902      	bls.n	800ab18 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800ab12:	f06f 0303 	mvn.w	r3, #3
 800ab16:	e016      	b.n	800ab46 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800ab18:	4a0d      	ldr	r2, [pc, #52]	; (800ab50 <VL53L0X_WriteMulti+0x58>)
 800ab1a:	7afb      	ldrb	r3, [r7, #11]
 800ab1c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	6879      	ldr	r1, [r7, #4]
 800ab22:	480c      	ldr	r0, [pc, #48]	; (800ab54 <VL53L0X_WriteMulti+0x5c>)
 800ab24:	f000 f99e 	bl	800ae64 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	4908      	ldr	r1, [pc, #32]	; (800ab50 <VL53L0X_WriteMulti+0x58>)
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f7ff ffa0 	bl	800aa76 <_I2CWrite>
 800ab36:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d001      	beq.n	800ab42 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ab3e:	23ec      	movs	r3, #236	; 0xec
 800ab40:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ab42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3718      	adds	r7, #24
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	20000844 	.word	0x20000844
 800ab54:	20000845 	.word	0x20000845

0800ab58 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b086      	sub	sp, #24
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	607a      	str	r2, [r7, #4]
 800ab62:	603b      	str	r3, [r7, #0]
 800ab64:	460b      	mov	r3, r1
 800ab66:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ab6c:	f107 030b 	add.w	r3, r7, #11
 800ab70:	2201      	movs	r2, #1
 800ab72:	4619      	mov	r1, r3
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f7ff ff7e 	bl	800aa76 <_I2CWrite>
 800ab7a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d002      	beq.n	800ab88 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ab82:	23ec      	movs	r3, #236	; 0xec
 800ab84:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ab86:	e00c      	b.n	800aba2 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800ab88:	683a      	ldr	r2, [r7, #0]
 800ab8a:	6879      	ldr	r1, [r7, #4]
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	f7ff ff91 	bl	800aab4 <_I2CRead>
 800ab92:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d002      	beq.n	800aba0 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ab9a:	23ec      	movs	r3, #236	; 0xec
 800ab9c:	75fb      	strb	r3, [r7, #23]
 800ab9e:	e000      	b.n	800aba2 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800aba0:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800aba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3718      	adds	r7, #24
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
	...

0800abb0 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	460b      	mov	r3, r1
 800abba:	70fb      	strb	r3, [r7, #3]
 800abbc:	4613      	mov	r3, r2
 800abbe:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abc0:	2300      	movs	r3, #0
 800abc2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800abc4:	4a0b      	ldr	r2, [pc, #44]	; (800abf4 <VL53L0X_WrByte+0x44>)
 800abc6:	78fb      	ldrb	r3, [r7, #3]
 800abc8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800abca:	4a0a      	ldr	r2, [pc, #40]	; (800abf4 <VL53L0X_WrByte+0x44>)
 800abcc:	78bb      	ldrb	r3, [r7, #2]
 800abce:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800abd0:	2202      	movs	r2, #2
 800abd2:	4908      	ldr	r1, [pc, #32]	; (800abf4 <VL53L0X_WrByte+0x44>)
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f7ff ff4e 	bl	800aa76 <_I2CWrite>
 800abda:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d001      	beq.n	800abe6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800abe2:	23ec      	movs	r3, #236	; 0xec
 800abe4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800abe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	20000844 	.word	0x20000844

0800abf8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	460b      	mov	r3, r1
 800ac02:	70fb      	strb	r3, [r7, #3]
 800ac04:	4613      	mov	r3, r2
 800ac06:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ac0c:	4a0e      	ldr	r2, [pc, #56]	; (800ac48 <VL53L0X_WrWord+0x50>)
 800ac0e:	78fb      	ldrb	r3, [r7, #3]
 800ac10:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800ac12:	883b      	ldrh	r3, [r7, #0]
 800ac14:	0a1b      	lsrs	r3, r3, #8
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	b2da      	uxtb	r2, r3
 800ac1a:	4b0b      	ldr	r3, [pc, #44]	; (800ac48 <VL53L0X_WrWord+0x50>)
 800ac1c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800ac1e:	883b      	ldrh	r3, [r7, #0]
 800ac20:	b2da      	uxtb	r2, r3
 800ac22:	4b09      	ldr	r3, [pc, #36]	; (800ac48 <VL53L0X_WrWord+0x50>)
 800ac24:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800ac26:	2203      	movs	r2, #3
 800ac28:	4907      	ldr	r1, [pc, #28]	; (800ac48 <VL53L0X_WrWord+0x50>)
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f7ff ff23 	bl	800aa76 <_I2CWrite>
 800ac30:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d001      	beq.n	800ac3c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ac38:	23ec      	movs	r3, #236	; 0xec
 800ac3a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ac3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	20000844 	.word	0x20000844

0800ac4c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	4608      	mov	r0, r1
 800ac56:	4611      	mov	r1, r2
 800ac58:	461a      	mov	r2, r3
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	70fb      	strb	r3, [r7, #3]
 800ac5e:	460b      	mov	r3, r1
 800ac60:	70bb      	strb	r3, [r7, #2]
 800ac62:	4613      	mov	r3, r2
 800ac64:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ac66:	2300      	movs	r3, #0
 800ac68:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800ac6a:	f107 020e 	add.w	r2, r7, #14
 800ac6e:	78fb      	ldrb	r3, [r7, #3]
 800ac70:	4619      	mov	r1, r3
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f81e 	bl	800acb4 <VL53L0X_RdByte>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800ac7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d110      	bne.n	800aca6 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800ac84:	7bba      	ldrb	r2, [r7, #14]
 800ac86:	78bb      	ldrb	r3, [r7, #2]
 800ac88:	4013      	ands	r3, r2
 800ac8a:	b2da      	uxtb	r2, r3
 800ac8c:	787b      	ldrb	r3, [r7, #1]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800ac94:	7bba      	ldrb	r2, [r7, #14]
 800ac96:	78fb      	ldrb	r3, [r7, #3]
 800ac98:	4619      	mov	r1, r3
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f7ff ff88 	bl	800abb0 <VL53L0X_WrByte>
 800aca0:	4603      	mov	r3, r0
 800aca2:	73fb      	strb	r3, [r7, #15]
 800aca4:	e000      	b.n	800aca8 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800aca6:	bf00      	nop
done:
    return Status;
 800aca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b086      	sub	sp, #24
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	460b      	mov	r3, r1
 800acbe:	607a      	str	r2, [r7, #4]
 800acc0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800acc2:	2300      	movs	r3, #0
 800acc4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800acc6:	f107 030b 	add.w	r3, r7, #11
 800acca:	2201      	movs	r2, #1
 800accc:	4619      	mov	r1, r3
 800acce:	68f8      	ldr	r0, [r7, #12]
 800acd0:	f7ff fed1 	bl	800aa76 <_I2CWrite>
 800acd4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d002      	beq.n	800ace2 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800acdc:	23ec      	movs	r3, #236	; 0xec
 800acde:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ace0:	e00c      	b.n	800acfc <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800ace2:	2201      	movs	r2, #1
 800ace4:	6879      	ldr	r1, [r7, #4]
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	f7ff fee4 	bl	800aab4 <_I2CRead>
 800acec:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d002      	beq.n	800acfa <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800acf4:	23ec      	movs	r3, #236	; 0xec
 800acf6:	75fb      	strb	r3, [r7, #23]
 800acf8:	e000      	b.n	800acfc <VL53L0X_RdByte+0x48>
    }
done:
 800acfa:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800acfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3718      	adds	r7, #24
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b086      	sub	sp, #24
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	460b      	mov	r3, r1
 800ad12:	607a      	str	r2, [r7, #4]
 800ad14:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad16:	2300      	movs	r3, #0
 800ad18:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ad1a:	f107 030b 	add.w	r3, r7, #11
 800ad1e:	2201      	movs	r2, #1
 800ad20:	4619      	mov	r1, r3
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f7ff fea7 	bl	800aa76 <_I2CWrite>
 800ad28:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d002      	beq.n	800ad36 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ad30:	23ec      	movs	r3, #236	; 0xec
 800ad32:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ad34:	e017      	b.n	800ad66 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800ad36:	2202      	movs	r2, #2
 800ad38:	490e      	ldr	r1, [pc, #56]	; (800ad74 <VL53L0X_RdWord+0x6c>)
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	f7ff feba 	bl	800aab4 <_I2CRead>
 800ad40:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d002      	beq.n	800ad4e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ad48:	23ec      	movs	r3, #236	; 0xec
 800ad4a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ad4c:	e00b      	b.n	800ad66 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800ad4e:	4b09      	ldr	r3, [pc, #36]	; (800ad74 <VL53L0X_RdWord+0x6c>)
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	021b      	lsls	r3, r3, #8
 800ad56:	b29a      	uxth	r2, r3
 800ad58:	4b06      	ldr	r3, [pc, #24]	; (800ad74 <VL53L0X_RdWord+0x6c>)
 800ad5a:	785b      	ldrb	r3, [r3, #1]
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	4413      	add	r3, r2
 800ad60:	b29a      	uxth	r2, r3
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800ad66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3718      	adds	r7, #24
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	20000844 	.word	0x20000844

0800ad78 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b086      	sub	sp, #24
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	460b      	mov	r3, r1
 800ad82:	607a      	str	r2, [r7, #4]
 800ad84:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad86:	2300      	movs	r3, #0
 800ad88:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ad8a:	f107 030b 	add.w	r3, r7, #11
 800ad8e:	2201      	movs	r2, #1
 800ad90:	4619      	mov	r1, r3
 800ad92:	68f8      	ldr	r0, [r7, #12]
 800ad94:	f7ff fe6f 	bl	800aa76 <_I2CWrite>
 800ad98:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d002      	beq.n	800ada6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ada0:	23ec      	movs	r3, #236	; 0xec
 800ada2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ada4:	e01b      	b.n	800adde <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800ada6:	2204      	movs	r2, #4
 800ada8:	4910      	ldr	r1, [pc, #64]	; (800adec <VL53L0X_RdDWord+0x74>)
 800adaa:	68f8      	ldr	r0, [r7, #12]
 800adac:	f7ff fe82 	bl	800aab4 <_I2CRead>
 800adb0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d002      	beq.n	800adbe <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800adb8:	23ec      	movs	r3, #236	; 0xec
 800adba:	75fb      	strb	r3, [r7, #23]
        goto done;
 800adbc:	e00f      	b.n	800adde <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800adbe:	4b0b      	ldr	r3, [pc, #44]	; (800adec <VL53L0X_RdDWord+0x74>)
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	061a      	lsls	r2, r3, #24
 800adc4:	4b09      	ldr	r3, [pc, #36]	; (800adec <VL53L0X_RdDWord+0x74>)
 800adc6:	785b      	ldrb	r3, [r3, #1]
 800adc8:	041b      	lsls	r3, r3, #16
 800adca:	441a      	add	r2, r3
 800adcc:	4b07      	ldr	r3, [pc, #28]	; (800adec <VL53L0X_RdDWord+0x74>)
 800adce:	789b      	ldrb	r3, [r3, #2]
 800add0:	021b      	lsls	r3, r3, #8
 800add2:	4413      	add	r3, r2
 800add4:	4a05      	ldr	r2, [pc, #20]	; (800adec <VL53L0X_RdDWord+0x74>)
 800add6:	78d2      	ldrb	r2, [r2, #3]
 800add8:	441a      	add	r2, r3
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800adde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3718      	adds	r7, #24
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	20000844 	.word	0x20000844

0800adf0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800adf8:	2300      	movs	r3, #0
 800adfa:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800adfc:	2002      	movs	r0, #2
 800adfe:	f7f7 f973 	bl	80020e8 <HAL_Delay>
    return status;
 800ae02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
	...

0800ae10 <__errno>:
 800ae10:	4b01      	ldr	r3, [pc, #4]	; (800ae18 <__errno+0x8>)
 800ae12:	6818      	ldr	r0, [r3, #0]
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	200002d4 	.word	0x200002d4

0800ae1c <__libc_init_array>:
 800ae1c:	b570      	push	{r4, r5, r6, lr}
 800ae1e:	4e0d      	ldr	r6, [pc, #52]	; (800ae54 <__libc_init_array+0x38>)
 800ae20:	4c0d      	ldr	r4, [pc, #52]	; (800ae58 <__libc_init_array+0x3c>)
 800ae22:	1ba4      	subs	r4, r4, r6
 800ae24:	10a4      	asrs	r4, r4, #2
 800ae26:	2500      	movs	r5, #0
 800ae28:	42a5      	cmp	r5, r4
 800ae2a:	d109      	bne.n	800ae40 <__libc_init_array+0x24>
 800ae2c:	4e0b      	ldr	r6, [pc, #44]	; (800ae5c <__libc_init_array+0x40>)
 800ae2e:	4c0c      	ldr	r4, [pc, #48]	; (800ae60 <__libc_init_array+0x44>)
 800ae30:	f002 f9cc 	bl	800d1cc <_init>
 800ae34:	1ba4      	subs	r4, r4, r6
 800ae36:	10a4      	asrs	r4, r4, #2
 800ae38:	2500      	movs	r5, #0
 800ae3a:	42a5      	cmp	r5, r4
 800ae3c:	d105      	bne.n	800ae4a <__libc_init_array+0x2e>
 800ae3e:	bd70      	pop	{r4, r5, r6, pc}
 800ae40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae44:	4798      	blx	r3
 800ae46:	3501      	adds	r5, #1
 800ae48:	e7ee      	b.n	800ae28 <__libc_init_array+0xc>
 800ae4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae4e:	4798      	blx	r3
 800ae50:	3501      	adds	r5, #1
 800ae52:	e7f2      	b.n	800ae3a <__libc_init_array+0x1e>
 800ae54:	0800d7e0 	.word	0x0800d7e0
 800ae58:	0800d7e0 	.word	0x0800d7e0
 800ae5c:	0800d7e0 	.word	0x0800d7e0
 800ae60:	0800d7e4 	.word	0x0800d7e4

0800ae64 <memcpy>:
 800ae64:	b510      	push	{r4, lr}
 800ae66:	1e43      	subs	r3, r0, #1
 800ae68:	440a      	add	r2, r1
 800ae6a:	4291      	cmp	r1, r2
 800ae6c:	d100      	bne.n	800ae70 <memcpy+0xc>
 800ae6e:	bd10      	pop	{r4, pc}
 800ae70:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae74:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae78:	e7f7      	b.n	800ae6a <memcpy+0x6>

0800ae7a <memset>:
 800ae7a:	4402      	add	r2, r0
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d100      	bne.n	800ae84 <memset+0xa>
 800ae82:	4770      	bx	lr
 800ae84:	f803 1b01 	strb.w	r1, [r3], #1
 800ae88:	e7f9      	b.n	800ae7e <memset+0x4>
	...

0800ae8c <iprintf>:
 800ae8c:	b40f      	push	{r0, r1, r2, r3}
 800ae8e:	4b0a      	ldr	r3, [pc, #40]	; (800aeb8 <iprintf+0x2c>)
 800ae90:	b513      	push	{r0, r1, r4, lr}
 800ae92:	681c      	ldr	r4, [r3, #0]
 800ae94:	b124      	cbz	r4, 800aea0 <iprintf+0x14>
 800ae96:	69a3      	ldr	r3, [r4, #24]
 800ae98:	b913      	cbnz	r3, 800aea0 <iprintf+0x14>
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	f000 f8fc 	bl	800b098 <__sinit>
 800aea0:	ab05      	add	r3, sp, #20
 800aea2:	9a04      	ldr	r2, [sp, #16]
 800aea4:	68a1      	ldr	r1, [r4, #8]
 800aea6:	9301      	str	r3, [sp, #4]
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f000 fbbf 	bl	800b62c <_vfiprintf_r>
 800aeae:	b002      	add	sp, #8
 800aeb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aeb4:	b004      	add	sp, #16
 800aeb6:	4770      	bx	lr
 800aeb8:	200002d4 	.word	0x200002d4

0800aebc <siscanf>:
 800aebc:	b40e      	push	{r1, r2, r3}
 800aebe:	b530      	push	{r4, r5, lr}
 800aec0:	b09c      	sub	sp, #112	; 0x70
 800aec2:	ac1f      	add	r4, sp, #124	; 0x7c
 800aec4:	f44f 7201 	mov.w	r2, #516	; 0x204
 800aec8:	f854 5b04 	ldr.w	r5, [r4], #4
 800aecc:	f8ad 2014 	strh.w	r2, [sp, #20]
 800aed0:	9002      	str	r0, [sp, #8]
 800aed2:	9006      	str	r0, [sp, #24]
 800aed4:	f7f5 f97c 	bl	80001d0 <strlen>
 800aed8:	4b0b      	ldr	r3, [pc, #44]	; (800af08 <siscanf+0x4c>)
 800aeda:	9003      	str	r0, [sp, #12]
 800aedc:	9007      	str	r0, [sp, #28]
 800aede:	930b      	str	r3, [sp, #44]	; 0x2c
 800aee0:	480a      	ldr	r0, [pc, #40]	; (800af0c <siscanf+0x50>)
 800aee2:	9401      	str	r4, [sp, #4]
 800aee4:	2300      	movs	r3, #0
 800aee6:	930f      	str	r3, [sp, #60]	; 0x3c
 800aee8:	9314      	str	r3, [sp, #80]	; 0x50
 800aeea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aeee:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aef2:	462a      	mov	r2, r5
 800aef4:	4623      	mov	r3, r4
 800aef6:	a902      	add	r1, sp, #8
 800aef8:	6800      	ldr	r0, [r0, #0]
 800aefa:	f000 fa1d 	bl	800b338 <__ssvfiscanf_r>
 800aefe:	b01c      	add	sp, #112	; 0x70
 800af00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af04:	b003      	add	sp, #12
 800af06:	4770      	bx	lr
 800af08:	0800af33 	.word	0x0800af33
 800af0c:	200002d4 	.word	0x200002d4

0800af10 <__sread>:
 800af10:	b510      	push	{r4, lr}
 800af12:	460c      	mov	r4, r1
 800af14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af18:	f000 ff7e 	bl	800be18 <_read_r>
 800af1c:	2800      	cmp	r0, #0
 800af1e:	bfab      	itete	ge
 800af20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af22:	89a3      	ldrhlt	r3, [r4, #12]
 800af24:	181b      	addge	r3, r3, r0
 800af26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af2a:	bfac      	ite	ge
 800af2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800af2e:	81a3      	strhlt	r3, [r4, #12]
 800af30:	bd10      	pop	{r4, pc}

0800af32 <__seofread>:
 800af32:	2000      	movs	r0, #0
 800af34:	4770      	bx	lr

0800af36 <__swrite>:
 800af36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af3a:	461f      	mov	r7, r3
 800af3c:	898b      	ldrh	r3, [r1, #12]
 800af3e:	05db      	lsls	r3, r3, #23
 800af40:	4605      	mov	r5, r0
 800af42:	460c      	mov	r4, r1
 800af44:	4616      	mov	r6, r2
 800af46:	d505      	bpl.n	800af54 <__swrite+0x1e>
 800af48:	2302      	movs	r3, #2
 800af4a:	2200      	movs	r2, #0
 800af4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af50:	f000 f92c 	bl	800b1ac <_lseek_r>
 800af54:	89a3      	ldrh	r3, [r4, #12]
 800af56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af5e:	81a3      	strh	r3, [r4, #12]
 800af60:	4632      	mov	r2, r6
 800af62:	463b      	mov	r3, r7
 800af64:	4628      	mov	r0, r5
 800af66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af6a:	f000 b833 	b.w	800afd4 <_write_r>

0800af6e <__sseek>:
 800af6e:	b510      	push	{r4, lr}
 800af70:	460c      	mov	r4, r1
 800af72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af76:	f000 f919 	bl	800b1ac <_lseek_r>
 800af7a:	1c43      	adds	r3, r0, #1
 800af7c:	89a3      	ldrh	r3, [r4, #12]
 800af7e:	bf15      	itete	ne
 800af80:	6560      	strne	r0, [r4, #84]	; 0x54
 800af82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af8a:	81a3      	strheq	r3, [r4, #12]
 800af8c:	bf18      	it	ne
 800af8e:	81a3      	strhne	r3, [r4, #12]
 800af90:	bd10      	pop	{r4, pc}

0800af92 <__sclose>:
 800af92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af96:	f000 b82f 	b.w	800aff8 <_close_r>

0800af9a <strcpy>:
 800af9a:	4603      	mov	r3, r0
 800af9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afa0:	f803 2b01 	strb.w	r2, [r3], #1
 800afa4:	2a00      	cmp	r2, #0
 800afa6:	d1f9      	bne.n	800af9c <strcpy+0x2>
 800afa8:	4770      	bx	lr

0800afaa <strncpy>:
 800afaa:	b570      	push	{r4, r5, r6, lr}
 800afac:	3901      	subs	r1, #1
 800afae:	4604      	mov	r4, r0
 800afb0:	b902      	cbnz	r2, 800afb4 <strncpy+0xa>
 800afb2:	bd70      	pop	{r4, r5, r6, pc}
 800afb4:	4623      	mov	r3, r4
 800afb6:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800afba:	f803 5b01 	strb.w	r5, [r3], #1
 800afbe:	1e56      	subs	r6, r2, #1
 800afc0:	b92d      	cbnz	r5, 800afce <strncpy+0x24>
 800afc2:	4414      	add	r4, r2
 800afc4:	42a3      	cmp	r3, r4
 800afc6:	d0f4      	beq.n	800afb2 <strncpy+0x8>
 800afc8:	f803 5b01 	strb.w	r5, [r3], #1
 800afcc:	e7fa      	b.n	800afc4 <strncpy+0x1a>
 800afce:	461c      	mov	r4, r3
 800afd0:	4632      	mov	r2, r6
 800afd2:	e7ed      	b.n	800afb0 <strncpy+0x6>

0800afd4 <_write_r>:
 800afd4:	b538      	push	{r3, r4, r5, lr}
 800afd6:	4c07      	ldr	r4, [pc, #28]	; (800aff4 <_write_r+0x20>)
 800afd8:	4605      	mov	r5, r0
 800afda:	4608      	mov	r0, r1
 800afdc:	4611      	mov	r1, r2
 800afde:	2200      	movs	r2, #0
 800afe0:	6022      	str	r2, [r4, #0]
 800afe2:	461a      	mov	r2, r3
 800afe4:	f7f6 fd10 	bl	8001a08 <_write>
 800afe8:	1c43      	adds	r3, r0, #1
 800afea:	d102      	bne.n	800aff2 <_write_r+0x1e>
 800afec:	6823      	ldr	r3, [r4, #0]
 800afee:	b103      	cbz	r3, 800aff2 <_write_r+0x1e>
 800aff0:	602b      	str	r3, [r5, #0]
 800aff2:	bd38      	pop	{r3, r4, r5, pc}
 800aff4:	20000884 	.word	0x20000884

0800aff8 <_close_r>:
 800aff8:	b538      	push	{r3, r4, r5, lr}
 800affa:	4c06      	ldr	r4, [pc, #24]	; (800b014 <_close_r+0x1c>)
 800affc:	2300      	movs	r3, #0
 800affe:	4605      	mov	r5, r0
 800b000:	4608      	mov	r0, r1
 800b002:	6023      	str	r3, [r4, #0]
 800b004:	f7f6 fe53 	bl	8001cae <_close>
 800b008:	1c43      	adds	r3, r0, #1
 800b00a:	d102      	bne.n	800b012 <_close_r+0x1a>
 800b00c:	6823      	ldr	r3, [r4, #0]
 800b00e:	b103      	cbz	r3, 800b012 <_close_r+0x1a>
 800b010:	602b      	str	r3, [r5, #0]
 800b012:	bd38      	pop	{r3, r4, r5, pc}
 800b014:	20000884 	.word	0x20000884

0800b018 <std>:
 800b018:	2300      	movs	r3, #0
 800b01a:	b510      	push	{r4, lr}
 800b01c:	4604      	mov	r4, r0
 800b01e:	e9c0 3300 	strd	r3, r3, [r0]
 800b022:	6083      	str	r3, [r0, #8]
 800b024:	8181      	strh	r1, [r0, #12]
 800b026:	6643      	str	r3, [r0, #100]	; 0x64
 800b028:	81c2      	strh	r2, [r0, #14]
 800b02a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b02e:	6183      	str	r3, [r0, #24]
 800b030:	4619      	mov	r1, r3
 800b032:	2208      	movs	r2, #8
 800b034:	305c      	adds	r0, #92	; 0x5c
 800b036:	f7ff ff20 	bl	800ae7a <memset>
 800b03a:	4b05      	ldr	r3, [pc, #20]	; (800b050 <std+0x38>)
 800b03c:	6263      	str	r3, [r4, #36]	; 0x24
 800b03e:	4b05      	ldr	r3, [pc, #20]	; (800b054 <std+0x3c>)
 800b040:	62a3      	str	r3, [r4, #40]	; 0x28
 800b042:	4b05      	ldr	r3, [pc, #20]	; (800b058 <std+0x40>)
 800b044:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b046:	4b05      	ldr	r3, [pc, #20]	; (800b05c <std+0x44>)
 800b048:	6224      	str	r4, [r4, #32]
 800b04a:	6323      	str	r3, [r4, #48]	; 0x30
 800b04c:	bd10      	pop	{r4, pc}
 800b04e:	bf00      	nop
 800b050:	0800af11 	.word	0x0800af11
 800b054:	0800af37 	.word	0x0800af37
 800b058:	0800af6f 	.word	0x0800af6f
 800b05c:	0800af93 	.word	0x0800af93

0800b060 <_cleanup_r>:
 800b060:	4901      	ldr	r1, [pc, #4]	; (800b068 <_cleanup_r+0x8>)
 800b062:	f000 b885 	b.w	800b170 <_fwalk_reent>
 800b066:	bf00      	nop
 800b068:	0800c3f5 	.word	0x0800c3f5

0800b06c <__sfmoreglue>:
 800b06c:	b570      	push	{r4, r5, r6, lr}
 800b06e:	1e4a      	subs	r2, r1, #1
 800b070:	2568      	movs	r5, #104	; 0x68
 800b072:	4355      	muls	r5, r2
 800b074:	460e      	mov	r6, r1
 800b076:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b07a:	f000 f8a9 	bl	800b1d0 <_malloc_r>
 800b07e:	4604      	mov	r4, r0
 800b080:	b140      	cbz	r0, 800b094 <__sfmoreglue+0x28>
 800b082:	2100      	movs	r1, #0
 800b084:	e9c0 1600 	strd	r1, r6, [r0]
 800b088:	300c      	adds	r0, #12
 800b08a:	60a0      	str	r0, [r4, #8]
 800b08c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b090:	f7ff fef3 	bl	800ae7a <memset>
 800b094:	4620      	mov	r0, r4
 800b096:	bd70      	pop	{r4, r5, r6, pc}

0800b098 <__sinit>:
 800b098:	6983      	ldr	r3, [r0, #24]
 800b09a:	b510      	push	{r4, lr}
 800b09c:	4604      	mov	r4, r0
 800b09e:	bb33      	cbnz	r3, 800b0ee <__sinit+0x56>
 800b0a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b0a4:	6503      	str	r3, [r0, #80]	; 0x50
 800b0a6:	4b12      	ldr	r3, [pc, #72]	; (800b0f0 <__sinit+0x58>)
 800b0a8:	4a12      	ldr	r2, [pc, #72]	; (800b0f4 <__sinit+0x5c>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	6282      	str	r2, [r0, #40]	; 0x28
 800b0ae:	4298      	cmp	r0, r3
 800b0b0:	bf04      	itt	eq
 800b0b2:	2301      	moveq	r3, #1
 800b0b4:	6183      	streq	r3, [r0, #24]
 800b0b6:	f000 f81f 	bl	800b0f8 <__sfp>
 800b0ba:	6060      	str	r0, [r4, #4]
 800b0bc:	4620      	mov	r0, r4
 800b0be:	f000 f81b 	bl	800b0f8 <__sfp>
 800b0c2:	60a0      	str	r0, [r4, #8]
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f000 f817 	bl	800b0f8 <__sfp>
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	60e0      	str	r0, [r4, #12]
 800b0ce:	2104      	movs	r1, #4
 800b0d0:	6860      	ldr	r0, [r4, #4]
 800b0d2:	f7ff ffa1 	bl	800b018 <std>
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	2109      	movs	r1, #9
 800b0da:	68a0      	ldr	r0, [r4, #8]
 800b0dc:	f7ff ff9c 	bl	800b018 <std>
 800b0e0:	2202      	movs	r2, #2
 800b0e2:	2112      	movs	r1, #18
 800b0e4:	68e0      	ldr	r0, [r4, #12]
 800b0e6:	f7ff ff97 	bl	800b018 <std>
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	61a3      	str	r3, [r4, #24]
 800b0ee:	bd10      	pop	{r4, pc}
 800b0f0:	0800d248 	.word	0x0800d248
 800b0f4:	0800b061 	.word	0x0800b061

0800b0f8 <__sfp>:
 800b0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0fa:	4b1b      	ldr	r3, [pc, #108]	; (800b168 <__sfp+0x70>)
 800b0fc:	681e      	ldr	r6, [r3, #0]
 800b0fe:	69b3      	ldr	r3, [r6, #24]
 800b100:	4607      	mov	r7, r0
 800b102:	b913      	cbnz	r3, 800b10a <__sfp+0x12>
 800b104:	4630      	mov	r0, r6
 800b106:	f7ff ffc7 	bl	800b098 <__sinit>
 800b10a:	3648      	adds	r6, #72	; 0x48
 800b10c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b110:	3b01      	subs	r3, #1
 800b112:	d503      	bpl.n	800b11c <__sfp+0x24>
 800b114:	6833      	ldr	r3, [r6, #0]
 800b116:	b133      	cbz	r3, 800b126 <__sfp+0x2e>
 800b118:	6836      	ldr	r6, [r6, #0]
 800b11a:	e7f7      	b.n	800b10c <__sfp+0x14>
 800b11c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b120:	b16d      	cbz	r5, 800b13e <__sfp+0x46>
 800b122:	3468      	adds	r4, #104	; 0x68
 800b124:	e7f4      	b.n	800b110 <__sfp+0x18>
 800b126:	2104      	movs	r1, #4
 800b128:	4638      	mov	r0, r7
 800b12a:	f7ff ff9f 	bl	800b06c <__sfmoreglue>
 800b12e:	6030      	str	r0, [r6, #0]
 800b130:	2800      	cmp	r0, #0
 800b132:	d1f1      	bne.n	800b118 <__sfp+0x20>
 800b134:	230c      	movs	r3, #12
 800b136:	603b      	str	r3, [r7, #0]
 800b138:	4604      	mov	r4, r0
 800b13a:	4620      	mov	r0, r4
 800b13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b13e:	4b0b      	ldr	r3, [pc, #44]	; (800b16c <__sfp+0x74>)
 800b140:	6665      	str	r5, [r4, #100]	; 0x64
 800b142:	e9c4 5500 	strd	r5, r5, [r4]
 800b146:	60a5      	str	r5, [r4, #8]
 800b148:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b14c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b150:	2208      	movs	r2, #8
 800b152:	4629      	mov	r1, r5
 800b154:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b158:	f7ff fe8f 	bl	800ae7a <memset>
 800b15c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b160:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b164:	e7e9      	b.n	800b13a <__sfp+0x42>
 800b166:	bf00      	nop
 800b168:	0800d248 	.word	0x0800d248
 800b16c:	ffff0001 	.word	0xffff0001

0800b170 <_fwalk_reent>:
 800b170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b174:	4680      	mov	r8, r0
 800b176:	4689      	mov	r9, r1
 800b178:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b17c:	2600      	movs	r6, #0
 800b17e:	b914      	cbnz	r4, 800b186 <_fwalk_reent+0x16>
 800b180:	4630      	mov	r0, r6
 800b182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b186:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b18a:	3f01      	subs	r7, #1
 800b18c:	d501      	bpl.n	800b192 <_fwalk_reent+0x22>
 800b18e:	6824      	ldr	r4, [r4, #0]
 800b190:	e7f5      	b.n	800b17e <_fwalk_reent+0xe>
 800b192:	89ab      	ldrh	r3, [r5, #12]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d907      	bls.n	800b1a8 <_fwalk_reent+0x38>
 800b198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b19c:	3301      	adds	r3, #1
 800b19e:	d003      	beq.n	800b1a8 <_fwalk_reent+0x38>
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	4640      	mov	r0, r8
 800b1a4:	47c8      	blx	r9
 800b1a6:	4306      	orrs	r6, r0
 800b1a8:	3568      	adds	r5, #104	; 0x68
 800b1aa:	e7ee      	b.n	800b18a <_fwalk_reent+0x1a>

0800b1ac <_lseek_r>:
 800b1ac:	b538      	push	{r3, r4, r5, lr}
 800b1ae:	4c07      	ldr	r4, [pc, #28]	; (800b1cc <_lseek_r+0x20>)
 800b1b0:	4605      	mov	r5, r0
 800b1b2:	4608      	mov	r0, r1
 800b1b4:	4611      	mov	r1, r2
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	6022      	str	r2, [r4, #0]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	f7f6 fd9e 	bl	8001cfc <_lseek>
 800b1c0:	1c43      	adds	r3, r0, #1
 800b1c2:	d102      	bne.n	800b1ca <_lseek_r+0x1e>
 800b1c4:	6823      	ldr	r3, [r4, #0]
 800b1c6:	b103      	cbz	r3, 800b1ca <_lseek_r+0x1e>
 800b1c8:	602b      	str	r3, [r5, #0]
 800b1ca:	bd38      	pop	{r3, r4, r5, pc}
 800b1cc:	20000884 	.word	0x20000884

0800b1d0 <_malloc_r>:
 800b1d0:	b570      	push	{r4, r5, r6, lr}
 800b1d2:	1ccd      	adds	r5, r1, #3
 800b1d4:	f025 0503 	bic.w	r5, r5, #3
 800b1d8:	3508      	adds	r5, #8
 800b1da:	2d0c      	cmp	r5, #12
 800b1dc:	bf38      	it	cc
 800b1de:	250c      	movcc	r5, #12
 800b1e0:	2d00      	cmp	r5, #0
 800b1e2:	4606      	mov	r6, r0
 800b1e4:	db01      	blt.n	800b1ea <_malloc_r+0x1a>
 800b1e6:	42a9      	cmp	r1, r5
 800b1e8:	d903      	bls.n	800b1f2 <_malloc_r+0x22>
 800b1ea:	230c      	movs	r3, #12
 800b1ec:	6033      	str	r3, [r6, #0]
 800b1ee:	2000      	movs	r0, #0
 800b1f0:	bd70      	pop	{r4, r5, r6, pc}
 800b1f2:	f001 f9b1 	bl	800c558 <__malloc_lock>
 800b1f6:	4a21      	ldr	r2, [pc, #132]	; (800b27c <_malloc_r+0xac>)
 800b1f8:	6814      	ldr	r4, [r2, #0]
 800b1fa:	4621      	mov	r1, r4
 800b1fc:	b991      	cbnz	r1, 800b224 <_malloc_r+0x54>
 800b1fe:	4c20      	ldr	r4, [pc, #128]	; (800b280 <_malloc_r+0xb0>)
 800b200:	6823      	ldr	r3, [r4, #0]
 800b202:	b91b      	cbnz	r3, 800b20c <_malloc_r+0x3c>
 800b204:	4630      	mov	r0, r6
 800b206:	f000 fe19 	bl	800be3c <_sbrk_r>
 800b20a:	6020      	str	r0, [r4, #0]
 800b20c:	4629      	mov	r1, r5
 800b20e:	4630      	mov	r0, r6
 800b210:	f000 fe14 	bl	800be3c <_sbrk_r>
 800b214:	1c43      	adds	r3, r0, #1
 800b216:	d124      	bne.n	800b262 <_malloc_r+0x92>
 800b218:	230c      	movs	r3, #12
 800b21a:	6033      	str	r3, [r6, #0]
 800b21c:	4630      	mov	r0, r6
 800b21e:	f001 f99c 	bl	800c55a <__malloc_unlock>
 800b222:	e7e4      	b.n	800b1ee <_malloc_r+0x1e>
 800b224:	680b      	ldr	r3, [r1, #0]
 800b226:	1b5b      	subs	r3, r3, r5
 800b228:	d418      	bmi.n	800b25c <_malloc_r+0x8c>
 800b22a:	2b0b      	cmp	r3, #11
 800b22c:	d90f      	bls.n	800b24e <_malloc_r+0x7e>
 800b22e:	600b      	str	r3, [r1, #0]
 800b230:	50cd      	str	r5, [r1, r3]
 800b232:	18cc      	adds	r4, r1, r3
 800b234:	4630      	mov	r0, r6
 800b236:	f001 f990 	bl	800c55a <__malloc_unlock>
 800b23a:	f104 000b 	add.w	r0, r4, #11
 800b23e:	1d23      	adds	r3, r4, #4
 800b240:	f020 0007 	bic.w	r0, r0, #7
 800b244:	1ac3      	subs	r3, r0, r3
 800b246:	d0d3      	beq.n	800b1f0 <_malloc_r+0x20>
 800b248:	425a      	negs	r2, r3
 800b24a:	50e2      	str	r2, [r4, r3]
 800b24c:	e7d0      	b.n	800b1f0 <_malloc_r+0x20>
 800b24e:	428c      	cmp	r4, r1
 800b250:	684b      	ldr	r3, [r1, #4]
 800b252:	bf16      	itet	ne
 800b254:	6063      	strne	r3, [r4, #4]
 800b256:	6013      	streq	r3, [r2, #0]
 800b258:	460c      	movne	r4, r1
 800b25a:	e7eb      	b.n	800b234 <_malloc_r+0x64>
 800b25c:	460c      	mov	r4, r1
 800b25e:	6849      	ldr	r1, [r1, #4]
 800b260:	e7cc      	b.n	800b1fc <_malloc_r+0x2c>
 800b262:	1cc4      	adds	r4, r0, #3
 800b264:	f024 0403 	bic.w	r4, r4, #3
 800b268:	42a0      	cmp	r0, r4
 800b26a:	d005      	beq.n	800b278 <_malloc_r+0xa8>
 800b26c:	1a21      	subs	r1, r4, r0
 800b26e:	4630      	mov	r0, r6
 800b270:	f000 fde4 	bl	800be3c <_sbrk_r>
 800b274:	3001      	adds	r0, #1
 800b276:	d0cf      	beq.n	800b218 <_malloc_r+0x48>
 800b278:	6025      	str	r5, [r4, #0]
 800b27a:	e7db      	b.n	800b234 <_malloc_r+0x64>
 800b27c:	200004dc 	.word	0x200004dc
 800b280:	200004e0 	.word	0x200004e0

0800b284 <_sungetc_r>:
 800b284:	b538      	push	{r3, r4, r5, lr}
 800b286:	1c4b      	adds	r3, r1, #1
 800b288:	4614      	mov	r4, r2
 800b28a:	d103      	bne.n	800b294 <_sungetc_r+0x10>
 800b28c:	f04f 35ff 	mov.w	r5, #4294967295
 800b290:	4628      	mov	r0, r5
 800b292:	bd38      	pop	{r3, r4, r5, pc}
 800b294:	8993      	ldrh	r3, [r2, #12]
 800b296:	f023 0320 	bic.w	r3, r3, #32
 800b29a:	8193      	strh	r3, [r2, #12]
 800b29c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b29e:	6852      	ldr	r2, [r2, #4]
 800b2a0:	b2cd      	uxtb	r5, r1
 800b2a2:	b18b      	cbz	r3, 800b2c8 <_sungetc_r+0x44>
 800b2a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	dd08      	ble.n	800b2bc <_sungetc_r+0x38>
 800b2aa:	6823      	ldr	r3, [r4, #0]
 800b2ac:	1e5a      	subs	r2, r3, #1
 800b2ae:	6022      	str	r2, [r4, #0]
 800b2b0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b2b4:	6863      	ldr	r3, [r4, #4]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	6063      	str	r3, [r4, #4]
 800b2ba:	e7e9      	b.n	800b290 <_sungetc_r+0xc>
 800b2bc:	4621      	mov	r1, r4
 800b2be:	f000 ff19 	bl	800c0f4 <__submore>
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	d0f1      	beq.n	800b2aa <_sungetc_r+0x26>
 800b2c6:	e7e1      	b.n	800b28c <_sungetc_r+0x8>
 800b2c8:	6921      	ldr	r1, [r4, #16]
 800b2ca:	6823      	ldr	r3, [r4, #0]
 800b2cc:	b151      	cbz	r1, 800b2e4 <_sungetc_r+0x60>
 800b2ce:	4299      	cmp	r1, r3
 800b2d0:	d208      	bcs.n	800b2e4 <_sungetc_r+0x60>
 800b2d2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b2d6:	42a9      	cmp	r1, r5
 800b2d8:	d104      	bne.n	800b2e4 <_sungetc_r+0x60>
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	3201      	adds	r2, #1
 800b2de:	6023      	str	r3, [r4, #0]
 800b2e0:	6062      	str	r2, [r4, #4]
 800b2e2:	e7d5      	b.n	800b290 <_sungetc_r+0xc>
 800b2e4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b2e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2ec:	6363      	str	r3, [r4, #52]	; 0x34
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	63a3      	str	r3, [r4, #56]	; 0x38
 800b2f2:	4623      	mov	r3, r4
 800b2f4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b2f8:	6023      	str	r3, [r4, #0]
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	e7dc      	b.n	800b2b8 <_sungetc_r+0x34>

0800b2fe <__ssrefill_r>:
 800b2fe:	b510      	push	{r4, lr}
 800b300:	460c      	mov	r4, r1
 800b302:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b304:	b169      	cbz	r1, 800b322 <__ssrefill_r+0x24>
 800b306:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b30a:	4299      	cmp	r1, r3
 800b30c:	d001      	beq.n	800b312 <__ssrefill_r+0x14>
 800b30e:	f001 f925 	bl	800c55c <_free_r>
 800b312:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b314:	6063      	str	r3, [r4, #4]
 800b316:	2000      	movs	r0, #0
 800b318:	6360      	str	r0, [r4, #52]	; 0x34
 800b31a:	b113      	cbz	r3, 800b322 <__ssrefill_r+0x24>
 800b31c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b31e:	6023      	str	r3, [r4, #0]
 800b320:	bd10      	pop	{r4, pc}
 800b322:	6923      	ldr	r3, [r4, #16]
 800b324:	6023      	str	r3, [r4, #0]
 800b326:	2300      	movs	r3, #0
 800b328:	6063      	str	r3, [r4, #4]
 800b32a:	89a3      	ldrh	r3, [r4, #12]
 800b32c:	f043 0320 	orr.w	r3, r3, #32
 800b330:	81a3      	strh	r3, [r4, #12]
 800b332:	f04f 30ff 	mov.w	r0, #4294967295
 800b336:	e7f3      	b.n	800b320 <__ssrefill_r+0x22>

0800b338 <__ssvfiscanf_r>:
 800b338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b33c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b340:	460c      	mov	r4, r1
 800b342:	2100      	movs	r1, #0
 800b344:	9144      	str	r1, [sp, #272]	; 0x110
 800b346:	9145      	str	r1, [sp, #276]	; 0x114
 800b348:	499f      	ldr	r1, [pc, #636]	; (800b5c8 <__ssvfiscanf_r+0x290>)
 800b34a:	91a0      	str	r1, [sp, #640]	; 0x280
 800b34c:	f10d 0804 	add.w	r8, sp, #4
 800b350:	499e      	ldr	r1, [pc, #632]	; (800b5cc <__ssvfiscanf_r+0x294>)
 800b352:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800b5d0 <__ssvfiscanf_r+0x298>
 800b356:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b35a:	4606      	mov	r6, r0
 800b35c:	4692      	mov	sl, r2
 800b35e:	91a1      	str	r1, [sp, #644]	; 0x284
 800b360:	9300      	str	r3, [sp, #0]
 800b362:	270a      	movs	r7, #10
 800b364:	f89a 3000 	ldrb.w	r3, [sl]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	f000 812a 	beq.w	800b5c2 <__ssvfiscanf_r+0x28a>
 800b36e:	4655      	mov	r5, sl
 800b370:	f001 f86e 	bl	800c450 <__locale_ctype_ptr>
 800b374:	f815 bb01 	ldrb.w	fp, [r5], #1
 800b378:	4458      	add	r0, fp
 800b37a:	7843      	ldrb	r3, [r0, #1]
 800b37c:	f013 0308 	ands.w	r3, r3, #8
 800b380:	d01c      	beq.n	800b3bc <__ssvfiscanf_r+0x84>
 800b382:	6863      	ldr	r3, [r4, #4]
 800b384:	2b00      	cmp	r3, #0
 800b386:	dd12      	ble.n	800b3ae <__ssvfiscanf_r+0x76>
 800b388:	f001 f862 	bl	800c450 <__locale_ctype_ptr>
 800b38c:	6823      	ldr	r3, [r4, #0]
 800b38e:	781a      	ldrb	r2, [r3, #0]
 800b390:	4410      	add	r0, r2
 800b392:	7842      	ldrb	r2, [r0, #1]
 800b394:	0712      	lsls	r2, r2, #28
 800b396:	d401      	bmi.n	800b39c <__ssvfiscanf_r+0x64>
 800b398:	46aa      	mov	sl, r5
 800b39a:	e7e3      	b.n	800b364 <__ssvfiscanf_r+0x2c>
 800b39c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b39e:	3201      	adds	r2, #1
 800b3a0:	9245      	str	r2, [sp, #276]	; 0x114
 800b3a2:	6862      	ldr	r2, [r4, #4]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	3a01      	subs	r2, #1
 800b3a8:	6062      	str	r2, [r4, #4]
 800b3aa:	6023      	str	r3, [r4, #0]
 800b3ac:	e7e9      	b.n	800b382 <__ssvfiscanf_r+0x4a>
 800b3ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b3b0:	4621      	mov	r1, r4
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	4798      	blx	r3
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d0e6      	beq.n	800b388 <__ssvfiscanf_r+0x50>
 800b3ba:	e7ed      	b.n	800b398 <__ssvfiscanf_r+0x60>
 800b3bc:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800b3c0:	f040 8082 	bne.w	800b4c8 <__ssvfiscanf_r+0x190>
 800b3c4:	9343      	str	r3, [sp, #268]	; 0x10c
 800b3c6:	9341      	str	r3, [sp, #260]	; 0x104
 800b3c8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800b3cc:	2b2a      	cmp	r3, #42	; 0x2a
 800b3ce:	d103      	bne.n	800b3d8 <__ssvfiscanf_r+0xa0>
 800b3d0:	2310      	movs	r3, #16
 800b3d2:	9341      	str	r3, [sp, #260]	; 0x104
 800b3d4:	f10a 0502 	add.w	r5, sl, #2
 800b3d8:	46aa      	mov	sl, r5
 800b3da:	f815 1b01 	ldrb.w	r1, [r5], #1
 800b3de:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b3e2:	2a09      	cmp	r2, #9
 800b3e4:	d922      	bls.n	800b42c <__ssvfiscanf_r+0xf4>
 800b3e6:	2203      	movs	r2, #3
 800b3e8:	4879      	ldr	r0, [pc, #484]	; (800b5d0 <__ssvfiscanf_r+0x298>)
 800b3ea:	f7f4 fef9 	bl	80001e0 <memchr>
 800b3ee:	b138      	cbz	r0, 800b400 <__ssvfiscanf_r+0xc8>
 800b3f0:	eba0 0309 	sub.w	r3, r0, r9
 800b3f4:	2001      	movs	r0, #1
 800b3f6:	4098      	lsls	r0, r3
 800b3f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b3fa:	4318      	orrs	r0, r3
 800b3fc:	9041      	str	r0, [sp, #260]	; 0x104
 800b3fe:	46aa      	mov	sl, r5
 800b400:	f89a 3000 	ldrb.w	r3, [sl]
 800b404:	2b67      	cmp	r3, #103	; 0x67
 800b406:	f10a 0501 	add.w	r5, sl, #1
 800b40a:	d82b      	bhi.n	800b464 <__ssvfiscanf_r+0x12c>
 800b40c:	2b65      	cmp	r3, #101	; 0x65
 800b40e:	f080 809f 	bcs.w	800b550 <__ssvfiscanf_r+0x218>
 800b412:	2b47      	cmp	r3, #71	; 0x47
 800b414:	d810      	bhi.n	800b438 <__ssvfiscanf_r+0x100>
 800b416:	2b45      	cmp	r3, #69	; 0x45
 800b418:	f080 809a 	bcs.w	800b550 <__ssvfiscanf_r+0x218>
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d06c      	beq.n	800b4fa <__ssvfiscanf_r+0x1c2>
 800b420:	2b25      	cmp	r3, #37	; 0x25
 800b422:	d051      	beq.n	800b4c8 <__ssvfiscanf_r+0x190>
 800b424:	2303      	movs	r3, #3
 800b426:	9347      	str	r3, [sp, #284]	; 0x11c
 800b428:	9742      	str	r7, [sp, #264]	; 0x108
 800b42a:	e027      	b.n	800b47c <__ssvfiscanf_r+0x144>
 800b42c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b42e:	fb07 1303 	mla	r3, r7, r3, r1
 800b432:	3b30      	subs	r3, #48	; 0x30
 800b434:	9343      	str	r3, [sp, #268]	; 0x10c
 800b436:	e7cf      	b.n	800b3d8 <__ssvfiscanf_r+0xa0>
 800b438:	2b5b      	cmp	r3, #91	; 0x5b
 800b43a:	d06a      	beq.n	800b512 <__ssvfiscanf_r+0x1da>
 800b43c:	d80c      	bhi.n	800b458 <__ssvfiscanf_r+0x120>
 800b43e:	2b58      	cmp	r3, #88	; 0x58
 800b440:	d1f0      	bne.n	800b424 <__ssvfiscanf_r+0xec>
 800b442:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b448:	9241      	str	r2, [sp, #260]	; 0x104
 800b44a:	2210      	movs	r2, #16
 800b44c:	9242      	str	r2, [sp, #264]	; 0x108
 800b44e:	2b6e      	cmp	r3, #110	; 0x6e
 800b450:	bf8c      	ite	hi
 800b452:	2304      	movhi	r3, #4
 800b454:	2303      	movls	r3, #3
 800b456:	e010      	b.n	800b47a <__ssvfiscanf_r+0x142>
 800b458:	2b63      	cmp	r3, #99	; 0x63
 800b45a:	d065      	beq.n	800b528 <__ssvfiscanf_r+0x1f0>
 800b45c:	2b64      	cmp	r3, #100	; 0x64
 800b45e:	d1e1      	bne.n	800b424 <__ssvfiscanf_r+0xec>
 800b460:	9742      	str	r7, [sp, #264]	; 0x108
 800b462:	e7f4      	b.n	800b44e <__ssvfiscanf_r+0x116>
 800b464:	2b70      	cmp	r3, #112	; 0x70
 800b466:	d04b      	beq.n	800b500 <__ssvfiscanf_r+0x1c8>
 800b468:	d826      	bhi.n	800b4b8 <__ssvfiscanf_r+0x180>
 800b46a:	2b6e      	cmp	r3, #110	; 0x6e
 800b46c:	d062      	beq.n	800b534 <__ssvfiscanf_r+0x1fc>
 800b46e:	d84c      	bhi.n	800b50a <__ssvfiscanf_r+0x1d2>
 800b470:	2b69      	cmp	r3, #105	; 0x69
 800b472:	d1d7      	bne.n	800b424 <__ssvfiscanf_r+0xec>
 800b474:	2300      	movs	r3, #0
 800b476:	9342      	str	r3, [sp, #264]	; 0x108
 800b478:	2303      	movs	r3, #3
 800b47a:	9347      	str	r3, [sp, #284]	; 0x11c
 800b47c:	6863      	ldr	r3, [r4, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	dd68      	ble.n	800b554 <__ssvfiscanf_r+0x21c>
 800b482:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b484:	0659      	lsls	r1, r3, #25
 800b486:	d407      	bmi.n	800b498 <__ssvfiscanf_r+0x160>
 800b488:	f000 ffe2 	bl	800c450 <__locale_ctype_ptr>
 800b48c:	6823      	ldr	r3, [r4, #0]
 800b48e:	781a      	ldrb	r2, [r3, #0]
 800b490:	4410      	add	r0, r2
 800b492:	7842      	ldrb	r2, [r0, #1]
 800b494:	0712      	lsls	r2, r2, #28
 800b496:	d464      	bmi.n	800b562 <__ssvfiscanf_r+0x22a>
 800b498:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b49a:	2b02      	cmp	r3, #2
 800b49c:	dc73      	bgt.n	800b586 <__ssvfiscanf_r+0x24e>
 800b49e:	466b      	mov	r3, sp
 800b4a0:	4622      	mov	r2, r4
 800b4a2:	a941      	add	r1, sp, #260	; 0x104
 800b4a4:	4630      	mov	r0, r6
 800b4a6:	f000 fb5f 	bl	800bb68 <_scanf_chars>
 800b4aa:	2801      	cmp	r0, #1
 800b4ac:	f000 8089 	beq.w	800b5c2 <__ssvfiscanf_r+0x28a>
 800b4b0:	2802      	cmp	r0, #2
 800b4b2:	f47f af71 	bne.w	800b398 <__ssvfiscanf_r+0x60>
 800b4b6:	e01d      	b.n	800b4f4 <__ssvfiscanf_r+0x1bc>
 800b4b8:	2b75      	cmp	r3, #117	; 0x75
 800b4ba:	d0d1      	beq.n	800b460 <__ssvfiscanf_r+0x128>
 800b4bc:	2b78      	cmp	r3, #120	; 0x78
 800b4be:	d0c0      	beq.n	800b442 <__ssvfiscanf_r+0x10a>
 800b4c0:	2b73      	cmp	r3, #115	; 0x73
 800b4c2:	d1af      	bne.n	800b424 <__ssvfiscanf_r+0xec>
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	e7d8      	b.n	800b47a <__ssvfiscanf_r+0x142>
 800b4c8:	6863      	ldr	r3, [r4, #4]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	dd0c      	ble.n	800b4e8 <__ssvfiscanf_r+0x1b0>
 800b4ce:	6823      	ldr	r3, [r4, #0]
 800b4d0:	781a      	ldrb	r2, [r3, #0]
 800b4d2:	455a      	cmp	r2, fp
 800b4d4:	d175      	bne.n	800b5c2 <__ssvfiscanf_r+0x28a>
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	6862      	ldr	r2, [r4, #4]
 800b4da:	6023      	str	r3, [r4, #0]
 800b4dc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b4de:	3a01      	subs	r2, #1
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	6062      	str	r2, [r4, #4]
 800b4e4:	9345      	str	r3, [sp, #276]	; 0x114
 800b4e6:	e757      	b.n	800b398 <__ssvfiscanf_r+0x60>
 800b4e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b4ea:	4621      	mov	r1, r4
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	4798      	blx	r3
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	d0ec      	beq.n	800b4ce <__ssvfiscanf_r+0x196>
 800b4f4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	d159      	bne.n	800b5ae <__ssvfiscanf_r+0x276>
 800b4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b4fe:	e05c      	b.n	800b5ba <__ssvfiscanf_r+0x282>
 800b500:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b502:	f042 0220 	orr.w	r2, r2, #32
 800b506:	9241      	str	r2, [sp, #260]	; 0x104
 800b508:	e79b      	b.n	800b442 <__ssvfiscanf_r+0x10a>
 800b50a:	2308      	movs	r3, #8
 800b50c:	9342      	str	r3, [sp, #264]	; 0x108
 800b50e:	2304      	movs	r3, #4
 800b510:	e7b3      	b.n	800b47a <__ssvfiscanf_r+0x142>
 800b512:	4629      	mov	r1, r5
 800b514:	4640      	mov	r0, r8
 800b516:	f000 fca1 	bl	800be5c <__sccl>
 800b51a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b520:	9341      	str	r3, [sp, #260]	; 0x104
 800b522:	4605      	mov	r5, r0
 800b524:	2301      	movs	r3, #1
 800b526:	e7a8      	b.n	800b47a <__ssvfiscanf_r+0x142>
 800b528:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b52a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b52e:	9341      	str	r3, [sp, #260]	; 0x104
 800b530:	2300      	movs	r3, #0
 800b532:	e7a2      	b.n	800b47a <__ssvfiscanf_r+0x142>
 800b534:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b536:	06c3      	lsls	r3, r0, #27
 800b538:	f53f af2e 	bmi.w	800b398 <__ssvfiscanf_r+0x60>
 800b53c:	9b00      	ldr	r3, [sp, #0]
 800b53e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b540:	1d19      	adds	r1, r3, #4
 800b542:	9100      	str	r1, [sp, #0]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	07c0      	lsls	r0, r0, #31
 800b548:	bf4c      	ite	mi
 800b54a:	801a      	strhmi	r2, [r3, #0]
 800b54c:	601a      	strpl	r2, [r3, #0]
 800b54e:	e723      	b.n	800b398 <__ssvfiscanf_r+0x60>
 800b550:	2305      	movs	r3, #5
 800b552:	e792      	b.n	800b47a <__ssvfiscanf_r+0x142>
 800b554:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b556:	4621      	mov	r1, r4
 800b558:	4630      	mov	r0, r6
 800b55a:	4798      	blx	r3
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d090      	beq.n	800b482 <__ssvfiscanf_r+0x14a>
 800b560:	e7c8      	b.n	800b4f4 <__ssvfiscanf_r+0x1bc>
 800b562:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b564:	3201      	adds	r2, #1
 800b566:	9245      	str	r2, [sp, #276]	; 0x114
 800b568:	6862      	ldr	r2, [r4, #4]
 800b56a:	3a01      	subs	r2, #1
 800b56c:	2a00      	cmp	r2, #0
 800b56e:	6062      	str	r2, [r4, #4]
 800b570:	dd02      	ble.n	800b578 <__ssvfiscanf_r+0x240>
 800b572:	3301      	adds	r3, #1
 800b574:	6023      	str	r3, [r4, #0]
 800b576:	e787      	b.n	800b488 <__ssvfiscanf_r+0x150>
 800b578:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b57a:	4621      	mov	r1, r4
 800b57c:	4630      	mov	r0, r6
 800b57e:	4798      	blx	r3
 800b580:	2800      	cmp	r0, #0
 800b582:	d081      	beq.n	800b488 <__ssvfiscanf_r+0x150>
 800b584:	e7b6      	b.n	800b4f4 <__ssvfiscanf_r+0x1bc>
 800b586:	2b04      	cmp	r3, #4
 800b588:	dc06      	bgt.n	800b598 <__ssvfiscanf_r+0x260>
 800b58a:	466b      	mov	r3, sp
 800b58c:	4622      	mov	r2, r4
 800b58e:	a941      	add	r1, sp, #260	; 0x104
 800b590:	4630      	mov	r0, r6
 800b592:	f000 fb4d 	bl	800bc30 <_scanf_i>
 800b596:	e788      	b.n	800b4aa <__ssvfiscanf_r+0x172>
 800b598:	4b0e      	ldr	r3, [pc, #56]	; (800b5d4 <__ssvfiscanf_r+0x29c>)
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	f43f aefc 	beq.w	800b398 <__ssvfiscanf_r+0x60>
 800b5a0:	466b      	mov	r3, sp
 800b5a2:	4622      	mov	r2, r4
 800b5a4:	a941      	add	r1, sp, #260	; 0x104
 800b5a6:	4630      	mov	r0, r6
 800b5a8:	f3af 8000 	nop.w
 800b5ac:	e77d      	b.n	800b4aa <__ssvfiscanf_r+0x172>
 800b5ae:	89a3      	ldrh	r3, [r4, #12]
 800b5b0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b5b4:	bf18      	it	ne
 800b5b6:	f04f 30ff 	movne.w	r0, #4294967295
 800b5ba:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800b5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b5c4:	e7f9      	b.n	800b5ba <__ssvfiscanf_r+0x282>
 800b5c6:	bf00      	nop
 800b5c8:	0800b285 	.word	0x0800b285
 800b5cc:	0800b2ff 	.word	0x0800b2ff
 800b5d0:	0800d2ac 	.word	0x0800d2ac
 800b5d4:	00000000 	.word	0x00000000

0800b5d8 <__sfputc_r>:
 800b5d8:	6893      	ldr	r3, [r2, #8]
 800b5da:	3b01      	subs	r3, #1
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	b410      	push	{r4}
 800b5e0:	6093      	str	r3, [r2, #8]
 800b5e2:	da08      	bge.n	800b5f6 <__sfputc_r+0x1e>
 800b5e4:	6994      	ldr	r4, [r2, #24]
 800b5e6:	42a3      	cmp	r3, r4
 800b5e8:	db01      	blt.n	800b5ee <__sfputc_r+0x16>
 800b5ea:	290a      	cmp	r1, #10
 800b5ec:	d103      	bne.n	800b5f6 <__sfputc_r+0x1e>
 800b5ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5f2:	f000 bdb9 	b.w	800c168 <__swbuf_r>
 800b5f6:	6813      	ldr	r3, [r2, #0]
 800b5f8:	1c58      	adds	r0, r3, #1
 800b5fa:	6010      	str	r0, [r2, #0]
 800b5fc:	7019      	strb	r1, [r3, #0]
 800b5fe:	4608      	mov	r0, r1
 800b600:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b604:	4770      	bx	lr

0800b606 <__sfputs_r>:
 800b606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b608:	4606      	mov	r6, r0
 800b60a:	460f      	mov	r7, r1
 800b60c:	4614      	mov	r4, r2
 800b60e:	18d5      	adds	r5, r2, r3
 800b610:	42ac      	cmp	r4, r5
 800b612:	d101      	bne.n	800b618 <__sfputs_r+0x12>
 800b614:	2000      	movs	r0, #0
 800b616:	e007      	b.n	800b628 <__sfputs_r+0x22>
 800b618:	463a      	mov	r2, r7
 800b61a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b61e:	4630      	mov	r0, r6
 800b620:	f7ff ffda 	bl	800b5d8 <__sfputc_r>
 800b624:	1c43      	adds	r3, r0, #1
 800b626:	d1f3      	bne.n	800b610 <__sfputs_r+0xa>
 800b628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b62c <_vfiprintf_r>:
 800b62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b630:	460c      	mov	r4, r1
 800b632:	b09d      	sub	sp, #116	; 0x74
 800b634:	4617      	mov	r7, r2
 800b636:	461d      	mov	r5, r3
 800b638:	4606      	mov	r6, r0
 800b63a:	b118      	cbz	r0, 800b644 <_vfiprintf_r+0x18>
 800b63c:	6983      	ldr	r3, [r0, #24]
 800b63e:	b90b      	cbnz	r3, 800b644 <_vfiprintf_r+0x18>
 800b640:	f7ff fd2a 	bl	800b098 <__sinit>
 800b644:	4b7c      	ldr	r3, [pc, #496]	; (800b838 <_vfiprintf_r+0x20c>)
 800b646:	429c      	cmp	r4, r3
 800b648:	d158      	bne.n	800b6fc <_vfiprintf_r+0xd0>
 800b64a:	6874      	ldr	r4, [r6, #4]
 800b64c:	89a3      	ldrh	r3, [r4, #12]
 800b64e:	0718      	lsls	r0, r3, #28
 800b650:	d55e      	bpl.n	800b710 <_vfiprintf_r+0xe4>
 800b652:	6923      	ldr	r3, [r4, #16]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d05b      	beq.n	800b710 <_vfiprintf_r+0xe4>
 800b658:	2300      	movs	r3, #0
 800b65a:	9309      	str	r3, [sp, #36]	; 0x24
 800b65c:	2320      	movs	r3, #32
 800b65e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b662:	2330      	movs	r3, #48	; 0x30
 800b664:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b668:	9503      	str	r5, [sp, #12]
 800b66a:	f04f 0b01 	mov.w	fp, #1
 800b66e:	46b8      	mov	r8, r7
 800b670:	4645      	mov	r5, r8
 800b672:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b676:	b10b      	cbz	r3, 800b67c <_vfiprintf_r+0x50>
 800b678:	2b25      	cmp	r3, #37	; 0x25
 800b67a:	d154      	bne.n	800b726 <_vfiprintf_r+0xfa>
 800b67c:	ebb8 0a07 	subs.w	sl, r8, r7
 800b680:	d00b      	beq.n	800b69a <_vfiprintf_r+0x6e>
 800b682:	4653      	mov	r3, sl
 800b684:	463a      	mov	r2, r7
 800b686:	4621      	mov	r1, r4
 800b688:	4630      	mov	r0, r6
 800b68a:	f7ff ffbc 	bl	800b606 <__sfputs_r>
 800b68e:	3001      	adds	r0, #1
 800b690:	f000 80c2 	beq.w	800b818 <_vfiprintf_r+0x1ec>
 800b694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b696:	4453      	add	r3, sl
 800b698:	9309      	str	r3, [sp, #36]	; 0x24
 800b69a:	f898 3000 	ldrb.w	r3, [r8]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	f000 80ba 	beq.w	800b818 <_vfiprintf_r+0x1ec>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6ae:	9304      	str	r3, [sp, #16]
 800b6b0:	9307      	str	r3, [sp, #28]
 800b6b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6b6:	931a      	str	r3, [sp, #104]	; 0x68
 800b6b8:	46a8      	mov	r8, r5
 800b6ba:	2205      	movs	r2, #5
 800b6bc:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b6c0:	485e      	ldr	r0, [pc, #376]	; (800b83c <_vfiprintf_r+0x210>)
 800b6c2:	f7f4 fd8d 	bl	80001e0 <memchr>
 800b6c6:	9b04      	ldr	r3, [sp, #16]
 800b6c8:	bb78      	cbnz	r0, 800b72a <_vfiprintf_r+0xfe>
 800b6ca:	06d9      	lsls	r1, r3, #27
 800b6cc:	bf44      	itt	mi
 800b6ce:	2220      	movmi	r2, #32
 800b6d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b6d4:	071a      	lsls	r2, r3, #28
 800b6d6:	bf44      	itt	mi
 800b6d8:	222b      	movmi	r2, #43	; 0x2b
 800b6da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b6de:	782a      	ldrb	r2, [r5, #0]
 800b6e0:	2a2a      	cmp	r2, #42	; 0x2a
 800b6e2:	d02a      	beq.n	800b73a <_vfiprintf_r+0x10e>
 800b6e4:	9a07      	ldr	r2, [sp, #28]
 800b6e6:	46a8      	mov	r8, r5
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	250a      	movs	r5, #10
 800b6ec:	4641      	mov	r1, r8
 800b6ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6f2:	3b30      	subs	r3, #48	; 0x30
 800b6f4:	2b09      	cmp	r3, #9
 800b6f6:	d969      	bls.n	800b7cc <_vfiprintf_r+0x1a0>
 800b6f8:	b360      	cbz	r0, 800b754 <_vfiprintf_r+0x128>
 800b6fa:	e024      	b.n	800b746 <_vfiprintf_r+0x11a>
 800b6fc:	4b50      	ldr	r3, [pc, #320]	; (800b840 <_vfiprintf_r+0x214>)
 800b6fe:	429c      	cmp	r4, r3
 800b700:	d101      	bne.n	800b706 <_vfiprintf_r+0xda>
 800b702:	68b4      	ldr	r4, [r6, #8]
 800b704:	e7a2      	b.n	800b64c <_vfiprintf_r+0x20>
 800b706:	4b4f      	ldr	r3, [pc, #316]	; (800b844 <_vfiprintf_r+0x218>)
 800b708:	429c      	cmp	r4, r3
 800b70a:	bf08      	it	eq
 800b70c:	68f4      	ldreq	r4, [r6, #12]
 800b70e:	e79d      	b.n	800b64c <_vfiprintf_r+0x20>
 800b710:	4621      	mov	r1, r4
 800b712:	4630      	mov	r0, r6
 800b714:	f000 fd7a 	bl	800c20c <__swsetup_r>
 800b718:	2800      	cmp	r0, #0
 800b71a:	d09d      	beq.n	800b658 <_vfiprintf_r+0x2c>
 800b71c:	f04f 30ff 	mov.w	r0, #4294967295
 800b720:	b01d      	add	sp, #116	; 0x74
 800b722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b726:	46a8      	mov	r8, r5
 800b728:	e7a2      	b.n	800b670 <_vfiprintf_r+0x44>
 800b72a:	4a44      	ldr	r2, [pc, #272]	; (800b83c <_vfiprintf_r+0x210>)
 800b72c:	1a80      	subs	r0, r0, r2
 800b72e:	fa0b f000 	lsl.w	r0, fp, r0
 800b732:	4318      	orrs	r0, r3
 800b734:	9004      	str	r0, [sp, #16]
 800b736:	4645      	mov	r5, r8
 800b738:	e7be      	b.n	800b6b8 <_vfiprintf_r+0x8c>
 800b73a:	9a03      	ldr	r2, [sp, #12]
 800b73c:	1d11      	adds	r1, r2, #4
 800b73e:	6812      	ldr	r2, [r2, #0]
 800b740:	9103      	str	r1, [sp, #12]
 800b742:	2a00      	cmp	r2, #0
 800b744:	db01      	blt.n	800b74a <_vfiprintf_r+0x11e>
 800b746:	9207      	str	r2, [sp, #28]
 800b748:	e004      	b.n	800b754 <_vfiprintf_r+0x128>
 800b74a:	4252      	negs	r2, r2
 800b74c:	f043 0302 	orr.w	r3, r3, #2
 800b750:	9207      	str	r2, [sp, #28]
 800b752:	9304      	str	r3, [sp, #16]
 800b754:	f898 3000 	ldrb.w	r3, [r8]
 800b758:	2b2e      	cmp	r3, #46	; 0x2e
 800b75a:	d10e      	bne.n	800b77a <_vfiprintf_r+0x14e>
 800b75c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b760:	2b2a      	cmp	r3, #42	; 0x2a
 800b762:	d138      	bne.n	800b7d6 <_vfiprintf_r+0x1aa>
 800b764:	9b03      	ldr	r3, [sp, #12]
 800b766:	1d1a      	adds	r2, r3, #4
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	9203      	str	r2, [sp, #12]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	bfb8      	it	lt
 800b770:	f04f 33ff 	movlt.w	r3, #4294967295
 800b774:	f108 0802 	add.w	r8, r8, #2
 800b778:	9305      	str	r3, [sp, #20]
 800b77a:	4d33      	ldr	r5, [pc, #204]	; (800b848 <_vfiprintf_r+0x21c>)
 800b77c:	f898 1000 	ldrb.w	r1, [r8]
 800b780:	2203      	movs	r2, #3
 800b782:	4628      	mov	r0, r5
 800b784:	f7f4 fd2c 	bl	80001e0 <memchr>
 800b788:	b140      	cbz	r0, 800b79c <_vfiprintf_r+0x170>
 800b78a:	2340      	movs	r3, #64	; 0x40
 800b78c:	1b40      	subs	r0, r0, r5
 800b78e:	fa03 f000 	lsl.w	r0, r3, r0
 800b792:	9b04      	ldr	r3, [sp, #16]
 800b794:	4303      	orrs	r3, r0
 800b796:	f108 0801 	add.w	r8, r8, #1
 800b79a:	9304      	str	r3, [sp, #16]
 800b79c:	f898 1000 	ldrb.w	r1, [r8]
 800b7a0:	482a      	ldr	r0, [pc, #168]	; (800b84c <_vfiprintf_r+0x220>)
 800b7a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7a6:	2206      	movs	r2, #6
 800b7a8:	f108 0701 	add.w	r7, r8, #1
 800b7ac:	f7f4 fd18 	bl	80001e0 <memchr>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	d037      	beq.n	800b824 <_vfiprintf_r+0x1f8>
 800b7b4:	4b26      	ldr	r3, [pc, #152]	; (800b850 <_vfiprintf_r+0x224>)
 800b7b6:	bb1b      	cbnz	r3, 800b800 <_vfiprintf_r+0x1d4>
 800b7b8:	9b03      	ldr	r3, [sp, #12]
 800b7ba:	3307      	adds	r3, #7
 800b7bc:	f023 0307 	bic.w	r3, r3, #7
 800b7c0:	3308      	adds	r3, #8
 800b7c2:	9303      	str	r3, [sp, #12]
 800b7c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7c6:	444b      	add	r3, r9
 800b7c8:	9309      	str	r3, [sp, #36]	; 0x24
 800b7ca:	e750      	b.n	800b66e <_vfiprintf_r+0x42>
 800b7cc:	fb05 3202 	mla	r2, r5, r2, r3
 800b7d0:	2001      	movs	r0, #1
 800b7d2:	4688      	mov	r8, r1
 800b7d4:	e78a      	b.n	800b6ec <_vfiprintf_r+0xc0>
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	f108 0801 	add.w	r8, r8, #1
 800b7dc:	9305      	str	r3, [sp, #20]
 800b7de:	4619      	mov	r1, r3
 800b7e0:	250a      	movs	r5, #10
 800b7e2:	4640      	mov	r0, r8
 800b7e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7e8:	3a30      	subs	r2, #48	; 0x30
 800b7ea:	2a09      	cmp	r2, #9
 800b7ec:	d903      	bls.n	800b7f6 <_vfiprintf_r+0x1ca>
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d0c3      	beq.n	800b77a <_vfiprintf_r+0x14e>
 800b7f2:	9105      	str	r1, [sp, #20]
 800b7f4:	e7c1      	b.n	800b77a <_vfiprintf_r+0x14e>
 800b7f6:	fb05 2101 	mla	r1, r5, r1, r2
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	4680      	mov	r8, r0
 800b7fe:	e7f0      	b.n	800b7e2 <_vfiprintf_r+0x1b6>
 800b800:	ab03      	add	r3, sp, #12
 800b802:	9300      	str	r3, [sp, #0]
 800b804:	4622      	mov	r2, r4
 800b806:	4b13      	ldr	r3, [pc, #76]	; (800b854 <_vfiprintf_r+0x228>)
 800b808:	a904      	add	r1, sp, #16
 800b80a:	4630      	mov	r0, r6
 800b80c:	f3af 8000 	nop.w
 800b810:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b814:	4681      	mov	r9, r0
 800b816:	d1d5      	bne.n	800b7c4 <_vfiprintf_r+0x198>
 800b818:	89a3      	ldrh	r3, [r4, #12]
 800b81a:	065b      	lsls	r3, r3, #25
 800b81c:	f53f af7e 	bmi.w	800b71c <_vfiprintf_r+0xf0>
 800b820:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b822:	e77d      	b.n	800b720 <_vfiprintf_r+0xf4>
 800b824:	ab03      	add	r3, sp, #12
 800b826:	9300      	str	r3, [sp, #0]
 800b828:	4622      	mov	r2, r4
 800b82a:	4b0a      	ldr	r3, [pc, #40]	; (800b854 <_vfiprintf_r+0x228>)
 800b82c:	a904      	add	r1, sp, #16
 800b82e:	4630      	mov	r0, r6
 800b830:	f000 f888 	bl	800b944 <_printf_i>
 800b834:	e7ec      	b.n	800b810 <_vfiprintf_r+0x1e4>
 800b836:	bf00      	nop
 800b838:	0800d26c 	.word	0x0800d26c
 800b83c:	0800d2b0 	.word	0x0800d2b0
 800b840:	0800d28c 	.word	0x0800d28c
 800b844:	0800d24c 	.word	0x0800d24c
 800b848:	0800d2ac 	.word	0x0800d2ac
 800b84c:	0800d2b6 	.word	0x0800d2b6
 800b850:	00000000 	.word	0x00000000
 800b854:	0800b607 	.word	0x0800b607

0800b858 <_printf_common>:
 800b858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b85c:	4691      	mov	r9, r2
 800b85e:	461f      	mov	r7, r3
 800b860:	688a      	ldr	r2, [r1, #8]
 800b862:	690b      	ldr	r3, [r1, #16]
 800b864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b868:	4293      	cmp	r3, r2
 800b86a:	bfb8      	it	lt
 800b86c:	4613      	movlt	r3, r2
 800b86e:	f8c9 3000 	str.w	r3, [r9]
 800b872:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b876:	4606      	mov	r6, r0
 800b878:	460c      	mov	r4, r1
 800b87a:	b112      	cbz	r2, 800b882 <_printf_common+0x2a>
 800b87c:	3301      	adds	r3, #1
 800b87e:	f8c9 3000 	str.w	r3, [r9]
 800b882:	6823      	ldr	r3, [r4, #0]
 800b884:	0699      	lsls	r1, r3, #26
 800b886:	bf42      	ittt	mi
 800b888:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b88c:	3302      	addmi	r3, #2
 800b88e:	f8c9 3000 	strmi.w	r3, [r9]
 800b892:	6825      	ldr	r5, [r4, #0]
 800b894:	f015 0506 	ands.w	r5, r5, #6
 800b898:	d107      	bne.n	800b8aa <_printf_common+0x52>
 800b89a:	f104 0a19 	add.w	sl, r4, #25
 800b89e:	68e3      	ldr	r3, [r4, #12]
 800b8a0:	f8d9 2000 	ldr.w	r2, [r9]
 800b8a4:	1a9b      	subs	r3, r3, r2
 800b8a6:	42ab      	cmp	r3, r5
 800b8a8:	dc28      	bgt.n	800b8fc <_printf_common+0xa4>
 800b8aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b8ae:	6822      	ldr	r2, [r4, #0]
 800b8b0:	3300      	adds	r3, #0
 800b8b2:	bf18      	it	ne
 800b8b4:	2301      	movne	r3, #1
 800b8b6:	0692      	lsls	r2, r2, #26
 800b8b8:	d42d      	bmi.n	800b916 <_printf_common+0xbe>
 800b8ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8be:	4639      	mov	r1, r7
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	47c0      	blx	r8
 800b8c4:	3001      	adds	r0, #1
 800b8c6:	d020      	beq.n	800b90a <_printf_common+0xb2>
 800b8c8:	6823      	ldr	r3, [r4, #0]
 800b8ca:	68e5      	ldr	r5, [r4, #12]
 800b8cc:	f8d9 2000 	ldr.w	r2, [r9]
 800b8d0:	f003 0306 	and.w	r3, r3, #6
 800b8d4:	2b04      	cmp	r3, #4
 800b8d6:	bf08      	it	eq
 800b8d8:	1aad      	subeq	r5, r5, r2
 800b8da:	68a3      	ldr	r3, [r4, #8]
 800b8dc:	6922      	ldr	r2, [r4, #16]
 800b8de:	bf0c      	ite	eq
 800b8e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8e4:	2500      	movne	r5, #0
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	bfc4      	itt	gt
 800b8ea:	1a9b      	subgt	r3, r3, r2
 800b8ec:	18ed      	addgt	r5, r5, r3
 800b8ee:	f04f 0900 	mov.w	r9, #0
 800b8f2:	341a      	adds	r4, #26
 800b8f4:	454d      	cmp	r5, r9
 800b8f6:	d11a      	bne.n	800b92e <_printf_common+0xd6>
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	e008      	b.n	800b90e <_printf_common+0xb6>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	4652      	mov	r2, sl
 800b900:	4639      	mov	r1, r7
 800b902:	4630      	mov	r0, r6
 800b904:	47c0      	blx	r8
 800b906:	3001      	adds	r0, #1
 800b908:	d103      	bne.n	800b912 <_printf_common+0xba>
 800b90a:	f04f 30ff 	mov.w	r0, #4294967295
 800b90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b912:	3501      	adds	r5, #1
 800b914:	e7c3      	b.n	800b89e <_printf_common+0x46>
 800b916:	18e1      	adds	r1, r4, r3
 800b918:	1c5a      	adds	r2, r3, #1
 800b91a:	2030      	movs	r0, #48	; 0x30
 800b91c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b920:	4422      	add	r2, r4
 800b922:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b926:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b92a:	3302      	adds	r3, #2
 800b92c:	e7c5      	b.n	800b8ba <_printf_common+0x62>
 800b92e:	2301      	movs	r3, #1
 800b930:	4622      	mov	r2, r4
 800b932:	4639      	mov	r1, r7
 800b934:	4630      	mov	r0, r6
 800b936:	47c0      	blx	r8
 800b938:	3001      	adds	r0, #1
 800b93a:	d0e6      	beq.n	800b90a <_printf_common+0xb2>
 800b93c:	f109 0901 	add.w	r9, r9, #1
 800b940:	e7d8      	b.n	800b8f4 <_printf_common+0x9c>
	...

0800b944 <_printf_i>:
 800b944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b948:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b94c:	460c      	mov	r4, r1
 800b94e:	7e09      	ldrb	r1, [r1, #24]
 800b950:	b085      	sub	sp, #20
 800b952:	296e      	cmp	r1, #110	; 0x6e
 800b954:	4617      	mov	r7, r2
 800b956:	4606      	mov	r6, r0
 800b958:	4698      	mov	r8, r3
 800b95a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b95c:	f000 80b3 	beq.w	800bac6 <_printf_i+0x182>
 800b960:	d822      	bhi.n	800b9a8 <_printf_i+0x64>
 800b962:	2963      	cmp	r1, #99	; 0x63
 800b964:	d036      	beq.n	800b9d4 <_printf_i+0x90>
 800b966:	d80a      	bhi.n	800b97e <_printf_i+0x3a>
 800b968:	2900      	cmp	r1, #0
 800b96a:	f000 80b9 	beq.w	800bae0 <_printf_i+0x19c>
 800b96e:	2958      	cmp	r1, #88	; 0x58
 800b970:	f000 8083 	beq.w	800ba7a <_printf_i+0x136>
 800b974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b978:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b97c:	e032      	b.n	800b9e4 <_printf_i+0xa0>
 800b97e:	2964      	cmp	r1, #100	; 0x64
 800b980:	d001      	beq.n	800b986 <_printf_i+0x42>
 800b982:	2969      	cmp	r1, #105	; 0x69
 800b984:	d1f6      	bne.n	800b974 <_printf_i+0x30>
 800b986:	6820      	ldr	r0, [r4, #0]
 800b988:	6813      	ldr	r3, [r2, #0]
 800b98a:	0605      	lsls	r5, r0, #24
 800b98c:	f103 0104 	add.w	r1, r3, #4
 800b990:	d52a      	bpl.n	800b9e8 <_printf_i+0xa4>
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	6011      	str	r1, [r2, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	da03      	bge.n	800b9a2 <_printf_i+0x5e>
 800b99a:	222d      	movs	r2, #45	; 0x2d
 800b99c:	425b      	negs	r3, r3
 800b99e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b9a2:	486f      	ldr	r0, [pc, #444]	; (800bb60 <_printf_i+0x21c>)
 800b9a4:	220a      	movs	r2, #10
 800b9a6:	e039      	b.n	800ba1c <_printf_i+0xd8>
 800b9a8:	2973      	cmp	r1, #115	; 0x73
 800b9aa:	f000 809d 	beq.w	800bae8 <_printf_i+0x1a4>
 800b9ae:	d808      	bhi.n	800b9c2 <_printf_i+0x7e>
 800b9b0:	296f      	cmp	r1, #111	; 0x6f
 800b9b2:	d020      	beq.n	800b9f6 <_printf_i+0xb2>
 800b9b4:	2970      	cmp	r1, #112	; 0x70
 800b9b6:	d1dd      	bne.n	800b974 <_printf_i+0x30>
 800b9b8:	6823      	ldr	r3, [r4, #0]
 800b9ba:	f043 0320 	orr.w	r3, r3, #32
 800b9be:	6023      	str	r3, [r4, #0]
 800b9c0:	e003      	b.n	800b9ca <_printf_i+0x86>
 800b9c2:	2975      	cmp	r1, #117	; 0x75
 800b9c4:	d017      	beq.n	800b9f6 <_printf_i+0xb2>
 800b9c6:	2978      	cmp	r1, #120	; 0x78
 800b9c8:	d1d4      	bne.n	800b974 <_printf_i+0x30>
 800b9ca:	2378      	movs	r3, #120	; 0x78
 800b9cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b9d0:	4864      	ldr	r0, [pc, #400]	; (800bb64 <_printf_i+0x220>)
 800b9d2:	e055      	b.n	800ba80 <_printf_i+0x13c>
 800b9d4:	6813      	ldr	r3, [r2, #0]
 800b9d6:	1d19      	adds	r1, r3, #4
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	6011      	str	r1, [r2, #0]
 800b9dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e08c      	b.n	800bb02 <_printf_i+0x1be>
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	6011      	str	r1, [r2, #0]
 800b9ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b9f0:	bf18      	it	ne
 800b9f2:	b21b      	sxthne	r3, r3
 800b9f4:	e7cf      	b.n	800b996 <_printf_i+0x52>
 800b9f6:	6813      	ldr	r3, [r2, #0]
 800b9f8:	6825      	ldr	r5, [r4, #0]
 800b9fa:	1d18      	adds	r0, r3, #4
 800b9fc:	6010      	str	r0, [r2, #0]
 800b9fe:	0628      	lsls	r0, r5, #24
 800ba00:	d501      	bpl.n	800ba06 <_printf_i+0xc2>
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	e002      	b.n	800ba0c <_printf_i+0xc8>
 800ba06:	0668      	lsls	r0, r5, #25
 800ba08:	d5fb      	bpl.n	800ba02 <_printf_i+0xbe>
 800ba0a:	881b      	ldrh	r3, [r3, #0]
 800ba0c:	4854      	ldr	r0, [pc, #336]	; (800bb60 <_printf_i+0x21c>)
 800ba0e:	296f      	cmp	r1, #111	; 0x6f
 800ba10:	bf14      	ite	ne
 800ba12:	220a      	movne	r2, #10
 800ba14:	2208      	moveq	r2, #8
 800ba16:	2100      	movs	r1, #0
 800ba18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba1c:	6865      	ldr	r5, [r4, #4]
 800ba1e:	60a5      	str	r5, [r4, #8]
 800ba20:	2d00      	cmp	r5, #0
 800ba22:	f2c0 8095 	blt.w	800bb50 <_printf_i+0x20c>
 800ba26:	6821      	ldr	r1, [r4, #0]
 800ba28:	f021 0104 	bic.w	r1, r1, #4
 800ba2c:	6021      	str	r1, [r4, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d13d      	bne.n	800baae <_printf_i+0x16a>
 800ba32:	2d00      	cmp	r5, #0
 800ba34:	f040 808e 	bne.w	800bb54 <_printf_i+0x210>
 800ba38:	4665      	mov	r5, ip
 800ba3a:	2a08      	cmp	r2, #8
 800ba3c:	d10b      	bne.n	800ba56 <_printf_i+0x112>
 800ba3e:	6823      	ldr	r3, [r4, #0]
 800ba40:	07db      	lsls	r3, r3, #31
 800ba42:	d508      	bpl.n	800ba56 <_printf_i+0x112>
 800ba44:	6923      	ldr	r3, [r4, #16]
 800ba46:	6862      	ldr	r2, [r4, #4]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	bfde      	ittt	le
 800ba4c:	2330      	movle	r3, #48	; 0x30
 800ba4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba52:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ba56:	ebac 0305 	sub.w	r3, ip, r5
 800ba5a:	6123      	str	r3, [r4, #16]
 800ba5c:	f8cd 8000 	str.w	r8, [sp]
 800ba60:	463b      	mov	r3, r7
 800ba62:	aa03      	add	r2, sp, #12
 800ba64:	4621      	mov	r1, r4
 800ba66:	4630      	mov	r0, r6
 800ba68:	f7ff fef6 	bl	800b858 <_printf_common>
 800ba6c:	3001      	adds	r0, #1
 800ba6e:	d14d      	bne.n	800bb0c <_printf_i+0x1c8>
 800ba70:	f04f 30ff 	mov.w	r0, #4294967295
 800ba74:	b005      	add	sp, #20
 800ba76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba7a:	4839      	ldr	r0, [pc, #228]	; (800bb60 <_printf_i+0x21c>)
 800ba7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ba80:	6813      	ldr	r3, [r2, #0]
 800ba82:	6821      	ldr	r1, [r4, #0]
 800ba84:	1d1d      	adds	r5, r3, #4
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	6015      	str	r5, [r2, #0]
 800ba8a:	060a      	lsls	r2, r1, #24
 800ba8c:	d50b      	bpl.n	800baa6 <_printf_i+0x162>
 800ba8e:	07ca      	lsls	r2, r1, #31
 800ba90:	bf44      	itt	mi
 800ba92:	f041 0120 	orrmi.w	r1, r1, #32
 800ba96:	6021      	strmi	r1, [r4, #0]
 800ba98:	b91b      	cbnz	r3, 800baa2 <_printf_i+0x15e>
 800ba9a:	6822      	ldr	r2, [r4, #0]
 800ba9c:	f022 0220 	bic.w	r2, r2, #32
 800baa0:	6022      	str	r2, [r4, #0]
 800baa2:	2210      	movs	r2, #16
 800baa4:	e7b7      	b.n	800ba16 <_printf_i+0xd2>
 800baa6:	064d      	lsls	r5, r1, #25
 800baa8:	bf48      	it	mi
 800baaa:	b29b      	uxthmi	r3, r3
 800baac:	e7ef      	b.n	800ba8e <_printf_i+0x14a>
 800baae:	4665      	mov	r5, ip
 800bab0:	fbb3 f1f2 	udiv	r1, r3, r2
 800bab4:	fb02 3311 	mls	r3, r2, r1, r3
 800bab8:	5cc3      	ldrb	r3, [r0, r3]
 800baba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800babe:	460b      	mov	r3, r1
 800bac0:	2900      	cmp	r1, #0
 800bac2:	d1f5      	bne.n	800bab0 <_printf_i+0x16c>
 800bac4:	e7b9      	b.n	800ba3a <_printf_i+0xf6>
 800bac6:	6813      	ldr	r3, [r2, #0]
 800bac8:	6825      	ldr	r5, [r4, #0]
 800baca:	6961      	ldr	r1, [r4, #20]
 800bacc:	1d18      	adds	r0, r3, #4
 800bace:	6010      	str	r0, [r2, #0]
 800bad0:	0628      	lsls	r0, r5, #24
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	d501      	bpl.n	800bada <_printf_i+0x196>
 800bad6:	6019      	str	r1, [r3, #0]
 800bad8:	e002      	b.n	800bae0 <_printf_i+0x19c>
 800bada:	066a      	lsls	r2, r5, #25
 800badc:	d5fb      	bpl.n	800bad6 <_printf_i+0x192>
 800bade:	8019      	strh	r1, [r3, #0]
 800bae0:	2300      	movs	r3, #0
 800bae2:	6123      	str	r3, [r4, #16]
 800bae4:	4665      	mov	r5, ip
 800bae6:	e7b9      	b.n	800ba5c <_printf_i+0x118>
 800bae8:	6813      	ldr	r3, [r2, #0]
 800baea:	1d19      	adds	r1, r3, #4
 800baec:	6011      	str	r1, [r2, #0]
 800baee:	681d      	ldr	r5, [r3, #0]
 800baf0:	6862      	ldr	r2, [r4, #4]
 800baf2:	2100      	movs	r1, #0
 800baf4:	4628      	mov	r0, r5
 800baf6:	f7f4 fb73 	bl	80001e0 <memchr>
 800bafa:	b108      	cbz	r0, 800bb00 <_printf_i+0x1bc>
 800bafc:	1b40      	subs	r0, r0, r5
 800bafe:	6060      	str	r0, [r4, #4]
 800bb00:	6863      	ldr	r3, [r4, #4]
 800bb02:	6123      	str	r3, [r4, #16]
 800bb04:	2300      	movs	r3, #0
 800bb06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb0a:	e7a7      	b.n	800ba5c <_printf_i+0x118>
 800bb0c:	6923      	ldr	r3, [r4, #16]
 800bb0e:	462a      	mov	r2, r5
 800bb10:	4639      	mov	r1, r7
 800bb12:	4630      	mov	r0, r6
 800bb14:	47c0      	blx	r8
 800bb16:	3001      	adds	r0, #1
 800bb18:	d0aa      	beq.n	800ba70 <_printf_i+0x12c>
 800bb1a:	6823      	ldr	r3, [r4, #0]
 800bb1c:	079b      	lsls	r3, r3, #30
 800bb1e:	d413      	bmi.n	800bb48 <_printf_i+0x204>
 800bb20:	68e0      	ldr	r0, [r4, #12]
 800bb22:	9b03      	ldr	r3, [sp, #12]
 800bb24:	4298      	cmp	r0, r3
 800bb26:	bfb8      	it	lt
 800bb28:	4618      	movlt	r0, r3
 800bb2a:	e7a3      	b.n	800ba74 <_printf_i+0x130>
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	464a      	mov	r2, r9
 800bb30:	4639      	mov	r1, r7
 800bb32:	4630      	mov	r0, r6
 800bb34:	47c0      	blx	r8
 800bb36:	3001      	adds	r0, #1
 800bb38:	d09a      	beq.n	800ba70 <_printf_i+0x12c>
 800bb3a:	3501      	adds	r5, #1
 800bb3c:	68e3      	ldr	r3, [r4, #12]
 800bb3e:	9a03      	ldr	r2, [sp, #12]
 800bb40:	1a9b      	subs	r3, r3, r2
 800bb42:	42ab      	cmp	r3, r5
 800bb44:	dcf2      	bgt.n	800bb2c <_printf_i+0x1e8>
 800bb46:	e7eb      	b.n	800bb20 <_printf_i+0x1dc>
 800bb48:	2500      	movs	r5, #0
 800bb4a:	f104 0919 	add.w	r9, r4, #25
 800bb4e:	e7f5      	b.n	800bb3c <_printf_i+0x1f8>
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d1ac      	bne.n	800baae <_printf_i+0x16a>
 800bb54:	7803      	ldrb	r3, [r0, #0]
 800bb56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb5e:	e76c      	b.n	800ba3a <_printf_i+0xf6>
 800bb60:	0800d2bd 	.word	0x0800d2bd
 800bb64:	0800d2ce 	.word	0x0800d2ce

0800bb68 <_scanf_chars>:
 800bb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb6c:	4615      	mov	r5, r2
 800bb6e:	688a      	ldr	r2, [r1, #8]
 800bb70:	4680      	mov	r8, r0
 800bb72:	460c      	mov	r4, r1
 800bb74:	b932      	cbnz	r2, 800bb84 <_scanf_chars+0x1c>
 800bb76:	698a      	ldr	r2, [r1, #24]
 800bb78:	2a00      	cmp	r2, #0
 800bb7a:	bf14      	ite	ne
 800bb7c:	f04f 32ff 	movne.w	r2, #4294967295
 800bb80:	2201      	moveq	r2, #1
 800bb82:	608a      	str	r2, [r1, #8]
 800bb84:	6822      	ldr	r2, [r4, #0]
 800bb86:	06d1      	lsls	r1, r2, #27
 800bb88:	bf5f      	itttt	pl
 800bb8a:	681a      	ldrpl	r2, [r3, #0]
 800bb8c:	1d11      	addpl	r1, r2, #4
 800bb8e:	6019      	strpl	r1, [r3, #0]
 800bb90:	6817      	ldrpl	r7, [r2, #0]
 800bb92:	2600      	movs	r6, #0
 800bb94:	69a3      	ldr	r3, [r4, #24]
 800bb96:	b1db      	cbz	r3, 800bbd0 <_scanf_chars+0x68>
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d107      	bne.n	800bbac <_scanf_chars+0x44>
 800bb9c:	682b      	ldr	r3, [r5, #0]
 800bb9e:	6962      	ldr	r2, [r4, #20]
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	5cd3      	ldrb	r3, [r2, r3]
 800bba4:	b9a3      	cbnz	r3, 800bbd0 <_scanf_chars+0x68>
 800bba6:	2e00      	cmp	r6, #0
 800bba8:	d132      	bne.n	800bc10 <_scanf_chars+0xa8>
 800bbaa:	e006      	b.n	800bbba <_scanf_chars+0x52>
 800bbac:	2b02      	cmp	r3, #2
 800bbae:	d007      	beq.n	800bbc0 <_scanf_chars+0x58>
 800bbb0:	2e00      	cmp	r6, #0
 800bbb2:	d12d      	bne.n	800bc10 <_scanf_chars+0xa8>
 800bbb4:	69a3      	ldr	r3, [r4, #24]
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d12a      	bne.n	800bc10 <_scanf_chars+0xa8>
 800bbba:	2001      	movs	r0, #1
 800bbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbc0:	f000 fc46 	bl	800c450 <__locale_ctype_ptr>
 800bbc4:	682b      	ldr	r3, [r5, #0]
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	4418      	add	r0, r3
 800bbca:	7843      	ldrb	r3, [r0, #1]
 800bbcc:	071b      	lsls	r3, r3, #28
 800bbce:	d4ef      	bmi.n	800bbb0 <_scanf_chars+0x48>
 800bbd0:	6823      	ldr	r3, [r4, #0]
 800bbd2:	06da      	lsls	r2, r3, #27
 800bbd4:	bf5e      	ittt	pl
 800bbd6:	682b      	ldrpl	r3, [r5, #0]
 800bbd8:	781b      	ldrbpl	r3, [r3, #0]
 800bbda:	703b      	strbpl	r3, [r7, #0]
 800bbdc:	682a      	ldr	r2, [r5, #0]
 800bbde:	686b      	ldr	r3, [r5, #4]
 800bbe0:	f102 0201 	add.w	r2, r2, #1
 800bbe4:	602a      	str	r2, [r5, #0]
 800bbe6:	68a2      	ldr	r2, [r4, #8]
 800bbe8:	f103 33ff 	add.w	r3, r3, #4294967295
 800bbec:	f102 32ff 	add.w	r2, r2, #4294967295
 800bbf0:	606b      	str	r3, [r5, #4]
 800bbf2:	f106 0601 	add.w	r6, r6, #1
 800bbf6:	bf58      	it	pl
 800bbf8:	3701      	addpl	r7, #1
 800bbfa:	60a2      	str	r2, [r4, #8]
 800bbfc:	b142      	cbz	r2, 800bc10 <_scanf_chars+0xa8>
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	dcc8      	bgt.n	800bb94 <_scanf_chars+0x2c>
 800bc02:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bc06:	4629      	mov	r1, r5
 800bc08:	4640      	mov	r0, r8
 800bc0a:	4798      	blx	r3
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	d0c1      	beq.n	800bb94 <_scanf_chars+0x2c>
 800bc10:	6823      	ldr	r3, [r4, #0]
 800bc12:	f013 0310 	ands.w	r3, r3, #16
 800bc16:	d105      	bne.n	800bc24 <_scanf_chars+0xbc>
 800bc18:	68e2      	ldr	r2, [r4, #12]
 800bc1a:	3201      	adds	r2, #1
 800bc1c:	60e2      	str	r2, [r4, #12]
 800bc1e:	69a2      	ldr	r2, [r4, #24]
 800bc20:	b102      	cbz	r2, 800bc24 <_scanf_chars+0xbc>
 800bc22:	703b      	strb	r3, [r7, #0]
 800bc24:	6923      	ldr	r3, [r4, #16]
 800bc26:	441e      	add	r6, r3
 800bc28:	6126      	str	r6, [r4, #16]
 800bc2a:	2000      	movs	r0, #0
 800bc2c:	e7c6      	b.n	800bbbc <_scanf_chars+0x54>
	...

0800bc30 <_scanf_i>:
 800bc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc34:	469a      	mov	sl, r3
 800bc36:	4b74      	ldr	r3, [pc, #464]	; (800be08 <_scanf_i+0x1d8>)
 800bc38:	460c      	mov	r4, r1
 800bc3a:	4683      	mov	fp, r0
 800bc3c:	4616      	mov	r6, r2
 800bc3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bc42:	b087      	sub	sp, #28
 800bc44:	ab03      	add	r3, sp, #12
 800bc46:	68a7      	ldr	r7, [r4, #8]
 800bc48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bc4c:	4b6f      	ldr	r3, [pc, #444]	; (800be0c <_scanf_i+0x1dc>)
 800bc4e:	69a1      	ldr	r1, [r4, #24]
 800bc50:	4a6f      	ldr	r2, [pc, #444]	; (800be10 <_scanf_i+0x1e0>)
 800bc52:	2903      	cmp	r1, #3
 800bc54:	bf08      	it	eq
 800bc56:	461a      	moveq	r2, r3
 800bc58:	1e7b      	subs	r3, r7, #1
 800bc5a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800bc5e:	bf84      	itt	hi
 800bc60:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bc64:	60a3      	strhi	r3, [r4, #8]
 800bc66:	6823      	ldr	r3, [r4, #0]
 800bc68:	9200      	str	r2, [sp, #0]
 800bc6a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bc6e:	bf88      	it	hi
 800bc70:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bc74:	f104 091c 	add.w	r9, r4, #28
 800bc78:	6023      	str	r3, [r4, #0]
 800bc7a:	bf8c      	ite	hi
 800bc7c:	197f      	addhi	r7, r7, r5
 800bc7e:	2700      	movls	r7, #0
 800bc80:	464b      	mov	r3, r9
 800bc82:	f04f 0800 	mov.w	r8, #0
 800bc86:	9301      	str	r3, [sp, #4]
 800bc88:	6831      	ldr	r1, [r6, #0]
 800bc8a:	ab03      	add	r3, sp, #12
 800bc8c:	2202      	movs	r2, #2
 800bc8e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bc92:	7809      	ldrb	r1, [r1, #0]
 800bc94:	f7f4 faa4 	bl	80001e0 <memchr>
 800bc98:	9b01      	ldr	r3, [sp, #4]
 800bc9a:	b330      	cbz	r0, 800bcea <_scanf_i+0xba>
 800bc9c:	f1b8 0f01 	cmp.w	r8, #1
 800bca0:	d15a      	bne.n	800bd58 <_scanf_i+0x128>
 800bca2:	6862      	ldr	r2, [r4, #4]
 800bca4:	b92a      	cbnz	r2, 800bcb2 <_scanf_i+0x82>
 800bca6:	6822      	ldr	r2, [r4, #0]
 800bca8:	2108      	movs	r1, #8
 800bcaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcae:	6061      	str	r1, [r4, #4]
 800bcb0:	6022      	str	r2, [r4, #0]
 800bcb2:	6822      	ldr	r2, [r4, #0]
 800bcb4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bcb8:	6022      	str	r2, [r4, #0]
 800bcba:	68a2      	ldr	r2, [r4, #8]
 800bcbc:	1e51      	subs	r1, r2, #1
 800bcbe:	60a1      	str	r1, [r4, #8]
 800bcc0:	b19a      	cbz	r2, 800bcea <_scanf_i+0xba>
 800bcc2:	6832      	ldr	r2, [r6, #0]
 800bcc4:	1c51      	adds	r1, r2, #1
 800bcc6:	6031      	str	r1, [r6, #0]
 800bcc8:	7812      	ldrb	r2, [r2, #0]
 800bcca:	701a      	strb	r2, [r3, #0]
 800bccc:	1c5d      	adds	r5, r3, #1
 800bcce:	6873      	ldr	r3, [r6, #4]
 800bcd0:	3b01      	subs	r3, #1
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	6073      	str	r3, [r6, #4]
 800bcd6:	dc07      	bgt.n	800bce8 <_scanf_i+0xb8>
 800bcd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bcdc:	4631      	mov	r1, r6
 800bcde:	4658      	mov	r0, fp
 800bce0:	4798      	blx	r3
 800bce2:	2800      	cmp	r0, #0
 800bce4:	f040 8086 	bne.w	800bdf4 <_scanf_i+0x1c4>
 800bce8:	462b      	mov	r3, r5
 800bcea:	f108 0801 	add.w	r8, r8, #1
 800bcee:	f1b8 0f03 	cmp.w	r8, #3
 800bcf2:	d1c8      	bne.n	800bc86 <_scanf_i+0x56>
 800bcf4:	6862      	ldr	r2, [r4, #4]
 800bcf6:	b90a      	cbnz	r2, 800bcfc <_scanf_i+0xcc>
 800bcf8:	220a      	movs	r2, #10
 800bcfa:	6062      	str	r2, [r4, #4]
 800bcfc:	6862      	ldr	r2, [r4, #4]
 800bcfe:	4945      	ldr	r1, [pc, #276]	; (800be14 <_scanf_i+0x1e4>)
 800bd00:	6960      	ldr	r0, [r4, #20]
 800bd02:	9301      	str	r3, [sp, #4]
 800bd04:	1a89      	subs	r1, r1, r2
 800bd06:	f000 f8a9 	bl	800be5c <__sccl>
 800bd0a:	9b01      	ldr	r3, [sp, #4]
 800bd0c:	f04f 0800 	mov.w	r8, #0
 800bd10:	461d      	mov	r5, r3
 800bd12:	68a3      	ldr	r3, [r4, #8]
 800bd14:	6822      	ldr	r2, [r4, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d03a      	beq.n	800bd90 <_scanf_i+0x160>
 800bd1a:	6831      	ldr	r1, [r6, #0]
 800bd1c:	6960      	ldr	r0, [r4, #20]
 800bd1e:	f891 c000 	ldrb.w	ip, [r1]
 800bd22:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bd26:	2800      	cmp	r0, #0
 800bd28:	d032      	beq.n	800bd90 <_scanf_i+0x160>
 800bd2a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800bd2e:	d121      	bne.n	800bd74 <_scanf_i+0x144>
 800bd30:	0510      	lsls	r0, r2, #20
 800bd32:	d51f      	bpl.n	800bd74 <_scanf_i+0x144>
 800bd34:	f108 0801 	add.w	r8, r8, #1
 800bd38:	b117      	cbz	r7, 800bd40 <_scanf_i+0x110>
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	3f01      	subs	r7, #1
 800bd3e:	60a3      	str	r3, [r4, #8]
 800bd40:	6873      	ldr	r3, [r6, #4]
 800bd42:	3b01      	subs	r3, #1
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	6073      	str	r3, [r6, #4]
 800bd48:	dd1b      	ble.n	800bd82 <_scanf_i+0x152>
 800bd4a:	6833      	ldr	r3, [r6, #0]
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	6033      	str	r3, [r6, #0]
 800bd50:	68a3      	ldr	r3, [r4, #8]
 800bd52:	3b01      	subs	r3, #1
 800bd54:	60a3      	str	r3, [r4, #8]
 800bd56:	e7dc      	b.n	800bd12 <_scanf_i+0xe2>
 800bd58:	f1b8 0f02 	cmp.w	r8, #2
 800bd5c:	d1ad      	bne.n	800bcba <_scanf_i+0x8a>
 800bd5e:	6822      	ldr	r2, [r4, #0]
 800bd60:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800bd64:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bd68:	d1bf      	bne.n	800bcea <_scanf_i+0xba>
 800bd6a:	2110      	movs	r1, #16
 800bd6c:	6061      	str	r1, [r4, #4]
 800bd6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd72:	e7a1      	b.n	800bcb8 <_scanf_i+0x88>
 800bd74:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800bd78:	6022      	str	r2, [r4, #0]
 800bd7a:	780b      	ldrb	r3, [r1, #0]
 800bd7c:	702b      	strb	r3, [r5, #0]
 800bd7e:	3501      	adds	r5, #1
 800bd80:	e7de      	b.n	800bd40 <_scanf_i+0x110>
 800bd82:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bd86:	4631      	mov	r1, r6
 800bd88:	4658      	mov	r0, fp
 800bd8a:	4798      	blx	r3
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	d0df      	beq.n	800bd50 <_scanf_i+0x120>
 800bd90:	6823      	ldr	r3, [r4, #0]
 800bd92:	05d9      	lsls	r1, r3, #23
 800bd94:	d50c      	bpl.n	800bdb0 <_scanf_i+0x180>
 800bd96:	454d      	cmp	r5, r9
 800bd98:	d908      	bls.n	800bdac <_scanf_i+0x17c>
 800bd9a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bd9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bda2:	4632      	mov	r2, r6
 800bda4:	4658      	mov	r0, fp
 800bda6:	4798      	blx	r3
 800bda8:	1e6f      	subs	r7, r5, #1
 800bdaa:	463d      	mov	r5, r7
 800bdac:	454d      	cmp	r5, r9
 800bdae:	d029      	beq.n	800be04 <_scanf_i+0x1d4>
 800bdb0:	6822      	ldr	r2, [r4, #0]
 800bdb2:	f012 0210 	ands.w	r2, r2, #16
 800bdb6:	d113      	bne.n	800bde0 <_scanf_i+0x1b0>
 800bdb8:	702a      	strb	r2, [r5, #0]
 800bdba:	6863      	ldr	r3, [r4, #4]
 800bdbc:	9e00      	ldr	r6, [sp, #0]
 800bdbe:	4649      	mov	r1, r9
 800bdc0:	4658      	mov	r0, fp
 800bdc2:	47b0      	blx	r6
 800bdc4:	f8da 3000 	ldr.w	r3, [sl]
 800bdc8:	6821      	ldr	r1, [r4, #0]
 800bdca:	1d1a      	adds	r2, r3, #4
 800bdcc:	f8ca 2000 	str.w	r2, [sl]
 800bdd0:	f011 0f20 	tst.w	r1, #32
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	d010      	beq.n	800bdfa <_scanf_i+0x1ca>
 800bdd8:	6018      	str	r0, [r3, #0]
 800bdda:	68e3      	ldr	r3, [r4, #12]
 800bddc:	3301      	adds	r3, #1
 800bdde:	60e3      	str	r3, [r4, #12]
 800bde0:	eba5 0509 	sub.w	r5, r5, r9
 800bde4:	44a8      	add	r8, r5
 800bde6:	6925      	ldr	r5, [r4, #16]
 800bde8:	4445      	add	r5, r8
 800bdea:	6125      	str	r5, [r4, #16]
 800bdec:	2000      	movs	r0, #0
 800bdee:	b007      	add	sp, #28
 800bdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdf4:	f04f 0800 	mov.w	r8, #0
 800bdf8:	e7ca      	b.n	800bd90 <_scanf_i+0x160>
 800bdfa:	07ca      	lsls	r2, r1, #31
 800bdfc:	bf4c      	ite	mi
 800bdfe:	8018      	strhmi	r0, [r3, #0]
 800be00:	6018      	strpl	r0, [r3, #0]
 800be02:	e7ea      	b.n	800bdda <_scanf_i+0x1aa>
 800be04:	2001      	movs	r0, #1
 800be06:	e7f2      	b.n	800bdee <_scanf_i+0x1be>
 800be08:	0800d1f4 	.word	0x0800d1f4
 800be0c:	0800bfb9 	.word	0x0800bfb9
 800be10:	0800c0d1 	.word	0x0800c0d1
 800be14:	0800d2ef 	.word	0x0800d2ef

0800be18 <_read_r>:
 800be18:	b538      	push	{r3, r4, r5, lr}
 800be1a:	4c07      	ldr	r4, [pc, #28]	; (800be38 <_read_r+0x20>)
 800be1c:	4605      	mov	r5, r0
 800be1e:	4608      	mov	r0, r1
 800be20:	4611      	mov	r1, r2
 800be22:	2200      	movs	r2, #0
 800be24:	6022      	str	r2, [r4, #0]
 800be26:	461a      	mov	r2, r3
 800be28:	f7f5 ff24 	bl	8001c74 <_read>
 800be2c:	1c43      	adds	r3, r0, #1
 800be2e:	d102      	bne.n	800be36 <_read_r+0x1e>
 800be30:	6823      	ldr	r3, [r4, #0]
 800be32:	b103      	cbz	r3, 800be36 <_read_r+0x1e>
 800be34:	602b      	str	r3, [r5, #0]
 800be36:	bd38      	pop	{r3, r4, r5, pc}
 800be38:	20000884 	.word	0x20000884

0800be3c <_sbrk_r>:
 800be3c:	b538      	push	{r3, r4, r5, lr}
 800be3e:	4c06      	ldr	r4, [pc, #24]	; (800be58 <_sbrk_r+0x1c>)
 800be40:	2300      	movs	r3, #0
 800be42:	4605      	mov	r5, r0
 800be44:	4608      	mov	r0, r1
 800be46:	6023      	str	r3, [r4, #0]
 800be48:	f7f5 ff66 	bl	8001d18 <_sbrk>
 800be4c:	1c43      	adds	r3, r0, #1
 800be4e:	d102      	bne.n	800be56 <_sbrk_r+0x1a>
 800be50:	6823      	ldr	r3, [r4, #0]
 800be52:	b103      	cbz	r3, 800be56 <_sbrk_r+0x1a>
 800be54:	602b      	str	r3, [r5, #0]
 800be56:	bd38      	pop	{r3, r4, r5, pc}
 800be58:	20000884 	.word	0x20000884

0800be5c <__sccl>:
 800be5c:	b570      	push	{r4, r5, r6, lr}
 800be5e:	780b      	ldrb	r3, [r1, #0]
 800be60:	2b5e      	cmp	r3, #94	; 0x5e
 800be62:	bf13      	iteet	ne
 800be64:	1c4a      	addne	r2, r1, #1
 800be66:	1c8a      	addeq	r2, r1, #2
 800be68:	784b      	ldrbeq	r3, [r1, #1]
 800be6a:	2100      	movne	r1, #0
 800be6c:	bf08      	it	eq
 800be6e:	2101      	moveq	r1, #1
 800be70:	1e44      	subs	r4, r0, #1
 800be72:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800be76:	f804 1f01 	strb.w	r1, [r4, #1]!
 800be7a:	42ac      	cmp	r4, r5
 800be7c:	d1fb      	bne.n	800be76 <__sccl+0x1a>
 800be7e:	b913      	cbnz	r3, 800be86 <__sccl+0x2a>
 800be80:	3a01      	subs	r2, #1
 800be82:	4610      	mov	r0, r2
 800be84:	bd70      	pop	{r4, r5, r6, pc}
 800be86:	f081 0401 	eor.w	r4, r1, #1
 800be8a:	54c4      	strb	r4, [r0, r3]
 800be8c:	1c51      	adds	r1, r2, #1
 800be8e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800be92:	2d2d      	cmp	r5, #45	; 0x2d
 800be94:	f101 36ff 	add.w	r6, r1, #4294967295
 800be98:	460a      	mov	r2, r1
 800be9a:	d006      	beq.n	800beaa <__sccl+0x4e>
 800be9c:	2d5d      	cmp	r5, #93	; 0x5d
 800be9e:	d0f0      	beq.n	800be82 <__sccl+0x26>
 800bea0:	b90d      	cbnz	r5, 800bea6 <__sccl+0x4a>
 800bea2:	4632      	mov	r2, r6
 800bea4:	e7ed      	b.n	800be82 <__sccl+0x26>
 800bea6:	462b      	mov	r3, r5
 800bea8:	e7ef      	b.n	800be8a <__sccl+0x2e>
 800beaa:	780e      	ldrb	r6, [r1, #0]
 800beac:	2e5d      	cmp	r6, #93	; 0x5d
 800beae:	d0fa      	beq.n	800bea6 <__sccl+0x4a>
 800beb0:	42b3      	cmp	r3, r6
 800beb2:	dcf8      	bgt.n	800bea6 <__sccl+0x4a>
 800beb4:	3301      	adds	r3, #1
 800beb6:	429e      	cmp	r6, r3
 800beb8:	54c4      	strb	r4, [r0, r3]
 800beba:	dcfb      	bgt.n	800beb4 <__sccl+0x58>
 800bebc:	3102      	adds	r1, #2
 800bebe:	e7e6      	b.n	800be8e <__sccl+0x32>

0800bec0 <_strtol_l.isra.0>:
 800bec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bec4:	4680      	mov	r8, r0
 800bec6:	4689      	mov	r9, r1
 800bec8:	4692      	mov	sl, r2
 800beca:	461e      	mov	r6, r3
 800becc:	460f      	mov	r7, r1
 800bece:	463d      	mov	r5, r7
 800bed0:	9808      	ldr	r0, [sp, #32]
 800bed2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bed6:	f000 fab7 	bl	800c448 <__locale_ctype_ptr_l>
 800beda:	4420      	add	r0, r4
 800bedc:	7843      	ldrb	r3, [r0, #1]
 800bede:	f013 0308 	ands.w	r3, r3, #8
 800bee2:	d132      	bne.n	800bf4a <_strtol_l.isra.0+0x8a>
 800bee4:	2c2d      	cmp	r4, #45	; 0x2d
 800bee6:	d132      	bne.n	800bf4e <_strtol_l.isra.0+0x8e>
 800bee8:	787c      	ldrb	r4, [r7, #1]
 800beea:	1cbd      	adds	r5, r7, #2
 800beec:	2201      	movs	r2, #1
 800beee:	2e00      	cmp	r6, #0
 800bef0:	d05d      	beq.n	800bfae <_strtol_l.isra.0+0xee>
 800bef2:	2e10      	cmp	r6, #16
 800bef4:	d109      	bne.n	800bf0a <_strtol_l.isra.0+0x4a>
 800bef6:	2c30      	cmp	r4, #48	; 0x30
 800bef8:	d107      	bne.n	800bf0a <_strtol_l.isra.0+0x4a>
 800befa:	782b      	ldrb	r3, [r5, #0]
 800befc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bf00:	2b58      	cmp	r3, #88	; 0x58
 800bf02:	d14f      	bne.n	800bfa4 <_strtol_l.isra.0+0xe4>
 800bf04:	786c      	ldrb	r4, [r5, #1]
 800bf06:	2610      	movs	r6, #16
 800bf08:	3502      	adds	r5, #2
 800bf0a:	2a00      	cmp	r2, #0
 800bf0c:	bf14      	ite	ne
 800bf0e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800bf12:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800bf16:	2700      	movs	r7, #0
 800bf18:	fbb1 fcf6 	udiv	ip, r1, r6
 800bf1c:	4638      	mov	r0, r7
 800bf1e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800bf22:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800bf26:	2b09      	cmp	r3, #9
 800bf28:	d817      	bhi.n	800bf5a <_strtol_l.isra.0+0x9a>
 800bf2a:	461c      	mov	r4, r3
 800bf2c:	42a6      	cmp	r6, r4
 800bf2e:	dd23      	ble.n	800bf78 <_strtol_l.isra.0+0xb8>
 800bf30:	1c7b      	adds	r3, r7, #1
 800bf32:	d007      	beq.n	800bf44 <_strtol_l.isra.0+0x84>
 800bf34:	4584      	cmp	ip, r0
 800bf36:	d31c      	bcc.n	800bf72 <_strtol_l.isra.0+0xb2>
 800bf38:	d101      	bne.n	800bf3e <_strtol_l.isra.0+0x7e>
 800bf3a:	45a6      	cmp	lr, r4
 800bf3c:	db19      	blt.n	800bf72 <_strtol_l.isra.0+0xb2>
 800bf3e:	fb00 4006 	mla	r0, r0, r6, r4
 800bf42:	2701      	movs	r7, #1
 800bf44:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf48:	e7eb      	b.n	800bf22 <_strtol_l.isra.0+0x62>
 800bf4a:	462f      	mov	r7, r5
 800bf4c:	e7bf      	b.n	800bece <_strtol_l.isra.0+0xe>
 800bf4e:	2c2b      	cmp	r4, #43	; 0x2b
 800bf50:	bf04      	itt	eq
 800bf52:	1cbd      	addeq	r5, r7, #2
 800bf54:	787c      	ldrbeq	r4, [r7, #1]
 800bf56:	461a      	mov	r2, r3
 800bf58:	e7c9      	b.n	800beee <_strtol_l.isra.0+0x2e>
 800bf5a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800bf5e:	2b19      	cmp	r3, #25
 800bf60:	d801      	bhi.n	800bf66 <_strtol_l.isra.0+0xa6>
 800bf62:	3c37      	subs	r4, #55	; 0x37
 800bf64:	e7e2      	b.n	800bf2c <_strtol_l.isra.0+0x6c>
 800bf66:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800bf6a:	2b19      	cmp	r3, #25
 800bf6c:	d804      	bhi.n	800bf78 <_strtol_l.isra.0+0xb8>
 800bf6e:	3c57      	subs	r4, #87	; 0x57
 800bf70:	e7dc      	b.n	800bf2c <_strtol_l.isra.0+0x6c>
 800bf72:	f04f 37ff 	mov.w	r7, #4294967295
 800bf76:	e7e5      	b.n	800bf44 <_strtol_l.isra.0+0x84>
 800bf78:	1c7b      	adds	r3, r7, #1
 800bf7a:	d108      	bne.n	800bf8e <_strtol_l.isra.0+0xce>
 800bf7c:	2322      	movs	r3, #34	; 0x22
 800bf7e:	f8c8 3000 	str.w	r3, [r8]
 800bf82:	4608      	mov	r0, r1
 800bf84:	f1ba 0f00 	cmp.w	sl, #0
 800bf88:	d107      	bne.n	800bf9a <_strtol_l.isra.0+0xda>
 800bf8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf8e:	b102      	cbz	r2, 800bf92 <_strtol_l.isra.0+0xd2>
 800bf90:	4240      	negs	r0, r0
 800bf92:	f1ba 0f00 	cmp.w	sl, #0
 800bf96:	d0f8      	beq.n	800bf8a <_strtol_l.isra.0+0xca>
 800bf98:	b10f      	cbz	r7, 800bf9e <_strtol_l.isra.0+0xde>
 800bf9a:	f105 39ff 	add.w	r9, r5, #4294967295
 800bf9e:	f8ca 9000 	str.w	r9, [sl]
 800bfa2:	e7f2      	b.n	800bf8a <_strtol_l.isra.0+0xca>
 800bfa4:	2430      	movs	r4, #48	; 0x30
 800bfa6:	2e00      	cmp	r6, #0
 800bfa8:	d1af      	bne.n	800bf0a <_strtol_l.isra.0+0x4a>
 800bfaa:	2608      	movs	r6, #8
 800bfac:	e7ad      	b.n	800bf0a <_strtol_l.isra.0+0x4a>
 800bfae:	2c30      	cmp	r4, #48	; 0x30
 800bfb0:	d0a3      	beq.n	800befa <_strtol_l.isra.0+0x3a>
 800bfb2:	260a      	movs	r6, #10
 800bfb4:	e7a9      	b.n	800bf0a <_strtol_l.isra.0+0x4a>
	...

0800bfb8 <_strtol_r>:
 800bfb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfba:	4c06      	ldr	r4, [pc, #24]	; (800bfd4 <_strtol_r+0x1c>)
 800bfbc:	4d06      	ldr	r5, [pc, #24]	; (800bfd8 <_strtol_r+0x20>)
 800bfbe:	6824      	ldr	r4, [r4, #0]
 800bfc0:	6a24      	ldr	r4, [r4, #32]
 800bfc2:	2c00      	cmp	r4, #0
 800bfc4:	bf08      	it	eq
 800bfc6:	462c      	moveq	r4, r5
 800bfc8:	9400      	str	r4, [sp, #0]
 800bfca:	f7ff ff79 	bl	800bec0 <_strtol_l.isra.0>
 800bfce:	b003      	add	sp, #12
 800bfd0:	bd30      	pop	{r4, r5, pc}
 800bfd2:	bf00      	nop
 800bfd4:	200002d4 	.word	0x200002d4
 800bfd8:	20000338 	.word	0x20000338

0800bfdc <_strtoul_l.isra.0>:
 800bfdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfe0:	4680      	mov	r8, r0
 800bfe2:	4689      	mov	r9, r1
 800bfe4:	4692      	mov	sl, r2
 800bfe6:	461e      	mov	r6, r3
 800bfe8:	460f      	mov	r7, r1
 800bfea:	463d      	mov	r5, r7
 800bfec:	9808      	ldr	r0, [sp, #32]
 800bfee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bff2:	f000 fa29 	bl	800c448 <__locale_ctype_ptr_l>
 800bff6:	4420      	add	r0, r4
 800bff8:	7843      	ldrb	r3, [r0, #1]
 800bffa:	f013 0308 	ands.w	r3, r3, #8
 800bffe:	d130      	bne.n	800c062 <_strtoul_l.isra.0+0x86>
 800c000:	2c2d      	cmp	r4, #45	; 0x2d
 800c002:	d130      	bne.n	800c066 <_strtoul_l.isra.0+0x8a>
 800c004:	787c      	ldrb	r4, [r7, #1]
 800c006:	1cbd      	adds	r5, r7, #2
 800c008:	2101      	movs	r1, #1
 800c00a:	2e00      	cmp	r6, #0
 800c00c:	d05c      	beq.n	800c0c8 <_strtoul_l.isra.0+0xec>
 800c00e:	2e10      	cmp	r6, #16
 800c010:	d109      	bne.n	800c026 <_strtoul_l.isra.0+0x4a>
 800c012:	2c30      	cmp	r4, #48	; 0x30
 800c014:	d107      	bne.n	800c026 <_strtoul_l.isra.0+0x4a>
 800c016:	782b      	ldrb	r3, [r5, #0]
 800c018:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c01c:	2b58      	cmp	r3, #88	; 0x58
 800c01e:	d14e      	bne.n	800c0be <_strtoul_l.isra.0+0xe2>
 800c020:	786c      	ldrb	r4, [r5, #1]
 800c022:	2610      	movs	r6, #16
 800c024:	3502      	adds	r5, #2
 800c026:	f04f 32ff 	mov.w	r2, #4294967295
 800c02a:	2300      	movs	r3, #0
 800c02c:	fbb2 f2f6 	udiv	r2, r2, r6
 800c030:	fb06 fc02 	mul.w	ip, r6, r2
 800c034:	ea6f 0c0c 	mvn.w	ip, ip
 800c038:	4618      	mov	r0, r3
 800c03a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c03e:	2f09      	cmp	r7, #9
 800c040:	d817      	bhi.n	800c072 <_strtoul_l.isra.0+0x96>
 800c042:	463c      	mov	r4, r7
 800c044:	42a6      	cmp	r6, r4
 800c046:	dd23      	ble.n	800c090 <_strtoul_l.isra.0+0xb4>
 800c048:	2b00      	cmp	r3, #0
 800c04a:	db1e      	blt.n	800c08a <_strtoul_l.isra.0+0xae>
 800c04c:	4282      	cmp	r2, r0
 800c04e:	d31c      	bcc.n	800c08a <_strtoul_l.isra.0+0xae>
 800c050:	d101      	bne.n	800c056 <_strtoul_l.isra.0+0x7a>
 800c052:	45a4      	cmp	ip, r4
 800c054:	db19      	blt.n	800c08a <_strtoul_l.isra.0+0xae>
 800c056:	fb00 4006 	mla	r0, r0, r6, r4
 800c05a:	2301      	movs	r3, #1
 800c05c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c060:	e7eb      	b.n	800c03a <_strtoul_l.isra.0+0x5e>
 800c062:	462f      	mov	r7, r5
 800c064:	e7c1      	b.n	800bfea <_strtoul_l.isra.0+0xe>
 800c066:	2c2b      	cmp	r4, #43	; 0x2b
 800c068:	bf04      	itt	eq
 800c06a:	1cbd      	addeq	r5, r7, #2
 800c06c:	787c      	ldrbeq	r4, [r7, #1]
 800c06e:	4619      	mov	r1, r3
 800c070:	e7cb      	b.n	800c00a <_strtoul_l.isra.0+0x2e>
 800c072:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c076:	2f19      	cmp	r7, #25
 800c078:	d801      	bhi.n	800c07e <_strtoul_l.isra.0+0xa2>
 800c07a:	3c37      	subs	r4, #55	; 0x37
 800c07c:	e7e2      	b.n	800c044 <_strtoul_l.isra.0+0x68>
 800c07e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c082:	2f19      	cmp	r7, #25
 800c084:	d804      	bhi.n	800c090 <_strtoul_l.isra.0+0xb4>
 800c086:	3c57      	subs	r4, #87	; 0x57
 800c088:	e7dc      	b.n	800c044 <_strtoul_l.isra.0+0x68>
 800c08a:	f04f 33ff 	mov.w	r3, #4294967295
 800c08e:	e7e5      	b.n	800c05c <_strtoul_l.isra.0+0x80>
 800c090:	2b00      	cmp	r3, #0
 800c092:	da09      	bge.n	800c0a8 <_strtoul_l.isra.0+0xcc>
 800c094:	2322      	movs	r3, #34	; 0x22
 800c096:	f8c8 3000 	str.w	r3, [r8]
 800c09a:	f04f 30ff 	mov.w	r0, #4294967295
 800c09e:	f1ba 0f00 	cmp.w	sl, #0
 800c0a2:	d107      	bne.n	800c0b4 <_strtoul_l.isra.0+0xd8>
 800c0a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0a8:	b101      	cbz	r1, 800c0ac <_strtoul_l.isra.0+0xd0>
 800c0aa:	4240      	negs	r0, r0
 800c0ac:	f1ba 0f00 	cmp.w	sl, #0
 800c0b0:	d0f8      	beq.n	800c0a4 <_strtoul_l.isra.0+0xc8>
 800c0b2:	b10b      	cbz	r3, 800c0b8 <_strtoul_l.isra.0+0xdc>
 800c0b4:	f105 39ff 	add.w	r9, r5, #4294967295
 800c0b8:	f8ca 9000 	str.w	r9, [sl]
 800c0bc:	e7f2      	b.n	800c0a4 <_strtoul_l.isra.0+0xc8>
 800c0be:	2430      	movs	r4, #48	; 0x30
 800c0c0:	2e00      	cmp	r6, #0
 800c0c2:	d1b0      	bne.n	800c026 <_strtoul_l.isra.0+0x4a>
 800c0c4:	2608      	movs	r6, #8
 800c0c6:	e7ae      	b.n	800c026 <_strtoul_l.isra.0+0x4a>
 800c0c8:	2c30      	cmp	r4, #48	; 0x30
 800c0ca:	d0a4      	beq.n	800c016 <_strtoul_l.isra.0+0x3a>
 800c0cc:	260a      	movs	r6, #10
 800c0ce:	e7aa      	b.n	800c026 <_strtoul_l.isra.0+0x4a>

0800c0d0 <_strtoul_r>:
 800c0d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0d2:	4c06      	ldr	r4, [pc, #24]	; (800c0ec <_strtoul_r+0x1c>)
 800c0d4:	4d06      	ldr	r5, [pc, #24]	; (800c0f0 <_strtoul_r+0x20>)
 800c0d6:	6824      	ldr	r4, [r4, #0]
 800c0d8:	6a24      	ldr	r4, [r4, #32]
 800c0da:	2c00      	cmp	r4, #0
 800c0dc:	bf08      	it	eq
 800c0de:	462c      	moveq	r4, r5
 800c0e0:	9400      	str	r4, [sp, #0]
 800c0e2:	f7ff ff7b 	bl	800bfdc <_strtoul_l.isra.0>
 800c0e6:	b003      	add	sp, #12
 800c0e8:	bd30      	pop	{r4, r5, pc}
 800c0ea:	bf00      	nop
 800c0ec:	200002d4 	.word	0x200002d4
 800c0f0:	20000338 	.word	0x20000338

0800c0f4 <__submore>:
 800c0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f8:	460c      	mov	r4, r1
 800c0fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c0fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c100:	4299      	cmp	r1, r3
 800c102:	d11d      	bne.n	800c140 <__submore+0x4c>
 800c104:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c108:	f7ff f862 	bl	800b1d0 <_malloc_r>
 800c10c:	b918      	cbnz	r0, 800c116 <__submore+0x22>
 800c10e:	f04f 30ff 	mov.w	r0, #4294967295
 800c112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c11a:	63a3      	str	r3, [r4, #56]	; 0x38
 800c11c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c120:	6360      	str	r0, [r4, #52]	; 0x34
 800c122:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c126:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c12a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c12e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c132:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c136:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c13a:	6020      	str	r0, [r4, #0]
 800c13c:	2000      	movs	r0, #0
 800c13e:	e7e8      	b.n	800c112 <__submore+0x1e>
 800c140:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c142:	0077      	lsls	r7, r6, #1
 800c144:	463a      	mov	r2, r7
 800c146:	f000 fa57 	bl	800c5f8 <_realloc_r>
 800c14a:	4605      	mov	r5, r0
 800c14c:	2800      	cmp	r0, #0
 800c14e:	d0de      	beq.n	800c10e <__submore+0x1a>
 800c150:	eb00 0806 	add.w	r8, r0, r6
 800c154:	4601      	mov	r1, r0
 800c156:	4632      	mov	r2, r6
 800c158:	4640      	mov	r0, r8
 800c15a:	f7fe fe83 	bl	800ae64 <memcpy>
 800c15e:	f8c4 8000 	str.w	r8, [r4]
 800c162:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c166:	e7e9      	b.n	800c13c <__submore+0x48>

0800c168 <__swbuf_r>:
 800c168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c16a:	460e      	mov	r6, r1
 800c16c:	4614      	mov	r4, r2
 800c16e:	4605      	mov	r5, r0
 800c170:	b118      	cbz	r0, 800c17a <__swbuf_r+0x12>
 800c172:	6983      	ldr	r3, [r0, #24]
 800c174:	b90b      	cbnz	r3, 800c17a <__swbuf_r+0x12>
 800c176:	f7fe ff8f 	bl	800b098 <__sinit>
 800c17a:	4b21      	ldr	r3, [pc, #132]	; (800c200 <__swbuf_r+0x98>)
 800c17c:	429c      	cmp	r4, r3
 800c17e:	d12a      	bne.n	800c1d6 <__swbuf_r+0x6e>
 800c180:	686c      	ldr	r4, [r5, #4]
 800c182:	69a3      	ldr	r3, [r4, #24]
 800c184:	60a3      	str	r3, [r4, #8]
 800c186:	89a3      	ldrh	r3, [r4, #12]
 800c188:	071a      	lsls	r2, r3, #28
 800c18a:	d52e      	bpl.n	800c1ea <__swbuf_r+0x82>
 800c18c:	6923      	ldr	r3, [r4, #16]
 800c18e:	b363      	cbz	r3, 800c1ea <__swbuf_r+0x82>
 800c190:	6923      	ldr	r3, [r4, #16]
 800c192:	6820      	ldr	r0, [r4, #0]
 800c194:	1ac0      	subs	r0, r0, r3
 800c196:	6963      	ldr	r3, [r4, #20]
 800c198:	b2f6      	uxtb	r6, r6
 800c19a:	4283      	cmp	r3, r0
 800c19c:	4637      	mov	r7, r6
 800c19e:	dc04      	bgt.n	800c1aa <__swbuf_r+0x42>
 800c1a0:	4621      	mov	r1, r4
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	f000 f926 	bl	800c3f4 <_fflush_r>
 800c1a8:	bb28      	cbnz	r0, 800c1f6 <__swbuf_r+0x8e>
 800c1aa:	68a3      	ldr	r3, [r4, #8]
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	60a3      	str	r3, [r4, #8]
 800c1b0:	6823      	ldr	r3, [r4, #0]
 800c1b2:	1c5a      	adds	r2, r3, #1
 800c1b4:	6022      	str	r2, [r4, #0]
 800c1b6:	701e      	strb	r6, [r3, #0]
 800c1b8:	6963      	ldr	r3, [r4, #20]
 800c1ba:	3001      	adds	r0, #1
 800c1bc:	4283      	cmp	r3, r0
 800c1be:	d004      	beq.n	800c1ca <__swbuf_r+0x62>
 800c1c0:	89a3      	ldrh	r3, [r4, #12]
 800c1c2:	07db      	lsls	r3, r3, #31
 800c1c4:	d519      	bpl.n	800c1fa <__swbuf_r+0x92>
 800c1c6:	2e0a      	cmp	r6, #10
 800c1c8:	d117      	bne.n	800c1fa <__swbuf_r+0x92>
 800c1ca:	4621      	mov	r1, r4
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	f000 f911 	bl	800c3f4 <_fflush_r>
 800c1d2:	b190      	cbz	r0, 800c1fa <__swbuf_r+0x92>
 800c1d4:	e00f      	b.n	800c1f6 <__swbuf_r+0x8e>
 800c1d6:	4b0b      	ldr	r3, [pc, #44]	; (800c204 <__swbuf_r+0x9c>)
 800c1d8:	429c      	cmp	r4, r3
 800c1da:	d101      	bne.n	800c1e0 <__swbuf_r+0x78>
 800c1dc:	68ac      	ldr	r4, [r5, #8]
 800c1de:	e7d0      	b.n	800c182 <__swbuf_r+0x1a>
 800c1e0:	4b09      	ldr	r3, [pc, #36]	; (800c208 <__swbuf_r+0xa0>)
 800c1e2:	429c      	cmp	r4, r3
 800c1e4:	bf08      	it	eq
 800c1e6:	68ec      	ldreq	r4, [r5, #12]
 800c1e8:	e7cb      	b.n	800c182 <__swbuf_r+0x1a>
 800c1ea:	4621      	mov	r1, r4
 800c1ec:	4628      	mov	r0, r5
 800c1ee:	f000 f80d 	bl	800c20c <__swsetup_r>
 800c1f2:	2800      	cmp	r0, #0
 800c1f4:	d0cc      	beq.n	800c190 <__swbuf_r+0x28>
 800c1f6:	f04f 37ff 	mov.w	r7, #4294967295
 800c1fa:	4638      	mov	r0, r7
 800c1fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1fe:	bf00      	nop
 800c200:	0800d26c 	.word	0x0800d26c
 800c204:	0800d28c 	.word	0x0800d28c
 800c208:	0800d24c 	.word	0x0800d24c

0800c20c <__swsetup_r>:
 800c20c:	4b32      	ldr	r3, [pc, #200]	; (800c2d8 <__swsetup_r+0xcc>)
 800c20e:	b570      	push	{r4, r5, r6, lr}
 800c210:	681d      	ldr	r5, [r3, #0]
 800c212:	4606      	mov	r6, r0
 800c214:	460c      	mov	r4, r1
 800c216:	b125      	cbz	r5, 800c222 <__swsetup_r+0x16>
 800c218:	69ab      	ldr	r3, [r5, #24]
 800c21a:	b913      	cbnz	r3, 800c222 <__swsetup_r+0x16>
 800c21c:	4628      	mov	r0, r5
 800c21e:	f7fe ff3b 	bl	800b098 <__sinit>
 800c222:	4b2e      	ldr	r3, [pc, #184]	; (800c2dc <__swsetup_r+0xd0>)
 800c224:	429c      	cmp	r4, r3
 800c226:	d10f      	bne.n	800c248 <__swsetup_r+0x3c>
 800c228:	686c      	ldr	r4, [r5, #4]
 800c22a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c22e:	b29a      	uxth	r2, r3
 800c230:	0715      	lsls	r5, r2, #28
 800c232:	d42c      	bmi.n	800c28e <__swsetup_r+0x82>
 800c234:	06d0      	lsls	r0, r2, #27
 800c236:	d411      	bmi.n	800c25c <__swsetup_r+0x50>
 800c238:	2209      	movs	r2, #9
 800c23a:	6032      	str	r2, [r6, #0]
 800c23c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c240:	81a3      	strh	r3, [r4, #12]
 800c242:	f04f 30ff 	mov.w	r0, #4294967295
 800c246:	e03e      	b.n	800c2c6 <__swsetup_r+0xba>
 800c248:	4b25      	ldr	r3, [pc, #148]	; (800c2e0 <__swsetup_r+0xd4>)
 800c24a:	429c      	cmp	r4, r3
 800c24c:	d101      	bne.n	800c252 <__swsetup_r+0x46>
 800c24e:	68ac      	ldr	r4, [r5, #8]
 800c250:	e7eb      	b.n	800c22a <__swsetup_r+0x1e>
 800c252:	4b24      	ldr	r3, [pc, #144]	; (800c2e4 <__swsetup_r+0xd8>)
 800c254:	429c      	cmp	r4, r3
 800c256:	bf08      	it	eq
 800c258:	68ec      	ldreq	r4, [r5, #12]
 800c25a:	e7e6      	b.n	800c22a <__swsetup_r+0x1e>
 800c25c:	0751      	lsls	r1, r2, #29
 800c25e:	d512      	bpl.n	800c286 <__swsetup_r+0x7a>
 800c260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c262:	b141      	cbz	r1, 800c276 <__swsetup_r+0x6a>
 800c264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c268:	4299      	cmp	r1, r3
 800c26a:	d002      	beq.n	800c272 <__swsetup_r+0x66>
 800c26c:	4630      	mov	r0, r6
 800c26e:	f000 f975 	bl	800c55c <_free_r>
 800c272:	2300      	movs	r3, #0
 800c274:	6363      	str	r3, [r4, #52]	; 0x34
 800c276:	89a3      	ldrh	r3, [r4, #12]
 800c278:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c27c:	81a3      	strh	r3, [r4, #12]
 800c27e:	2300      	movs	r3, #0
 800c280:	6063      	str	r3, [r4, #4]
 800c282:	6923      	ldr	r3, [r4, #16]
 800c284:	6023      	str	r3, [r4, #0]
 800c286:	89a3      	ldrh	r3, [r4, #12]
 800c288:	f043 0308 	orr.w	r3, r3, #8
 800c28c:	81a3      	strh	r3, [r4, #12]
 800c28e:	6923      	ldr	r3, [r4, #16]
 800c290:	b94b      	cbnz	r3, 800c2a6 <__swsetup_r+0x9a>
 800c292:	89a3      	ldrh	r3, [r4, #12]
 800c294:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c29c:	d003      	beq.n	800c2a6 <__swsetup_r+0x9a>
 800c29e:	4621      	mov	r1, r4
 800c2a0:	4630      	mov	r0, r6
 800c2a2:	f000 f907 	bl	800c4b4 <__smakebuf_r>
 800c2a6:	89a2      	ldrh	r2, [r4, #12]
 800c2a8:	f012 0301 	ands.w	r3, r2, #1
 800c2ac:	d00c      	beq.n	800c2c8 <__swsetup_r+0xbc>
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	60a3      	str	r3, [r4, #8]
 800c2b2:	6963      	ldr	r3, [r4, #20]
 800c2b4:	425b      	negs	r3, r3
 800c2b6:	61a3      	str	r3, [r4, #24]
 800c2b8:	6923      	ldr	r3, [r4, #16]
 800c2ba:	b953      	cbnz	r3, 800c2d2 <__swsetup_r+0xc6>
 800c2bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c2c4:	d1ba      	bne.n	800c23c <__swsetup_r+0x30>
 800c2c6:	bd70      	pop	{r4, r5, r6, pc}
 800c2c8:	0792      	lsls	r2, r2, #30
 800c2ca:	bf58      	it	pl
 800c2cc:	6963      	ldrpl	r3, [r4, #20]
 800c2ce:	60a3      	str	r3, [r4, #8]
 800c2d0:	e7f2      	b.n	800c2b8 <__swsetup_r+0xac>
 800c2d2:	2000      	movs	r0, #0
 800c2d4:	e7f7      	b.n	800c2c6 <__swsetup_r+0xba>
 800c2d6:	bf00      	nop
 800c2d8:	200002d4 	.word	0x200002d4
 800c2dc:	0800d26c 	.word	0x0800d26c
 800c2e0:	0800d28c 	.word	0x0800d28c
 800c2e4:	0800d24c 	.word	0x0800d24c

0800c2e8 <__sflush_r>:
 800c2e8:	898a      	ldrh	r2, [r1, #12]
 800c2ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ee:	4605      	mov	r5, r0
 800c2f0:	0710      	lsls	r0, r2, #28
 800c2f2:	460c      	mov	r4, r1
 800c2f4:	d458      	bmi.n	800c3a8 <__sflush_r+0xc0>
 800c2f6:	684b      	ldr	r3, [r1, #4]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	dc05      	bgt.n	800c308 <__sflush_r+0x20>
 800c2fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	dc02      	bgt.n	800c308 <__sflush_r+0x20>
 800c302:	2000      	movs	r0, #0
 800c304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c308:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c30a:	2e00      	cmp	r6, #0
 800c30c:	d0f9      	beq.n	800c302 <__sflush_r+0x1a>
 800c30e:	2300      	movs	r3, #0
 800c310:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c314:	682f      	ldr	r7, [r5, #0]
 800c316:	6a21      	ldr	r1, [r4, #32]
 800c318:	602b      	str	r3, [r5, #0]
 800c31a:	d032      	beq.n	800c382 <__sflush_r+0x9a>
 800c31c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c31e:	89a3      	ldrh	r3, [r4, #12]
 800c320:	075a      	lsls	r2, r3, #29
 800c322:	d505      	bpl.n	800c330 <__sflush_r+0x48>
 800c324:	6863      	ldr	r3, [r4, #4]
 800c326:	1ac0      	subs	r0, r0, r3
 800c328:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c32a:	b10b      	cbz	r3, 800c330 <__sflush_r+0x48>
 800c32c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c32e:	1ac0      	subs	r0, r0, r3
 800c330:	2300      	movs	r3, #0
 800c332:	4602      	mov	r2, r0
 800c334:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c336:	6a21      	ldr	r1, [r4, #32]
 800c338:	4628      	mov	r0, r5
 800c33a:	47b0      	blx	r6
 800c33c:	1c43      	adds	r3, r0, #1
 800c33e:	89a3      	ldrh	r3, [r4, #12]
 800c340:	d106      	bne.n	800c350 <__sflush_r+0x68>
 800c342:	6829      	ldr	r1, [r5, #0]
 800c344:	291d      	cmp	r1, #29
 800c346:	d848      	bhi.n	800c3da <__sflush_r+0xf2>
 800c348:	4a29      	ldr	r2, [pc, #164]	; (800c3f0 <__sflush_r+0x108>)
 800c34a:	40ca      	lsrs	r2, r1
 800c34c:	07d6      	lsls	r6, r2, #31
 800c34e:	d544      	bpl.n	800c3da <__sflush_r+0xf2>
 800c350:	2200      	movs	r2, #0
 800c352:	6062      	str	r2, [r4, #4]
 800c354:	04d9      	lsls	r1, r3, #19
 800c356:	6922      	ldr	r2, [r4, #16]
 800c358:	6022      	str	r2, [r4, #0]
 800c35a:	d504      	bpl.n	800c366 <__sflush_r+0x7e>
 800c35c:	1c42      	adds	r2, r0, #1
 800c35e:	d101      	bne.n	800c364 <__sflush_r+0x7c>
 800c360:	682b      	ldr	r3, [r5, #0]
 800c362:	b903      	cbnz	r3, 800c366 <__sflush_r+0x7e>
 800c364:	6560      	str	r0, [r4, #84]	; 0x54
 800c366:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c368:	602f      	str	r7, [r5, #0]
 800c36a:	2900      	cmp	r1, #0
 800c36c:	d0c9      	beq.n	800c302 <__sflush_r+0x1a>
 800c36e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c372:	4299      	cmp	r1, r3
 800c374:	d002      	beq.n	800c37c <__sflush_r+0x94>
 800c376:	4628      	mov	r0, r5
 800c378:	f000 f8f0 	bl	800c55c <_free_r>
 800c37c:	2000      	movs	r0, #0
 800c37e:	6360      	str	r0, [r4, #52]	; 0x34
 800c380:	e7c0      	b.n	800c304 <__sflush_r+0x1c>
 800c382:	2301      	movs	r3, #1
 800c384:	4628      	mov	r0, r5
 800c386:	47b0      	blx	r6
 800c388:	1c41      	adds	r1, r0, #1
 800c38a:	d1c8      	bne.n	800c31e <__sflush_r+0x36>
 800c38c:	682b      	ldr	r3, [r5, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d0c5      	beq.n	800c31e <__sflush_r+0x36>
 800c392:	2b1d      	cmp	r3, #29
 800c394:	d001      	beq.n	800c39a <__sflush_r+0xb2>
 800c396:	2b16      	cmp	r3, #22
 800c398:	d101      	bne.n	800c39e <__sflush_r+0xb6>
 800c39a:	602f      	str	r7, [r5, #0]
 800c39c:	e7b1      	b.n	800c302 <__sflush_r+0x1a>
 800c39e:	89a3      	ldrh	r3, [r4, #12]
 800c3a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3a4:	81a3      	strh	r3, [r4, #12]
 800c3a6:	e7ad      	b.n	800c304 <__sflush_r+0x1c>
 800c3a8:	690f      	ldr	r7, [r1, #16]
 800c3aa:	2f00      	cmp	r7, #0
 800c3ac:	d0a9      	beq.n	800c302 <__sflush_r+0x1a>
 800c3ae:	0793      	lsls	r3, r2, #30
 800c3b0:	680e      	ldr	r6, [r1, #0]
 800c3b2:	bf08      	it	eq
 800c3b4:	694b      	ldreq	r3, [r1, #20]
 800c3b6:	600f      	str	r7, [r1, #0]
 800c3b8:	bf18      	it	ne
 800c3ba:	2300      	movne	r3, #0
 800c3bc:	eba6 0807 	sub.w	r8, r6, r7
 800c3c0:	608b      	str	r3, [r1, #8]
 800c3c2:	f1b8 0f00 	cmp.w	r8, #0
 800c3c6:	dd9c      	ble.n	800c302 <__sflush_r+0x1a>
 800c3c8:	4643      	mov	r3, r8
 800c3ca:	463a      	mov	r2, r7
 800c3cc:	6a21      	ldr	r1, [r4, #32]
 800c3ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	47b0      	blx	r6
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	dc06      	bgt.n	800c3e6 <__sflush_r+0xfe>
 800c3d8:	89a3      	ldrh	r3, [r4, #12]
 800c3da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3de:	81a3      	strh	r3, [r4, #12]
 800c3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e4:	e78e      	b.n	800c304 <__sflush_r+0x1c>
 800c3e6:	4407      	add	r7, r0
 800c3e8:	eba8 0800 	sub.w	r8, r8, r0
 800c3ec:	e7e9      	b.n	800c3c2 <__sflush_r+0xda>
 800c3ee:	bf00      	nop
 800c3f0:	20400001 	.word	0x20400001

0800c3f4 <_fflush_r>:
 800c3f4:	b538      	push	{r3, r4, r5, lr}
 800c3f6:	690b      	ldr	r3, [r1, #16]
 800c3f8:	4605      	mov	r5, r0
 800c3fa:	460c      	mov	r4, r1
 800c3fc:	b1db      	cbz	r3, 800c436 <_fflush_r+0x42>
 800c3fe:	b118      	cbz	r0, 800c408 <_fflush_r+0x14>
 800c400:	6983      	ldr	r3, [r0, #24]
 800c402:	b90b      	cbnz	r3, 800c408 <_fflush_r+0x14>
 800c404:	f7fe fe48 	bl	800b098 <__sinit>
 800c408:	4b0c      	ldr	r3, [pc, #48]	; (800c43c <_fflush_r+0x48>)
 800c40a:	429c      	cmp	r4, r3
 800c40c:	d109      	bne.n	800c422 <_fflush_r+0x2e>
 800c40e:	686c      	ldr	r4, [r5, #4]
 800c410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c414:	b17b      	cbz	r3, 800c436 <_fflush_r+0x42>
 800c416:	4621      	mov	r1, r4
 800c418:	4628      	mov	r0, r5
 800c41a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c41e:	f7ff bf63 	b.w	800c2e8 <__sflush_r>
 800c422:	4b07      	ldr	r3, [pc, #28]	; (800c440 <_fflush_r+0x4c>)
 800c424:	429c      	cmp	r4, r3
 800c426:	d101      	bne.n	800c42c <_fflush_r+0x38>
 800c428:	68ac      	ldr	r4, [r5, #8]
 800c42a:	e7f1      	b.n	800c410 <_fflush_r+0x1c>
 800c42c:	4b05      	ldr	r3, [pc, #20]	; (800c444 <_fflush_r+0x50>)
 800c42e:	429c      	cmp	r4, r3
 800c430:	bf08      	it	eq
 800c432:	68ec      	ldreq	r4, [r5, #12]
 800c434:	e7ec      	b.n	800c410 <_fflush_r+0x1c>
 800c436:	2000      	movs	r0, #0
 800c438:	bd38      	pop	{r3, r4, r5, pc}
 800c43a:	bf00      	nop
 800c43c:	0800d26c 	.word	0x0800d26c
 800c440:	0800d28c 	.word	0x0800d28c
 800c444:	0800d24c 	.word	0x0800d24c

0800c448 <__locale_ctype_ptr_l>:
 800c448:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c44c:	4770      	bx	lr
	...

0800c450 <__locale_ctype_ptr>:
 800c450:	4b04      	ldr	r3, [pc, #16]	; (800c464 <__locale_ctype_ptr+0x14>)
 800c452:	4a05      	ldr	r2, [pc, #20]	; (800c468 <__locale_ctype_ptr+0x18>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	6a1b      	ldr	r3, [r3, #32]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	bf08      	it	eq
 800c45c:	4613      	moveq	r3, r2
 800c45e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800c462:	4770      	bx	lr
 800c464:	200002d4 	.word	0x200002d4
 800c468:	20000338 	.word	0x20000338

0800c46c <__swhatbuf_r>:
 800c46c:	b570      	push	{r4, r5, r6, lr}
 800c46e:	460e      	mov	r6, r1
 800c470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c474:	2900      	cmp	r1, #0
 800c476:	b096      	sub	sp, #88	; 0x58
 800c478:	4614      	mov	r4, r2
 800c47a:	461d      	mov	r5, r3
 800c47c:	da07      	bge.n	800c48e <__swhatbuf_r+0x22>
 800c47e:	2300      	movs	r3, #0
 800c480:	602b      	str	r3, [r5, #0]
 800c482:	89b3      	ldrh	r3, [r6, #12]
 800c484:	061a      	lsls	r2, r3, #24
 800c486:	d410      	bmi.n	800c4aa <__swhatbuf_r+0x3e>
 800c488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c48c:	e00e      	b.n	800c4ac <__swhatbuf_r+0x40>
 800c48e:	466a      	mov	r2, sp
 800c490:	f000 f8e6 	bl	800c660 <_fstat_r>
 800c494:	2800      	cmp	r0, #0
 800c496:	dbf2      	blt.n	800c47e <__swhatbuf_r+0x12>
 800c498:	9a01      	ldr	r2, [sp, #4]
 800c49a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c49e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c4a2:	425a      	negs	r2, r3
 800c4a4:	415a      	adcs	r2, r3
 800c4a6:	602a      	str	r2, [r5, #0]
 800c4a8:	e7ee      	b.n	800c488 <__swhatbuf_r+0x1c>
 800c4aa:	2340      	movs	r3, #64	; 0x40
 800c4ac:	2000      	movs	r0, #0
 800c4ae:	6023      	str	r3, [r4, #0]
 800c4b0:	b016      	add	sp, #88	; 0x58
 800c4b2:	bd70      	pop	{r4, r5, r6, pc}

0800c4b4 <__smakebuf_r>:
 800c4b4:	898b      	ldrh	r3, [r1, #12]
 800c4b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4b8:	079d      	lsls	r5, r3, #30
 800c4ba:	4606      	mov	r6, r0
 800c4bc:	460c      	mov	r4, r1
 800c4be:	d507      	bpl.n	800c4d0 <__smakebuf_r+0x1c>
 800c4c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4c4:	6023      	str	r3, [r4, #0]
 800c4c6:	6123      	str	r3, [r4, #16]
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	6163      	str	r3, [r4, #20]
 800c4cc:	b002      	add	sp, #8
 800c4ce:	bd70      	pop	{r4, r5, r6, pc}
 800c4d0:	ab01      	add	r3, sp, #4
 800c4d2:	466a      	mov	r2, sp
 800c4d4:	f7ff ffca 	bl	800c46c <__swhatbuf_r>
 800c4d8:	9900      	ldr	r1, [sp, #0]
 800c4da:	4605      	mov	r5, r0
 800c4dc:	4630      	mov	r0, r6
 800c4de:	f7fe fe77 	bl	800b1d0 <_malloc_r>
 800c4e2:	b948      	cbnz	r0, 800c4f8 <__smakebuf_r+0x44>
 800c4e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4e8:	059a      	lsls	r2, r3, #22
 800c4ea:	d4ef      	bmi.n	800c4cc <__smakebuf_r+0x18>
 800c4ec:	f023 0303 	bic.w	r3, r3, #3
 800c4f0:	f043 0302 	orr.w	r3, r3, #2
 800c4f4:	81a3      	strh	r3, [r4, #12]
 800c4f6:	e7e3      	b.n	800c4c0 <__smakebuf_r+0xc>
 800c4f8:	4b0d      	ldr	r3, [pc, #52]	; (800c530 <__smakebuf_r+0x7c>)
 800c4fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800c4fc:	89a3      	ldrh	r3, [r4, #12]
 800c4fe:	6020      	str	r0, [r4, #0]
 800c500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c504:	81a3      	strh	r3, [r4, #12]
 800c506:	9b00      	ldr	r3, [sp, #0]
 800c508:	6163      	str	r3, [r4, #20]
 800c50a:	9b01      	ldr	r3, [sp, #4]
 800c50c:	6120      	str	r0, [r4, #16]
 800c50e:	b15b      	cbz	r3, 800c528 <__smakebuf_r+0x74>
 800c510:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c514:	4630      	mov	r0, r6
 800c516:	f000 f8b5 	bl	800c684 <_isatty_r>
 800c51a:	b128      	cbz	r0, 800c528 <__smakebuf_r+0x74>
 800c51c:	89a3      	ldrh	r3, [r4, #12]
 800c51e:	f023 0303 	bic.w	r3, r3, #3
 800c522:	f043 0301 	orr.w	r3, r3, #1
 800c526:	81a3      	strh	r3, [r4, #12]
 800c528:	89a3      	ldrh	r3, [r4, #12]
 800c52a:	431d      	orrs	r5, r3
 800c52c:	81a5      	strh	r5, [r4, #12]
 800c52e:	e7cd      	b.n	800c4cc <__smakebuf_r+0x18>
 800c530:	0800b061 	.word	0x0800b061

0800c534 <__ascii_mbtowc>:
 800c534:	b082      	sub	sp, #8
 800c536:	b901      	cbnz	r1, 800c53a <__ascii_mbtowc+0x6>
 800c538:	a901      	add	r1, sp, #4
 800c53a:	b142      	cbz	r2, 800c54e <__ascii_mbtowc+0x1a>
 800c53c:	b14b      	cbz	r3, 800c552 <__ascii_mbtowc+0x1e>
 800c53e:	7813      	ldrb	r3, [r2, #0]
 800c540:	600b      	str	r3, [r1, #0]
 800c542:	7812      	ldrb	r2, [r2, #0]
 800c544:	1c10      	adds	r0, r2, #0
 800c546:	bf18      	it	ne
 800c548:	2001      	movne	r0, #1
 800c54a:	b002      	add	sp, #8
 800c54c:	4770      	bx	lr
 800c54e:	4610      	mov	r0, r2
 800c550:	e7fb      	b.n	800c54a <__ascii_mbtowc+0x16>
 800c552:	f06f 0001 	mvn.w	r0, #1
 800c556:	e7f8      	b.n	800c54a <__ascii_mbtowc+0x16>

0800c558 <__malloc_lock>:
 800c558:	4770      	bx	lr

0800c55a <__malloc_unlock>:
 800c55a:	4770      	bx	lr

0800c55c <_free_r>:
 800c55c:	b538      	push	{r3, r4, r5, lr}
 800c55e:	4605      	mov	r5, r0
 800c560:	2900      	cmp	r1, #0
 800c562:	d045      	beq.n	800c5f0 <_free_r+0x94>
 800c564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c568:	1f0c      	subs	r4, r1, #4
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	bfb8      	it	lt
 800c56e:	18e4      	addlt	r4, r4, r3
 800c570:	f7ff fff2 	bl	800c558 <__malloc_lock>
 800c574:	4a1f      	ldr	r2, [pc, #124]	; (800c5f4 <_free_r+0x98>)
 800c576:	6813      	ldr	r3, [r2, #0]
 800c578:	4610      	mov	r0, r2
 800c57a:	b933      	cbnz	r3, 800c58a <_free_r+0x2e>
 800c57c:	6063      	str	r3, [r4, #4]
 800c57e:	6014      	str	r4, [r2, #0]
 800c580:	4628      	mov	r0, r5
 800c582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c586:	f7ff bfe8 	b.w	800c55a <__malloc_unlock>
 800c58a:	42a3      	cmp	r3, r4
 800c58c:	d90c      	bls.n	800c5a8 <_free_r+0x4c>
 800c58e:	6821      	ldr	r1, [r4, #0]
 800c590:	1862      	adds	r2, r4, r1
 800c592:	4293      	cmp	r3, r2
 800c594:	bf04      	itt	eq
 800c596:	681a      	ldreq	r2, [r3, #0]
 800c598:	685b      	ldreq	r3, [r3, #4]
 800c59a:	6063      	str	r3, [r4, #4]
 800c59c:	bf04      	itt	eq
 800c59e:	1852      	addeq	r2, r2, r1
 800c5a0:	6022      	streq	r2, [r4, #0]
 800c5a2:	6004      	str	r4, [r0, #0]
 800c5a4:	e7ec      	b.n	800c580 <_free_r+0x24>
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	685a      	ldr	r2, [r3, #4]
 800c5aa:	b10a      	cbz	r2, 800c5b0 <_free_r+0x54>
 800c5ac:	42a2      	cmp	r2, r4
 800c5ae:	d9fa      	bls.n	800c5a6 <_free_r+0x4a>
 800c5b0:	6819      	ldr	r1, [r3, #0]
 800c5b2:	1858      	adds	r0, r3, r1
 800c5b4:	42a0      	cmp	r0, r4
 800c5b6:	d10b      	bne.n	800c5d0 <_free_r+0x74>
 800c5b8:	6820      	ldr	r0, [r4, #0]
 800c5ba:	4401      	add	r1, r0
 800c5bc:	1858      	adds	r0, r3, r1
 800c5be:	4282      	cmp	r2, r0
 800c5c0:	6019      	str	r1, [r3, #0]
 800c5c2:	d1dd      	bne.n	800c580 <_free_r+0x24>
 800c5c4:	6810      	ldr	r0, [r2, #0]
 800c5c6:	6852      	ldr	r2, [r2, #4]
 800c5c8:	605a      	str	r2, [r3, #4]
 800c5ca:	4401      	add	r1, r0
 800c5cc:	6019      	str	r1, [r3, #0]
 800c5ce:	e7d7      	b.n	800c580 <_free_r+0x24>
 800c5d0:	d902      	bls.n	800c5d8 <_free_r+0x7c>
 800c5d2:	230c      	movs	r3, #12
 800c5d4:	602b      	str	r3, [r5, #0]
 800c5d6:	e7d3      	b.n	800c580 <_free_r+0x24>
 800c5d8:	6820      	ldr	r0, [r4, #0]
 800c5da:	1821      	adds	r1, r4, r0
 800c5dc:	428a      	cmp	r2, r1
 800c5de:	bf04      	itt	eq
 800c5e0:	6811      	ldreq	r1, [r2, #0]
 800c5e2:	6852      	ldreq	r2, [r2, #4]
 800c5e4:	6062      	str	r2, [r4, #4]
 800c5e6:	bf04      	itt	eq
 800c5e8:	1809      	addeq	r1, r1, r0
 800c5ea:	6021      	streq	r1, [r4, #0]
 800c5ec:	605c      	str	r4, [r3, #4]
 800c5ee:	e7c7      	b.n	800c580 <_free_r+0x24>
 800c5f0:	bd38      	pop	{r3, r4, r5, pc}
 800c5f2:	bf00      	nop
 800c5f4:	200004dc 	.word	0x200004dc

0800c5f8 <_realloc_r>:
 800c5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5fa:	4607      	mov	r7, r0
 800c5fc:	4614      	mov	r4, r2
 800c5fe:	460e      	mov	r6, r1
 800c600:	b921      	cbnz	r1, 800c60c <_realloc_r+0x14>
 800c602:	4611      	mov	r1, r2
 800c604:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c608:	f7fe bde2 	b.w	800b1d0 <_malloc_r>
 800c60c:	b922      	cbnz	r2, 800c618 <_realloc_r+0x20>
 800c60e:	f7ff ffa5 	bl	800c55c <_free_r>
 800c612:	4625      	mov	r5, r4
 800c614:	4628      	mov	r0, r5
 800c616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c618:	f000 f844 	bl	800c6a4 <_malloc_usable_size_r>
 800c61c:	42a0      	cmp	r0, r4
 800c61e:	d20f      	bcs.n	800c640 <_realloc_r+0x48>
 800c620:	4621      	mov	r1, r4
 800c622:	4638      	mov	r0, r7
 800c624:	f7fe fdd4 	bl	800b1d0 <_malloc_r>
 800c628:	4605      	mov	r5, r0
 800c62a:	2800      	cmp	r0, #0
 800c62c:	d0f2      	beq.n	800c614 <_realloc_r+0x1c>
 800c62e:	4631      	mov	r1, r6
 800c630:	4622      	mov	r2, r4
 800c632:	f7fe fc17 	bl	800ae64 <memcpy>
 800c636:	4631      	mov	r1, r6
 800c638:	4638      	mov	r0, r7
 800c63a:	f7ff ff8f 	bl	800c55c <_free_r>
 800c63e:	e7e9      	b.n	800c614 <_realloc_r+0x1c>
 800c640:	4635      	mov	r5, r6
 800c642:	e7e7      	b.n	800c614 <_realloc_r+0x1c>

0800c644 <__ascii_wctomb>:
 800c644:	b149      	cbz	r1, 800c65a <__ascii_wctomb+0x16>
 800c646:	2aff      	cmp	r2, #255	; 0xff
 800c648:	bf85      	ittet	hi
 800c64a:	238a      	movhi	r3, #138	; 0x8a
 800c64c:	6003      	strhi	r3, [r0, #0]
 800c64e:	700a      	strbls	r2, [r1, #0]
 800c650:	f04f 30ff 	movhi.w	r0, #4294967295
 800c654:	bf98      	it	ls
 800c656:	2001      	movls	r0, #1
 800c658:	4770      	bx	lr
 800c65a:	4608      	mov	r0, r1
 800c65c:	4770      	bx	lr
	...

0800c660 <_fstat_r>:
 800c660:	b538      	push	{r3, r4, r5, lr}
 800c662:	4c07      	ldr	r4, [pc, #28]	; (800c680 <_fstat_r+0x20>)
 800c664:	2300      	movs	r3, #0
 800c666:	4605      	mov	r5, r0
 800c668:	4608      	mov	r0, r1
 800c66a:	4611      	mov	r1, r2
 800c66c:	6023      	str	r3, [r4, #0]
 800c66e:	f7f5 fb2a 	bl	8001cc6 <_fstat>
 800c672:	1c43      	adds	r3, r0, #1
 800c674:	d102      	bne.n	800c67c <_fstat_r+0x1c>
 800c676:	6823      	ldr	r3, [r4, #0]
 800c678:	b103      	cbz	r3, 800c67c <_fstat_r+0x1c>
 800c67a:	602b      	str	r3, [r5, #0]
 800c67c:	bd38      	pop	{r3, r4, r5, pc}
 800c67e:	bf00      	nop
 800c680:	20000884 	.word	0x20000884

0800c684 <_isatty_r>:
 800c684:	b538      	push	{r3, r4, r5, lr}
 800c686:	4c06      	ldr	r4, [pc, #24]	; (800c6a0 <_isatty_r+0x1c>)
 800c688:	2300      	movs	r3, #0
 800c68a:	4605      	mov	r5, r0
 800c68c:	4608      	mov	r0, r1
 800c68e:	6023      	str	r3, [r4, #0]
 800c690:	f7f5 fb29 	bl	8001ce6 <_isatty>
 800c694:	1c43      	adds	r3, r0, #1
 800c696:	d102      	bne.n	800c69e <_isatty_r+0x1a>
 800c698:	6823      	ldr	r3, [r4, #0]
 800c69a:	b103      	cbz	r3, 800c69e <_isatty_r+0x1a>
 800c69c:	602b      	str	r3, [r5, #0]
 800c69e:	bd38      	pop	{r3, r4, r5, pc}
 800c6a0:	20000884 	.word	0x20000884

0800c6a4 <_malloc_usable_size_r>:
 800c6a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6a8:	1f18      	subs	r0, r3, #4
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	bfbc      	itt	lt
 800c6ae:	580b      	ldrlt	r3, [r1, r0]
 800c6b0:	18c0      	addlt	r0, r0, r3
 800c6b2:	4770      	bx	lr

0800c6b4 <cosf>:
 800c6b4:	ee10 3a10 	vmov	r3, s0
 800c6b8:	b507      	push	{r0, r1, r2, lr}
 800c6ba:	4a1c      	ldr	r2, [pc, #112]	; (800c72c <cosf+0x78>)
 800c6bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	dc04      	bgt.n	800c6ce <cosf+0x1a>
 800c6c4:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800c730 <cosf+0x7c>
 800c6c8:	f000 f9a2 	bl	800ca10 <__kernel_cosf>
 800c6cc:	e004      	b.n	800c6d8 <cosf+0x24>
 800c6ce:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c6d2:	db04      	blt.n	800c6de <cosf+0x2a>
 800c6d4:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c6d8:	b003      	add	sp, #12
 800c6da:	f85d fb04 	ldr.w	pc, [sp], #4
 800c6de:	4668      	mov	r0, sp
 800c6e0:	f000 f86a 	bl	800c7b8 <__ieee754_rem_pio2f>
 800c6e4:	f000 0003 	and.w	r0, r0, #3
 800c6e8:	2801      	cmp	r0, #1
 800c6ea:	d007      	beq.n	800c6fc <cosf+0x48>
 800c6ec:	2802      	cmp	r0, #2
 800c6ee:	d00e      	beq.n	800c70e <cosf+0x5a>
 800c6f0:	b9a0      	cbnz	r0, 800c71c <cosf+0x68>
 800c6f2:	eddd 0a01 	vldr	s1, [sp, #4]
 800c6f6:	ed9d 0a00 	vldr	s0, [sp]
 800c6fa:	e7e5      	b.n	800c6c8 <cosf+0x14>
 800c6fc:	eddd 0a01 	vldr	s1, [sp, #4]
 800c700:	ed9d 0a00 	vldr	s0, [sp]
 800c704:	f000 fc64 	bl	800cfd0 <__kernel_sinf>
 800c708:	eeb1 0a40 	vneg.f32	s0, s0
 800c70c:	e7e4      	b.n	800c6d8 <cosf+0x24>
 800c70e:	eddd 0a01 	vldr	s1, [sp, #4]
 800c712:	ed9d 0a00 	vldr	s0, [sp]
 800c716:	f000 f97b 	bl	800ca10 <__kernel_cosf>
 800c71a:	e7f5      	b.n	800c708 <cosf+0x54>
 800c71c:	2001      	movs	r0, #1
 800c71e:	eddd 0a01 	vldr	s1, [sp, #4]
 800c722:	ed9d 0a00 	vldr	s0, [sp]
 800c726:	f000 fc53 	bl	800cfd0 <__kernel_sinf>
 800c72a:	e7d5      	b.n	800c6d8 <cosf+0x24>
 800c72c:	3f490fd8 	.word	0x3f490fd8
 800c730:	00000000 	.word	0x00000000

0800c734 <sinf>:
 800c734:	ee10 3a10 	vmov	r3, s0
 800c738:	b507      	push	{r0, r1, r2, lr}
 800c73a:	4a1d      	ldr	r2, [pc, #116]	; (800c7b0 <sinf+0x7c>)
 800c73c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c740:	4293      	cmp	r3, r2
 800c742:	dc05      	bgt.n	800c750 <sinf+0x1c>
 800c744:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800c7b4 <sinf+0x80>
 800c748:	2000      	movs	r0, #0
 800c74a:	f000 fc41 	bl	800cfd0 <__kernel_sinf>
 800c74e:	e004      	b.n	800c75a <sinf+0x26>
 800c750:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c754:	db04      	blt.n	800c760 <sinf+0x2c>
 800c756:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c75a:	b003      	add	sp, #12
 800c75c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c760:	4668      	mov	r0, sp
 800c762:	f000 f829 	bl	800c7b8 <__ieee754_rem_pio2f>
 800c766:	f000 0003 	and.w	r0, r0, #3
 800c76a:	2801      	cmp	r0, #1
 800c76c:	d008      	beq.n	800c780 <sinf+0x4c>
 800c76e:	2802      	cmp	r0, #2
 800c770:	d00d      	beq.n	800c78e <sinf+0x5a>
 800c772:	b9b0      	cbnz	r0, 800c7a2 <sinf+0x6e>
 800c774:	2001      	movs	r0, #1
 800c776:	eddd 0a01 	vldr	s1, [sp, #4]
 800c77a:	ed9d 0a00 	vldr	s0, [sp]
 800c77e:	e7e4      	b.n	800c74a <sinf+0x16>
 800c780:	eddd 0a01 	vldr	s1, [sp, #4]
 800c784:	ed9d 0a00 	vldr	s0, [sp]
 800c788:	f000 f942 	bl	800ca10 <__kernel_cosf>
 800c78c:	e7e5      	b.n	800c75a <sinf+0x26>
 800c78e:	2001      	movs	r0, #1
 800c790:	eddd 0a01 	vldr	s1, [sp, #4]
 800c794:	ed9d 0a00 	vldr	s0, [sp]
 800c798:	f000 fc1a 	bl	800cfd0 <__kernel_sinf>
 800c79c:	eeb1 0a40 	vneg.f32	s0, s0
 800c7a0:	e7db      	b.n	800c75a <sinf+0x26>
 800c7a2:	eddd 0a01 	vldr	s1, [sp, #4]
 800c7a6:	ed9d 0a00 	vldr	s0, [sp]
 800c7aa:	f000 f931 	bl	800ca10 <__kernel_cosf>
 800c7ae:	e7f5      	b.n	800c79c <sinf+0x68>
 800c7b0:	3f490fd8 	.word	0x3f490fd8
 800c7b4:	00000000 	.word	0x00000000

0800c7b8 <__ieee754_rem_pio2f>:
 800c7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7ba:	ee10 6a10 	vmov	r6, s0
 800c7be:	4b86      	ldr	r3, [pc, #536]	; (800c9d8 <__ieee754_rem_pio2f+0x220>)
 800c7c0:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800c7c4:	429c      	cmp	r4, r3
 800c7c6:	b087      	sub	sp, #28
 800c7c8:	4605      	mov	r5, r0
 800c7ca:	dc05      	bgt.n	800c7d8 <__ieee754_rem_pio2f+0x20>
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	ed85 0a00 	vstr	s0, [r5]
 800c7d2:	6043      	str	r3, [r0, #4]
 800c7d4:	2000      	movs	r0, #0
 800c7d6:	e020      	b.n	800c81a <__ieee754_rem_pio2f+0x62>
 800c7d8:	4b80      	ldr	r3, [pc, #512]	; (800c9dc <__ieee754_rem_pio2f+0x224>)
 800c7da:	429c      	cmp	r4, r3
 800c7dc:	dc38      	bgt.n	800c850 <__ieee754_rem_pio2f+0x98>
 800c7de:	2e00      	cmp	r6, #0
 800c7e0:	f024 040f 	bic.w	r4, r4, #15
 800c7e4:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800c9e0 <__ieee754_rem_pio2f+0x228>
 800c7e8:	4b7e      	ldr	r3, [pc, #504]	; (800c9e4 <__ieee754_rem_pio2f+0x22c>)
 800c7ea:	dd18      	ble.n	800c81e <__ieee754_rem_pio2f+0x66>
 800c7ec:	429c      	cmp	r4, r3
 800c7ee:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c7f2:	bf09      	itett	eq
 800c7f4:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800c9e8 <__ieee754_rem_pio2f+0x230>
 800c7f8:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800c9ec <__ieee754_rem_pio2f+0x234>
 800c7fc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800c800:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800c9f0 <__ieee754_rem_pio2f+0x238>
 800c804:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c808:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c80c:	edc0 6a00 	vstr	s13, [r0]
 800c810:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c814:	edc0 7a01 	vstr	s15, [r0, #4]
 800c818:	2001      	movs	r0, #1
 800c81a:	b007      	add	sp, #28
 800c81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c81e:	429c      	cmp	r4, r3
 800c820:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c824:	bf09      	itett	eq
 800c826:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800c9e8 <__ieee754_rem_pio2f+0x230>
 800c82a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800c9ec <__ieee754_rem_pio2f+0x234>
 800c82e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800c832:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800c9f0 <__ieee754_rem_pio2f+0x238>
 800c836:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c83a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c83e:	edc0 6a00 	vstr	s13, [r0]
 800c842:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c846:	edc0 7a01 	vstr	s15, [r0, #4]
 800c84a:	f04f 30ff 	mov.w	r0, #4294967295
 800c84e:	e7e4      	b.n	800c81a <__ieee754_rem_pio2f+0x62>
 800c850:	4b68      	ldr	r3, [pc, #416]	; (800c9f4 <__ieee754_rem_pio2f+0x23c>)
 800c852:	429c      	cmp	r4, r3
 800c854:	dc71      	bgt.n	800c93a <__ieee754_rem_pio2f+0x182>
 800c856:	f000 fc03 	bl	800d060 <fabsf>
 800c85a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800c9f8 <__ieee754_rem_pio2f+0x240>
 800c85e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c862:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c86a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800c86e:	ee17 0a90 	vmov	r0, s15
 800c872:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800c9e0 <__ieee754_rem_pio2f+0x228>
 800c876:	eeb1 7a46 	vneg.f32	s14, s12
 800c87a:	eea7 0a27 	vfma.f32	s0, s14, s15
 800c87e:	281f      	cmp	r0, #31
 800c880:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800c9ec <__ieee754_rem_pio2f+0x234>
 800c884:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c888:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c88c:	ee16 3a90 	vmov	r3, s13
 800c890:	dc1c      	bgt.n	800c8cc <__ieee754_rem_pio2f+0x114>
 800c892:	1e47      	subs	r7, r0, #1
 800c894:	4959      	ldr	r1, [pc, #356]	; (800c9fc <__ieee754_rem_pio2f+0x244>)
 800c896:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800c89a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800c89e:	428a      	cmp	r2, r1
 800c8a0:	d014      	beq.n	800c8cc <__ieee754_rem_pio2f+0x114>
 800c8a2:	602b      	str	r3, [r5, #0]
 800c8a4:	ed95 7a00 	vldr	s14, [r5]
 800c8a8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c8ac:	2e00      	cmp	r6, #0
 800c8ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c8b2:	ed85 0a01 	vstr	s0, [r5, #4]
 800c8b6:	dab0      	bge.n	800c81a <__ieee754_rem_pio2f+0x62>
 800c8b8:	eeb1 7a47 	vneg.f32	s14, s14
 800c8bc:	eeb1 0a40 	vneg.f32	s0, s0
 800c8c0:	ed85 7a00 	vstr	s14, [r5]
 800c8c4:	ed85 0a01 	vstr	s0, [r5, #4]
 800c8c8:	4240      	negs	r0, r0
 800c8ca:	e7a6      	b.n	800c81a <__ieee754_rem_pio2f+0x62>
 800c8cc:	15e4      	asrs	r4, r4, #23
 800c8ce:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c8d2:	1aa2      	subs	r2, r4, r2
 800c8d4:	2a08      	cmp	r2, #8
 800c8d6:	dde4      	ble.n	800c8a2 <__ieee754_rem_pio2f+0xea>
 800c8d8:	eddf 7a43 	vldr	s15, [pc, #268]	; 800c9e8 <__ieee754_rem_pio2f+0x230>
 800c8dc:	eef0 6a40 	vmov.f32	s13, s0
 800c8e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c8e4:	ee30 0a66 	vsub.f32	s0, s0, s13
 800c8e8:	eea7 0a27 	vfma.f32	s0, s14, s15
 800c8ec:	eddf 7a40 	vldr	s15, [pc, #256]	; 800c9f0 <__ieee754_rem_pio2f+0x238>
 800c8f0:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800c8f4:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800c8f8:	eef0 7a40 	vmov.f32	s15, s0
 800c8fc:	ee15 3a90 	vmov	r3, s11
 800c900:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c904:	1aa4      	subs	r4, r4, r2
 800c906:	2c19      	cmp	r4, #25
 800c908:	dc04      	bgt.n	800c914 <__ieee754_rem_pio2f+0x15c>
 800c90a:	edc5 5a00 	vstr	s11, [r5]
 800c90e:	eeb0 0a66 	vmov.f32	s0, s13
 800c912:	e7c7      	b.n	800c8a4 <__ieee754_rem_pio2f+0xec>
 800c914:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800ca00 <__ieee754_rem_pio2f+0x248>
 800c918:	eeb0 0a66 	vmov.f32	s0, s13
 800c91c:	eea7 0a25 	vfma.f32	s0, s14, s11
 800c920:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c924:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c928:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ca04 <__ieee754_rem_pio2f+0x24c>
 800c92c:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800c930:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c934:	ed85 7a00 	vstr	s14, [r5]
 800c938:	e7b4      	b.n	800c8a4 <__ieee754_rem_pio2f+0xec>
 800c93a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c93e:	db06      	blt.n	800c94e <__ieee754_rem_pio2f+0x196>
 800c940:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c944:	edc0 7a01 	vstr	s15, [r0, #4]
 800c948:	edc0 7a00 	vstr	s15, [r0]
 800c94c:	e742      	b.n	800c7d4 <__ieee754_rem_pio2f+0x1c>
 800c94e:	15e2      	asrs	r2, r4, #23
 800c950:	3a86      	subs	r2, #134	; 0x86
 800c952:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800c956:	ee07 3a90 	vmov	s15, r3
 800c95a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c95e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800ca08 <__ieee754_rem_pio2f+0x250>
 800c962:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c966:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c96a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c96e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c972:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c976:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c97a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c97e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c982:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c986:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c98a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c98e:	edcd 7a05 	vstr	s15, [sp, #20]
 800c992:	d11e      	bne.n	800c9d2 <__ieee754_rem_pio2f+0x21a>
 800c994:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c99c:	bf0c      	ite	eq
 800c99e:	2301      	moveq	r3, #1
 800c9a0:	2302      	movne	r3, #2
 800c9a2:	491a      	ldr	r1, [pc, #104]	; (800ca0c <__ieee754_rem_pio2f+0x254>)
 800c9a4:	9101      	str	r1, [sp, #4]
 800c9a6:	2102      	movs	r1, #2
 800c9a8:	9100      	str	r1, [sp, #0]
 800c9aa:	a803      	add	r0, sp, #12
 800c9ac:	4629      	mov	r1, r5
 800c9ae:	f000 f88d 	bl	800cacc <__kernel_rem_pio2f>
 800c9b2:	2e00      	cmp	r6, #0
 800c9b4:	f6bf af31 	bge.w	800c81a <__ieee754_rem_pio2f+0x62>
 800c9b8:	edd5 7a00 	vldr	s15, [r5]
 800c9bc:	eef1 7a67 	vneg.f32	s15, s15
 800c9c0:	edc5 7a00 	vstr	s15, [r5]
 800c9c4:	edd5 7a01 	vldr	s15, [r5, #4]
 800c9c8:	eef1 7a67 	vneg.f32	s15, s15
 800c9cc:	edc5 7a01 	vstr	s15, [r5, #4]
 800c9d0:	e77a      	b.n	800c8c8 <__ieee754_rem_pio2f+0x110>
 800c9d2:	2303      	movs	r3, #3
 800c9d4:	e7e5      	b.n	800c9a2 <__ieee754_rem_pio2f+0x1ea>
 800c9d6:	bf00      	nop
 800c9d8:	3f490fd8 	.word	0x3f490fd8
 800c9dc:	4016cbe3 	.word	0x4016cbe3
 800c9e0:	3fc90f80 	.word	0x3fc90f80
 800c9e4:	3fc90fd0 	.word	0x3fc90fd0
 800c9e8:	37354400 	.word	0x37354400
 800c9ec:	37354443 	.word	0x37354443
 800c9f0:	2e85a308 	.word	0x2e85a308
 800c9f4:	43490f80 	.word	0x43490f80
 800c9f8:	3f22f984 	.word	0x3f22f984
 800c9fc:	0800d408 	.word	0x0800d408
 800ca00:	2e85a300 	.word	0x2e85a300
 800ca04:	248d3132 	.word	0x248d3132
 800ca08:	43800000 	.word	0x43800000
 800ca0c:	0800d488 	.word	0x0800d488

0800ca10 <__kernel_cosf>:
 800ca10:	ee10 3a10 	vmov	r3, s0
 800ca14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca18:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800ca1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca20:	da05      	bge.n	800ca2e <__kernel_cosf+0x1e>
 800ca22:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ca26:	ee17 2a90 	vmov	r2, s15
 800ca2a:	2a00      	cmp	r2, #0
 800ca2c:	d03b      	beq.n	800caa6 <__kernel_cosf+0x96>
 800ca2e:	ee20 6a00 	vmul.f32	s12, s0, s0
 800ca32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ca36:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800caac <__kernel_cosf+0x9c>
 800ca3a:	4a1d      	ldr	r2, [pc, #116]	; (800cab0 <__kernel_cosf+0xa0>)
 800ca3c:	ee66 7a07 	vmul.f32	s15, s12, s14
 800ca40:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800cab4 <__kernel_cosf+0xa4>
 800ca44:	eea6 7a25 	vfma.f32	s14, s12, s11
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800cab8 <__kernel_cosf+0xa8>
 800ca4e:	eee7 5a06 	vfma.f32	s11, s14, s12
 800ca52:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800cabc <__kernel_cosf+0xac>
 800ca56:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ca5a:	eddf 5a19 	vldr	s11, [pc, #100]	; 800cac0 <__kernel_cosf+0xb0>
 800ca5e:	eee7 5a06 	vfma.f32	s11, s14, s12
 800ca62:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800cac4 <__kernel_cosf+0xb4>
 800ca66:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ca6a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800ca6e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ca72:	eee6 0a07 	vfma.f32	s1, s12, s14
 800ca76:	dc04      	bgt.n	800ca82 <__kernel_cosf+0x72>
 800ca78:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800ca7c:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800ca80:	4770      	bx	lr
 800ca82:	4a11      	ldr	r2, [pc, #68]	; (800cac8 <__kernel_cosf+0xb8>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	bfda      	itte	le
 800ca88:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800ca8c:	ee07 3a10 	vmovle	s14, r3
 800ca90:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800ca94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca98:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800ca9c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800caa0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800caa4:	4770      	bx	lr
 800caa6:	eeb0 0a66 	vmov.f32	s0, s13
 800caaa:	4770      	bx	lr
 800caac:	ad47d74e 	.word	0xad47d74e
 800cab0:	3e999999 	.word	0x3e999999
 800cab4:	310f74f6 	.word	0x310f74f6
 800cab8:	b493f27c 	.word	0xb493f27c
 800cabc:	37d00d01 	.word	0x37d00d01
 800cac0:	bab60b61 	.word	0xbab60b61
 800cac4:	3d2aaaab 	.word	0x3d2aaaab
 800cac8:	3f480000 	.word	0x3f480000

0800cacc <__kernel_rem_pio2f>:
 800cacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad0:	ed2d 8b04 	vpush	{d8-d9}
 800cad4:	b0d7      	sub	sp, #348	; 0x15c
 800cad6:	469b      	mov	fp, r3
 800cad8:	460e      	mov	r6, r1
 800cada:	4bbe      	ldr	r3, [pc, #760]	; (800cdd4 <__kernel_rem_pio2f+0x308>)
 800cadc:	9964      	ldr	r1, [sp, #400]	; 0x190
 800cade:	9002      	str	r0, [sp, #8]
 800cae0:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800cae4:	9865      	ldr	r0, [sp, #404]	; 0x194
 800cae6:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800cde4 <__kernel_rem_pio2f+0x318>
 800caea:	1ed1      	subs	r1, r2, #3
 800caec:	2308      	movs	r3, #8
 800caee:	fb91 f1f3 	sdiv	r1, r1, r3
 800caf2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800caf6:	f10b 3aff 	add.w	sl, fp, #4294967295
 800cafa:	1c4c      	adds	r4, r1, #1
 800cafc:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800cb00:	eba1 050a 	sub.w	r5, r1, sl
 800cb04:	aa1a      	add	r2, sp, #104	; 0x68
 800cb06:	eb09 070a 	add.w	r7, r9, sl
 800cb0a:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800cb0e:	4696      	mov	lr, r2
 800cb10:	2300      	movs	r3, #0
 800cb12:	42bb      	cmp	r3, r7
 800cb14:	dd0f      	ble.n	800cb36 <__kernel_rem_pio2f+0x6a>
 800cb16:	af42      	add	r7, sp, #264	; 0x108
 800cb18:	2200      	movs	r2, #0
 800cb1a:	454a      	cmp	r2, r9
 800cb1c:	dc27      	bgt.n	800cb6e <__kernel_rem_pio2f+0xa2>
 800cb1e:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800cb22:	eb0b 0302 	add.w	r3, fp, r2
 800cb26:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800cb2a:	9d02      	ldr	r5, [sp, #8]
 800cb2c:	eddf 7aad 	vldr	s15, [pc, #692]	; 800cde4 <__kernel_rem_pio2f+0x318>
 800cb30:	f04f 0c00 	mov.w	ip, #0
 800cb34:	e015      	b.n	800cb62 <__kernel_rem_pio2f+0x96>
 800cb36:	42dd      	cmn	r5, r3
 800cb38:	bf5d      	ittte	pl
 800cb3a:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800cb3e:	ee07 2a90 	vmovpl	s15, r2
 800cb42:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800cb46:	eef0 7a47 	vmovmi.f32	s15, s14
 800cb4a:	ecee 7a01 	vstmia	lr!, {s15}
 800cb4e:	3301      	adds	r3, #1
 800cb50:	e7df      	b.n	800cb12 <__kernel_rem_pio2f+0x46>
 800cb52:	ecf5 6a01 	vldmia	r5!, {s13}
 800cb56:	ed33 7a01 	vldmdb	r3!, {s14}
 800cb5a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cb5e:	f10c 0c01 	add.w	ip, ip, #1
 800cb62:	45d4      	cmp	ip, sl
 800cb64:	ddf5      	ble.n	800cb52 <__kernel_rem_pio2f+0x86>
 800cb66:	ece7 7a01 	vstmia	r7!, {s15}
 800cb6a:	3201      	adds	r2, #1
 800cb6c:	e7d5      	b.n	800cb1a <__kernel_rem_pio2f+0x4e>
 800cb6e:	ab06      	add	r3, sp, #24
 800cb70:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800cb74:	9304      	str	r3, [sp, #16]
 800cb76:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800cde0 <__kernel_rem_pio2f+0x314>
 800cb7a:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800cddc <__kernel_rem_pio2f+0x310>
 800cb7e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800cb82:	9303      	str	r3, [sp, #12]
 800cb84:	464d      	mov	r5, r9
 800cb86:	ab56      	add	r3, sp, #344	; 0x158
 800cb88:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800cb8c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800cb90:	3f01      	subs	r7, #1
 800cb92:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800cb96:	00bf      	lsls	r7, r7, #2
 800cb98:	ab56      	add	r3, sp, #344	; 0x158
 800cb9a:	19da      	adds	r2, r3, r7
 800cb9c:	3a4c      	subs	r2, #76	; 0x4c
 800cb9e:	2300      	movs	r3, #0
 800cba0:	1ae9      	subs	r1, r5, r3
 800cba2:	2900      	cmp	r1, #0
 800cba4:	dc4c      	bgt.n	800cc40 <__kernel_rem_pio2f+0x174>
 800cba6:	4620      	mov	r0, r4
 800cba8:	f000 faa4 	bl	800d0f4 <scalbnf>
 800cbac:	eeb0 8a40 	vmov.f32	s16, s0
 800cbb0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800cbb4:	ee28 0a00 	vmul.f32	s0, s16, s0
 800cbb8:	f000 fa5a 	bl	800d070 <floorf>
 800cbbc:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800cbc0:	eea0 8a67 	vfms.f32	s16, s0, s15
 800cbc4:	2c00      	cmp	r4, #0
 800cbc6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800cbca:	edcd 7a01 	vstr	s15, [sp, #4]
 800cbce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cbd2:	ee38 8a67 	vsub.f32	s16, s16, s15
 800cbd6:	dd48      	ble.n	800cc6a <__kernel_rem_pio2f+0x19e>
 800cbd8:	1e69      	subs	r1, r5, #1
 800cbda:	ab06      	add	r3, sp, #24
 800cbdc:	f1c4 0008 	rsb	r0, r4, #8
 800cbe0:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800cbe4:	9a01      	ldr	r2, [sp, #4]
 800cbe6:	fa4c f300 	asr.w	r3, ip, r0
 800cbea:	441a      	add	r2, r3
 800cbec:	4083      	lsls	r3, r0
 800cbee:	9201      	str	r2, [sp, #4]
 800cbf0:	ebac 0203 	sub.w	r2, ip, r3
 800cbf4:	ab06      	add	r3, sp, #24
 800cbf6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800cbfa:	f1c4 0307 	rsb	r3, r4, #7
 800cbfe:	fa42 f803 	asr.w	r8, r2, r3
 800cc02:	f1b8 0f00 	cmp.w	r8, #0
 800cc06:	dd41      	ble.n	800cc8c <__kernel_rem_pio2f+0x1c0>
 800cc08:	9b01      	ldr	r3, [sp, #4]
 800cc0a:	2000      	movs	r0, #0
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	9301      	str	r3, [sp, #4]
 800cc10:	4601      	mov	r1, r0
 800cc12:	4285      	cmp	r5, r0
 800cc14:	dc6d      	bgt.n	800ccf2 <__kernel_rem_pio2f+0x226>
 800cc16:	2c00      	cmp	r4, #0
 800cc18:	dd04      	ble.n	800cc24 <__kernel_rem_pio2f+0x158>
 800cc1a:	2c01      	cmp	r4, #1
 800cc1c:	d07e      	beq.n	800cd1c <__kernel_rem_pio2f+0x250>
 800cc1e:	2c02      	cmp	r4, #2
 800cc20:	f000 8086 	beq.w	800cd30 <__kernel_rem_pio2f+0x264>
 800cc24:	f1b8 0f02 	cmp.w	r8, #2
 800cc28:	d130      	bne.n	800cc8c <__kernel_rem_pio2f+0x1c0>
 800cc2a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cc2e:	ee30 8a48 	vsub.f32	s16, s0, s16
 800cc32:	b359      	cbz	r1, 800cc8c <__kernel_rem_pio2f+0x1c0>
 800cc34:	4620      	mov	r0, r4
 800cc36:	f000 fa5d 	bl	800d0f4 <scalbnf>
 800cc3a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800cc3e:	e025      	b.n	800cc8c <__kernel_rem_pio2f+0x1c0>
 800cc40:	ee60 7a28 	vmul.f32	s15, s0, s17
 800cc44:	a806      	add	r0, sp, #24
 800cc46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc4e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800cc52:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cc56:	ee10 1a10 	vmov	r1, s0
 800cc5a:	ed32 0a01 	vldmdb	r2!, {s0}
 800cc5e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800cc62:	ee37 0a80 	vadd.f32	s0, s15, s0
 800cc66:	3301      	adds	r3, #1
 800cc68:	e79a      	b.n	800cba0 <__kernel_rem_pio2f+0xd4>
 800cc6a:	d106      	bne.n	800cc7a <__kernel_rem_pio2f+0x1ae>
 800cc6c:	1e6b      	subs	r3, r5, #1
 800cc6e:	aa06      	add	r2, sp, #24
 800cc70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cc74:	ea4f 2822 	mov.w	r8, r2, asr #8
 800cc78:	e7c3      	b.n	800cc02 <__kernel_rem_pio2f+0x136>
 800cc7a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cc7e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cc82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc86:	da31      	bge.n	800ccec <__kernel_rem_pio2f+0x220>
 800cc88:	f04f 0800 	mov.w	r8, #0
 800cc8c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc94:	f040 80a8 	bne.w	800cde8 <__kernel_rem_pio2f+0x31c>
 800cc98:	1e6b      	subs	r3, r5, #1
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	4548      	cmp	r0, r9
 800cca0:	da4d      	bge.n	800cd3e <__kernel_rem_pio2f+0x272>
 800cca2:	2a00      	cmp	r2, #0
 800cca4:	f000 8087 	beq.w	800cdb6 <__kernel_rem_pio2f+0x2ea>
 800cca8:	aa06      	add	r2, sp, #24
 800ccaa:	3c08      	subs	r4, #8
 800ccac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ccb0:	2900      	cmp	r1, #0
 800ccb2:	f000 808d 	beq.w	800cdd0 <__kernel_rem_pio2f+0x304>
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ccbc:	9302      	str	r3, [sp, #8]
 800ccbe:	f000 fa19 	bl	800d0f4 <scalbnf>
 800ccc2:	9b02      	ldr	r3, [sp, #8]
 800ccc4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800cde0 <__kernel_rem_pio2f+0x314>
 800ccc8:	0099      	lsls	r1, r3, #2
 800ccca:	aa42      	add	r2, sp, #264	; 0x108
 800cccc:	1850      	adds	r0, r2, r1
 800ccce:	1d05      	adds	r5, r0, #4
 800ccd0:	461c      	mov	r4, r3
 800ccd2:	2c00      	cmp	r4, #0
 800ccd4:	f280 80b8 	bge.w	800ce48 <__kernel_rem_pio2f+0x37c>
 800ccd8:	2500      	movs	r5, #0
 800ccda:	1b5c      	subs	r4, r3, r5
 800ccdc:	2c00      	cmp	r4, #0
 800ccde:	f2c0 80d8 	blt.w	800ce92 <__kernel_rem_pio2f+0x3c6>
 800cce2:	4f3d      	ldr	r7, [pc, #244]	; (800cdd8 <__kernel_rem_pio2f+0x30c>)
 800cce4:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800cde4 <__kernel_rem_pio2f+0x318>
 800cce8:	2400      	movs	r4, #0
 800ccea:	e0c6      	b.n	800ce7a <__kernel_rem_pio2f+0x3ae>
 800ccec:	f04f 0802 	mov.w	r8, #2
 800ccf0:	e78a      	b.n	800cc08 <__kernel_rem_pio2f+0x13c>
 800ccf2:	ab06      	add	r3, sp, #24
 800ccf4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ccf8:	b949      	cbnz	r1, 800cd0e <__kernel_rem_pio2f+0x242>
 800ccfa:	b12b      	cbz	r3, 800cd08 <__kernel_rem_pio2f+0x23c>
 800ccfc:	aa06      	add	r2, sp, #24
 800ccfe:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800cd02:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800cd06:	2301      	movs	r3, #1
 800cd08:	3001      	adds	r0, #1
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	e781      	b.n	800cc12 <__kernel_rem_pio2f+0x146>
 800cd0e:	aa06      	add	r2, sp, #24
 800cd10:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800cd14:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800cd18:	460b      	mov	r3, r1
 800cd1a:	e7f5      	b.n	800cd08 <__kernel_rem_pio2f+0x23c>
 800cd1c:	1e68      	subs	r0, r5, #1
 800cd1e:	ab06      	add	r3, sp, #24
 800cd20:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800cd24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd28:	aa06      	add	r2, sp, #24
 800cd2a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800cd2e:	e779      	b.n	800cc24 <__kernel_rem_pio2f+0x158>
 800cd30:	1e68      	subs	r0, r5, #1
 800cd32:	ab06      	add	r3, sp, #24
 800cd34:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800cd38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd3c:	e7f4      	b.n	800cd28 <__kernel_rem_pio2f+0x25c>
 800cd3e:	a906      	add	r1, sp, #24
 800cd40:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800cd44:	3801      	subs	r0, #1
 800cd46:	430a      	orrs	r2, r1
 800cd48:	e7a9      	b.n	800cc9e <__kernel_rem_pio2f+0x1d2>
 800cd4a:	f10c 0c01 	add.w	ip, ip, #1
 800cd4e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cd52:	2a00      	cmp	r2, #0
 800cd54:	d0f9      	beq.n	800cd4a <__kernel_rem_pio2f+0x27e>
 800cd56:	eb0b 0305 	add.w	r3, fp, r5
 800cd5a:	aa1a      	add	r2, sp, #104	; 0x68
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	1898      	adds	r0, r3, r2
 800cd60:	3004      	adds	r0, #4
 800cd62:	1c69      	adds	r1, r5, #1
 800cd64:	3704      	adds	r7, #4
 800cd66:	2200      	movs	r2, #0
 800cd68:	4465      	add	r5, ip
 800cd6a:	9005      	str	r0, [sp, #20]
 800cd6c:	428d      	cmp	r5, r1
 800cd6e:	f6ff af0a 	blt.w	800cb86 <__kernel_rem_pio2f+0xba>
 800cd72:	a81a      	add	r0, sp, #104	; 0x68
 800cd74:	eb02 0c03 	add.w	ip, r2, r3
 800cd78:	4484      	add	ip, r0
 800cd7a:	9803      	ldr	r0, [sp, #12]
 800cd7c:	f8dd e008 	ldr.w	lr, [sp, #8]
 800cd80:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800cd84:	9001      	str	r0, [sp, #4]
 800cd86:	ee07 0a90 	vmov	s15, r0
 800cd8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd8e:	9805      	ldr	r0, [sp, #20]
 800cd90:	edcc 7a00 	vstr	s15, [ip]
 800cd94:	eddf 7a13 	vldr	s15, [pc, #76]	; 800cde4 <__kernel_rem_pio2f+0x318>
 800cd98:	eb00 0802 	add.w	r8, r0, r2
 800cd9c:	f04f 0c00 	mov.w	ip, #0
 800cda0:	45d4      	cmp	ip, sl
 800cda2:	dd0c      	ble.n	800cdbe <__kernel_rem_pio2f+0x2f2>
 800cda4:	eb02 0c07 	add.w	ip, r2, r7
 800cda8:	a842      	add	r0, sp, #264	; 0x108
 800cdaa:	4484      	add	ip, r0
 800cdac:	edcc 7a01 	vstr	s15, [ip, #4]
 800cdb0:	3101      	adds	r1, #1
 800cdb2:	3204      	adds	r2, #4
 800cdb4:	e7da      	b.n	800cd6c <__kernel_rem_pio2f+0x2a0>
 800cdb6:	9b04      	ldr	r3, [sp, #16]
 800cdb8:	f04f 0c01 	mov.w	ip, #1
 800cdbc:	e7c7      	b.n	800cd4e <__kernel_rem_pio2f+0x282>
 800cdbe:	ecfe 6a01 	vldmia	lr!, {s13}
 800cdc2:	ed38 7a01 	vldmdb	r8!, {s14}
 800cdc6:	f10c 0c01 	add.w	ip, ip, #1
 800cdca:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cdce:	e7e7      	b.n	800cda0 <__kernel_rem_pio2f+0x2d4>
 800cdd0:	3b01      	subs	r3, #1
 800cdd2:	e769      	b.n	800cca8 <__kernel_rem_pio2f+0x1dc>
 800cdd4:	0800d7cc 	.word	0x0800d7cc
 800cdd8:	0800d7a0 	.word	0x0800d7a0
 800cddc:	43800000 	.word	0x43800000
 800cde0:	3b800000 	.word	0x3b800000
 800cde4:	00000000 	.word	0x00000000
 800cde8:	4260      	negs	r0, r4
 800cdea:	eeb0 0a48 	vmov.f32	s0, s16
 800cdee:	f000 f981 	bl	800d0f4 <scalbnf>
 800cdf2:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800cddc <__kernel_rem_pio2f+0x310>
 800cdf6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800cdfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdfe:	db1a      	blt.n	800ce36 <__kernel_rem_pio2f+0x36a>
 800ce00:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800cde0 <__kernel_rem_pio2f+0x314>
 800ce04:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ce08:	aa06      	add	r2, sp, #24
 800ce0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce0e:	a906      	add	r1, sp, #24
 800ce10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce14:	3408      	adds	r4, #8
 800ce16:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ce1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce1e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ce22:	ee10 3a10 	vmov	r3, s0
 800ce26:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800ce2a:	1c6b      	adds	r3, r5, #1
 800ce2c:	ee17 2a90 	vmov	r2, s15
 800ce30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ce34:	e73f      	b.n	800ccb6 <__kernel_rem_pio2f+0x1ea>
 800ce36:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ce3a:	aa06      	add	r2, sp, #24
 800ce3c:	ee10 3a10 	vmov	r3, s0
 800ce40:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800ce44:	462b      	mov	r3, r5
 800ce46:	e736      	b.n	800ccb6 <__kernel_rem_pio2f+0x1ea>
 800ce48:	aa06      	add	r2, sp, #24
 800ce4a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800ce4e:	9202      	str	r2, [sp, #8]
 800ce50:	ee07 2a90 	vmov	s15, r2
 800ce54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce58:	3c01      	subs	r4, #1
 800ce5a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ce5e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ce62:	ed65 7a01 	vstmdb	r5!, {s15}
 800ce66:	e734      	b.n	800ccd2 <__kernel_rem_pio2f+0x206>
 800ce68:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800ce6c:	ecf7 6a01 	vldmia	r7!, {s13}
 800ce70:	ed9c 7a00 	vldr	s14, [ip]
 800ce74:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ce78:	3401      	adds	r4, #1
 800ce7a:	454c      	cmp	r4, r9
 800ce7c:	dc01      	bgt.n	800ce82 <__kernel_rem_pio2f+0x3b6>
 800ce7e:	42a5      	cmp	r5, r4
 800ce80:	daf2      	bge.n	800ce68 <__kernel_rem_pio2f+0x39c>
 800ce82:	aa56      	add	r2, sp, #344	; 0x158
 800ce84:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800ce88:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800ce8c:	3501      	adds	r5, #1
 800ce8e:	3804      	subs	r0, #4
 800ce90:	e723      	b.n	800ccda <__kernel_rem_pio2f+0x20e>
 800ce92:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ce94:	2a03      	cmp	r2, #3
 800ce96:	d84d      	bhi.n	800cf34 <__kernel_rem_pio2f+0x468>
 800ce98:	e8df f002 	tbb	[pc, r2]
 800ce9c:	021f1f3e 	.word	0x021f1f3e
 800cea0:	aa56      	add	r2, sp, #344	; 0x158
 800cea2:	4411      	add	r1, r2
 800cea4:	399c      	subs	r1, #156	; 0x9c
 800cea6:	4608      	mov	r0, r1
 800cea8:	461c      	mov	r4, r3
 800ceaa:	2c00      	cmp	r4, #0
 800ceac:	dc5f      	bgt.n	800cf6e <__kernel_rem_pio2f+0x4a2>
 800ceae:	4608      	mov	r0, r1
 800ceb0:	461c      	mov	r4, r3
 800ceb2:	2c01      	cmp	r4, #1
 800ceb4:	dc6b      	bgt.n	800cf8e <__kernel_rem_pio2f+0x4c2>
 800ceb6:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800cde4 <__kernel_rem_pio2f+0x318>
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	dc77      	bgt.n	800cfae <__kernel_rem_pio2f+0x4e2>
 800cebe:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800cec2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800cec6:	f1b8 0f00 	cmp.w	r8, #0
 800ceca:	d176      	bne.n	800cfba <__kernel_rem_pio2f+0x4ee>
 800cecc:	edc6 6a00 	vstr	s13, [r6]
 800ced0:	ed86 7a01 	vstr	s14, [r6, #4]
 800ced4:	edc6 7a02 	vstr	s15, [r6, #8]
 800ced8:	e02c      	b.n	800cf34 <__kernel_rem_pio2f+0x468>
 800ceda:	aa56      	add	r2, sp, #344	; 0x158
 800cedc:	4411      	add	r1, r2
 800cede:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800cde4 <__kernel_rem_pio2f+0x318>
 800cee2:	399c      	subs	r1, #156	; 0x9c
 800cee4:	4618      	mov	r0, r3
 800cee6:	2800      	cmp	r0, #0
 800cee8:	da32      	bge.n	800cf50 <__kernel_rem_pio2f+0x484>
 800ceea:	f1b8 0f00 	cmp.w	r8, #0
 800ceee:	d035      	beq.n	800cf5c <__kernel_rem_pio2f+0x490>
 800cef0:	eef1 7a47 	vneg.f32	s15, s14
 800cef4:	edc6 7a00 	vstr	s15, [r6]
 800cef8:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800cefc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf00:	a82f      	add	r0, sp, #188	; 0xbc
 800cf02:	2101      	movs	r1, #1
 800cf04:	428b      	cmp	r3, r1
 800cf06:	da2c      	bge.n	800cf62 <__kernel_rem_pio2f+0x496>
 800cf08:	f1b8 0f00 	cmp.w	r8, #0
 800cf0c:	d001      	beq.n	800cf12 <__kernel_rem_pio2f+0x446>
 800cf0e:	eef1 7a67 	vneg.f32	s15, s15
 800cf12:	edc6 7a01 	vstr	s15, [r6, #4]
 800cf16:	e00d      	b.n	800cf34 <__kernel_rem_pio2f+0x468>
 800cf18:	aa56      	add	r2, sp, #344	; 0x158
 800cf1a:	4411      	add	r1, r2
 800cf1c:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800cde4 <__kernel_rem_pio2f+0x318>
 800cf20:	399c      	subs	r1, #156	; 0x9c
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	da0e      	bge.n	800cf44 <__kernel_rem_pio2f+0x478>
 800cf26:	f1b8 0f00 	cmp.w	r8, #0
 800cf2a:	d001      	beq.n	800cf30 <__kernel_rem_pio2f+0x464>
 800cf2c:	eef1 7a67 	vneg.f32	s15, s15
 800cf30:	edc6 7a00 	vstr	s15, [r6]
 800cf34:	9b01      	ldr	r3, [sp, #4]
 800cf36:	f003 0007 	and.w	r0, r3, #7
 800cf3a:	b057      	add	sp, #348	; 0x15c
 800cf3c:	ecbd 8b04 	vpop	{d8-d9}
 800cf40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf44:	ed31 7a01 	vldmdb	r1!, {s14}
 800cf48:	3b01      	subs	r3, #1
 800cf4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cf4e:	e7e8      	b.n	800cf22 <__kernel_rem_pio2f+0x456>
 800cf50:	ed71 7a01 	vldmdb	r1!, {s15}
 800cf54:	3801      	subs	r0, #1
 800cf56:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cf5a:	e7c4      	b.n	800cee6 <__kernel_rem_pio2f+0x41a>
 800cf5c:	eef0 7a47 	vmov.f32	s15, s14
 800cf60:	e7c8      	b.n	800cef4 <__kernel_rem_pio2f+0x428>
 800cf62:	ecb0 7a01 	vldmia	r0!, {s14}
 800cf66:	3101      	adds	r1, #1
 800cf68:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cf6c:	e7ca      	b.n	800cf04 <__kernel_rem_pio2f+0x438>
 800cf6e:	ed50 7a02 	vldr	s15, [r0, #-8]
 800cf72:	ed70 6a01 	vldmdb	r0!, {s13}
 800cf76:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cf7a:	3c01      	subs	r4, #1
 800cf7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf80:	ed00 7a01 	vstr	s14, [r0, #-4]
 800cf84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf88:	edc0 7a00 	vstr	s15, [r0]
 800cf8c:	e78d      	b.n	800ceaa <__kernel_rem_pio2f+0x3de>
 800cf8e:	ed50 7a02 	vldr	s15, [r0, #-8]
 800cf92:	ed70 6a01 	vldmdb	r0!, {s13}
 800cf96:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cf9a:	3c01      	subs	r4, #1
 800cf9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cfa0:	ed00 7a01 	vstr	s14, [r0, #-4]
 800cfa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfa8:	edc0 7a00 	vstr	s15, [r0]
 800cfac:	e781      	b.n	800ceb2 <__kernel_rem_pio2f+0x3e6>
 800cfae:	ed31 7a01 	vldmdb	r1!, {s14}
 800cfb2:	3b01      	subs	r3, #1
 800cfb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cfb8:	e77f      	b.n	800ceba <__kernel_rem_pio2f+0x3ee>
 800cfba:	eef1 6a66 	vneg.f32	s13, s13
 800cfbe:	eeb1 7a47 	vneg.f32	s14, s14
 800cfc2:	edc6 6a00 	vstr	s13, [r6]
 800cfc6:	ed86 7a01 	vstr	s14, [r6, #4]
 800cfca:	eef1 7a67 	vneg.f32	s15, s15
 800cfce:	e781      	b.n	800ced4 <__kernel_rem_pio2f+0x408>

0800cfd0 <__kernel_sinf>:
 800cfd0:	ee10 3a10 	vmov	r3, s0
 800cfd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cfd8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800cfdc:	da04      	bge.n	800cfe8 <__kernel_sinf+0x18>
 800cfde:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800cfe2:	ee17 3a90 	vmov	r3, s15
 800cfe6:	b35b      	cbz	r3, 800d040 <__kernel_sinf+0x70>
 800cfe8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cfec:	eddf 7a15 	vldr	s15, [pc, #84]	; 800d044 <__kernel_sinf+0x74>
 800cff0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800d048 <__kernel_sinf+0x78>
 800cff4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cff8:	eddf 7a14 	vldr	s15, [pc, #80]	; 800d04c <__kernel_sinf+0x7c>
 800cffc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d000:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800d050 <__kernel_sinf+0x80>
 800d004:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d008:	eddf 7a12 	vldr	s15, [pc, #72]	; 800d054 <__kernel_sinf+0x84>
 800d00c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800d010:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d014:	b930      	cbnz	r0, 800d024 <__kernel_sinf+0x54>
 800d016:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800d058 <__kernel_sinf+0x88>
 800d01a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d01e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800d022:	4770      	bx	lr
 800d024:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d028:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d02c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800d030:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800d034:	eddf 7a09 	vldr	s15, [pc, #36]	; 800d05c <__kernel_sinf+0x8c>
 800d038:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800d03c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800d040:	4770      	bx	lr
 800d042:	bf00      	nop
 800d044:	2f2ec9d3 	.word	0x2f2ec9d3
 800d048:	b2d72f34 	.word	0xb2d72f34
 800d04c:	3638ef1b 	.word	0x3638ef1b
 800d050:	b9500d01 	.word	0xb9500d01
 800d054:	3c088889 	.word	0x3c088889
 800d058:	be2aaaab 	.word	0xbe2aaaab
 800d05c:	3e2aaaab 	.word	0x3e2aaaab

0800d060 <fabsf>:
 800d060:	ee10 3a10 	vmov	r3, s0
 800d064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d068:	ee00 3a10 	vmov	s0, r3
 800d06c:	4770      	bx	lr
	...

0800d070 <floorf>:
 800d070:	ee10 3a10 	vmov	r3, s0
 800d074:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d078:	0dca      	lsrs	r2, r1, #23
 800d07a:	3a7f      	subs	r2, #127	; 0x7f
 800d07c:	2a16      	cmp	r2, #22
 800d07e:	dc2a      	bgt.n	800d0d6 <floorf+0x66>
 800d080:	2a00      	cmp	r2, #0
 800d082:	da11      	bge.n	800d0a8 <floorf+0x38>
 800d084:	eddf 7a18 	vldr	s15, [pc, #96]	; 800d0e8 <floorf+0x78>
 800d088:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d08c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d094:	dd05      	ble.n	800d0a2 <floorf+0x32>
 800d096:	2b00      	cmp	r3, #0
 800d098:	da23      	bge.n	800d0e2 <floorf+0x72>
 800d09a:	4a14      	ldr	r2, [pc, #80]	; (800d0ec <floorf+0x7c>)
 800d09c:	2900      	cmp	r1, #0
 800d09e:	bf18      	it	ne
 800d0a0:	4613      	movne	r3, r2
 800d0a2:	ee00 3a10 	vmov	s0, r3
 800d0a6:	4770      	bx	lr
 800d0a8:	4911      	ldr	r1, [pc, #68]	; (800d0f0 <floorf+0x80>)
 800d0aa:	4111      	asrs	r1, r2
 800d0ac:	420b      	tst	r3, r1
 800d0ae:	d0fa      	beq.n	800d0a6 <floorf+0x36>
 800d0b0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800d0e8 <floorf+0x78>
 800d0b4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d0b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0c0:	ddef      	ble.n	800d0a2 <floorf+0x32>
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	bfbe      	ittt	lt
 800d0c6:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800d0ca:	fa40 f202 	asrlt.w	r2, r0, r2
 800d0ce:	189b      	addlt	r3, r3, r2
 800d0d0:	ea23 0301 	bic.w	r3, r3, r1
 800d0d4:	e7e5      	b.n	800d0a2 <floorf+0x32>
 800d0d6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d0da:	d3e4      	bcc.n	800d0a6 <floorf+0x36>
 800d0dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d0e0:	4770      	bx	lr
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	e7dd      	b.n	800d0a2 <floorf+0x32>
 800d0e6:	bf00      	nop
 800d0e8:	7149f2ca 	.word	0x7149f2ca
 800d0ec:	bf800000 	.word	0xbf800000
 800d0f0:	007fffff 	.word	0x007fffff

0800d0f4 <scalbnf>:
 800d0f4:	b508      	push	{r3, lr}
 800d0f6:	ee10 2a10 	vmov	r2, s0
 800d0fa:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800d0fe:	ed2d 8b02 	vpush	{d8}
 800d102:	eef0 0a40 	vmov.f32	s1, s0
 800d106:	d004      	beq.n	800d112 <scalbnf+0x1e>
 800d108:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d10c:	d306      	bcc.n	800d11c <scalbnf+0x28>
 800d10e:	ee70 0a00 	vadd.f32	s1, s0, s0
 800d112:	ecbd 8b02 	vpop	{d8}
 800d116:	eeb0 0a60 	vmov.f32	s0, s1
 800d11a:	bd08      	pop	{r3, pc}
 800d11c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d120:	d21c      	bcs.n	800d15c <scalbnf+0x68>
 800d122:	4b1f      	ldr	r3, [pc, #124]	; (800d1a0 <scalbnf+0xac>)
 800d124:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d1a4 <scalbnf+0xb0>
 800d128:	4298      	cmp	r0, r3
 800d12a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800d12e:	db10      	blt.n	800d152 <scalbnf+0x5e>
 800d130:	ee10 2a90 	vmov	r2, s1
 800d134:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800d138:	3b19      	subs	r3, #25
 800d13a:	4403      	add	r3, r0
 800d13c:	2bfe      	cmp	r3, #254	; 0xfe
 800d13e:	dd0f      	ble.n	800d160 <scalbnf+0x6c>
 800d140:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800d1a8 <scalbnf+0xb4>
 800d144:	eeb0 0a48 	vmov.f32	s0, s16
 800d148:	f000 f834 	bl	800d1b4 <copysignf>
 800d14c:	ee60 0a08 	vmul.f32	s1, s0, s16
 800d150:	e7df      	b.n	800d112 <scalbnf+0x1e>
 800d152:	eddf 7a16 	vldr	s15, [pc, #88]	; 800d1ac <scalbnf+0xb8>
 800d156:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800d15a:	e7da      	b.n	800d112 <scalbnf+0x1e>
 800d15c:	0ddb      	lsrs	r3, r3, #23
 800d15e:	e7ec      	b.n	800d13a <scalbnf+0x46>
 800d160:	2b00      	cmp	r3, #0
 800d162:	dd06      	ble.n	800d172 <scalbnf+0x7e>
 800d164:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800d168:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800d16c:	ee00 3a90 	vmov	s1, r3
 800d170:	e7cf      	b.n	800d112 <scalbnf+0x1e>
 800d172:	f113 0f16 	cmn.w	r3, #22
 800d176:	da06      	bge.n	800d186 <scalbnf+0x92>
 800d178:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d17c:	4298      	cmp	r0, r3
 800d17e:	dcdf      	bgt.n	800d140 <scalbnf+0x4c>
 800d180:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800d1ac <scalbnf+0xb8>
 800d184:	e7de      	b.n	800d144 <scalbnf+0x50>
 800d186:	3319      	adds	r3, #25
 800d188:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800d18c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800d190:	eddf 7a07 	vldr	s15, [pc, #28]	; 800d1b0 <scalbnf+0xbc>
 800d194:	ee07 3a10 	vmov	s14, r3
 800d198:	ee67 0a27 	vmul.f32	s1, s14, s15
 800d19c:	e7b9      	b.n	800d112 <scalbnf+0x1e>
 800d19e:	bf00      	nop
 800d1a0:	ffff3cb0 	.word	0xffff3cb0
 800d1a4:	4c000000 	.word	0x4c000000
 800d1a8:	7149f2ca 	.word	0x7149f2ca
 800d1ac:	0da24260 	.word	0x0da24260
 800d1b0:	33000000 	.word	0x33000000

0800d1b4 <copysignf>:
 800d1b4:	ee10 3a10 	vmov	r3, s0
 800d1b8:	ee10 2a90 	vmov	r2, s1
 800d1bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d1c0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	ee00 3a10 	vmov	s0, r3
 800d1ca:	4770      	bx	lr

0800d1cc <_init>:
 800d1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ce:	bf00      	nop
 800d1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1d2:	bc08      	pop	{r3}
 800d1d4:	469e      	mov	lr, r3
 800d1d6:	4770      	bx	lr

0800d1d8 <_fini>:
 800d1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1da:	bf00      	nop
 800d1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1de:	bc08      	pop	{r3}
 800d1e0:	469e      	mov	lr, r3
 800d1e2:	4770      	bx	lr
