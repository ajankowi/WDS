
Usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08005488  08005488  00015488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056bc  080056bc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080056bc  080056bc  000156bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056c4  080056c4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056c4  080056c4  000156c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056c8  080056c8  000156c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080056cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  200001e0  080058ac  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  080058ac  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e506  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000244f  00000000  00000000  0002e716  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b28  00000000  00000000  00030b68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e0  00000000  00000000  00031690  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027a73  00000000  00000000  00032070  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b2ae  00000000  00000000  00059ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eb3ae  00000000  00000000  00064d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015013f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003664  00000000  00000000  001501bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005470 	.word	0x08005470

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08005470 	.word	0x08005470

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000584:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <MX_CRC_Init+0x3c>)
 8000586:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <MX_CRC_Init+0x40>)
 8000588:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <MX_CRC_Init+0x3c>)
 800058c:	2200      	movs	r2, #0
 800058e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000590:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <MX_CRC_Init+0x3c>)
 8000592:	2200      	movs	r2, #0
 8000594:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <MX_CRC_Init+0x3c>)
 8000598:	2200      	movs	r2, #0
 800059a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800059c:	4b07      	ldr	r3, [pc, #28]	; (80005bc <MX_CRC_Init+0x3c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005a2:	4b06      	ldr	r3, [pc, #24]	; (80005bc <MX_CRC_Init+0x3c>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <MX_CRC_Init+0x3c>)
 80005aa:	f000 fd5d 	bl	8001068 <HAL_CRC_Init>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80005b4:	f000 f9dc 	bl	8000970 <Error_Handler>
  }

}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000208 	.word	0x20000208
 80005c0:	40023000 	.word	0x40023000

080005c4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <HAL_CRC_MspInit+0x38>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d10b      	bne.n	80005ee <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <HAL_CRC_MspInit+0x3c>)
 80005d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005da:	4a09      	ldr	r2, [pc, #36]	; (8000600 <HAL_CRC_MspInit+0x3c>)
 80005dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005e0:	6493      	str	r3, [r2, #72]	; 0x48
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <HAL_CRC_MspInit+0x3c>)
 80005e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40023000 	.word	0x40023000
 8000600:	40021000 	.word	0x40021000

08000604 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	; 0x28
 8000608:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b2b      	ldr	r3, [pc, #172]	; (80006c8 <MX_GPIO_Init+0xc4>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	4a2a      	ldr	r2, [pc, #168]	; (80006c8 <MX_GPIO_Init+0xc4>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000626:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <MX_GPIO_Init+0xc4>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000632:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <MX_GPIO_Init+0xc4>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	4a24      	ldr	r2, [pc, #144]	; (80006c8 <MX_GPIO_Init+0xc4>)
 8000638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063e:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <MX_GPIO_Init+0xc4>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_GPIO_Init+0xc4>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	4a1e      	ldr	r2, [pc, #120]	; (80006c8 <MX_GPIO_Init+0xc4>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_GPIO_Init+0xc4>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <MX_GPIO_Init+0xc4>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	4a18      	ldr	r2, [pc, #96]	; (80006c8 <MX_GPIO_Init+0xc4>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <MX_GPIO_Init+0xc4>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2120      	movs	r1, #32
 800067e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000682:	f000 ffc5 	bl	8001610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000686:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_GPIO_Init+0xc8>)
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4619      	mov	r1, r3
 800069a:	480d      	ldr	r0, [pc, #52]	; (80006d0 <MX_GPIO_Init+0xcc>)
 800069c:	f000 fe10 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006a0:	2320      	movs	r3, #32
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	2301      	movs	r3, #1
 80006a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ba:	f000 fe01 	bl	80012c0 <HAL_GPIO_Init>

}
 80006be:	bf00      	nop
 80006c0:	3728      	adds	r7, #40	; 0x28
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000
 80006cc:	10210000 	.word	0x10210000
 80006d0:	48000800 	.word	0x48000800

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f000 fb15 	bl	8000d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 f821 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f7ff ff8f 	bl	8000604 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006e6:	f000 fa6b 	bl	8000bc0 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80006ea:	f7ff ff49 	bl	8000580 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <main+0x48>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <main+0x48>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f042 0220 	orr.w	r2, r2, #32
 80006fc:	601a      	str	r2, [r3, #0]
//  char myarray[10] = "123456";
//  int i;
//  sscanf(myarray, "%d", &i);


  int a = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  printf("Wysyla %d\r\n", a);
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	4806      	ldr	r0, [pc, #24]	; (8000720 <main+0x4c>)
 8000706:	f003 fa9b 	bl	8003c40 <iprintf>
	  HAL_Delay(1000);
 800070a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800070e:	f000 fb77 	bl	8000e00 <HAL_Delay>
	  a++;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	3301      	adds	r3, #1
 8000716:	607b      	str	r3, [r7, #4]
	  printf("Wysyla %d\r\n", a);
 8000718:	e7f3      	b.n	8000702 <main+0x2e>
 800071a:	bf00      	nop
 800071c:	20000278 	.word	0x20000278
 8000720:	08005488 	.word	0x08005488

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b0b8      	sub	sp, #224	; 0xe0
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800072e:	2244      	movs	r2, #68	; 0x44
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f003 fa7c 	bl	8003c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000748:	463b      	mov	r3, r7
 800074a:	2288      	movs	r2, #136	; 0x88
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f003 fa6e 	bl	8003c30 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000754:	2302      	movs	r3, #2
 8000756:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800075e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000762:	2310      	movs	r3, #16
 8000764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800076e:	2302      	movs	r3, #2
 8000770:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000774:	2301      	movs	r3, #1
 8000776:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800077a:	230a      	movs	r3, #10
 800077c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000780:	2307      	movs	r3, #7
 8000782:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000786:	2302      	movs	r3, #2
 8000788:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000796:	4618      	mov	r0, r3
 8000798:	f000 ffb6 	bl	8001708 <HAL_RCC_OscConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007a2:	f000 f8e5 	bl	8000970 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	230f      	movs	r3, #15
 80007a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	2303      	movs	r3, #3
 80007ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007c4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007c8:	2104      	movs	r1, #4
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 fb82 	bl	8001ed4 <HAL_RCC_ClockConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007d6:	f000 f8cb 	bl	8000970 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007da:	2302      	movs	r3, #2
 80007dc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007de:	2300      	movs	r3, #0
 80007e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e2:	463b      	mov	r3, r7
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 fd79 	bl	80022dc <HAL_RCCEx_PeriphCLKConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007f0:	f000 f8be 	bl	8000970 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007f8:	f000 ff30 	bl	800165c <HAL_PWREx_ControlVoltageScaling>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000802:	f000 f8b5 	bl	8000970 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	37e0      	adds	r7, #224	; 0xe0
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len){
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]

	  if(HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, 100) != HAL_OK){
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	b29a      	uxth	r2, r3
 8000820:	2364      	movs	r3, #100	; 0x64
 8000822:	68b9      	ldr	r1, [r7, #8]
 8000824:	4806      	ldr	r0, [pc, #24]	; (8000840 <_write+0x30>)
 8000826:	f002 fa57 	bl	8002cd8 <HAL_UART_Transmit>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <_write+0x24>
		  Error_Handler();
 8000830:	f000 f89e 	bl	8000970 <Error_Handler>
	  }

	return len;
 8000834:	687b      	ldr	r3, [r7, #4]
}
 8000836:	4618      	mov	r0, r3
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000278 	.word	0x20000278

08000844 <resetuj>:
	 	// Zapisanie wspolrzednych do bufora
	printf("X %d %d %d xD\n\r",x,y,3*z );

}

void resetuj(char *tab){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]

	int8_t k = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	73fb      	strb	r3, [r7, #15]

	k = strlen(tab);
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff fcbd 	bl	80001d0 <strlen>
 8000856:	4603      	mov	r3, r0
 8000858:	73fb      	strb	r3, [r7, #15]

	while(k>=-1){
 800085a:	e00b      	b.n	8000874 <resetuj+0x30>
		tab[k] = '\0';
 800085c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	4413      	add	r3, r2
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
		k--;
 8000868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	3b01      	subs	r3, #1
 8000870:	b2db      	uxtb	r3, r3
 8000872:	73fb      	strb	r3, [r7, #15]
	while(k>=-1){
 8000874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800087c:	daee      	bge.n	800085c <resetuj+0x18>
	}

}
 800087e:	bf00      	nop
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

	//resetuj();


	switch(r){
 8000890:	4b2c      	ldr	r3, [pc, #176]	; (8000944 <HAL_UART_RxCpltCallback+0xbc>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b20      	cmp	r3, #32
 8000896:	d002      	beq.n	800089e <HAL_UART_RxCpltCallback+0x16>
 8000898:	2b40      	cmp	r3, #64	; 0x40
 800089a:	d02d      	beq.n	80008f8 <HAL_UART_RxCpltCallback+0x70>
 800089c:	e042      	b.n	8000924 <HAL_UART_RxCpltCallback+0x9c>

	case ' ':
		if(flaga_1){
 800089e:	4b2a      	ldr	r3, [pc, #168]	; (8000948 <HAL_UART_RxCpltCallback+0xc0>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d015      	beq.n	80008d2 <HAL_UART_RxCpltCallback+0x4a>
			strncpy(s1,Rx,i);
 80008a6:	4b29      	ldr	r3, [pc, #164]	; (800094c <HAL_UART_RxCpltCallback+0xc4>)
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	461a      	mov	r2, r3
 80008ac:	4928      	ldr	r1, [pc, #160]	; (8000950 <HAL_UART_RxCpltCallback+0xc8>)
 80008ae:	4829      	ldr	r0, [pc, #164]	; (8000954 <HAL_UART_RxCpltCallback+0xcc>)
 80008b0:	f003 fa4d 	bl	8003d4e <strncpy>
			sscanf(s1, "%d", &x);
 80008b4:	4a28      	ldr	r2, [pc, #160]	; (8000958 <HAL_UART_RxCpltCallback+0xd0>)
 80008b6:	4929      	ldr	r1, [pc, #164]	; (800095c <HAL_UART_RxCpltCallback+0xd4>)
 80008b8:	4826      	ldr	r0, [pc, #152]	; (8000954 <HAL_UART_RxCpltCallback+0xcc>)
 80008ba:	f003 f9d9 	bl	8003c70 <siscanf>
			flaga_1 = 0;
 80008be:	4b22      	ldr	r3, [pc, #136]	; (8000948 <HAL_UART_RxCpltCallback+0xc0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
			i=0;
 80008c4:	4b21      	ldr	r3, [pc, #132]	; (800094c <HAL_UART_RxCpltCallback+0xc4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	801a      	strh	r2, [r3, #0]
			resetuj(s1);
 80008ca:	4822      	ldr	r0, [pc, #136]	; (8000954 <HAL_UART_RxCpltCallback+0xcc>)
 80008cc:	f7ff ffba 	bl	8000844 <resetuj>
			break;
 80008d0:	e033      	b.n	800093a <HAL_UART_RxCpltCallback+0xb2>
		}else{
			strncpy(s2,Rx,i);
 80008d2:	4b1e      	ldr	r3, [pc, #120]	; (800094c <HAL_UART_RxCpltCallback+0xc4>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	491d      	ldr	r1, [pc, #116]	; (8000950 <HAL_UART_RxCpltCallback+0xc8>)
 80008da:	4821      	ldr	r0, [pc, #132]	; (8000960 <HAL_UART_RxCpltCallback+0xd8>)
 80008dc:	f003 fa37 	bl	8003d4e <strncpy>
			sscanf(Rx, "%d", &y);
 80008e0:	4a20      	ldr	r2, [pc, #128]	; (8000964 <HAL_UART_RxCpltCallback+0xdc>)
 80008e2:	491e      	ldr	r1, [pc, #120]	; (800095c <HAL_UART_RxCpltCallback+0xd4>)
 80008e4:	481a      	ldr	r0, [pc, #104]	; (8000950 <HAL_UART_RxCpltCallback+0xc8>)
 80008e6:	f003 f9c3 	bl	8003c70 <siscanf>
			i=0;
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <HAL_UART_RxCpltCallback+0xc4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	801a      	strh	r2, [r3, #0]
			resetuj(s2);
 80008f0:	481b      	ldr	r0, [pc, #108]	; (8000960 <HAL_UART_RxCpltCallback+0xd8>)
 80008f2:	f7ff ffa7 	bl	8000844 <resetuj>
			break;
 80008f6:	e020      	b.n	800093a <HAL_UART_RxCpltCallback+0xb2>
		}

		break;

	case '@':
		strncpy(s3,Rx,i);
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <HAL_UART_RxCpltCallback+0xc4>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4914      	ldr	r1, [pc, #80]	; (8000950 <HAL_UART_RxCpltCallback+0xc8>)
 8000900:	4819      	ldr	r0, [pc, #100]	; (8000968 <HAL_UART_RxCpltCallback+0xe0>)
 8000902:	f003 fa24 	bl	8003d4e <strncpy>
		sscanf(Rx, "%d", &z);
 8000906:	4a19      	ldr	r2, [pc, #100]	; (800096c <HAL_UART_RxCpltCallback+0xe4>)
 8000908:	4914      	ldr	r1, [pc, #80]	; (800095c <HAL_UART_RxCpltCallback+0xd4>)
 800090a:	4811      	ldr	r0, [pc, #68]	; (8000950 <HAL_UART_RxCpltCallback+0xc8>)
 800090c:	f003 f9b0 	bl	8003c70 <siscanf>
		i=0;
 8000910:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_UART_RxCpltCallback+0xc4>)
 8000912:	2200      	movs	r2, #0
 8000914:	801a      	strh	r2, [r3, #0]
		flaga_1 = 1;
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <HAL_UART_RxCpltCallback+0xc0>)
 8000918:	2201      	movs	r2, #1
 800091a:	601a      	str	r2, [r3, #0]
		resetuj(s3);
 800091c:	4812      	ldr	r0, [pc, #72]	; (8000968 <HAL_UART_RxCpltCallback+0xe0>)
 800091e:	f7ff ff91 	bl	8000844 <resetuj>
		break;
 8000922:	e00a      	b.n	800093a <HAL_UART_RxCpltCallback+0xb2>

	default: Rx[i++]=r;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_UART_RxCpltCallback+0xc4>)
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	1c5a      	adds	r2, r3, #1
 800092a:	b291      	uxth	r1, r2
 800092c:	4a07      	ldr	r2, [pc, #28]	; (800094c <HAL_UART_RxCpltCallback+0xc4>)
 800092e:	8011      	strh	r1, [r2, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <HAL_UART_RxCpltCallback+0xbc>)
 8000934:	7819      	ldrb	r1, [r3, #0]
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_UART_RxCpltCallback+0xc8>)
 8000938:	5499      	strb	r1, [r3, r2]

	}



}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000023e 	.word	0x2000023e
 8000948:	20000000 	.word	0x20000000
 800094c:	20000258 	.word	0x20000258
 8000950:	20000240 	.word	0x20000240
 8000954:	20000234 	.word	0x20000234
 8000958:	2000022c 	.word	0x2000022c
 800095c:	080054a4 	.word	0x080054a4
 8000960:	20000260 	.word	0x20000260
 8000964:	2000025c 	.word	0x2000025c
 8000968:	2000026c 	.word	0x2000026c
 800096c:	20000254 	.word	0x20000254

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
	...

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <HAL_MspInit+0x44>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098a:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <HAL_MspInit+0x44>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6613      	str	r3, [r2, #96]	; 0x60
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <HAL_MspInit+0x44>)
 8000994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_MspInit+0x44>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_MspInit+0x44>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	6593      	str	r3, [r2, #88]	; 0x58
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_MspInit+0x44>)
 80009ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <MemManage_Handler+0x4>

080009e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <UsageFault_Handler+0x4>

080009ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1c:	f000 f9d0 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <USART2_IRQHandler+0x18>)
 8000a2a:	f002 fa8b 	bl	8002f44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, &r, 1);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4903      	ldr	r1, [pc, #12]	; (8000a40 <USART2_IRQHandler+0x1c>)
 8000a32:	4802      	ldr	r0, [pc, #8]	; (8000a3c <USART2_IRQHandler+0x18>)
 8000a34:	f002 f9e4 	bl	8002e00 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000278 	.word	0x20000278
 8000a40:	2000023e 	.word	0x2000023e

08000a44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	e00a      	b.n	8000a6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a56:	f3af 8000 	nop.w
 8000a5a:	4601      	mov	r1, r0
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	1c5a      	adds	r2, r3, #1
 8000a60:	60ba      	str	r2, [r7, #8]
 8000a62:	b2ca      	uxtb	r2, r1
 8000a64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	dbf0      	blt.n	8000a56 <_read+0x12>
	}

return len;
 8000a74:	687b      	ldr	r3, [r7, #4]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
	return -1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aa6:	605a      	str	r2, [r3, #4]
	return 0;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <_isatty>:

int _isatty(int file)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
	return 1;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af0:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <_sbrk+0x5c>)
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <_sbrk+0x60>)
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d102      	bne.n	8000b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <_sbrk+0x64>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <_sbrk+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d207      	bcs.n	8000b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b18:	f003 f860 	bl	8003bdc <__errno>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	230c      	movs	r3, #12
 8000b20:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	e009      	b.n	8000b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <_sbrk+0x64>)
 8000b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20018000 	.word	0x20018000
 8000b48:	00000400 	.word	0x00000400
 8000b4c:	200001fc 	.word	0x200001fc
 8000b50:	20000300 	.word	0x20000300

08000b54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <SystemInit+0x64>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5e:	4a16      	ldr	r2, [pc, #88]	; (8000bb8 <SystemInit+0x64>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <SystemInit+0x68>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <SystemInit+0x68>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <SystemInit+0x68>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <SystemInit+0x68>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <SystemInit+0x68>)
 8000b80:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b84:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b88:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <SystemInit+0x68>)
 8000b8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b90:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <SystemInit+0x68>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a09      	ldr	r2, [pc, #36]	; (8000bbc <SystemInit+0x68>)
 8000b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b9c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b9e:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <SystemInit+0x68>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <SystemInit+0x64>)
 8000ba6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000baa:	609a      	str	r2, [r3, #8]
#endif
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_USART2_UART_Init+0x58>)
 8000bc6:	4a15      	ldr	r2, [pc, #84]	; (8000c1c <MX_USART2_UART_Init+0x5c>)
 8000bc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_USART2_UART_Init+0x58>)
 8000bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_USART2_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_USART2_UART_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_USART2_UART_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_USART2_UART_Init+0x58>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <MX_USART2_UART_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_USART2_UART_Init+0x58>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <MX_USART2_UART_Init+0x58>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_USART2_UART_Init+0x58>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_USART2_UART_Init+0x58>)
 8000c04:	f002 f81a 	bl	8002c3c <HAL_UART_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c0e:	f7ff feaf 	bl	8000970 <Error_Handler>
  }

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000278 	.word	0x20000278
 8000c1c:	40004400 	.word	0x40004400

08000c20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a1b      	ldr	r2, [pc, #108]	; (8000cac <HAL_UART_MspInit+0x8c>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d130      	bne.n	8000ca4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c42:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <HAL_UART_MspInit+0x90>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c46:	4a1a      	ldr	r2, [pc, #104]	; (8000cb0 <HAL_UART_MspInit+0x90>)
 8000c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <HAL_UART_MspInit+0x90>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_UART_MspInit+0x90>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <HAL_UART_MspInit+0x90>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_UART_MspInit+0x90>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8000c72:	230c      	movs	r3, #12
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c82:	2307      	movs	r3, #7
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c90:	f000 fb16 	bl	80012c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	2026      	movs	r0, #38	; 0x26
 8000c9a:	f000 f9ae 	bl	8000ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c9e:	2026      	movs	r0, #38	; 0x26
 8000ca0:	f000 f9c7 	bl	8001032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	3728      	adds	r7, #40	; 0x28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40004400 	.word	0x40004400
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb8:	f7ff ff4c 	bl	8000b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000cbc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000cbe:	e003      	b.n	8000cc8 <LoopCopyDataInit>

08000cc0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cc2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000cc4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cc6:	3104      	adds	r1, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000cc8:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ccc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cd0:	d3f6      	bcc.n	8000cc0 <CopyDataInit>
	ldr	r2, =_sbss
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cd4:	e002      	b.n	8000cdc <LoopFillZerobss>

08000cd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cd6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cd8:	f842 3b04 	str.w	r3, [r2], #4

08000cdc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <LoopForever+0x16>)
	cmp	r2, r3
 8000cde:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ce0:	d3f9      	bcc.n	8000cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f002 ff81 	bl	8003be8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ce6:	f7ff fcf5 	bl	80006d4 <main>

08000cea <LoopForever>:

LoopForever:
    b LoopForever
 8000cea:	e7fe      	b.n	8000cea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cec:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000cf0:	080056cc 	.word	0x080056cc
	ldr	r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cf8:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8000cfc:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8000d00:	20000300 	.word	0x20000300

08000d04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC1_2_IRQHandler>
	...

08000d08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_Init+0x3c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <HAL_Init+0x3c>)
 8000d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1e:	2003      	movs	r0, #3
 8000d20:	f000 f960 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d24:	2000      	movs	r0, #0
 8000d26:	f000 f80f 	bl	8000d48 <HAL_InitTick>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d002      	beq.n	8000d36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	71fb      	strb	r3, [r7, #7]
 8000d34:	e001      	b.n	8000d3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d36:	f7ff fe23 	bl	8000980 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40022000 	.word	0x40022000

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <HAL_InitTick+0x6c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d023      	beq.n	8000da4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <HAL_InitTick+0x70>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <HAL_InitTick+0x6c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f96b 	bl	800104e <HAL_SYSTICK_Config>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d10f      	bne.n	8000d9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d809      	bhi.n	8000d98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d84:	2200      	movs	r2, #0
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f000 f935 	bl	8000ffa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_InitTick+0x74>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	e007      	b.n	8000da8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	e004      	b.n	8000da8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
 8000da2:	e001      	b.n	8000da8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000000c 	.word	0x2000000c
 8000db8:	20000004 	.word	0x20000004
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x20>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x24>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <HAL_IncTick+0x24>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	2000000c 	.word	0x2000000c
 8000de4:	200002f8 	.word	0x200002f8

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <HAL_GetTick+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	200002f8 	.word	0x200002f8

08000e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e08:	f7ff ffee 	bl	8000de8 <HAL_GetTick>
 8000e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e18:	d005      	beq.n	8000e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_Delay+0x40>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4413      	add	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e26:	bf00      	nop
 8000e28:	f7ff ffde 	bl	8000de8 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d8f7      	bhi.n	8000e28 <HAL_Delay+0x28>
  {
  }
}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	2000000c 	.word	0x2000000c

08000e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e76:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	60d3      	str	r3, [r2, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	db0b      	blt.n	8000ed2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f003 021f 	and.w	r2, r3, #31
 8000ec0:	4907      	ldr	r1, [pc, #28]	; (8000ee0 <__NVIC_EnableIRQ+0x38>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	095b      	lsrs	r3, r3, #5
 8000ec8:	2001      	movs	r0, #1
 8000eca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e100 	.word	0xe000e100

08000ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db0a      	blt.n	8000f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	490c      	ldr	r1, [pc, #48]	; (8000f30 <__NVIC_SetPriority+0x4c>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	0112      	lsls	r2, r2, #4
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	440b      	add	r3, r1
 8000f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f0c:	e00a      	b.n	8000f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4908      	ldr	r1, [pc, #32]	; (8000f34 <__NVIC_SetPriority+0x50>)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	3b04      	subs	r3, #4
 8000f1c:	0112      	lsls	r2, r2, #4
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	440b      	add	r3, r1
 8000f22:	761a      	strb	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f1c3 0307 	rsb	r3, r3, #7
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	bf28      	it	cs
 8000f56:	2304      	movcs	r3, #4
 8000f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	2b06      	cmp	r3, #6
 8000f60:	d902      	bls.n	8000f68 <NVIC_EncodePriority+0x30>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3b03      	subs	r3, #3
 8000f66:	e000      	b.n	8000f6a <NVIC_EncodePriority+0x32>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43da      	mvns	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	43d9      	mvns	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	4313      	orrs	r3, r2
         );
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb0:	d301      	bcc.n	8000fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00f      	b.n	8000fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <SysTick_Config+0x40>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f7ff ff8e 	bl	8000ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <SysTick_Config+0x40>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <SysTick_Config+0x40>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff29 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800100c:	f7ff ff3e 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8001010:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	f7ff ff8e 	bl	8000f38 <NVIC_EncodePriority>
 800101c:	4602      	mov	r2, r0
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff5d 	bl	8000ee4 <__NVIC_SetPriority>
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff31 	bl	8000ea8 <__NVIC_EnableIRQ>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffa2 	bl	8000fa0 <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e054      	b.n	8001124 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7f5b      	ldrb	r3, [r3, #29]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d105      	bne.n	8001090 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff fa9a 	bl	80005c4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2202      	movs	r2, #2
 8001094:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	791b      	ldrb	r3, [r3, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10c      	bne.n	80010b8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a22      	ldr	r2, [pc, #136]	; (800112c <HAL_CRC_Init+0xc4>)
 80010a4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0218 	bic.w	r2, r2, #24
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	e00c      	b.n	80010d2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6899      	ldr	r1, [r3, #8]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	461a      	mov	r2, r3
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f834 	bl	8001130 <HAL_CRCEx_Polynomial_Set>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e028      	b.n	8001124 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	795b      	ldrb	r3, [r3, #5]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d105      	bne.n	80010e6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f04f 32ff 	mov.w	r2, #4294967295
 80010e2:	611a      	str	r2, [r3, #16]
 80010e4:	e004      	b.n	80010f0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	6912      	ldr	r2, [r2, #16]
 80010ee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	695a      	ldr	r2, [r3, #20]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	430a      	orrs	r2, r1
 8001104:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	699a      	ldr	r2, [r3, #24]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	430a      	orrs	r2, r1
 800111a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2201      	movs	r2, #1
 8001120:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	04c11db7 	.word	0x04c11db7

08001130 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001130:	b480      	push	{r7}
 8001132:	b087      	sub	sp, #28
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001140:	231f      	movs	r3, #31
 8001142:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001144:	bf00      	nop
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1e5a      	subs	r2, r3, #1
 800114a:	613a      	str	r2, [r7, #16]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d009      	beq.n	8001164 <HAL_CRCEx_Polynomial_Set+0x34>
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	f003 031f 	and.w	r3, r3, #31
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	fa22 f303 	lsr.w	r3, r2, r3
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f0      	beq.n	8001146 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b18      	cmp	r3, #24
 8001168:	d846      	bhi.n	80011f8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800116a:	a201      	add	r2, pc, #4	; (adr r2, 8001170 <HAL_CRCEx_Polynomial_Set+0x40>)
 800116c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001170:	080011ff 	.word	0x080011ff
 8001174:	080011f9 	.word	0x080011f9
 8001178:	080011f9 	.word	0x080011f9
 800117c:	080011f9 	.word	0x080011f9
 8001180:	080011f9 	.word	0x080011f9
 8001184:	080011f9 	.word	0x080011f9
 8001188:	080011f9 	.word	0x080011f9
 800118c:	080011f9 	.word	0x080011f9
 8001190:	080011ed 	.word	0x080011ed
 8001194:	080011f9 	.word	0x080011f9
 8001198:	080011f9 	.word	0x080011f9
 800119c:	080011f9 	.word	0x080011f9
 80011a0:	080011f9 	.word	0x080011f9
 80011a4:	080011f9 	.word	0x080011f9
 80011a8:	080011f9 	.word	0x080011f9
 80011ac:	080011f9 	.word	0x080011f9
 80011b0:	080011e1 	.word	0x080011e1
 80011b4:	080011f9 	.word	0x080011f9
 80011b8:	080011f9 	.word	0x080011f9
 80011bc:	080011f9 	.word	0x080011f9
 80011c0:	080011f9 	.word	0x080011f9
 80011c4:	080011f9 	.word	0x080011f9
 80011c8:	080011f9 	.word	0x080011f9
 80011cc:	080011f9 	.word	0x080011f9
 80011d0:	080011d5 	.word	0x080011d5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d913      	bls.n	8001202 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80011de:	e010      	b.n	8001202 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	2b07      	cmp	r3, #7
 80011e4:	d90f      	bls.n	8001206 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80011ea:	e00c      	b.n	8001206 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	2b0f      	cmp	r3, #15
 80011f0:	d90b      	bls.n	800120a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80011f6:	e008      	b.n	800120a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	75fb      	strb	r3, [r7, #23]
      break;
 80011fc:	e006      	b.n	800120c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80011fe:	bf00      	nop
 8001200:	e004      	b.n	800120c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001202:	bf00      	nop
 8001204:	e002      	b.n	800120c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001206:	bf00      	nop
 8001208:	e000      	b.n	800120c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800120a:	bf00      	nop
  }
  if (status == HAL_OK)
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10d      	bne.n	800122e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f023 0118 	bic.w	r1, r3, #24
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	430a      	orrs	r2, r1
 800122c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800122e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001230:	4618      	mov	r0, r3
 8001232:	371c      	adds	r7, #28
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d005      	beq.n	8001260 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2204      	movs	r2, #4
 8001258:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	e029      	b.n	80012b4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 020e 	bic.w	r2, r2, #14
 800126e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0201 	bic.w	r2, r2, #1
 800127e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001284:	f003 021c 	and.w	r2, r3, #28
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	2101      	movs	r1, #1
 800128e:	fa01 f202 	lsl.w	r2, r1, r2
 8001292:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	4798      	blx	r3
    }
  }
  return status;
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ce:	e17f      	b.n	80015d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	2101      	movs	r1, #1
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	fa01 f303 	lsl.w	r3, r1, r3
 80012dc:	4013      	ands	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 8171 	beq.w	80015ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d00b      	beq.n	8001308 <HAL_GPIO_Init+0x48>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d007      	beq.n	8001308 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012fc:	2b11      	cmp	r3, #17
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b12      	cmp	r3, #18
 8001306:	d130      	bne.n	800136a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	2203      	movs	r2, #3
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800133e:	2201      	movs	r2, #1
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	091b      	lsrs	r3, r3, #4
 8001354:	f003 0201 	and.w	r2, r3, #1
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b03      	cmp	r3, #3
 8001374:	d118      	bne.n	80013a8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800137c:	2201      	movs	r2, #1
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	08db      	lsrs	r3, r3, #3
 8001392:	f003 0201 	and.w	r2, r3, #1
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x128>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b12      	cmp	r3, #18
 80013e6:	d123      	bne.n	8001430 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	08da      	lsrs	r2, r3, #3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3208      	adds	r2, #8
 80013f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	220f      	movs	r2, #15
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	691a      	ldr	r2, [r3, #16]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	08da      	lsrs	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3208      	adds	r2, #8
 800142a:	6939      	ldr	r1, [r7, #16]
 800142c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0203 	and.w	r2, r3, #3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 80ac 	beq.w	80015ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	4b5e      	ldr	r3, [pc, #376]	; (80015ec <HAL_GPIO_Init+0x32c>)
 8001474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001476:	4a5d      	ldr	r2, [pc, #372]	; (80015ec <HAL_GPIO_Init+0x32c>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6613      	str	r3, [r2, #96]	; 0x60
 800147e:	4b5b      	ldr	r3, [pc, #364]	; (80015ec <HAL_GPIO_Init+0x32c>)
 8001480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800148a:	4a59      	ldr	r2, [pc, #356]	; (80015f0 <HAL_GPIO_Init+0x330>)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	3302      	adds	r3, #2
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	220f      	movs	r2, #15
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014b4:	d025      	beq.n	8001502 <HAL_GPIO_Init+0x242>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4e      	ldr	r2, [pc, #312]	; (80015f4 <HAL_GPIO_Init+0x334>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d01f      	beq.n	80014fe <HAL_GPIO_Init+0x23e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4d      	ldr	r2, [pc, #308]	; (80015f8 <HAL_GPIO_Init+0x338>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d019      	beq.n	80014fa <HAL_GPIO_Init+0x23a>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4c      	ldr	r2, [pc, #304]	; (80015fc <HAL_GPIO_Init+0x33c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d013      	beq.n	80014f6 <HAL_GPIO_Init+0x236>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4b      	ldr	r2, [pc, #300]	; (8001600 <HAL_GPIO_Init+0x340>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d00d      	beq.n	80014f2 <HAL_GPIO_Init+0x232>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4a      	ldr	r2, [pc, #296]	; (8001604 <HAL_GPIO_Init+0x344>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d007      	beq.n	80014ee <HAL_GPIO_Init+0x22e>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a49      	ldr	r2, [pc, #292]	; (8001608 <HAL_GPIO_Init+0x348>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d101      	bne.n	80014ea <HAL_GPIO_Init+0x22a>
 80014e6:	2306      	movs	r3, #6
 80014e8:	e00c      	b.n	8001504 <HAL_GPIO_Init+0x244>
 80014ea:	2307      	movs	r3, #7
 80014ec:	e00a      	b.n	8001504 <HAL_GPIO_Init+0x244>
 80014ee:	2305      	movs	r3, #5
 80014f0:	e008      	b.n	8001504 <HAL_GPIO_Init+0x244>
 80014f2:	2304      	movs	r3, #4
 80014f4:	e006      	b.n	8001504 <HAL_GPIO_Init+0x244>
 80014f6:	2303      	movs	r3, #3
 80014f8:	e004      	b.n	8001504 <HAL_GPIO_Init+0x244>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e002      	b.n	8001504 <HAL_GPIO_Init+0x244>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <HAL_GPIO_Init+0x244>
 8001502:	2300      	movs	r3, #0
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	f002 0203 	and.w	r2, r2, #3
 800150a:	0092      	lsls	r2, r2, #2
 800150c:	4093      	lsls	r3, r2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001514:	4936      	ldr	r1, [pc, #216]	; (80015f0 <HAL_GPIO_Init+0x330>)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	3302      	adds	r3, #2
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001522:	4b3a      	ldr	r3, [pc, #232]	; (800160c <HAL_GPIO_Init+0x34c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001546:	4a31      	ldr	r2, [pc, #196]	; (800160c <HAL_GPIO_Init+0x34c>)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800154c:	4b2f      	ldr	r3, [pc, #188]	; (800160c <HAL_GPIO_Init+0x34c>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	43db      	mvns	r3, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001570:	4a26      	ldr	r2, [pc, #152]	; (800160c <HAL_GPIO_Init+0x34c>)
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001576:	4b25      	ldr	r3, [pc, #148]	; (800160c <HAL_GPIO_Init+0x34c>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800159a:	4a1c      	ldr	r2, [pc, #112]	; (800160c <HAL_GPIO_Init+0x34c>)
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <HAL_GPIO_Init+0x34c>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015c4:	4a11      	ldr	r2, [pc, #68]	; (800160c <HAL_GPIO_Init+0x34c>)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	3301      	adds	r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa22 f303 	lsr.w	r3, r2, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f47f ae78 	bne.w	80012d0 <HAL_GPIO_Init+0x10>
  }
}
 80015e0:	bf00      	nop
 80015e2:	371c      	adds	r7, #28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40010000 	.word	0x40010000
 80015f4:	48000400 	.word	0x48000400
 80015f8:	48000800 	.word	0x48000800
 80015fc:	48000c00 	.word	0x48000c00
 8001600:	48001000 	.word	0x48001000
 8001604:	48001400 	.word	0x48001400
 8001608:	48001800 	.word	0x48001800
 800160c:	40010400 	.word	0x40010400

08001610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	807b      	strh	r3, [r7, #2]
 800161c:	4613      	mov	r3, r2
 800161e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001620:	787b      	ldrb	r3, [r7, #1]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800162c:	e002      	b.n	8001634 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800162e:	887a      	ldrh	r2, [r7, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <HAL_PWREx_GetVoltageRange+0x18>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40007000 	.word	0x40007000

0800165c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800166a:	d130      	bne.n	80016ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800166c:	4b23      	ldr	r3, [pc, #140]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001678:	d038      	beq.n	80016ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800167a:	4b20      	ldr	r3, [pc, #128]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001682:	4a1e      	ldr	r2, [pc, #120]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001684:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001688:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800168a:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2232      	movs	r2, #50	; 0x32
 8001690:	fb02 f303 	mul.w	r3, r2, r3
 8001694:	4a1b      	ldr	r2, [pc, #108]	; (8001704 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	0c9b      	lsrs	r3, r3, #18
 800169c:	3301      	adds	r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016a0:	e002      	b.n	80016a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b4:	d102      	bne.n	80016bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f2      	bne.n	80016a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c8:	d110      	bne.n	80016ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e00f      	b.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016da:	d007      	beq.n	80016ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016e4:	4a05      	ldr	r2, [pc, #20]	; (80016fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40007000 	.word	0x40007000
 8001700:	20000004 	.word	0x20000004
 8001704:	431bde83 	.word	0x431bde83

08001708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e3d4      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800171a:	4ba1      	ldr	r3, [pc, #644]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001724:	4b9e      	ldr	r3, [pc, #632]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 80e4 	beq.w	8001904 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d007      	beq.n	8001752 <HAL_RCC_OscConfig+0x4a>
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	2b0c      	cmp	r3, #12
 8001746:	f040 808b 	bne.w	8001860 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2b01      	cmp	r3, #1
 800174e:	f040 8087 	bne.w	8001860 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001752:	4b93      	ldr	r3, [pc, #588]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d005      	beq.n	800176a <HAL_RCC_OscConfig+0x62>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e3ac      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1a      	ldr	r2, [r3, #32]
 800176e:	4b8c      	ldr	r3, [pc, #560]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d004      	beq.n	8001784 <HAL_RCC_OscConfig+0x7c>
 800177a:	4b89      	ldr	r3, [pc, #548]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001782:	e005      	b.n	8001790 <HAL_RCC_OscConfig+0x88>
 8001784:	4b86      	ldr	r3, [pc, #536]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 8001786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001790:	4293      	cmp	r3, r2
 8001792:	d223      	bcs.n	80017dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	4618      	mov	r0, r3
 800179a:	f000 fd3f 	bl	800221c <RCC_SetFlashLatencyFromMSIRange>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e38d      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017a8:	4b7d      	ldr	r3, [pc, #500]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a7c      	ldr	r2, [pc, #496]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 80017ae:	f043 0308 	orr.w	r3, r3, #8
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b7a      	ldr	r3, [pc, #488]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	4977      	ldr	r1, [pc, #476]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017c6:	4b76      	ldr	r3, [pc, #472]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	4972      	ldr	r1, [pc, #456]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	604b      	str	r3, [r1, #4]
 80017da:	e025      	b.n	8001828 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017dc:	4b70      	ldr	r3, [pc, #448]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a6f      	ldr	r2, [pc, #444]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 80017e2:	f043 0308 	orr.w	r3, r3, #8
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b6d      	ldr	r3, [pc, #436]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	496a      	ldr	r1, [pc, #424]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017fa:	4b69      	ldr	r3, [pc, #420]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	4965      	ldr	r1, [pc, #404]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 800180a:	4313      	orrs	r3, r2
 800180c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d109      	bne.n	8001828 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	4618      	mov	r0, r3
 800181a:	f000 fcff 	bl	800221c <RCC_SetFlashLatencyFromMSIRange>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e34d      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001828:	f000 fc36 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 800182c:	4601      	mov	r1, r0
 800182e:	4b5c      	ldr	r3, [pc, #368]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	f003 030f 	and.w	r3, r3, #15
 8001838:	4a5a      	ldr	r2, [pc, #360]	; (80019a4 <HAL_RCC_OscConfig+0x29c>)
 800183a:	5cd3      	ldrb	r3, [r2, r3]
 800183c:	f003 031f 	and.w	r3, r3, #31
 8001840:	fa21 f303 	lsr.w	r3, r1, r3
 8001844:	4a58      	ldr	r2, [pc, #352]	; (80019a8 <HAL_RCC_OscConfig+0x2a0>)
 8001846:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001848:	4b58      	ldr	r3, [pc, #352]	; (80019ac <HAL_RCC_OscConfig+0x2a4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fa7b 	bl	8000d48 <HAL_InitTick>
 8001852:	4603      	mov	r3, r0
 8001854:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d052      	beq.n	8001902 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	e331      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d032      	beq.n	80018ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001868:	4b4d      	ldr	r3, [pc, #308]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a4c      	ldr	r2, [pc, #304]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001874:	f7ff fab8 	bl	8000de8 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800187c:	f7ff fab4 	bl	8000de8 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e31a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800188e:	4b44      	ldr	r3, [pc, #272]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800189a:	4b41      	ldr	r3, [pc, #260]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a40      	ldr	r2, [pc, #256]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 80018a0:	f043 0308 	orr.w	r3, r3, #8
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b3e      	ldr	r3, [pc, #248]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	493b      	ldr	r1, [pc, #236]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018b8:	4b39      	ldr	r3, [pc, #228]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	4936      	ldr	r1, [pc, #216]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]
 80018cc:	e01a      	b.n	8001904 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018ce:	4b34      	ldr	r3, [pc, #208]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a33      	ldr	r2, [pc, #204]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018da:	f7ff fa85 	bl	8000de8 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018e2:	f7ff fa81 	bl	8000de8 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e2e7      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018f4:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1f0      	bne.n	80018e2 <HAL_RCC_OscConfig+0x1da>
 8001900:	e000      	b.n	8001904 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001902:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d074      	beq.n	80019fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2b08      	cmp	r3, #8
 8001914:	d005      	beq.n	8001922 <HAL_RCC_OscConfig+0x21a>
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	2b0c      	cmp	r3, #12
 800191a:	d10e      	bne.n	800193a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	2b03      	cmp	r3, #3
 8001920:	d10b      	bne.n	800193a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001922:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d064      	beq.n	80019f8 <HAL_RCC_OscConfig+0x2f0>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d160      	bne.n	80019f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e2c4      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001942:	d106      	bne.n	8001952 <HAL_RCC_OscConfig+0x24a>
 8001944:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a15      	ldr	r2, [pc, #84]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 800194a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	e01d      	b.n	800198e <HAL_RCC_OscConfig+0x286>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800195a:	d10c      	bne.n	8001976 <HAL_RCC_OscConfig+0x26e>
 800195c:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0f      	ldr	r2, [pc, #60]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 8001962:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 800196e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	e00b      	b.n	800198e <HAL_RCC_OscConfig+0x286>
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a09      	ldr	r2, [pc, #36]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 800197c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <HAL_RCC_OscConfig+0x298>)
 8001988:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d01c      	beq.n	80019d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001996:	f7ff fa27 	bl	8000de8 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800199c:	e011      	b.n	80019c2 <HAL_RCC_OscConfig+0x2ba>
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	080054b4 	.word	0x080054b4
 80019a8:	20000004 	.word	0x20000004
 80019ac:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b0:	f7ff fa1a 	bl	8000de8 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b64      	cmp	r3, #100	; 0x64
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e280      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c2:	4baf      	ldr	r3, [pc, #700]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0x2a8>
 80019ce:	e014      	b.n	80019fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff fa0a 	bl	8000de8 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d8:	f7ff fa06 	bl	8000de8 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b64      	cmp	r3, #100	; 0x64
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e26c      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ea:	4ba5      	ldr	r3, [pc, #660]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x2d0>
 80019f6:	e000      	b.n	80019fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d060      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_OscConfig+0x310>
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2b0c      	cmp	r3, #12
 8001a10:	d119      	bne.n	8001a46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d116      	bne.n	8001a46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a18:	4b99      	ldr	r3, [pc, #612]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_OscConfig+0x328>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e249      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a30:	4b93      	ldr	r3, [pc, #588]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	061b      	lsls	r3, r3, #24
 8001a3e:	4990      	ldr	r1, [pc, #576]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a44:	e040      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d023      	beq.n	8001a96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a4e:	4b8c      	ldr	r3, [pc, #560]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a8b      	ldr	r2, [pc, #556]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7ff f9c5 	bl	8000de8 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a62:	f7ff f9c1 	bl	8000de8 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e227      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a74:	4b82      	ldr	r3, [pc, #520]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a80:	4b7f      	ldr	r3, [pc, #508]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	061b      	lsls	r3, r3, #24
 8001a8e:	497c      	ldr	r1, [pc, #496]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
 8001a94:	e018      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a96:	4b7a      	ldr	r3, [pc, #488]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a79      	ldr	r2, [pc, #484]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa2:	f7ff f9a1 	bl	8000de8 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aaa:	f7ff f99d 	bl	8000de8 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e203      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001abc:	4b70      	ldr	r3, [pc, #448]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f0      	bne.n	8001aaa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d03c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d01c      	beq.n	8001b16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001adc:	4b68      	ldr	r3, [pc, #416]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae2:	4a67      	ldr	r2, [pc, #412]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aec:	f7ff f97c 	bl	8000de8 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af4:	f7ff f978 	bl	8000de8 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e1de      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b06:	4b5e      	ldr	r3, [pc, #376]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0ef      	beq.n	8001af4 <HAL_RCC_OscConfig+0x3ec>
 8001b14:	e01b      	b.n	8001b4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b16:	4b5a      	ldr	r3, [pc, #360]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1c:	4a58      	ldr	r2, [pc, #352]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001b1e:	f023 0301 	bic.w	r3, r3, #1
 8001b22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b26:	f7ff f95f 	bl	8000de8 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b2e:	f7ff f95b 	bl	8000de8 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e1c1      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b40:	4b4f      	ldr	r3, [pc, #316]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1ef      	bne.n	8001b2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 80a6 	beq.w	8001ca8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b60:	4b47      	ldr	r3, [pc, #284]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d10d      	bne.n	8001b88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6c:	4b44      	ldr	r3, [pc, #272]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b70:	4a43      	ldr	r2, [pc, #268]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b76:	6593      	str	r3, [r2, #88]	; 0x58
 8001b78:	4b41      	ldr	r3, [pc, #260]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b84:	2301      	movs	r3, #1
 8001b86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b88:	4b3e      	ldr	r3, [pc, #248]	; (8001c84 <HAL_RCC_OscConfig+0x57c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d118      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b94:	4b3b      	ldr	r3, [pc, #236]	; (8001c84 <HAL_RCC_OscConfig+0x57c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a3a      	ldr	r2, [pc, #232]	; (8001c84 <HAL_RCC_OscConfig+0x57c>)
 8001b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ba0:	f7ff f922 	bl	8000de8 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba8:	f7ff f91e 	bl	8000de8 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e184      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bba:	4b32      	ldr	r3, [pc, #200]	; (8001c84 <HAL_RCC_OscConfig+0x57c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d108      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4d8>
 8001bce:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd4:	4a2a      	ldr	r2, [pc, #168]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bde:	e024      	b.n	8001c2a <HAL_RCC_OscConfig+0x522>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b05      	cmp	r3, #5
 8001be6:	d110      	bne.n	8001c0a <HAL_RCC_OscConfig+0x502>
 8001be8:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bee:	4a24      	ldr	r2, [pc, #144]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bf8:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfe:	4a20      	ldr	r2, [pc, #128]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c08:	e00f      	b.n	8001c2a <HAL_RCC_OscConfig+0x522>
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c10:	4a1b      	ldr	r2, [pc, #108]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001c12:	f023 0301 	bic.w	r3, r3, #1
 8001c16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c1a:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c20:	4a17      	ldr	r2, [pc, #92]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001c22:	f023 0304 	bic.w	r3, r3, #4
 8001c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d016      	beq.n	8001c60 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c32:	f7ff f8d9 	bl	8000de8 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c38:	e00a      	b.n	8001c50 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3a:	f7ff f8d5 	bl	8000de8 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e139      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_RCC_OscConfig+0x578>)
 8001c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0ed      	beq.n	8001c3a <HAL_RCC_OscConfig+0x532>
 8001c5e:	e01a      	b.n	8001c96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c60:	f7ff f8c2 	bl	8000de8 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c66:	e00f      	b.n	8001c88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f7ff f8be 	bl	8000de8 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d906      	bls.n	8001c88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e122      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
 8001c7e:	bf00      	nop
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c88:	4b90      	ldr	r3, [pc, #576]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1e8      	bne.n	8001c68 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c96:	7ffb      	ldrb	r3, [r7, #31]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d105      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c9c:	4b8b      	ldr	r3, [pc, #556]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	4a8a      	ldr	r2, [pc, #552]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 8108 	beq.w	8001ec2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	f040 80d0 	bne.w	8001e5c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cbc:	4b83      	ldr	r3, [pc, #524]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f003 0203 	and.w	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d130      	bne.n	8001d32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d127      	bne.n	8001d32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d11f      	bne.n	8001d32 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cfc:	2a07      	cmp	r2, #7
 8001cfe:	bf14      	ite	ne
 8001d00:	2201      	movne	r2, #1
 8001d02:	2200      	moveq	r2, #0
 8001d04:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d113      	bne.n	8001d32 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d14:	085b      	lsrs	r3, r3, #1
 8001d16:	3b01      	subs	r3, #1
 8001d18:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d109      	bne.n	8001d32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	085b      	lsrs	r3, r3, #1
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d06e      	beq.n	8001e10 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2b0c      	cmp	r3, #12
 8001d36:	d069      	beq.n	8001e0c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d38:	4b64      	ldr	r3, [pc, #400]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d105      	bne.n	8001d50 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d44:	4b61      	ldr	r3, [pc, #388]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0b7      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d54:	4b5d      	ldr	r3, [pc, #372]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a5c      	ldr	r2, [pc, #368]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d5e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d60:	f7ff f842 	bl	8000de8 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d68:	f7ff f83e 	bl	8000de8 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e0a4      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d7a:	4b54      	ldr	r3, [pc, #336]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d86:	4b51      	ldr	r3, [pc, #324]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	4b51      	ldr	r3, [pc, #324]	; (8001ed0 <HAL_RCC_OscConfig+0x7c8>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d96:	3a01      	subs	r2, #1
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	4311      	orrs	r1, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001da0:	0212      	lsls	r2, r2, #8
 8001da2:	4311      	orrs	r1, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001da8:	0852      	lsrs	r2, r2, #1
 8001daa:	3a01      	subs	r2, #1
 8001dac:	0552      	lsls	r2, r2, #21
 8001dae:	4311      	orrs	r1, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001db4:	0852      	lsrs	r2, r2, #1
 8001db6:	3a01      	subs	r2, #1
 8001db8:	0652      	lsls	r2, r2, #25
 8001dba:	4311      	orrs	r1, r2
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dc0:	0912      	lsrs	r2, r2, #4
 8001dc2:	0452      	lsls	r2, r2, #17
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	4941      	ldr	r1, [pc, #260]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001dcc:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a3e      	ldr	r2, [pc, #248]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dd8:	4b3c      	ldr	r3, [pc, #240]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	4a3b      	ldr	r2, [pc, #236]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001de2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001de4:	f7ff f800 	bl	8000de8 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7fe fffc 	bl	8000de8 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e062      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfe:	4b33      	ldr	r3, [pc, #204]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e0a:	e05a      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e059      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e10:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d152      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a2a      	ldr	r2, [pc, #168]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001e22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e28:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4a27      	ldr	r2, [pc, #156]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e34:	f7fe ffd8 	bl	8000de8 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3c:	f7fe ffd4 	bl	8000de8 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e03a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x734>
 8001e5a:	e032      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2b0c      	cmp	r3, #12
 8001e60:	d02d      	beq.n	8001ebe <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e62:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a19      	ldr	r2, [pc, #100]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001e68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e6c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001e6e:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d105      	bne.n	8001e86 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001e80:	f023 0303 	bic.w	r3, r3, #3
 8001e84:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	4a10      	ldr	r2, [pc, #64]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001e8c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e94:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e96:	f7fe ffa7 	bl	8000de8 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9e:	f7fe ffa3 	bl	8000de8 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e009      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_RCC_OscConfig+0x7c4>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f0      	bne.n	8001e9e <HAL_RCC_OscConfig+0x796>
 8001ebc:	e001      	b.n	8001ec2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3720      	adds	r7, #32
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	f99d808c 	.word	0xf99d808c

08001ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0c8      	b.n	800207a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b66      	ldr	r3, [pc, #408]	; (8002084 <HAL_RCC_ClockConfig+0x1b0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d910      	bls.n	8001f18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b63      	ldr	r3, [pc, #396]	; (8002084 <HAL_RCC_ClockConfig+0x1b0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 0207 	bic.w	r2, r3, #7
 8001efe:	4961      	ldr	r1, [pc, #388]	; (8002084 <HAL_RCC_ClockConfig+0x1b0>)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	4b5f      	ldr	r3, [pc, #380]	; (8002084 <HAL_RCC_ClockConfig+0x1b0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0b0      	b.n	800207a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d04c      	beq.n	8001fbe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d107      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2c:	4b56      	ldr	r3, [pc, #344]	; (8002088 <HAL_RCC_ClockConfig+0x1b4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d121      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e09e      	b.n	800207a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d107      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f44:	4b50      	ldr	r3, [pc, #320]	; (8002088 <HAL_RCC_ClockConfig+0x1b4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d115      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e092      	b.n	800207a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d107      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f5c:	4b4a      	ldr	r3, [pc, #296]	; (8002088 <HAL_RCC_ClockConfig+0x1b4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d109      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e086      	b.n	800207a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f6c:	4b46      	ldr	r3, [pc, #280]	; (8002088 <HAL_RCC_ClockConfig+0x1b4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e07e      	b.n	800207a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f7c:	4b42      	ldr	r3, [pc, #264]	; (8002088 <HAL_RCC_ClockConfig+0x1b4>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f023 0203 	bic.w	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	493f      	ldr	r1, [pc, #252]	; (8002088 <HAL_RCC_ClockConfig+0x1b4>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f8e:	f7fe ff2b 	bl	8000de8 <HAL_GetTick>
 8001f92:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f96:	f7fe ff27 	bl	8000de8 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e066      	b.n	800207a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fac:	4b36      	ldr	r3, [pc, #216]	; (8002088 <HAL_RCC_ClockConfig+0x1b4>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 020c 	and.w	r2, r3, #12
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d1eb      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d008      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fca:	4b2f      	ldr	r3, [pc, #188]	; (8002088 <HAL_RCC_ClockConfig+0x1b4>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	492c      	ldr	r1, [pc, #176]	; (8002088 <HAL_RCC_ClockConfig+0x1b4>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fdc:	4b29      	ldr	r3, [pc, #164]	; (8002084 <HAL_RCC_ClockConfig+0x1b0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d210      	bcs.n	800200c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fea:	4b26      	ldr	r3, [pc, #152]	; (8002084 <HAL_RCC_ClockConfig+0x1b0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 0207 	bic.w	r2, r3, #7
 8001ff2:	4924      	ldr	r1, [pc, #144]	; (8002084 <HAL_RCC_ClockConfig+0x1b0>)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b22      	ldr	r3, [pc, #136]	; (8002084 <HAL_RCC_ClockConfig+0x1b0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e036      	b.n	800207a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	d008      	beq.n	800202a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002018:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_RCC_ClockConfig+0x1b4>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4918      	ldr	r1, [pc, #96]	; (8002088 <HAL_RCC_ClockConfig+0x1b4>)
 8002026:	4313      	orrs	r3, r2
 8002028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d009      	beq.n	800204a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002036:	4b14      	ldr	r3, [pc, #80]	; (8002088 <HAL_RCC_ClockConfig+0x1b4>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4910      	ldr	r1, [pc, #64]	; (8002088 <HAL_RCC_ClockConfig+0x1b4>)
 8002046:	4313      	orrs	r3, r2
 8002048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800204a:	f000 f825 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 800204e:	4601      	mov	r1, r0
 8002050:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <HAL_RCC_ClockConfig+0x1b4>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	4a0c      	ldr	r2, [pc, #48]	; (800208c <HAL_RCC_ClockConfig+0x1b8>)
 800205c:	5cd3      	ldrb	r3, [r2, r3]
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	fa21 f303 	lsr.w	r3, r1, r3
 8002066:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fe6a 	bl	8000d48 <HAL_InitTick>
 8002074:	4603      	mov	r3, r0
 8002076:	72fb      	strb	r3, [r7, #11]

  return status;
 8002078:	7afb      	ldrb	r3, [r7, #11]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40022000 	.word	0x40022000
 8002088:	40021000 	.word	0x40021000
 800208c:	080054b4 	.word	0x080054b4
 8002090:	20000004 	.word	0x20000004
 8002094:	20000008 	.word	0x20000008

08002098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	; 0x24
 800209c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020a6:	4b3d      	ldr	r3, [pc, #244]	; (800219c <HAL_RCC_GetSysClockFreq+0x104>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020b0:	4b3a      	ldr	r3, [pc, #232]	; (800219c <HAL_RCC_GetSysClockFreq+0x104>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0x34>
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	2b0c      	cmp	r3, #12
 80020c4:	d121      	bne.n	800210a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d11e      	bne.n	800210a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020cc:	4b33      	ldr	r3, [pc, #204]	; (800219c <HAL_RCC_GetSysClockFreq+0x104>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d107      	bne.n	80020e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020d8:	4b30      	ldr	r3, [pc, #192]	; (800219c <HAL_RCC_GetSysClockFreq+0x104>)
 80020da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020de:	0a1b      	lsrs	r3, r3, #8
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	e005      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020e8:	4b2c      	ldr	r3, [pc, #176]	; (800219c <HAL_RCC_GetSysClockFreq+0x104>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020f4:	4a2a      	ldr	r2, [pc, #168]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10d      	bne.n	8002120 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002108:	e00a      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b04      	cmp	r3, #4
 800210e:	d102      	bne.n	8002116 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002110:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	e004      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b08      	cmp	r3, #8
 800211a:	d101      	bne.n	8002120 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800211c:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x110>)
 800211e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	2b0c      	cmp	r3, #12
 8002124:	d133      	bne.n	800218e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002126:	4b1d      	ldr	r3, [pc, #116]	; (800219c <HAL_RCC_GetSysClockFreq+0x104>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d002      	beq.n	800213c <HAL_RCC_GetSysClockFreq+0xa4>
 8002136:	2b03      	cmp	r3, #3
 8002138:	d003      	beq.n	8002142 <HAL_RCC_GetSysClockFreq+0xaa>
 800213a:	e005      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800213c:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800213e:	617b      	str	r3, [r7, #20]
      break;
 8002140:	e005      	b.n	800214e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002142:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002144:	617b      	str	r3, [r7, #20]
      break;
 8002146:	e002      	b.n	800214e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	617b      	str	r3, [r7, #20]
      break;
 800214c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800214e:	4b13      	ldr	r3, [pc, #76]	; (800219c <HAL_RCC_GetSysClockFreq+0x104>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	3301      	adds	r3, #1
 800215a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800215c:	4b0f      	ldr	r3, [pc, #60]	; (800219c <HAL_RCC_GetSysClockFreq+0x104>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	fb02 f203 	mul.w	r2, r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002172:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_RCC_GetSysClockFreq+0x104>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	0e5b      	lsrs	r3, r3, #25
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	3301      	adds	r3, #1
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	fbb2 f3f3 	udiv	r3, r2, r3
 800218c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800218e:	69bb      	ldr	r3, [r7, #24]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3724      	adds	r7, #36	; 0x24
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	40021000 	.word	0x40021000
 80021a0:	080054cc 	.word	0x080054cc
 80021a4:	00f42400 	.word	0x00f42400
 80021a8:	007a1200 	.word	0x007a1200

080021ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b0:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20000004 	.word	0x20000004

080021c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021c8:	f7ff fff0 	bl	80021ac <HAL_RCC_GetHCLKFreq>
 80021cc:	4601      	mov	r1, r0
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	0a1b      	lsrs	r3, r3, #8
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	4a04      	ldr	r2, [pc, #16]	; (80021ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80021da:	5cd3      	ldrb	r3, [r2, r3]
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000
 80021ec:	080054c4 	.word	0x080054c4

080021f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021f4:	f7ff ffda 	bl	80021ac <HAL_RCC_GetHCLKFreq>
 80021f8:	4601      	mov	r1, r0
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	0adb      	lsrs	r3, r3, #11
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002206:	5cd3      	ldrb	r3, [r2, r3]
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002210:	4618      	mov	r0, r3
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40021000 	.word	0x40021000
 8002218:	080054c4 	.word	0x080054c4

0800221c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002224:	2300      	movs	r3, #0
 8002226:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002228:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800222a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002234:	f7ff fa04 	bl	8001640 <HAL_PWREx_GetVoltageRange>
 8002238:	6178      	str	r0, [r7, #20]
 800223a:	e014      	b.n	8002266 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800223c:	4b25      	ldr	r3, [pc, #148]	; (80022d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800223e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002240:	4a24      	ldr	r2, [pc, #144]	; (80022d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002246:	6593      	str	r3, [r2, #88]	; 0x58
 8002248:	4b22      	ldr	r3, [pc, #136]	; (80022d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800224a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002254:	f7ff f9f4 	bl	8001640 <HAL_PWREx_GetVoltageRange>
 8002258:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800225a:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	4a1d      	ldr	r2, [pc, #116]	; (80022d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002264:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800226c:	d10b      	bne.n	8002286 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b80      	cmp	r3, #128	; 0x80
 8002272:	d919      	bls.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2ba0      	cmp	r3, #160	; 0xa0
 8002278:	d902      	bls.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800227a:	2302      	movs	r3, #2
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	e013      	b.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002280:	2301      	movs	r3, #1
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	e010      	b.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b80      	cmp	r3, #128	; 0x80
 800228a:	d902      	bls.n	8002292 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800228c:	2303      	movs	r3, #3
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	e00a      	b.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b80      	cmp	r3, #128	; 0x80
 8002296:	d102      	bne.n	800229e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002298:	2302      	movs	r3, #2
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	e004      	b.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b70      	cmp	r3, #112	; 0x70
 80022a2:	d101      	bne.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022a4:	2301      	movs	r3, #1
 80022a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f023 0207 	bic.w	r2, r3, #7
 80022b0:	4909      	ldr	r1, [pc, #36]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022b8:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d001      	beq.n	80022ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40022000 	.word	0x40022000

080022dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022e4:	2300      	movs	r3, #0
 80022e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022e8:	2300      	movs	r3, #0
 80022ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d03f      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002300:	d01c      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002306:	d802      	bhi.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00e      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800230c:	e01f      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800230e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002312:	d003      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002314:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002318:	d01c      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800231a:	e018      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800231c:	4b85      	ldr	r3, [pc, #532]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4a84      	ldr	r2, [pc, #528]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002326:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002328:	e015      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3304      	adds	r3, #4
 800232e:	2100      	movs	r1, #0
 8002330:	4618      	mov	r0, r3
 8002332:	f000 fab9 	bl	80028a8 <RCCEx_PLLSAI1_Config>
 8002336:	4603      	mov	r3, r0
 8002338:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800233a:	e00c      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3320      	adds	r3, #32
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f000 fba0 	bl	8002a88 <RCCEx_PLLSAI2_Config>
 8002348:	4603      	mov	r3, r0
 800234a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800234c:	e003      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	74fb      	strb	r3, [r7, #19]
      break;
 8002352:	e000      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002356:	7cfb      	ldrb	r3, [r7, #19]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10b      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800235c:	4b75      	ldr	r3, [pc, #468]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002362:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800236a:	4972      	ldr	r1, [pc, #456]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002372:	e001      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002374:	7cfb      	ldrb	r3, [r7, #19]
 8002376:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d03f      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800238c:	d01c      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800238e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002392:	d802      	bhi.n	800239a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00e      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002398:	e01f      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800239a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800239e:	d003      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80023a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023a4:	d01c      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80023a6:	e018      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023a8:	4b62      	ldr	r3, [pc, #392]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4a61      	ldr	r2, [pc, #388]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023b4:	e015      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3304      	adds	r3, #4
 80023ba:	2100      	movs	r1, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 fa73 	bl	80028a8 <RCCEx_PLLSAI1_Config>
 80023c2:	4603      	mov	r3, r0
 80023c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023c6:	e00c      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3320      	adds	r3, #32
 80023cc:	2100      	movs	r1, #0
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 fb5a 	bl	8002a88 <RCCEx_PLLSAI2_Config>
 80023d4:	4603      	mov	r3, r0
 80023d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023d8:	e003      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	74fb      	strb	r3, [r7, #19]
      break;
 80023de:	e000      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80023e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023e2:	7cfb      	ldrb	r3, [r7, #19]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10b      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023e8:	4b52      	ldr	r3, [pc, #328]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023f6:	494f      	ldr	r1, [pc, #316]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023fe:	e001      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002400:	7cfb      	ldrb	r3, [r7, #19]
 8002402:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80a0 	beq.w	8002552 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002412:	2300      	movs	r3, #0
 8002414:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002416:	4b47      	ldr	r3, [pc, #284]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002426:	2300      	movs	r3, #0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00d      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800242c:	4b41      	ldr	r3, [pc, #260]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	4a40      	ldr	r2, [pc, #256]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002436:	6593      	str	r3, [r2, #88]	; 0x58
 8002438:	4b3e      	ldr	r3, [pc, #248]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800243a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002444:	2301      	movs	r3, #1
 8002446:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002448:	4b3b      	ldr	r3, [pc, #236]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a3a      	ldr	r2, [pc, #232]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800244e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002452:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002454:	f7fe fcc8 	bl	8000de8 <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800245a:	e009      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245c:	f7fe fcc4 	bl	8000de8 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d902      	bls.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	74fb      	strb	r3, [r7, #19]
        break;
 800246e:	e005      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002470:	4b31      	ldr	r3, [pc, #196]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0ef      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d15c      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002482:	4b2c      	ldr	r3, [pc, #176]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d01f      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	429a      	cmp	r2, r3
 800249e:	d019      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024a0:	4b24      	ldr	r3, [pc, #144]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024ac:	4b21      	ldr	r3, [pc, #132]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b2:	4a20      	ldr	r2, [pc, #128]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024bc:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c2:	4a1c      	ldr	r2, [pc, #112]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024cc:	4a19      	ldr	r2, [pc, #100]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d016      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024de:	f7fe fc83 	bl	8000de8 <HAL_GetTick>
 80024e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e4:	e00b      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e6:	f7fe fc7f 	bl	8000de8 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d902      	bls.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	74fb      	strb	r3, [r7, #19]
            break;
 80024fc:	e006      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024fe:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0ec      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800250c:	7cfb      	ldrb	r3, [r7, #19]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10c      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002512:	4b08      	ldr	r3, [pc, #32]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002518:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002522:	4904      	ldr	r1, [pc, #16]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800252a:	e009      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800252c:	7cfb      	ldrb	r3, [r7, #19]
 800252e:	74bb      	strb	r3, [r7, #18]
 8002530:	e006      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800253c:	7cfb      	ldrb	r3, [r7, #19]
 800253e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002540:	7c7b      	ldrb	r3, [r7, #17]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d105      	bne.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002546:	4b9e      	ldr	r3, [pc, #632]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254a:	4a9d      	ldr	r2, [pc, #628]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800254c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002550:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800255e:	4b98      	ldr	r3, [pc, #608]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002564:	f023 0203 	bic.w	r2, r3, #3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256c:	4994      	ldr	r1, [pc, #592]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002580:	4b8f      	ldr	r3, [pc, #572]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002586:	f023 020c 	bic.w	r2, r3, #12
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258e:	498c      	ldr	r1, [pc, #560]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025a2:	4b87      	ldr	r3, [pc, #540]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	4983      	ldr	r1, [pc, #524]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025c4:	4b7e      	ldr	r3, [pc, #504]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	497b      	ldr	r1, [pc, #492]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025e6:	4b76      	ldr	r3, [pc, #472]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f4:	4972      	ldr	r1, [pc, #456]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002608:	4b6d      	ldr	r3, [pc, #436]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002616:	496a      	ldr	r1, [pc, #424]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800262a:	4b65      	ldr	r3, [pc, #404]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800262c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002630:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002638:	4961      	ldr	r1, [pc, #388]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00a      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800264c:	4b5c      	ldr	r3, [pc, #368]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265a:	4959      	ldr	r1, [pc, #356]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800266e:	4b54      	ldr	r3, [pc, #336]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002674:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800267c:	4950      	ldr	r1, [pc, #320]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00a      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002690:	4b4b      	ldr	r3, [pc, #300]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002696:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269e:	4948      	ldr	r1, [pc, #288]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026b2:	4b43      	ldr	r3, [pc, #268]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c0:	493f      	ldr	r1, [pc, #252]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d028      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026d4:	4b3a      	ldr	r3, [pc, #232]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026e2:	4937      	ldr	r1, [pc, #220]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026f2:	d106      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026f4:	4b32      	ldr	r3, [pc, #200]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	4a31      	ldr	r2, [pc, #196]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026fe:	60d3      	str	r3, [r2, #12]
 8002700:	e011      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002706:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800270a:	d10c      	bne.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3304      	adds	r3, #4
 8002710:	2101      	movs	r1, #1
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f8c8 	bl	80028a8 <RCCEx_PLLSAI1_Config>
 8002718:	4603      	mov	r3, r0
 800271a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800271c:	7cfb      	ldrb	r3, [r7, #19]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002722:	7cfb      	ldrb	r3, [r7, #19]
 8002724:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d028      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002732:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002738:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	491f      	ldr	r1, [pc, #124]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002750:	d106      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002752:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	4a1a      	ldr	r2, [pc, #104]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002758:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800275c:	60d3      	str	r3, [r2, #12]
 800275e:	e011      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002768:	d10c      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3304      	adds	r3, #4
 800276e:	2101      	movs	r1, #1
 8002770:	4618      	mov	r0, r3
 8002772:	f000 f899 	bl	80028a8 <RCCEx_PLLSAI1_Config>
 8002776:	4603      	mov	r3, r0
 8002778:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800277a:	7cfb      	ldrb	r3, [r7, #19]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002780:	7cfb      	ldrb	r3, [r7, #19]
 8002782:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d02b      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002796:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279e:	4908      	ldr	r1, [pc, #32]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027ae:	d109      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027b0:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4a02      	ldr	r2, [pc, #8]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ba:	60d3      	str	r3, [r2, #12]
 80027bc:	e014      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027cc:	d10c      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3304      	adds	r3, #4
 80027d2:	2101      	movs	r1, #1
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 f867 	bl	80028a8 <RCCEx_PLLSAI1_Config>
 80027da:	4603      	mov	r3, r0
 80027dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027de:	7cfb      	ldrb	r3, [r7, #19]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80027e4:	7cfb      	ldrb	r3, [r7, #19]
 80027e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d02f      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027f4:	4b2b      	ldr	r3, [pc, #172]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002802:	4928      	ldr	r1, [pc, #160]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800280e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002812:	d10d      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3304      	adds	r3, #4
 8002818:	2102      	movs	r1, #2
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f844 	bl	80028a8 <RCCEx_PLLSAI1_Config>
 8002820:	4603      	mov	r3, r0
 8002822:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002824:	7cfb      	ldrb	r3, [r7, #19]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d014      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800282a:	7cfb      	ldrb	r3, [r7, #19]
 800282c:	74bb      	strb	r3, [r7, #18]
 800282e:	e011      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002838:	d10c      	bne.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3320      	adds	r3, #32
 800283e:	2102      	movs	r1, #2
 8002840:	4618      	mov	r0, r3
 8002842:	f000 f921 	bl	8002a88 <RCCEx_PLLSAI2_Config>
 8002846:	4603      	mov	r3, r0
 8002848:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800284a:	7cfb      	ldrb	r3, [r7, #19]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002850:	7cfb      	ldrb	r3, [r7, #19]
 8002852:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00a      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002860:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002866:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800286e:	490d      	ldr	r1, [pc, #52]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002888:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002892:	4904      	ldr	r1, [pc, #16]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800289a:	7cbb      	ldrb	r3, [r7, #18]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40021000 	.word	0x40021000

080028a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028b6:	4b73      	ldr	r3, [pc, #460]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d018      	beq.n	80028f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028c2:	4b70      	ldr	r3, [pc, #448]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f003 0203 	and.w	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d10d      	bne.n	80028ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
       ||
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d009      	beq.n	80028ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028da:	4b6a      	ldr	r3, [pc, #424]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	091b      	lsrs	r3, r3, #4
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
       ||
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d044      	beq.n	8002978 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
 80028f2:	e041      	b.n	8002978 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d00c      	beq.n	8002916 <RCCEx_PLLSAI1_Config+0x6e>
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d013      	beq.n	8002928 <RCCEx_PLLSAI1_Config+0x80>
 8002900:	2b01      	cmp	r3, #1
 8002902:	d120      	bne.n	8002946 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002904:	4b5f      	ldr	r3, [pc, #380]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d11d      	bne.n	800294c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002914:	e01a      	b.n	800294c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002916:	4b5b      	ldr	r3, [pc, #364]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291e:	2b00      	cmp	r3, #0
 8002920:	d116      	bne.n	8002950 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002926:	e013      	b.n	8002950 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002928:	4b56      	ldr	r3, [pc, #344]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10f      	bne.n	8002954 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002934:	4b53      	ldr	r3, [pc, #332]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d109      	bne.n	8002954 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002944:	e006      	b.n	8002954 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	73fb      	strb	r3, [r7, #15]
      break;
 800294a:	e004      	b.n	8002956 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800294c:	bf00      	nop
 800294e:	e002      	b.n	8002956 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002950:	bf00      	nop
 8002952:	e000      	b.n	8002956 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002954:	bf00      	nop
    }

    if(status == HAL_OK)
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10d      	bne.n	8002978 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800295c:	4b49      	ldr	r3, [pc, #292]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6819      	ldr	r1, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	3b01      	subs	r3, #1
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	430b      	orrs	r3, r1
 8002972:	4944      	ldr	r1, [pc, #272]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002974:	4313      	orrs	r3, r2
 8002976:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002978:	7bfb      	ldrb	r3, [r7, #15]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d17d      	bne.n	8002a7a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800297e:	4b41      	ldr	r3, [pc, #260]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a40      	ldr	r2, [pc, #256]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002984:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800298a:	f7fe fa2d 	bl	8000de8 <HAL_GetTick>
 800298e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002990:	e009      	b.n	80029a6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002992:	f7fe fa29 	bl	8000de8 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d902      	bls.n	80029a6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	73fb      	strb	r3, [r7, #15]
        break;
 80029a4:	e005      	b.n	80029b2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029a6:	4b37      	ldr	r3, [pc, #220]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1ef      	bne.n	8002992 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d160      	bne.n	8002a7a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d111      	bne.n	80029e2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029be:	4b31      	ldr	r3, [pc, #196]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6892      	ldr	r2, [r2, #8]
 80029ce:	0211      	lsls	r1, r2, #8
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	68d2      	ldr	r2, [r2, #12]
 80029d4:	0912      	lsrs	r2, r2, #4
 80029d6:	0452      	lsls	r2, r2, #17
 80029d8:	430a      	orrs	r2, r1
 80029da:	492a      	ldr	r1, [pc, #168]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	610b      	str	r3, [r1, #16]
 80029e0:	e027      	b.n	8002a32 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d112      	bne.n	8002a0e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029e8:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6892      	ldr	r2, [r2, #8]
 80029f8:	0211      	lsls	r1, r2, #8
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6912      	ldr	r2, [r2, #16]
 80029fe:	0852      	lsrs	r2, r2, #1
 8002a00:	3a01      	subs	r2, #1
 8002a02:	0552      	lsls	r2, r2, #21
 8002a04:	430a      	orrs	r2, r1
 8002a06:	491f      	ldr	r1, [pc, #124]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	610b      	str	r3, [r1, #16]
 8002a0c:	e011      	b.n	8002a32 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6892      	ldr	r2, [r2, #8]
 8002a1e:	0211      	lsls	r1, r2, #8
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6952      	ldr	r2, [r2, #20]
 8002a24:	0852      	lsrs	r2, r2, #1
 8002a26:	3a01      	subs	r2, #1
 8002a28:	0652      	lsls	r2, r2, #25
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	4915      	ldr	r1, [pc, #84]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a32:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a13      	ldr	r2, [pc, #76]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a3c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3e:	f7fe f9d3 	bl	8000de8 <HAL_GetTick>
 8002a42:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a44:	e009      	b.n	8002a5a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a46:	f7fe f9cf 	bl	8000de8 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d902      	bls.n	8002a5a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	73fb      	strb	r3, [r7, #15]
          break;
 8002a58:	e005      	b.n	8002a66 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0ef      	beq.n	8002a46 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d106      	bne.n	8002a7a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	4903      	ldr	r1, [pc, #12]	; (8002a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40021000 	.word	0x40021000

08002a88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a96:	4b68      	ldr	r3, [pc, #416]	; (8002c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d018      	beq.n	8002ad4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002aa2:	4b65      	ldr	r3, [pc, #404]	; (8002c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f003 0203 	and.w	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d10d      	bne.n	8002ace <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002aba:	4b5f      	ldr	r3, [pc, #380]	; (8002c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	091b      	lsrs	r3, r3, #4
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
       ||
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d044      	beq.n	8002b58 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]
 8002ad2:	e041      	b.n	8002b58 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d00c      	beq.n	8002af6 <RCCEx_PLLSAI2_Config+0x6e>
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d013      	beq.n	8002b08 <RCCEx_PLLSAI2_Config+0x80>
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d120      	bne.n	8002b26 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ae4:	4b54      	ldr	r3, [pc, #336]	; (8002c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d11d      	bne.n	8002b2c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af4:	e01a      	b.n	8002b2c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002af6:	4b50      	ldr	r3, [pc, #320]	; (8002c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d116      	bne.n	8002b30 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b06:	e013      	b.n	8002b30 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b08:	4b4b      	ldr	r3, [pc, #300]	; (8002c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10f      	bne.n	8002b34 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b14:	4b48      	ldr	r3, [pc, #288]	; (8002c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d109      	bne.n	8002b34 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b24:	e006      	b.n	8002b34 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	73fb      	strb	r3, [r7, #15]
      break;
 8002b2a:	e004      	b.n	8002b36 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002b2c:	bf00      	nop
 8002b2e:	e002      	b.n	8002b36 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002b30:	bf00      	nop
 8002b32:	e000      	b.n	8002b36 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002b34:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10d      	bne.n	8002b58 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b3c:	4b3e      	ldr	r3, [pc, #248]	; (8002c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6819      	ldr	r1, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	430b      	orrs	r3, r1
 8002b52:	4939      	ldr	r1, [pc, #228]	; (8002c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d167      	bne.n	8002c2e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b5e:	4b36      	ldr	r3, [pc, #216]	; (8002c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a35      	ldr	r2, [pc, #212]	; (8002c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b6a:	f7fe f93d 	bl	8000de8 <HAL_GetTick>
 8002b6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b70:	e009      	b.n	8002b86 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b72:	f7fe f939 	bl	8000de8 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d902      	bls.n	8002b86 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	73fb      	strb	r3, [r7, #15]
        break;
 8002b84:	e005      	b.n	8002b92 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b86:	4b2c      	ldr	r3, [pc, #176]	; (8002c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1ef      	bne.n	8002b72 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d14a      	bne.n	8002c2e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d111      	bne.n	8002bc2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b9e:	4b26      	ldr	r3, [pc, #152]	; (8002c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6892      	ldr	r2, [r2, #8]
 8002bae:	0211      	lsls	r1, r2, #8
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	68d2      	ldr	r2, [r2, #12]
 8002bb4:	0912      	lsrs	r2, r2, #4
 8002bb6:	0452      	lsls	r2, r2, #17
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	491f      	ldr	r1, [pc, #124]	; (8002c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	614b      	str	r3, [r1, #20]
 8002bc0:	e011      	b.n	8002be6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bc2:	4b1d      	ldr	r3, [pc, #116]	; (8002c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6892      	ldr	r2, [r2, #8]
 8002bd2:	0211      	lsls	r1, r2, #8
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6912      	ldr	r2, [r2, #16]
 8002bd8:	0852      	lsrs	r2, r2, #1
 8002bda:	3a01      	subs	r2, #1
 8002bdc:	0652      	lsls	r2, r2, #25
 8002bde:	430a      	orrs	r2, r1
 8002be0:	4915      	ldr	r1, [pc, #84]	; (8002c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002be6:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf2:	f7fe f8f9 	bl	8000de8 <HAL_GetTick>
 8002bf6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bf8:	e009      	b.n	8002c0e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bfa:	f7fe f8f5 	bl	8000de8 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d902      	bls.n	8002c0e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	73fb      	strb	r3, [r7, #15]
          break;
 8002c0c:	e005      	b.n	8002c1a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0ef      	beq.n	8002bfa <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d106      	bne.n	8002c2e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	4903      	ldr	r1, [pc, #12]	; (8002c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40021000 	.word	0x40021000

08002c3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e040      	b.n	8002cd0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fd ffde 	bl	8000c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2224      	movs	r2, #36	; 0x24
 8002c68:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0201 	bic.w	r2, r2, #1
 8002c78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 fabe 	bl	80031fc <UART_SetConfig>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d101      	bne.n	8002c8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e022      	b.n	8002cd0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fd3c 	bl	8003710 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ca6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 fdc3 	bl	8003854 <UART_CheckIdleState>
 8002cce:	4603      	mov	r3, r0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	f040 8081 	bne.w	8002df4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <HAL_UART_Transmit+0x26>
 8002cf8:	88fb      	ldrh	r3, [r7, #6]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e079      	b.n	8002df6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_UART_Transmit+0x38>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e072      	b.n	8002df6 <HAL_UART_Transmit+0x11e>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2221      	movs	r2, #33	; 0x21
 8002d22:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002d24:	f7fe f860 	bl	8000de8 <HAL_GetTick>
 8002d28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	88fa      	ldrh	r2, [r7, #6]
 8002d2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	88fa      	ldrh	r2, [r7, #6]
 8002d36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d42:	d108      	bne.n	8002d56 <HAL_UART_Transmit+0x7e>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d104      	bne.n	8002d56 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	61bb      	str	r3, [r7, #24]
 8002d54:	e003      	b.n	8002d5e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002d66:	e02d      	b.n	8002dc4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2180      	movs	r1, #128	; 0x80
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 fdb3 	bl	80038de <UART_WaitOnFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e039      	b.n	8002df6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10b      	bne.n	8002da0 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	881a      	ldrh	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d94:	b292      	uxth	r2, r2
 8002d96:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	3302      	adds	r3, #2
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	e008      	b.n	8002db2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	781a      	ldrb	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	b292      	uxth	r2, r2
 8002daa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	3301      	adds	r3, #1
 8002db0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1cb      	bne.n	8002d68 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2140      	movs	r1, #64	; 0x40
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 fd7f 	bl	80038de <UART_WaitOnFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e005      	b.n	8002df6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	f040 808a 	bne.w	8002f2c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HAL_UART_Receive_IT+0x24>
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e082      	b.n	8002f2e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_UART_Receive_IT+0x36>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e07b      	b.n	8002f2e <HAL_UART_Receive_IT+0x12e>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	88fa      	ldrh	r2, [r7, #6]
 8002e48:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	88fa      	ldrh	r2, [r7, #6]
 8002e50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e62:	d10e      	bne.n	8002e82 <HAL_UART_Receive_IT+0x82>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d105      	bne.n	8002e78 <HAL_UART_Receive_IT+0x78>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002e72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002e76:	e02d      	b.n	8002ed4 <HAL_UART_Receive_IT+0xd4>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	22ff      	movs	r2, #255	; 0xff
 8002e7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002e80:	e028      	b.n	8002ed4 <HAL_UART_Receive_IT+0xd4>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10d      	bne.n	8002ea6 <HAL_UART_Receive_IT+0xa6>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d104      	bne.n	8002e9c <HAL_UART_Receive_IT+0x9c>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	22ff      	movs	r2, #255	; 0xff
 8002e96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002e9a:	e01b      	b.n	8002ed4 <HAL_UART_Receive_IT+0xd4>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	227f      	movs	r2, #127	; 0x7f
 8002ea0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ea4:	e016      	b.n	8002ed4 <HAL_UART_Receive_IT+0xd4>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eae:	d10d      	bne.n	8002ecc <HAL_UART_Receive_IT+0xcc>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d104      	bne.n	8002ec2 <HAL_UART_Receive_IT+0xc2>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	227f      	movs	r2, #127	; 0x7f
 8002ebc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ec0:	e008      	b.n	8002ed4 <HAL_UART_Receive_IT+0xd4>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	223f      	movs	r2, #63	; 0x3f
 8002ec6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002eca:	e003      	b.n	8002ed4 <HAL_UART_Receive_IT+0xd4>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2222      	movs	r2, #34	; 0x22
 8002ede:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef8:	d107      	bne.n	8002f0a <HAL_UART_Receive_IT+0x10a>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d103      	bne.n	8002f0a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4a0d      	ldr	r2, [pc, #52]	; (8002f3c <HAL_UART_Receive_IT+0x13c>)
 8002f06:	661a      	str	r2, [r3, #96]	; 0x60
 8002f08:	e002      	b.n	8002f10 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4a0c      	ldr	r2, [pc, #48]	; (8002f40 <HAL_UART_Receive_IT+0x140>)
 8002f0e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002f26:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e000      	b.n	8002f2e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8002f2c:	2302      	movs	r3, #2
  }
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	08003b1d 	.word	0x08003b1d
 8002f40:	08003a73 	.word	0x08003a73

08002f44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f64:	69fa      	ldr	r2, [r7, #28]
 8002f66:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d113      	bne.n	8002f9c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00e      	beq.n	8002f9c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d009      	beq.n	8002f9c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8114 	beq.w	80031ba <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	4798      	blx	r3
      }
      return;
 8002f9a:	e10e      	b.n	80031ba <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 80d6 	beq.w	8003150 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d105      	bne.n	8002fba <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4b86      	ldr	r3, [pc, #536]	; (80031cc <HAL_UART_IRQHandler+0x288>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80cb 	beq.w	8003150 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00e      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x9e>
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fda:	f043 0201 	orr.w	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00e      	beq.n	800300a <HAL_UART_IRQHandler+0xc6>
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d009      	beq.n	800300a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003002:	f043 0204 	orr.w	r2, r3, #4
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00e      	beq.n	8003032 <HAL_UART_IRQHandler+0xee>
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2204      	movs	r2, #4
 8003024:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800302a:	f043 0202 	orr.w	r2, r3, #2
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d013      	beq.n	8003064 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d104      	bne.n	8003050 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800304c:	2b00      	cmp	r3, #0
 800304e:	d009      	beq.n	8003064 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2208      	movs	r2, #8
 8003056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800305c:	f043 0208 	orr.w	r2, r3, #8
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00f      	beq.n	800308e <HAL_UART_IRQHandler+0x14a>
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003080:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003086:	f043 0220 	orr.w	r2, r3, #32
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 8093 	beq.w	80031be <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00c      	beq.n	80030bc <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	f003 0320 	and.w	r3, r3, #32
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030c0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030cc:	2b40      	cmp	r3, #64	; 0x40
 80030ce:	d004      	beq.n	80030da <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d031      	beq.n	800313e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fc7a 	bl	80039d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b40      	cmp	r3, #64	; 0x40
 80030ec:	d123      	bne.n	8003136 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030fc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d013      	beq.n	800312e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800310a:	4a31      	ldr	r2, [pc, #196]	; (80031d0 <HAL_UART_IRQHandler+0x28c>)
 800310c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe f892 	bl	800123c <HAL_DMA_Abort_IT>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d016      	beq.n	800314c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003128:	4610      	mov	r0, r2
 800312a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800312c:	e00e      	b.n	800314c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f85a 	bl	80031e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003134:	e00a      	b.n	800314c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f856 	bl	80031e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800313c:	e006      	b.n	800314c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f852 	bl	80031e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800314a:	e038      	b.n	80031be <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800314c:	bf00      	nop
    return;
 800314e:	e036      	b.n	80031be <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00d      	beq.n	8003176 <HAL_UART_IRQHandler+0x232>
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800316c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fd29 	bl	8003bc6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003174:	e026      	b.n	80031c4 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00d      	beq.n	800319c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003186:	2b00      	cmp	r3, #0
 8003188:	d008      	beq.n	800319c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800318e:	2b00      	cmp	r3, #0
 8003190:	d017      	beq.n	80031c2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	4798      	blx	r3
    }
    return;
 800319a:	e012      	b.n	80031c2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00e      	beq.n	80031c4 <HAL_UART_IRQHandler+0x280>
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d009      	beq.n	80031c4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 fc45 	bl	8003a40 <UART_EndTransmit_IT>
    return;
 80031b6:	bf00      	nop
 80031b8:	e004      	b.n	80031c4 <HAL_UART_IRQHandler+0x280>
      return;
 80031ba:	bf00      	nop
 80031bc:	e002      	b.n	80031c4 <HAL_UART_IRQHandler+0x280>
    return;
 80031be:	bf00      	nop
 80031c0:	e000      	b.n	80031c4 <HAL_UART_IRQHandler+0x280>
    return;
 80031c2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	04000120 	.word	0x04000120
 80031d0:	08003a15 	.word	0x08003a15

080031d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031fc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003200:	b088      	sub	sp, #32
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	431a      	orrs	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	4313      	orrs	r3, r2
 8003220:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4bac      	ldr	r3, [pc, #688]	; (80034dc <UART_SetConfig+0x2e0>)
 800322a:	4013      	ands	r3, r2
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	69f9      	ldr	r1, [r7, #28]
 8003232:	430b      	orrs	r3, r1
 8003234:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4aa2      	ldr	r2, [pc, #648]	; (80034e0 <UART_SetConfig+0x2e4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d004      	beq.n	8003266 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	69fa      	ldr	r2, [r7, #28]
 8003262:	4313      	orrs	r3, r2
 8003264:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	430a      	orrs	r2, r1
 8003278:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a99      	ldr	r2, [pc, #612]	; (80034e4 <UART_SetConfig+0x2e8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d121      	bne.n	80032c8 <UART_SetConfig+0xcc>
 8003284:	4b98      	ldr	r3, [pc, #608]	; (80034e8 <UART_SetConfig+0x2ec>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	2b03      	cmp	r3, #3
 8003290:	d816      	bhi.n	80032c0 <UART_SetConfig+0xc4>
 8003292:	a201      	add	r2, pc, #4	; (adr r2, 8003298 <UART_SetConfig+0x9c>)
 8003294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003298:	080032a9 	.word	0x080032a9
 800329c:	080032b5 	.word	0x080032b5
 80032a0:	080032af 	.word	0x080032af
 80032a4:	080032bb 	.word	0x080032bb
 80032a8:	2301      	movs	r3, #1
 80032aa:	76fb      	strb	r3, [r7, #27]
 80032ac:	e0e8      	b.n	8003480 <UART_SetConfig+0x284>
 80032ae:	2302      	movs	r3, #2
 80032b0:	76fb      	strb	r3, [r7, #27]
 80032b2:	e0e5      	b.n	8003480 <UART_SetConfig+0x284>
 80032b4:	2304      	movs	r3, #4
 80032b6:	76fb      	strb	r3, [r7, #27]
 80032b8:	e0e2      	b.n	8003480 <UART_SetConfig+0x284>
 80032ba:	2308      	movs	r3, #8
 80032bc:	76fb      	strb	r3, [r7, #27]
 80032be:	e0df      	b.n	8003480 <UART_SetConfig+0x284>
 80032c0:	2310      	movs	r3, #16
 80032c2:	76fb      	strb	r3, [r7, #27]
 80032c4:	bf00      	nop
 80032c6:	e0db      	b.n	8003480 <UART_SetConfig+0x284>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a87      	ldr	r2, [pc, #540]	; (80034ec <UART_SetConfig+0x2f0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d134      	bne.n	800333c <UART_SetConfig+0x140>
 80032d2:	4b85      	ldr	r3, [pc, #532]	; (80034e8 <UART_SetConfig+0x2ec>)
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b0c      	cmp	r3, #12
 80032de:	d829      	bhi.n	8003334 <UART_SetConfig+0x138>
 80032e0:	a201      	add	r2, pc, #4	; (adr r2, 80032e8 <UART_SetConfig+0xec>)
 80032e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e6:	bf00      	nop
 80032e8:	0800331d 	.word	0x0800331d
 80032ec:	08003335 	.word	0x08003335
 80032f0:	08003335 	.word	0x08003335
 80032f4:	08003335 	.word	0x08003335
 80032f8:	08003329 	.word	0x08003329
 80032fc:	08003335 	.word	0x08003335
 8003300:	08003335 	.word	0x08003335
 8003304:	08003335 	.word	0x08003335
 8003308:	08003323 	.word	0x08003323
 800330c:	08003335 	.word	0x08003335
 8003310:	08003335 	.word	0x08003335
 8003314:	08003335 	.word	0x08003335
 8003318:	0800332f 	.word	0x0800332f
 800331c:	2300      	movs	r3, #0
 800331e:	76fb      	strb	r3, [r7, #27]
 8003320:	e0ae      	b.n	8003480 <UART_SetConfig+0x284>
 8003322:	2302      	movs	r3, #2
 8003324:	76fb      	strb	r3, [r7, #27]
 8003326:	e0ab      	b.n	8003480 <UART_SetConfig+0x284>
 8003328:	2304      	movs	r3, #4
 800332a:	76fb      	strb	r3, [r7, #27]
 800332c:	e0a8      	b.n	8003480 <UART_SetConfig+0x284>
 800332e:	2308      	movs	r3, #8
 8003330:	76fb      	strb	r3, [r7, #27]
 8003332:	e0a5      	b.n	8003480 <UART_SetConfig+0x284>
 8003334:	2310      	movs	r3, #16
 8003336:	76fb      	strb	r3, [r7, #27]
 8003338:	bf00      	nop
 800333a:	e0a1      	b.n	8003480 <UART_SetConfig+0x284>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a6b      	ldr	r2, [pc, #428]	; (80034f0 <UART_SetConfig+0x2f4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d120      	bne.n	8003388 <UART_SetConfig+0x18c>
 8003346:	4b68      	ldr	r3, [pc, #416]	; (80034e8 <UART_SetConfig+0x2ec>)
 8003348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003350:	2b10      	cmp	r3, #16
 8003352:	d00f      	beq.n	8003374 <UART_SetConfig+0x178>
 8003354:	2b10      	cmp	r3, #16
 8003356:	d802      	bhi.n	800335e <UART_SetConfig+0x162>
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <UART_SetConfig+0x16c>
 800335c:	e010      	b.n	8003380 <UART_SetConfig+0x184>
 800335e:	2b20      	cmp	r3, #32
 8003360:	d005      	beq.n	800336e <UART_SetConfig+0x172>
 8003362:	2b30      	cmp	r3, #48	; 0x30
 8003364:	d009      	beq.n	800337a <UART_SetConfig+0x17e>
 8003366:	e00b      	b.n	8003380 <UART_SetConfig+0x184>
 8003368:	2300      	movs	r3, #0
 800336a:	76fb      	strb	r3, [r7, #27]
 800336c:	e088      	b.n	8003480 <UART_SetConfig+0x284>
 800336e:	2302      	movs	r3, #2
 8003370:	76fb      	strb	r3, [r7, #27]
 8003372:	e085      	b.n	8003480 <UART_SetConfig+0x284>
 8003374:	2304      	movs	r3, #4
 8003376:	76fb      	strb	r3, [r7, #27]
 8003378:	e082      	b.n	8003480 <UART_SetConfig+0x284>
 800337a:	2308      	movs	r3, #8
 800337c:	76fb      	strb	r3, [r7, #27]
 800337e:	e07f      	b.n	8003480 <UART_SetConfig+0x284>
 8003380:	2310      	movs	r3, #16
 8003382:	76fb      	strb	r3, [r7, #27]
 8003384:	bf00      	nop
 8003386:	e07b      	b.n	8003480 <UART_SetConfig+0x284>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a59      	ldr	r2, [pc, #356]	; (80034f4 <UART_SetConfig+0x2f8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d120      	bne.n	80033d4 <UART_SetConfig+0x1d8>
 8003392:	4b55      	ldr	r3, [pc, #340]	; (80034e8 <UART_SetConfig+0x2ec>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003398:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800339c:	2b40      	cmp	r3, #64	; 0x40
 800339e:	d00f      	beq.n	80033c0 <UART_SetConfig+0x1c4>
 80033a0:	2b40      	cmp	r3, #64	; 0x40
 80033a2:	d802      	bhi.n	80033aa <UART_SetConfig+0x1ae>
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <UART_SetConfig+0x1b8>
 80033a8:	e010      	b.n	80033cc <UART_SetConfig+0x1d0>
 80033aa:	2b80      	cmp	r3, #128	; 0x80
 80033ac:	d005      	beq.n	80033ba <UART_SetConfig+0x1be>
 80033ae:	2bc0      	cmp	r3, #192	; 0xc0
 80033b0:	d009      	beq.n	80033c6 <UART_SetConfig+0x1ca>
 80033b2:	e00b      	b.n	80033cc <UART_SetConfig+0x1d0>
 80033b4:	2300      	movs	r3, #0
 80033b6:	76fb      	strb	r3, [r7, #27]
 80033b8:	e062      	b.n	8003480 <UART_SetConfig+0x284>
 80033ba:	2302      	movs	r3, #2
 80033bc:	76fb      	strb	r3, [r7, #27]
 80033be:	e05f      	b.n	8003480 <UART_SetConfig+0x284>
 80033c0:	2304      	movs	r3, #4
 80033c2:	76fb      	strb	r3, [r7, #27]
 80033c4:	e05c      	b.n	8003480 <UART_SetConfig+0x284>
 80033c6:	2308      	movs	r3, #8
 80033c8:	76fb      	strb	r3, [r7, #27]
 80033ca:	e059      	b.n	8003480 <UART_SetConfig+0x284>
 80033cc:	2310      	movs	r3, #16
 80033ce:	76fb      	strb	r3, [r7, #27]
 80033d0:	bf00      	nop
 80033d2:	e055      	b.n	8003480 <UART_SetConfig+0x284>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a47      	ldr	r2, [pc, #284]	; (80034f8 <UART_SetConfig+0x2fc>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d124      	bne.n	8003428 <UART_SetConfig+0x22c>
 80033de:	4b42      	ldr	r3, [pc, #264]	; (80034e8 <UART_SetConfig+0x2ec>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ec:	d012      	beq.n	8003414 <UART_SetConfig+0x218>
 80033ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f2:	d802      	bhi.n	80033fa <UART_SetConfig+0x1fe>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d007      	beq.n	8003408 <UART_SetConfig+0x20c>
 80033f8:	e012      	b.n	8003420 <UART_SetConfig+0x224>
 80033fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033fe:	d006      	beq.n	800340e <UART_SetConfig+0x212>
 8003400:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003404:	d009      	beq.n	800341a <UART_SetConfig+0x21e>
 8003406:	e00b      	b.n	8003420 <UART_SetConfig+0x224>
 8003408:	2300      	movs	r3, #0
 800340a:	76fb      	strb	r3, [r7, #27]
 800340c:	e038      	b.n	8003480 <UART_SetConfig+0x284>
 800340e:	2302      	movs	r3, #2
 8003410:	76fb      	strb	r3, [r7, #27]
 8003412:	e035      	b.n	8003480 <UART_SetConfig+0x284>
 8003414:	2304      	movs	r3, #4
 8003416:	76fb      	strb	r3, [r7, #27]
 8003418:	e032      	b.n	8003480 <UART_SetConfig+0x284>
 800341a:	2308      	movs	r3, #8
 800341c:	76fb      	strb	r3, [r7, #27]
 800341e:	e02f      	b.n	8003480 <UART_SetConfig+0x284>
 8003420:	2310      	movs	r3, #16
 8003422:	76fb      	strb	r3, [r7, #27]
 8003424:	bf00      	nop
 8003426:	e02b      	b.n	8003480 <UART_SetConfig+0x284>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a2c      	ldr	r2, [pc, #176]	; (80034e0 <UART_SetConfig+0x2e4>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d124      	bne.n	800347c <UART_SetConfig+0x280>
 8003432:	4b2d      	ldr	r3, [pc, #180]	; (80034e8 <UART_SetConfig+0x2ec>)
 8003434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003438:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800343c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003440:	d012      	beq.n	8003468 <UART_SetConfig+0x26c>
 8003442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003446:	d802      	bhi.n	800344e <UART_SetConfig+0x252>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d007      	beq.n	800345c <UART_SetConfig+0x260>
 800344c:	e012      	b.n	8003474 <UART_SetConfig+0x278>
 800344e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003452:	d006      	beq.n	8003462 <UART_SetConfig+0x266>
 8003454:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003458:	d009      	beq.n	800346e <UART_SetConfig+0x272>
 800345a:	e00b      	b.n	8003474 <UART_SetConfig+0x278>
 800345c:	2300      	movs	r3, #0
 800345e:	76fb      	strb	r3, [r7, #27]
 8003460:	e00e      	b.n	8003480 <UART_SetConfig+0x284>
 8003462:	2302      	movs	r3, #2
 8003464:	76fb      	strb	r3, [r7, #27]
 8003466:	e00b      	b.n	8003480 <UART_SetConfig+0x284>
 8003468:	2304      	movs	r3, #4
 800346a:	76fb      	strb	r3, [r7, #27]
 800346c:	e008      	b.n	8003480 <UART_SetConfig+0x284>
 800346e:	2308      	movs	r3, #8
 8003470:	76fb      	strb	r3, [r7, #27]
 8003472:	e005      	b.n	8003480 <UART_SetConfig+0x284>
 8003474:	2310      	movs	r3, #16
 8003476:	76fb      	strb	r3, [r7, #27]
 8003478:	bf00      	nop
 800347a:	e001      	b.n	8003480 <UART_SetConfig+0x284>
 800347c:	2310      	movs	r3, #16
 800347e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a16      	ldr	r2, [pc, #88]	; (80034e0 <UART_SetConfig+0x2e4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	f040 8087 	bne.w	800359a <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800348c:	7efb      	ldrb	r3, [r7, #27]
 800348e:	2b08      	cmp	r3, #8
 8003490:	d836      	bhi.n	8003500 <UART_SetConfig+0x304>
 8003492:	a201      	add	r2, pc, #4	; (adr r2, 8003498 <UART_SetConfig+0x29c>)
 8003494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003498:	080034bd 	.word	0x080034bd
 800349c:	08003501 	.word	0x08003501
 80034a0:	080034c5 	.word	0x080034c5
 80034a4:	08003501 	.word	0x08003501
 80034a8:	080034cb 	.word	0x080034cb
 80034ac:	08003501 	.word	0x08003501
 80034b0:	08003501 	.word	0x08003501
 80034b4:	08003501 	.word	0x08003501
 80034b8:	080034d3 	.word	0x080034d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034bc:	f7fe fe82 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
 80034c0:	6178      	str	r0, [r7, #20]
        break;
 80034c2:	e022      	b.n	800350a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034c4:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <UART_SetConfig+0x300>)
 80034c6:	617b      	str	r3, [r7, #20]
        break;
 80034c8:	e01f      	b.n	800350a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ca:	f7fe fde5 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 80034ce:	6178      	str	r0, [r7, #20]
        break;
 80034d0:	e01b      	b.n	800350a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034d6:	617b      	str	r3, [r7, #20]
        break;
 80034d8:	e017      	b.n	800350a <UART_SetConfig+0x30e>
 80034da:	bf00      	nop
 80034dc:	efff69f3 	.word	0xefff69f3
 80034e0:	40008000 	.word	0x40008000
 80034e4:	40013800 	.word	0x40013800
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40004400 	.word	0x40004400
 80034f0:	40004800 	.word	0x40004800
 80034f4:	40004c00 	.word	0x40004c00
 80034f8:	40005000 	.word	0x40005000
 80034fc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	76bb      	strb	r3, [r7, #26]
        break;
 8003508:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80f1 	beq.w	80036f4 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	4413      	add	r3, r2
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	429a      	cmp	r2, r3
 8003520:	d305      	bcc.n	800352e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	429a      	cmp	r2, r3
 800352c:	d902      	bls.n	8003534 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	76bb      	strb	r3, [r7, #26]
 8003532:	e0df      	b.n	80036f4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	4619      	mov	r1, r3
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	f04f 0400 	mov.w	r4, #0
 8003544:	0214      	lsls	r4, r2, #8
 8003546:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800354a:	020b      	lsls	r3, r1, #8
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6852      	ldr	r2, [r2, #4]
 8003550:	0852      	lsrs	r2, r2, #1
 8003552:	4611      	mov	r1, r2
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	eb13 0b01 	adds.w	fp, r3, r1
 800355c:	eb44 0c02 	adc.w	ip, r4, r2
 8003560:	4658      	mov	r0, fp
 8003562:	4661      	mov	r1, ip
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f04f 0400 	mov.w	r4, #0
 800356c:	461a      	mov	r2, r3
 800356e:	4623      	mov	r3, r4
 8003570:	f7fc fe86 	bl	8000280 <__aeabi_uldivmod>
 8003574:	4603      	mov	r3, r0
 8003576:	460c      	mov	r4, r1
 8003578:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003580:	d308      	bcc.n	8003594 <UART_SetConfig+0x398>
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003588:	d204      	bcs.n	8003594 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	e0af      	b.n	80036f4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	76bb      	strb	r3, [r7, #26]
 8003598:	e0ac      	b.n	80036f4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a2:	d15b      	bne.n	800365c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80035a4:	7efb      	ldrb	r3, [r7, #27]
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d827      	bhi.n	80035fa <UART_SetConfig+0x3fe>
 80035aa:	a201      	add	r2, pc, #4	; (adr r2, 80035b0 <UART_SetConfig+0x3b4>)
 80035ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b0:	080035d5 	.word	0x080035d5
 80035b4:	080035dd 	.word	0x080035dd
 80035b8:	080035e5 	.word	0x080035e5
 80035bc:	080035fb 	.word	0x080035fb
 80035c0:	080035eb 	.word	0x080035eb
 80035c4:	080035fb 	.word	0x080035fb
 80035c8:	080035fb 	.word	0x080035fb
 80035cc:	080035fb 	.word	0x080035fb
 80035d0:	080035f3 	.word	0x080035f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035d4:	f7fe fdf6 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
 80035d8:	6178      	str	r0, [r7, #20]
        break;
 80035da:	e013      	b.n	8003604 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035dc:	f7fe fe08 	bl	80021f0 <HAL_RCC_GetPCLK2Freq>
 80035e0:	6178      	str	r0, [r7, #20]
        break;
 80035e2:	e00f      	b.n	8003604 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035e4:	4b49      	ldr	r3, [pc, #292]	; (800370c <UART_SetConfig+0x510>)
 80035e6:	617b      	str	r3, [r7, #20]
        break;
 80035e8:	e00c      	b.n	8003604 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ea:	f7fe fd55 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 80035ee:	6178      	str	r0, [r7, #20]
        break;
 80035f0:	e008      	b.n	8003604 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035f6:	617b      	str	r3, [r7, #20]
        break;
 80035f8:	e004      	b.n	8003604 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	76bb      	strb	r3, [r7, #26]
        break;
 8003602:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d074      	beq.n	80036f4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	005a      	lsls	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	085b      	lsrs	r3, r3, #1
 8003614:	441a      	add	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	fbb2 f3f3 	udiv	r3, r2, r3
 800361e:	b29b      	uxth	r3, r3
 8003620:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	2b0f      	cmp	r3, #15
 8003626:	d916      	bls.n	8003656 <UART_SetConfig+0x45a>
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362e:	d212      	bcs.n	8003656 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	b29b      	uxth	r3, r3
 8003634:	f023 030f 	bic.w	r3, r3, #15
 8003638:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	085b      	lsrs	r3, r3, #1
 800363e:	b29b      	uxth	r3, r3
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	b29a      	uxth	r2, r3
 8003646:	89fb      	ldrh	r3, [r7, #14]
 8003648:	4313      	orrs	r3, r2
 800364a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	89fa      	ldrh	r2, [r7, #14]
 8003652:	60da      	str	r2, [r3, #12]
 8003654:	e04e      	b.n	80036f4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	76bb      	strb	r3, [r7, #26]
 800365a:	e04b      	b.n	80036f4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800365c:	7efb      	ldrb	r3, [r7, #27]
 800365e:	2b08      	cmp	r3, #8
 8003660:	d827      	bhi.n	80036b2 <UART_SetConfig+0x4b6>
 8003662:	a201      	add	r2, pc, #4	; (adr r2, 8003668 <UART_SetConfig+0x46c>)
 8003664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003668:	0800368d 	.word	0x0800368d
 800366c:	08003695 	.word	0x08003695
 8003670:	0800369d 	.word	0x0800369d
 8003674:	080036b3 	.word	0x080036b3
 8003678:	080036a3 	.word	0x080036a3
 800367c:	080036b3 	.word	0x080036b3
 8003680:	080036b3 	.word	0x080036b3
 8003684:	080036b3 	.word	0x080036b3
 8003688:	080036ab 	.word	0x080036ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800368c:	f7fe fd9a 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
 8003690:	6178      	str	r0, [r7, #20]
        break;
 8003692:	e013      	b.n	80036bc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003694:	f7fe fdac 	bl	80021f0 <HAL_RCC_GetPCLK2Freq>
 8003698:	6178      	str	r0, [r7, #20]
        break;
 800369a:	e00f      	b.n	80036bc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800369c:	4b1b      	ldr	r3, [pc, #108]	; (800370c <UART_SetConfig+0x510>)
 800369e:	617b      	str	r3, [r7, #20]
        break;
 80036a0:	e00c      	b.n	80036bc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036a2:	f7fe fcf9 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 80036a6:	6178      	str	r0, [r7, #20]
        break;
 80036a8:	e008      	b.n	80036bc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ae:	617b      	str	r3, [r7, #20]
        break;
 80036b0:	e004      	b.n	80036bc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	76bb      	strb	r3, [r7, #26]
        break;
 80036ba:	bf00      	nop
    }

    if (pclk != 0U)
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d018      	beq.n	80036f4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	085a      	lsrs	r2, r3, #1
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	441a      	add	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	2b0f      	cmp	r3, #15
 80036dc:	d908      	bls.n	80036f0 <UART_SetConfig+0x4f4>
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e4:	d204      	bcs.n	80036f0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	e001      	b.n	80036f4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003700:	7ebb      	ldrb	r3, [r7, #26]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800370c:	00f42400 	.word	0x00f42400

08003710 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01a      	beq.n	8003826 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800380e:	d10a      	bne.n	8003826 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]
  }
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af02      	add	r7, sp, #8
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003862:	f7fd fac1 	bl	8000de8 <HAL_GetTick>
 8003866:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b08      	cmp	r3, #8
 8003874:	d10e      	bne.n	8003894 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003876:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f82a 	bl	80038de <UART_WaitOnFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e020      	b.n	80038d6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d10e      	bne.n	80038c0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f814 	bl	80038de <UART_WaitOnFlagUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e00a      	b.n	80038d6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	603b      	str	r3, [r7, #0]
 80038ea:	4613      	mov	r3, r2
 80038ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ee:	e05d      	b.n	80039ac <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f6:	d059      	beq.n	80039ac <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f8:	f7fd fa76 	bl	8000de8 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	429a      	cmp	r2, r3
 8003906:	d302      	bcc.n	800390e <UART_WaitOnFlagUntilTimeout+0x30>
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d11b      	bne.n	8003946 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800391c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0201 	bic.w	r2, r2, #1
 800392c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2220      	movs	r2, #32
 8003938:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e042      	b.n	80039cc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d02b      	beq.n	80039ac <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800395e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003962:	d123      	bne.n	80039ac <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800396c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800397c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0201 	bic.w	r2, r2, #1
 800398c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2220      	movs	r2, #32
 8003998:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2220      	movs	r2, #32
 800399e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e00f      	b.n	80039cc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	69da      	ldr	r2, [r3, #28]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	4013      	ands	r3, r2
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	bf0c      	ite	eq
 80039bc:	2301      	moveq	r3, #1
 80039be:	2300      	movne	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d092      	beq.n	80038f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80039ea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f7ff fbd8 	bl	80031e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a56:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff fbb5 	bl	80031d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a80:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a86:	2b22      	cmp	r3, #34	; 0x22
 8003a88:	d13a      	bne.n	8003b00 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a90:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003a92:	89bb      	ldrh	r3, [r7, #12]
 8003a94:	b2d9      	uxtb	r1, r3
 8003a96:	89fb      	ldrh	r3, [r7, #14]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9e:	400a      	ands	r2, r1
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d123      	bne.n	8003b14 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ada:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0201 	bic.w	r2, r2, #1
 8003aea:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7fc fec5 	bl	8000888 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003afe:	e009      	b.n	8003b14 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	8b1b      	ldrh	r3, [r3, #24]
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f042 0208 	orr.w	r2, r2, #8
 8003b10:	b292      	uxth	r2, r2
 8003b12:	831a      	strh	r2, [r3, #24]
}
 8003b14:	bf00      	nop
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b2a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b30:	2b22      	cmp	r3, #34	; 0x22
 8003b32:	d13a      	bne.n	8003baa <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b3a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b40:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003b42:	89ba      	ldrh	r2, [r7, #12]
 8003b44:	89fb      	ldrh	r3, [r7, #14]
 8003b46:	4013      	ands	r3, r2
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b52:	1c9a      	adds	r2, r3, #2
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d123      	bne.n	8003bbe <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b84:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0201 	bic.w	r2, r2, #1
 8003b94:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fc fe70 	bl	8000888 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ba8:	e009      	b.n	8003bbe <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	8b1b      	ldrh	r3, [r3, #24]
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0208 	orr.w	r2, r2, #8
 8003bba:	b292      	uxth	r2, r2
 8003bbc:	831a      	strh	r2, [r3, #24]
}
 8003bbe:	bf00      	nop
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
	...

08003bdc <__errno>:
 8003bdc:	4b01      	ldr	r3, [pc, #4]	; (8003be4 <__errno+0x8>)
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20000010 	.word	0x20000010

08003be8 <__libc_init_array>:
 8003be8:	b570      	push	{r4, r5, r6, lr}
 8003bea:	4e0d      	ldr	r6, [pc, #52]	; (8003c20 <__libc_init_array+0x38>)
 8003bec:	4c0d      	ldr	r4, [pc, #52]	; (8003c24 <__libc_init_array+0x3c>)
 8003bee:	1ba4      	subs	r4, r4, r6
 8003bf0:	10a4      	asrs	r4, r4, #2
 8003bf2:	2500      	movs	r5, #0
 8003bf4:	42a5      	cmp	r5, r4
 8003bf6:	d109      	bne.n	8003c0c <__libc_init_array+0x24>
 8003bf8:	4e0b      	ldr	r6, [pc, #44]	; (8003c28 <__libc_init_array+0x40>)
 8003bfa:	4c0c      	ldr	r4, [pc, #48]	; (8003c2c <__libc_init_array+0x44>)
 8003bfc:	f001 fc38 	bl	8005470 <_init>
 8003c00:	1ba4      	subs	r4, r4, r6
 8003c02:	10a4      	asrs	r4, r4, #2
 8003c04:	2500      	movs	r5, #0
 8003c06:	42a5      	cmp	r5, r4
 8003c08:	d105      	bne.n	8003c16 <__libc_init_array+0x2e>
 8003c0a:	bd70      	pop	{r4, r5, r6, pc}
 8003c0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c10:	4798      	blx	r3
 8003c12:	3501      	adds	r5, #1
 8003c14:	e7ee      	b.n	8003bf4 <__libc_init_array+0xc>
 8003c16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c1a:	4798      	blx	r3
 8003c1c:	3501      	adds	r5, #1
 8003c1e:	e7f2      	b.n	8003c06 <__libc_init_array+0x1e>
 8003c20:	080056c4 	.word	0x080056c4
 8003c24:	080056c4 	.word	0x080056c4
 8003c28:	080056c4 	.word	0x080056c4
 8003c2c:	080056c8 	.word	0x080056c8

08003c30 <memset>:
 8003c30:	4402      	add	r2, r0
 8003c32:	4603      	mov	r3, r0
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d100      	bne.n	8003c3a <memset+0xa>
 8003c38:	4770      	bx	lr
 8003c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c3e:	e7f9      	b.n	8003c34 <memset+0x4>

08003c40 <iprintf>:
 8003c40:	b40f      	push	{r0, r1, r2, r3}
 8003c42:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <iprintf+0x2c>)
 8003c44:	b513      	push	{r0, r1, r4, lr}
 8003c46:	681c      	ldr	r4, [r3, #0]
 8003c48:	b124      	cbz	r4, 8003c54 <iprintf+0x14>
 8003c4a:	69a3      	ldr	r3, [r4, #24]
 8003c4c:	b913      	cbnz	r3, 8003c54 <iprintf+0x14>
 8003c4e:	4620      	mov	r0, r4
 8003c50:	f000 f8f4 	bl	8003e3c <__sinit>
 8003c54:	ab05      	add	r3, sp, #20
 8003c56:	9a04      	ldr	r2, [sp, #16]
 8003c58:	68a1      	ldr	r1, [r4, #8]
 8003c5a:	9301      	str	r3, [sp, #4]
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f000 fbb7 	bl	80043d0 <_vfiprintf_r>
 8003c62:	b002      	add	sp, #8
 8003c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c68:	b004      	add	sp, #16
 8003c6a:	4770      	bx	lr
 8003c6c:	20000010 	.word	0x20000010

08003c70 <siscanf>:
 8003c70:	b40e      	push	{r1, r2, r3}
 8003c72:	b530      	push	{r4, r5, lr}
 8003c74:	b09c      	sub	sp, #112	; 0x70
 8003c76:	ac1f      	add	r4, sp, #124	; 0x7c
 8003c78:	f44f 7201 	mov.w	r2, #516	; 0x204
 8003c7c:	f854 5b04 	ldr.w	r5, [r4], #4
 8003c80:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003c84:	9002      	str	r0, [sp, #8]
 8003c86:	9006      	str	r0, [sp, #24]
 8003c88:	f7fc faa2 	bl	80001d0 <strlen>
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <siscanf+0x4c>)
 8003c8e:	9003      	str	r0, [sp, #12]
 8003c90:	9007      	str	r0, [sp, #28]
 8003c92:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c94:	480a      	ldr	r0, [pc, #40]	; (8003cc0 <siscanf+0x50>)
 8003c96:	9401      	str	r4, [sp, #4]
 8003c98:	2300      	movs	r3, #0
 8003c9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8003c9c:	9314      	str	r3, [sp, #80]	; 0x50
 8003c9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ca2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003ca6:	462a      	mov	r2, r5
 8003ca8:	4623      	mov	r3, r4
 8003caa:	a902      	add	r1, sp, #8
 8003cac:	6800      	ldr	r0, [r0, #0]
 8003cae:	f000 fa15 	bl	80040dc <__ssvfiscanf_r>
 8003cb2:	b01c      	add	sp, #112	; 0x70
 8003cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003cb8:	b003      	add	sp, #12
 8003cba:	4770      	bx	lr
 8003cbc:	08003ce7 	.word	0x08003ce7
 8003cc0:	20000010 	.word	0x20000010

08003cc4 <__sread>:
 8003cc4:	b510      	push	{r4, lr}
 8003cc6:	460c      	mov	r4, r1
 8003cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ccc:	f000 ff76 	bl	8004bbc <_read_r>
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	bfab      	itete	ge
 8003cd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cd6:	89a3      	ldrhlt	r3, [r4, #12]
 8003cd8:	181b      	addge	r3, r3, r0
 8003cda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cde:	bfac      	ite	ge
 8003ce0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ce2:	81a3      	strhlt	r3, [r4, #12]
 8003ce4:	bd10      	pop	{r4, pc}

08003ce6 <__seofread>:
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	4770      	bx	lr

08003cea <__swrite>:
 8003cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cee:	461f      	mov	r7, r3
 8003cf0:	898b      	ldrh	r3, [r1, #12]
 8003cf2:	05db      	lsls	r3, r3, #23
 8003cf4:	4605      	mov	r5, r0
 8003cf6:	460c      	mov	r4, r1
 8003cf8:	4616      	mov	r6, r2
 8003cfa:	d505      	bpl.n	8003d08 <__swrite+0x1e>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d04:	f000 f924 	bl	8003f50 <_lseek_r>
 8003d08:	89a3      	ldrh	r3, [r4, #12]
 8003d0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d12:	81a3      	strh	r3, [r4, #12]
 8003d14:	4632      	mov	r2, r6
 8003d16:	463b      	mov	r3, r7
 8003d18:	4628      	mov	r0, r5
 8003d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d1e:	f000 b82b 	b.w	8003d78 <_write_r>

08003d22 <__sseek>:
 8003d22:	b510      	push	{r4, lr}
 8003d24:	460c      	mov	r4, r1
 8003d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d2a:	f000 f911 	bl	8003f50 <_lseek_r>
 8003d2e:	1c43      	adds	r3, r0, #1
 8003d30:	89a3      	ldrh	r3, [r4, #12]
 8003d32:	bf15      	itete	ne
 8003d34:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d3e:	81a3      	strheq	r3, [r4, #12]
 8003d40:	bf18      	it	ne
 8003d42:	81a3      	strhne	r3, [r4, #12]
 8003d44:	bd10      	pop	{r4, pc}

08003d46 <__sclose>:
 8003d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d4a:	f000 b827 	b.w	8003d9c <_close_r>

08003d4e <strncpy>:
 8003d4e:	b570      	push	{r4, r5, r6, lr}
 8003d50:	3901      	subs	r1, #1
 8003d52:	4604      	mov	r4, r0
 8003d54:	b902      	cbnz	r2, 8003d58 <strncpy+0xa>
 8003d56:	bd70      	pop	{r4, r5, r6, pc}
 8003d58:	4623      	mov	r3, r4
 8003d5a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8003d5e:	f803 5b01 	strb.w	r5, [r3], #1
 8003d62:	1e56      	subs	r6, r2, #1
 8003d64:	b92d      	cbnz	r5, 8003d72 <strncpy+0x24>
 8003d66:	4414      	add	r4, r2
 8003d68:	42a3      	cmp	r3, r4
 8003d6a:	d0f4      	beq.n	8003d56 <strncpy+0x8>
 8003d6c:	f803 5b01 	strb.w	r5, [r3], #1
 8003d70:	e7fa      	b.n	8003d68 <strncpy+0x1a>
 8003d72:	461c      	mov	r4, r3
 8003d74:	4632      	mov	r2, r6
 8003d76:	e7ed      	b.n	8003d54 <strncpy+0x6>

08003d78 <_write_r>:
 8003d78:	b538      	push	{r3, r4, r5, lr}
 8003d7a:	4c07      	ldr	r4, [pc, #28]	; (8003d98 <_write_r+0x20>)
 8003d7c:	4605      	mov	r5, r0
 8003d7e:	4608      	mov	r0, r1
 8003d80:	4611      	mov	r1, r2
 8003d82:	2200      	movs	r2, #0
 8003d84:	6022      	str	r2, [r4, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	f7fc fd42 	bl	8000810 <_write>
 8003d8c:	1c43      	adds	r3, r0, #1
 8003d8e:	d102      	bne.n	8003d96 <_write_r+0x1e>
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	b103      	cbz	r3, 8003d96 <_write_r+0x1e>
 8003d94:	602b      	str	r3, [r5, #0]
 8003d96:	bd38      	pop	{r3, r4, r5, pc}
 8003d98:	200002fc 	.word	0x200002fc

08003d9c <_close_r>:
 8003d9c:	b538      	push	{r3, r4, r5, lr}
 8003d9e:	4c06      	ldr	r4, [pc, #24]	; (8003db8 <_close_r+0x1c>)
 8003da0:	2300      	movs	r3, #0
 8003da2:	4605      	mov	r5, r0
 8003da4:	4608      	mov	r0, r1
 8003da6:	6023      	str	r3, [r4, #0]
 8003da8:	f7fc fe69 	bl	8000a7e <_close>
 8003dac:	1c43      	adds	r3, r0, #1
 8003dae:	d102      	bne.n	8003db6 <_close_r+0x1a>
 8003db0:	6823      	ldr	r3, [r4, #0]
 8003db2:	b103      	cbz	r3, 8003db6 <_close_r+0x1a>
 8003db4:	602b      	str	r3, [r5, #0]
 8003db6:	bd38      	pop	{r3, r4, r5, pc}
 8003db8:	200002fc 	.word	0x200002fc

08003dbc <std>:
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	b510      	push	{r4, lr}
 8003dc0:	4604      	mov	r4, r0
 8003dc2:	e9c0 3300 	strd	r3, r3, [r0]
 8003dc6:	6083      	str	r3, [r0, #8]
 8003dc8:	8181      	strh	r1, [r0, #12]
 8003dca:	6643      	str	r3, [r0, #100]	; 0x64
 8003dcc:	81c2      	strh	r2, [r0, #14]
 8003dce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003dd2:	6183      	str	r3, [r0, #24]
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	2208      	movs	r2, #8
 8003dd8:	305c      	adds	r0, #92	; 0x5c
 8003dda:	f7ff ff29 	bl	8003c30 <memset>
 8003dde:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <std+0x38>)
 8003de0:	6263      	str	r3, [r4, #36]	; 0x24
 8003de2:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <std+0x3c>)
 8003de4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003de6:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <std+0x40>)
 8003de8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <std+0x44>)
 8003dec:	6224      	str	r4, [r4, #32]
 8003dee:	6323      	str	r3, [r4, #48]	; 0x30
 8003df0:	bd10      	pop	{r4, pc}
 8003df2:	bf00      	nop
 8003df4:	08003cc5 	.word	0x08003cc5
 8003df8:	08003ceb 	.word	0x08003ceb
 8003dfc:	08003d23 	.word	0x08003d23
 8003e00:	08003d47 	.word	0x08003d47

08003e04 <_cleanup_r>:
 8003e04:	4901      	ldr	r1, [pc, #4]	; (8003e0c <_cleanup_r+0x8>)
 8003e06:	f000 b885 	b.w	8003f14 <_fwalk_reent>
 8003e0a:	bf00      	nop
 8003e0c:	08005199 	.word	0x08005199

08003e10 <__sfmoreglue>:
 8003e10:	b570      	push	{r4, r5, r6, lr}
 8003e12:	1e4a      	subs	r2, r1, #1
 8003e14:	2568      	movs	r5, #104	; 0x68
 8003e16:	4355      	muls	r5, r2
 8003e18:	460e      	mov	r6, r1
 8003e1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003e1e:	f000 f8a9 	bl	8003f74 <_malloc_r>
 8003e22:	4604      	mov	r4, r0
 8003e24:	b140      	cbz	r0, 8003e38 <__sfmoreglue+0x28>
 8003e26:	2100      	movs	r1, #0
 8003e28:	e9c0 1600 	strd	r1, r6, [r0]
 8003e2c:	300c      	adds	r0, #12
 8003e2e:	60a0      	str	r0, [r4, #8]
 8003e30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e34:	f7ff fefc 	bl	8003c30 <memset>
 8003e38:	4620      	mov	r0, r4
 8003e3a:	bd70      	pop	{r4, r5, r6, pc}

08003e3c <__sinit>:
 8003e3c:	6983      	ldr	r3, [r0, #24]
 8003e3e:	b510      	push	{r4, lr}
 8003e40:	4604      	mov	r4, r0
 8003e42:	bb33      	cbnz	r3, 8003e92 <__sinit+0x56>
 8003e44:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003e48:	6503      	str	r3, [r0, #80]	; 0x50
 8003e4a:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <__sinit+0x58>)
 8003e4c:	4a12      	ldr	r2, [pc, #72]	; (8003e98 <__sinit+0x5c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6282      	str	r2, [r0, #40]	; 0x28
 8003e52:	4298      	cmp	r0, r3
 8003e54:	bf04      	itt	eq
 8003e56:	2301      	moveq	r3, #1
 8003e58:	6183      	streq	r3, [r0, #24]
 8003e5a:	f000 f81f 	bl	8003e9c <__sfp>
 8003e5e:	6060      	str	r0, [r4, #4]
 8003e60:	4620      	mov	r0, r4
 8003e62:	f000 f81b 	bl	8003e9c <__sfp>
 8003e66:	60a0      	str	r0, [r4, #8]
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f000 f817 	bl	8003e9c <__sfp>
 8003e6e:	2200      	movs	r2, #0
 8003e70:	60e0      	str	r0, [r4, #12]
 8003e72:	2104      	movs	r1, #4
 8003e74:	6860      	ldr	r0, [r4, #4]
 8003e76:	f7ff ffa1 	bl	8003dbc <std>
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	2109      	movs	r1, #9
 8003e7e:	68a0      	ldr	r0, [r4, #8]
 8003e80:	f7ff ff9c 	bl	8003dbc <std>
 8003e84:	2202      	movs	r2, #2
 8003e86:	2112      	movs	r1, #18
 8003e88:	68e0      	ldr	r0, [r4, #12]
 8003e8a:	f7ff ff97 	bl	8003dbc <std>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	61a3      	str	r3, [r4, #24]
 8003e92:	bd10      	pop	{r4, pc}
 8003e94:	080054fc 	.word	0x080054fc
 8003e98:	08003e05 	.word	0x08003e05

08003e9c <__sfp>:
 8003e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9e:	4b1b      	ldr	r3, [pc, #108]	; (8003f0c <__sfp+0x70>)
 8003ea0:	681e      	ldr	r6, [r3, #0]
 8003ea2:	69b3      	ldr	r3, [r6, #24]
 8003ea4:	4607      	mov	r7, r0
 8003ea6:	b913      	cbnz	r3, 8003eae <__sfp+0x12>
 8003ea8:	4630      	mov	r0, r6
 8003eaa:	f7ff ffc7 	bl	8003e3c <__sinit>
 8003eae:	3648      	adds	r6, #72	; 0x48
 8003eb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	d503      	bpl.n	8003ec0 <__sfp+0x24>
 8003eb8:	6833      	ldr	r3, [r6, #0]
 8003eba:	b133      	cbz	r3, 8003eca <__sfp+0x2e>
 8003ebc:	6836      	ldr	r6, [r6, #0]
 8003ebe:	e7f7      	b.n	8003eb0 <__sfp+0x14>
 8003ec0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ec4:	b16d      	cbz	r5, 8003ee2 <__sfp+0x46>
 8003ec6:	3468      	adds	r4, #104	; 0x68
 8003ec8:	e7f4      	b.n	8003eb4 <__sfp+0x18>
 8003eca:	2104      	movs	r1, #4
 8003ecc:	4638      	mov	r0, r7
 8003ece:	f7ff ff9f 	bl	8003e10 <__sfmoreglue>
 8003ed2:	6030      	str	r0, [r6, #0]
 8003ed4:	2800      	cmp	r0, #0
 8003ed6:	d1f1      	bne.n	8003ebc <__sfp+0x20>
 8003ed8:	230c      	movs	r3, #12
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	4604      	mov	r4, r0
 8003ede:	4620      	mov	r0, r4
 8003ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ee2:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <__sfp+0x74>)
 8003ee4:	6665      	str	r5, [r4, #100]	; 0x64
 8003ee6:	e9c4 5500 	strd	r5, r5, [r4]
 8003eea:	60a5      	str	r5, [r4, #8]
 8003eec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003ef0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003ef4:	2208      	movs	r2, #8
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003efc:	f7ff fe98 	bl	8003c30 <memset>
 8003f00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003f04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003f08:	e7e9      	b.n	8003ede <__sfp+0x42>
 8003f0a:	bf00      	nop
 8003f0c:	080054fc 	.word	0x080054fc
 8003f10:	ffff0001 	.word	0xffff0001

08003f14 <_fwalk_reent>:
 8003f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f18:	4680      	mov	r8, r0
 8003f1a:	4689      	mov	r9, r1
 8003f1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f20:	2600      	movs	r6, #0
 8003f22:	b914      	cbnz	r4, 8003f2a <_fwalk_reent+0x16>
 8003f24:	4630      	mov	r0, r6
 8003f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f2a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003f2e:	3f01      	subs	r7, #1
 8003f30:	d501      	bpl.n	8003f36 <_fwalk_reent+0x22>
 8003f32:	6824      	ldr	r4, [r4, #0]
 8003f34:	e7f5      	b.n	8003f22 <_fwalk_reent+0xe>
 8003f36:	89ab      	ldrh	r3, [r5, #12]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d907      	bls.n	8003f4c <_fwalk_reent+0x38>
 8003f3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f40:	3301      	adds	r3, #1
 8003f42:	d003      	beq.n	8003f4c <_fwalk_reent+0x38>
 8003f44:	4629      	mov	r1, r5
 8003f46:	4640      	mov	r0, r8
 8003f48:	47c8      	blx	r9
 8003f4a:	4306      	orrs	r6, r0
 8003f4c:	3568      	adds	r5, #104	; 0x68
 8003f4e:	e7ee      	b.n	8003f2e <_fwalk_reent+0x1a>

08003f50 <_lseek_r>:
 8003f50:	b538      	push	{r3, r4, r5, lr}
 8003f52:	4c07      	ldr	r4, [pc, #28]	; (8003f70 <_lseek_r+0x20>)
 8003f54:	4605      	mov	r5, r0
 8003f56:	4608      	mov	r0, r1
 8003f58:	4611      	mov	r1, r2
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	6022      	str	r2, [r4, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f7fc fdb4 	bl	8000acc <_lseek>
 8003f64:	1c43      	adds	r3, r0, #1
 8003f66:	d102      	bne.n	8003f6e <_lseek_r+0x1e>
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	b103      	cbz	r3, 8003f6e <_lseek_r+0x1e>
 8003f6c:	602b      	str	r3, [r5, #0]
 8003f6e:	bd38      	pop	{r3, r4, r5, pc}
 8003f70:	200002fc 	.word	0x200002fc

08003f74 <_malloc_r>:
 8003f74:	b570      	push	{r4, r5, r6, lr}
 8003f76:	1ccd      	adds	r5, r1, #3
 8003f78:	f025 0503 	bic.w	r5, r5, #3
 8003f7c:	3508      	adds	r5, #8
 8003f7e:	2d0c      	cmp	r5, #12
 8003f80:	bf38      	it	cc
 8003f82:	250c      	movcc	r5, #12
 8003f84:	2d00      	cmp	r5, #0
 8003f86:	4606      	mov	r6, r0
 8003f88:	db01      	blt.n	8003f8e <_malloc_r+0x1a>
 8003f8a:	42a9      	cmp	r1, r5
 8003f8c:	d903      	bls.n	8003f96 <_malloc_r+0x22>
 8003f8e:	230c      	movs	r3, #12
 8003f90:	6033      	str	r3, [r6, #0]
 8003f92:	2000      	movs	r0, #0
 8003f94:	bd70      	pop	{r4, r5, r6, pc}
 8003f96:	f001 f9bc 	bl	8005312 <__malloc_lock>
 8003f9a:	4a21      	ldr	r2, [pc, #132]	; (8004020 <_malloc_r+0xac>)
 8003f9c:	6814      	ldr	r4, [r2, #0]
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	b991      	cbnz	r1, 8003fc8 <_malloc_r+0x54>
 8003fa2:	4c20      	ldr	r4, [pc, #128]	; (8004024 <_malloc_r+0xb0>)
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	b91b      	cbnz	r3, 8003fb0 <_malloc_r+0x3c>
 8003fa8:	4630      	mov	r0, r6
 8003faa:	f000 fe19 	bl	8004be0 <_sbrk_r>
 8003fae:	6020      	str	r0, [r4, #0]
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	4630      	mov	r0, r6
 8003fb4:	f000 fe14 	bl	8004be0 <_sbrk_r>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d124      	bne.n	8004006 <_malloc_r+0x92>
 8003fbc:	230c      	movs	r3, #12
 8003fbe:	6033      	str	r3, [r6, #0]
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	f001 f9a7 	bl	8005314 <__malloc_unlock>
 8003fc6:	e7e4      	b.n	8003f92 <_malloc_r+0x1e>
 8003fc8:	680b      	ldr	r3, [r1, #0]
 8003fca:	1b5b      	subs	r3, r3, r5
 8003fcc:	d418      	bmi.n	8004000 <_malloc_r+0x8c>
 8003fce:	2b0b      	cmp	r3, #11
 8003fd0:	d90f      	bls.n	8003ff2 <_malloc_r+0x7e>
 8003fd2:	600b      	str	r3, [r1, #0]
 8003fd4:	50cd      	str	r5, [r1, r3]
 8003fd6:	18cc      	adds	r4, r1, r3
 8003fd8:	4630      	mov	r0, r6
 8003fda:	f001 f99b 	bl	8005314 <__malloc_unlock>
 8003fde:	f104 000b 	add.w	r0, r4, #11
 8003fe2:	1d23      	adds	r3, r4, #4
 8003fe4:	f020 0007 	bic.w	r0, r0, #7
 8003fe8:	1ac3      	subs	r3, r0, r3
 8003fea:	d0d3      	beq.n	8003f94 <_malloc_r+0x20>
 8003fec:	425a      	negs	r2, r3
 8003fee:	50e2      	str	r2, [r4, r3]
 8003ff0:	e7d0      	b.n	8003f94 <_malloc_r+0x20>
 8003ff2:	428c      	cmp	r4, r1
 8003ff4:	684b      	ldr	r3, [r1, #4]
 8003ff6:	bf16      	itet	ne
 8003ff8:	6063      	strne	r3, [r4, #4]
 8003ffa:	6013      	streq	r3, [r2, #0]
 8003ffc:	460c      	movne	r4, r1
 8003ffe:	e7eb      	b.n	8003fd8 <_malloc_r+0x64>
 8004000:	460c      	mov	r4, r1
 8004002:	6849      	ldr	r1, [r1, #4]
 8004004:	e7cc      	b.n	8003fa0 <_malloc_r+0x2c>
 8004006:	1cc4      	adds	r4, r0, #3
 8004008:	f024 0403 	bic.w	r4, r4, #3
 800400c:	42a0      	cmp	r0, r4
 800400e:	d005      	beq.n	800401c <_malloc_r+0xa8>
 8004010:	1a21      	subs	r1, r4, r0
 8004012:	4630      	mov	r0, r6
 8004014:	f000 fde4 	bl	8004be0 <_sbrk_r>
 8004018:	3001      	adds	r0, #1
 800401a:	d0cf      	beq.n	8003fbc <_malloc_r+0x48>
 800401c:	6025      	str	r5, [r4, #0]
 800401e:	e7db      	b.n	8003fd8 <_malloc_r+0x64>
 8004020:	20000200 	.word	0x20000200
 8004024:	20000204 	.word	0x20000204

08004028 <_sungetc_r>:
 8004028:	b538      	push	{r3, r4, r5, lr}
 800402a:	1c4b      	adds	r3, r1, #1
 800402c:	4614      	mov	r4, r2
 800402e:	d103      	bne.n	8004038 <_sungetc_r+0x10>
 8004030:	f04f 35ff 	mov.w	r5, #4294967295
 8004034:	4628      	mov	r0, r5
 8004036:	bd38      	pop	{r3, r4, r5, pc}
 8004038:	8993      	ldrh	r3, [r2, #12]
 800403a:	f023 0320 	bic.w	r3, r3, #32
 800403e:	8193      	strh	r3, [r2, #12]
 8004040:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004042:	6852      	ldr	r2, [r2, #4]
 8004044:	b2cd      	uxtb	r5, r1
 8004046:	b18b      	cbz	r3, 800406c <_sungetc_r+0x44>
 8004048:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800404a:	4293      	cmp	r3, r2
 800404c:	dd08      	ble.n	8004060 <_sungetc_r+0x38>
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	1e5a      	subs	r2, r3, #1
 8004052:	6022      	str	r2, [r4, #0]
 8004054:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004058:	6863      	ldr	r3, [r4, #4]
 800405a:	3301      	adds	r3, #1
 800405c:	6063      	str	r3, [r4, #4]
 800405e:	e7e9      	b.n	8004034 <_sungetc_r+0xc>
 8004060:	4621      	mov	r1, r4
 8004062:	f000 ff19 	bl	8004e98 <__submore>
 8004066:	2800      	cmp	r0, #0
 8004068:	d0f1      	beq.n	800404e <_sungetc_r+0x26>
 800406a:	e7e1      	b.n	8004030 <_sungetc_r+0x8>
 800406c:	6921      	ldr	r1, [r4, #16]
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	b151      	cbz	r1, 8004088 <_sungetc_r+0x60>
 8004072:	4299      	cmp	r1, r3
 8004074:	d208      	bcs.n	8004088 <_sungetc_r+0x60>
 8004076:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800407a:	42a9      	cmp	r1, r5
 800407c:	d104      	bne.n	8004088 <_sungetc_r+0x60>
 800407e:	3b01      	subs	r3, #1
 8004080:	3201      	adds	r2, #1
 8004082:	6023      	str	r3, [r4, #0]
 8004084:	6062      	str	r2, [r4, #4]
 8004086:	e7d5      	b.n	8004034 <_sungetc_r+0xc>
 8004088:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800408c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004090:	6363      	str	r3, [r4, #52]	; 0x34
 8004092:	2303      	movs	r3, #3
 8004094:	63a3      	str	r3, [r4, #56]	; 0x38
 8004096:	4623      	mov	r3, r4
 8004098:	f803 5f46 	strb.w	r5, [r3, #70]!
 800409c:	6023      	str	r3, [r4, #0]
 800409e:	2301      	movs	r3, #1
 80040a0:	e7dc      	b.n	800405c <_sungetc_r+0x34>

080040a2 <__ssrefill_r>:
 80040a2:	b510      	push	{r4, lr}
 80040a4:	460c      	mov	r4, r1
 80040a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80040a8:	b169      	cbz	r1, 80040c6 <__ssrefill_r+0x24>
 80040aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040ae:	4299      	cmp	r1, r3
 80040b0:	d001      	beq.n	80040b6 <__ssrefill_r+0x14>
 80040b2:	f001 f931 	bl	8005318 <_free_r>
 80040b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040b8:	6063      	str	r3, [r4, #4]
 80040ba:	2000      	movs	r0, #0
 80040bc:	6360      	str	r0, [r4, #52]	; 0x34
 80040be:	b113      	cbz	r3, 80040c6 <__ssrefill_r+0x24>
 80040c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80040c2:	6023      	str	r3, [r4, #0]
 80040c4:	bd10      	pop	{r4, pc}
 80040c6:	6923      	ldr	r3, [r4, #16]
 80040c8:	6023      	str	r3, [r4, #0]
 80040ca:	2300      	movs	r3, #0
 80040cc:	6063      	str	r3, [r4, #4]
 80040ce:	89a3      	ldrh	r3, [r4, #12]
 80040d0:	f043 0320 	orr.w	r3, r3, #32
 80040d4:	81a3      	strh	r3, [r4, #12]
 80040d6:	f04f 30ff 	mov.w	r0, #4294967295
 80040da:	e7f3      	b.n	80040c4 <__ssrefill_r+0x22>

080040dc <__ssvfiscanf_r>:
 80040dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e0:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80040e4:	460c      	mov	r4, r1
 80040e6:	2100      	movs	r1, #0
 80040e8:	9144      	str	r1, [sp, #272]	; 0x110
 80040ea:	9145      	str	r1, [sp, #276]	; 0x114
 80040ec:	499f      	ldr	r1, [pc, #636]	; (800436c <__ssvfiscanf_r+0x290>)
 80040ee:	91a0      	str	r1, [sp, #640]	; 0x280
 80040f0:	f10d 0804 	add.w	r8, sp, #4
 80040f4:	499e      	ldr	r1, [pc, #632]	; (8004370 <__ssvfiscanf_r+0x294>)
 80040f6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8004374 <__ssvfiscanf_r+0x298>
 80040fa:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80040fe:	4606      	mov	r6, r0
 8004100:	4692      	mov	sl, r2
 8004102:	91a1      	str	r1, [sp, #644]	; 0x284
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	270a      	movs	r7, #10
 8004108:	f89a 3000 	ldrb.w	r3, [sl]
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 812a 	beq.w	8004366 <__ssvfiscanf_r+0x28a>
 8004112:	4655      	mov	r5, sl
 8004114:	f001 f86e 	bl	80051f4 <__locale_ctype_ptr>
 8004118:	f815 bb01 	ldrb.w	fp, [r5], #1
 800411c:	4458      	add	r0, fp
 800411e:	7843      	ldrb	r3, [r0, #1]
 8004120:	f013 0308 	ands.w	r3, r3, #8
 8004124:	d01c      	beq.n	8004160 <__ssvfiscanf_r+0x84>
 8004126:	6863      	ldr	r3, [r4, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	dd12      	ble.n	8004152 <__ssvfiscanf_r+0x76>
 800412c:	f001 f862 	bl	80051f4 <__locale_ctype_ptr>
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	781a      	ldrb	r2, [r3, #0]
 8004134:	4410      	add	r0, r2
 8004136:	7842      	ldrb	r2, [r0, #1]
 8004138:	0712      	lsls	r2, r2, #28
 800413a:	d401      	bmi.n	8004140 <__ssvfiscanf_r+0x64>
 800413c:	46aa      	mov	sl, r5
 800413e:	e7e3      	b.n	8004108 <__ssvfiscanf_r+0x2c>
 8004140:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004142:	3201      	adds	r2, #1
 8004144:	9245      	str	r2, [sp, #276]	; 0x114
 8004146:	6862      	ldr	r2, [r4, #4]
 8004148:	3301      	adds	r3, #1
 800414a:	3a01      	subs	r2, #1
 800414c:	6062      	str	r2, [r4, #4]
 800414e:	6023      	str	r3, [r4, #0]
 8004150:	e7e9      	b.n	8004126 <__ssvfiscanf_r+0x4a>
 8004152:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004154:	4621      	mov	r1, r4
 8004156:	4630      	mov	r0, r6
 8004158:	4798      	blx	r3
 800415a:	2800      	cmp	r0, #0
 800415c:	d0e6      	beq.n	800412c <__ssvfiscanf_r+0x50>
 800415e:	e7ed      	b.n	800413c <__ssvfiscanf_r+0x60>
 8004160:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8004164:	f040 8082 	bne.w	800426c <__ssvfiscanf_r+0x190>
 8004168:	9343      	str	r3, [sp, #268]	; 0x10c
 800416a:	9341      	str	r3, [sp, #260]	; 0x104
 800416c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8004170:	2b2a      	cmp	r3, #42	; 0x2a
 8004172:	d103      	bne.n	800417c <__ssvfiscanf_r+0xa0>
 8004174:	2310      	movs	r3, #16
 8004176:	9341      	str	r3, [sp, #260]	; 0x104
 8004178:	f10a 0502 	add.w	r5, sl, #2
 800417c:	46aa      	mov	sl, r5
 800417e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8004182:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004186:	2a09      	cmp	r2, #9
 8004188:	d922      	bls.n	80041d0 <__ssvfiscanf_r+0xf4>
 800418a:	2203      	movs	r2, #3
 800418c:	4879      	ldr	r0, [pc, #484]	; (8004374 <__ssvfiscanf_r+0x298>)
 800418e:	f7fc f827 	bl	80001e0 <memchr>
 8004192:	b138      	cbz	r0, 80041a4 <__ssvfiscanf_r+0xc8>
 8004194:	eba0 0309 	sub.w	r3, r0, r9
 8004198:	2001      	movs	r0, #1
 800419a:	4098      	lsls	r0, r3
 800419c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800419e:	4318      	orrs	r0, r3
 80041a0:	9041      	str	r0, [sp, #260]	; 0x104
 80041a2:	46aa      	mov	sl, r5
 80041a4:	f89a 3000 	ldrb.w	r3, [sl]
 80041a8:	2b67      	cmp	r3, #103	; 0x67
 80041aa:	f10a 0501 	add.w	r5, sl, #1
 80041ae:	d82b      	bhi.n	8004208 <__ssvfiscanf_r+0x12c>
 80041b0:	2b65      	cmp	r3, #101	; 0x65
 80041b2:	f080 809f 	bcs.w	80042f4 <__ssvfiscanf_r+0x218>
 80041b6:	2b47      	cmp	r3, #71	; 0x47
 80041b8:	d810      	bhi.n	80041dc <__ssvfiscanf_r+0x100>
 80041ba:	2b45      	cmp	r3, #69	; 0x45
 80041bc:	f080 809a 	bcs.w	80042f4 <__ssvfiscanf_r+0x218>
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d06c      	beq.n	800429e <__ssvfiscanf_r+0x1c2>
 80041c4:	2b25      	cmp	r3, #37	; 0x25
 80041c6:	d051      	beq.n	800426c <__ssvfiscanf_r+0x190>
 80041c8:	2303      	movs	r3, #3
 80041ca:	9347      	str	r3, [sp, #284]	; 0x11c
 80041cc:	9742      	str	r7, [sp, #264]	; 0x108
 80041ce:	e027      	b.n	8004220 <__ssvfiscanf_r+0x144>
 80041d0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80041d2:	fb07 1303 	mla	r3, r7, r3, r1
 80041d6:	3b30      	subs	r3, #48	; 0x30
 80041d8:	9343      	str	r3, [sp, #268]	; 0x10c
 80041da:	e7cf      	b.n	800417c <__ssvfiscanf_r+0xa0>
 80041dc:	2b5b      	cmp	r3, #91	; 0x5b
 80041de:	d06a      	beq.n	80042b6 <__ssvfiscanf_r+0x1da>
 80041e0:	d80c      	bhi.n	80041fc <__ssvfiscanf_r+0x120>
 80041e2:	2b58      	cmp	r3, #88	; 0x58
 80041e4:	d1f0      	bne.n	80041c8 <__ssvfiscanf_r+0xec>
 80041e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80041e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ec:	9241      	str	r2, [sp, #260]	; 0x104
 80041ee:	2210      	movs	r2, #16
 80041f0:	9242      	str	r2, [sp, #264]	; 0x108
 80041f2:	2b6e      	cmp	r3, #110	; 0x6e
 80041f4:	bf8c      	ite	hi
 80041f6:	2304      	movhi	r3, #4
 80041f8:	2303      	movls	r3, #3
 80041fa:	e010      	b.n	800421e <__ssvfiscanf_r+0x142>
 80041fc:	2b63      	cmp	r3, #99	; 0x63
 80041fe:	d065      	beq.n	80042cc <__ssvfiscanf_r+0x1f0>
 8004200:	2b64      	cmp	r3, #100	; 0x64
 8004202:	d1e1      	bne.n	80041c8 <__ssvfiscanf_r+0xec>
 8004204:	9742      	str	r7, [sp, #264]	; 0x108
 8004206:	e7f4      	b.n	80041f2 <__ssvfiscanf_r+0x116>
 8004208:	2b70      	cmp	r3, #112	; 0x70
 800420a:	d04b      	beq.n	80042a4 <__ssvfiscanf_r+0x1c8>
 800420c:	d826      	bhi.n	800425c <__ssvfiscanf_r+0x180>
 800420e:	2b6e      	cmp	r3, #110	; 0x6e
 8004210:	d062      	beq.n	80042d8 <__ssvfiscanf_r+0x1fc>
 8004212:	d84c      	bhi.n	80042ae <__ssvfiscanf_r+0x1d2>
 8004214:	2b69      	cmp	r3, #105	; 0x69
 8004216:	d1d7      	bne.n	80041c8 <__ssvfiscanf_r+0xec>
 8004218:	2300      	movs	r3, #0
 800421a:	9342      	str	r3, [sp, #264]	; 0x108
 800421c:	2303      	movs	r3, #3
 800421e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004220:	6863      	ldr	r3, [r4, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	dd68      	ble.n	80042f8 <__ssvfiscanf_r+0x21c>
 8004226:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004228:	0659      	lsls	r1, r3, #25
 800422a:	d407      	bmi.n	800423c <__ssvfiscanf_r+0x160>
 800422c:	f000 ffe2 	bl	80051f4 <__locale_ctype_ptr>
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	781a      	ldrb	r2, [r3, #0]
 8004234:	4410      	add	r0, r2
 8004236:	7842      	ldrb	r2, [r0, #1]
 8004238:	0712      	lsls	r2, r2, #28
 800423a:	d464      	bmi.n	8004306 <__ssvfiscanf_r+0x22a>
 800423c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800423e:	2b02      	cmp	r3, #2
 8004240:	dc73      	bgt.n	800432a <__ssvfiscanf_r+0x24e>
 8004242:	466b      	mov	r3, sp
 8004244:	4622      	mov	r2, r4
 8004246:	a941      	add	r1, sp, #260	; 0x104
 8004248:	4630      	mov	r0, r6
 800424a:	f000 fb5f 	bl	800490c <_scanf_chars>
 800424e:	2801      	cmp	r0, #1
 8004250:	f000 8089 	beq.w	8004366 <__ssvfiscanf_r+0x28a>
 8004254:	2802      	cmp	r0, #2
 8004256:	f47f af71 	bne.w	800413c <__ssvfiscanf_r+0x60>
 800425a:	e01d      	b.n	8004298 <__ssvfiscanf_r+0x1bc>
 800425c:	2b75      	cmp	r3, #117	; 0x75
 800425e:	d0d1      	beq.n	8004204 <__ssvfiscanf_r+0x128>
 8004260:	2b78      	cmp	r3, #120	; 0x78
 8004262:	d0c0      	beq.n	80041e6 <__ssvfiscanf_r+0x10a>
 8004264:	2b73      	cmp	r3, #115	; 0x73
 8004266:	d1af      	bne.n	80041c8 <__ssvfiscanf_r+0xec>
 8004268:	2302      	movs	r3, #2
 800426a:	e7d8      	b.n	800421e <__ssvfiscanf_r+0x142>
 800426c:	6863      	ldr	r3, [r4, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	dd0c      	ble.n	800428c <__ssvfiscanf_r+0x1b0>
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	781a      	ldrb	r2, [r3, #0]
 8004276:	455a      	cmp	r2, fp
 8004278:	d175      	bne.n	8004366 <__ssvfiscanf_r+0x28a>
 800427a:	3301      	adds	r3, #1
 800427c:	6862      	ldr	r2, [r4, #4]
 800427e:	6023      	str	r3, [r4, #0]
 8004280:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004282:	3a01      	subs	r2, #1
 8004284:	3301      	adds	r3, #1
 8004286:	6062      	str	r2, [r4, #4]
 8004288:	9345      	str	r3, [sp, #276]	; 0x114
 800428a:	e757      	b.n	800413c <__ssvfiscanf_r+0x60>
 800428c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800428e:	4621      	mov	r1, r4
 8004290:	4630      	mov	r0, r6
 8004292:	4798      	blx	r3
 8004294:	2800      	cmp	r0, #0
 8004296:	d0ec      	beq.n	8004272 <__ssvfiscanf_r+0x196>
 8004298:	9844      	ldr	r0, [sp, #272]	; 0x110
 800429a:	2800      	cmp	r0, #0
 800429c:	d159      	bne.n	8004352 <__ssvfiscanf_r+0x276>
 800429e:	f04f 30ff 	mov.w	r0, #4294967295
 80042a2:	e05c      	b.n	800435e <__ssvfiscanf_r+0x282>
 80042a4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80042a6:	f042 0220 	orr.w	r2, r2, #32
 80042aa:	9241      	str	r2, [sp, #260]	; 0x104
 80042ac:	e79b      	b.n	80041e6 <__ssvfiscanf_r+0x10a>
 80042ae:	2308      	movs	r3, #8
 80042b0:	9342      	str	r3, [sp, #264]	; 0x108
 80042b2:	2304      	movs	r3, #4
 80042b4:	e7b3      	b.n	800421e <__ssvfiscanf_r+0x142>
 80042b6:	4629      	mov	r1, r5
 80042b8:	4640      	mov	r0, r8
 80042ba:	f000 fca1 	bl	8004c00 <__sccl>
 80042be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80042c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042c4:	9341      	str	r3, [sp, #260]	; 0x104
 80042c6:	4605      	mov	r5, r0
 80042c8:	2301      	movs	r3, #1
 80042ca:	e7a8      	b.n	800421e <__ssvfiscanf_r+0x142>
 80042cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80042ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042d2:	9341      	str	r3, [sp, #260]	; 0x104
 80042d4:	2300      	movs	r3, #0
 80042d6:	e7a2      	b.n	800421e <__ssvfiscanf_r+0x142>
 80042d8:	9841      	ldr	r0, [sp, #260]	; 0x104
 80042da:	06c3      	lsls	r3, r0, #27
 80042dc:	f53f af2e 	bmi.w	800413c <__ssvfiscanf_r+0x60>
 80042e0:	9b00      	ldr	r3, [sp, #0]
 80042e2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80042e4:	1d19      	adds	r1, r3, #4
 80042e6:	9100      	str	r1, [sp, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	07c0      	lsls	r0, r0, #31
 80042ec:	bf4c      	ite	mi
 80042ee:	801a      	strhmi	r2, [r3, #0]
 80042f0:	601a      	strpl	r2, [r3, #0]
 80042f2:	e723      	b.n	800413c <__ssvfiscanf_r+0x60>
 80042f4:	2305      	movs	r3, #5
 80042f6:	e792      	b.n	800421e <__ssvfiscanf_r+0x142>
 80042f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80042fa:	4621      	mov	r1, r4
 80042fc:	4630      	mov	r0, r6
 80042fe:	4798      	blx	r3
 8004300:	2800      	cmp	r0, #0
 8004302:	d090      	beq.n	8004226 <__ssvfiscanf_r+0x14a>
 8004304:	e7c8      	b.n	8004298 <__ssvfiscanf_r+0x1bc>
 8004306:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004308:	3201      	adds	r2, #1
 800430a:	9245      	str	r2, [sp, #276]	; 0x114
 800430c:	6862      	ldr	r2, [r4, #4]
 800430e:	3a01      	subs	r2, #1
 8004310:	2a00      	cmp	r2, #0
 8004312:	6062      	str	r2, [r4, #4]
 8004314:	dd02      	ble.n	800431c <__ssvfiscanf_r+0x240>
 8004316:	3301      	adds	r3, #1
 8004318:	6023      	str	r3, [r4, #0]
 800431a:	e787      	b.n	800422c <__ssvfiscanf_r+0x150>
 800431c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800431e:	4621      	mov	r1, r4
 8004320:	4630      	mov	r0, r6
 8004322:	4798      	blx	r3
 8004324:	2800      	cmp	r0, #0
 8004326:	d081      	beq.n	800422c <__ssvfiscanf_r+0x150>
 8004328:	e7b6      	b.n	8004298 <__ssvfiscanf_r+0x1bc>
 800432a:	2b04      	cmp	r3, #4
 800432c:	dc06      	bgt.n	800433c <__ssvfiscanf_r+0x260>
 800432e:	466b      	mov	r3, sp
 8004330:	4622      	mov	r2, r4
 8004332:	a941      	add	r1, sp, #260	; 0x104
 8004334:	4630      	mov	r0, r6
 8004336:	f000 fb4d 	bl	80049d4 <_scanf_i>
 800433a:	e788      	b.n	800424e <__ssvfiscanf_r+0x172>
 800433c:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <__ssvfiscanf_r+0x29c>)
 800433e:	2b00      	cmp	r3, #0
 8004340:	f43f aefc 	beq.w	800413c <__ssvfiscanf_r+0x60>
 8004344:	466b      	mov	r3, sp
 8004346:	4622      	mov	r2, r4
 8004348:	a941      	add	r1, sp, #260	; 0x104
 800434a:	4630      	mov	r0, r6
 800434c:	f3af 8000 	nop.w
 8004350:	e77d      	b.n	800424e <__ssvfiscanf_r+0x172>
 8004352:	89a3      	ldrh	r3, [r4, #12]
 8004354:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004358:	bf18      	it	ne
 800435a:	f04f 30ff 	movne.w	r0, #4294967295
 800435e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8004362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004366:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004368:	e7f9      	b.n	800435e <__ssvfiscanf_r+0x282>
 800436a:	bf00      	nop
 800436c:	08004029 	.word	0x08004029
 8004370:	080040a3 	.word	0x080040a3
 8004374:	08005560 	.word	0x08005560
 8004378:	00000000 	.word	0x00000000

0800437c <__sfputc_r>:
 800437c:	6893      	ldr	r3, [r2, #8]
 800437e:	3b01      	subs	r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	b410      	push	{r4}
 8004384:	6093      	str	r3, [r2, #8]
 8004386:	da08      	bge.n	800439a <__sfputc_r+0x1e>
 8004388:	6994      	ldr	r4, [r2, #24]
 800438a:	42a3      	cmp	r3, r4
 800438c:	db01      	blt.n	8004392 <__sfputc_r+0x16>
 800438e:	290a      	cmp	r1, #10
 8004390:	d103      	bne.n	800439a <__sfputc_r+0x1e>
 8004392:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004396:	f000 bdb9 	b.w	8004f0c <__swbuf_r>
 800439a:	6813      	ldr	r3, [r2, #0]
 800439c:	1c58      	adds	r0, r3, #1
 800439e:	6010      	str	r0, [r2, #0]
 80043a0:	7019      	strb	r1, [r3, #0]
 80043a2:	4608      	mov	r0, r1
 80043a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <__sfputs_r>:
 80043aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ac:	4606      	mov	r6, r0
 80043ae:	460f      	mov	r7, r1
 80043b0:	4614      	mov	r4, r2
 80043b2:	18d5      	adds	r5, r2, r3
 80043b4:	42ac      	cmp	r4, r5
 80043b6:	d101      	bne.n	80043bc <__sfputs_r+0x12>
 80043b8:	2000      	movs	r0, #0
 80043ba:	e007      	b.n	80043cc <__sfputs_r+0x22>
 80043bc:	463a      	mov	r2, r7
 80043be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043c2:	4630      	mov	r0, r6
 80043c4:	f7ff ffda 	bl	800437c <__sfputc_r>
 80043c8:	1c43      	adds	r3, r0, #1
 80043ca:	d1f3      	bne.n	80043b4 <__sfputs_r+0xa>
 80043cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043d0 <_vfiprintf_r>:
 80043d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d4:	460c      	mov	r4, r1
 80043d6:	b09d      	sub	sp, #116	; 0x74
 80043d8:	4617      	mov	r7, r2
 80043da:	461d      	mov	r5, r3
 80043dc:	4606      	mov	r6, r0
 80043de:	b118      	cbz	r0, 80043e8 <_vfiprintf_r+0x18>
 80043e0:	6983      	ldr	r3, [r0, #24]
 80043e2:	b90b      	cbnz	r3, 80043e8 <_vfiprintf_r+0x18>
 80043e4:	f7ff fd2a 	bl	8003e3c <__sinit>
 80043e8:	4b7c      	ldr	r3, [pc, #496]	; (80045dc <_vfiprintf_r+0x20c>)
 80043ea:	429c      	cmp	r4, r3
 80043ec:	d158      	bne.n	80044a0 <_vfiprintf_r+0xd0>
 80043ee:	6874      	ldr	r4, [r6, #4]
 80043f0:	89a3      	ldrh	r3, [r4, #12]
 80043f2:	0718      	lsls	r0, r3, #28
 80043f4:	d55e      	bpl.n	80044b4 <_vfiprintf_r+0xe4>
 80043f6:	6923      	ldr	r3, [r4, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d05b      	beq.n	80044b4 <_vfiprintf_r+0xe4>
 80043fc:	2300      	movs	r3, #0
 80043fe:	9309      	str	r3, [sp, #36]	; 0x24
 8004400:	2320      	movs	r3, #32
 8004402:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004406:	2330      	movs	r3, #48	; 0x30
 8004408:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800440c:	9503      	str	r5, [sp, #12]
 800440e:	f04f 0b01 	mov.w	fp, #1
 8004412:	46b8      	mov	r8, r7
 8004414:	4645      	mov	r5, r8
 8004416:	f815 3b01 	ldrb.w	r3, [r5], #1
 800441a:	b10b      	cbz	r3, 8004420 <_vfiprintf_r+0x50>
 800441c:	2b25      	cmp	r3, #37	; 0x25
 800441e:	d154      	bne.n	80044ca <_vfiprintf_r+0xfa>
 8004420:	ebb8 0a07 	subs.w	sl, r8, r7
 8004424:	d00b      	beq.n	800443e <_vfiprintf_r+0x6e>
 8004426:	4653      	mov	r3, sl
 8004428:	463a      	mov	r2, r7
 800442a:	4621      	mov	r1, r4
 800442c:	4630      	mov	r0, r6
 800442e:	f7ff ffbc 	bl	80043aa <__sfputs_r>
 8004432:	3001      	adds	r0, #1
 8004434:	f000 80c2 	beq.w	80045bc <_vfiprintf_r+0x1ec>
 8004438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800443a:	4453      	add	r3, sl
 800443c:	9309      	str	r3, [sp, #36]	; 0x24
 800443e:	f898 3000 	ldrb.w	r3, [r8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 80ba 	beq.w	80045bc <_vfiprintf_r+0x1ec>
 8004448:	2300      	movs	r3, #0
 800444a:	f04f 32ff 	mov.w	r2, #4294967295
 800444e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004452:	9304      	str	r3, [sp, #16]
 8004454:	9307      	str	r3, [sp, #28]
 8004456:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800445a:	931a      	str	r3, [sp, #104]	; 0x68
 800445c:	46a8      	mov	r8, r5
 800445e:	2205      	movs	r2, #5
 8004460:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004464:	485e      	ldr	r0, [pc, #376]	; (80045e0 <_vfiprintf_r+0x210>)
 8004466:	f7fb febb 	bl	80001e0 <memchr>
 800446a:	9b04      	ldr	r3, [sp, #16]
 800446c:	bb78      	cbnz	r0, 80044ce <_vfiprintf_r+0xfe>
 800446e:	06d9      	lsls	r1, r3, #27
 8004470:	bf44      	itt	mi
 8004472:	2220      	movmi	r2, #32
 8004474:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004478:	071a      	lsls	r2, r3, #28
 800447a:	bf44      	itt	mi
 800447c:	222b      	movmi	r2, #43	; 0x2b
 800447e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004482:	782a      	ldrb	r2, [r5, #0]
 8004484:	2a2a      	cmp	r2, #42	; 0x2a
 8004486:	d02a      	beq.n	80044de <_vfiprintf_r+0x10e>
 8004488:	9a07      	ldr	r2, [sp, #28]
 800448a:	46a8      	mov	r8, r5
 800448c:	2000      	movs	r0, #0
 800448e:	250a      	movs	r5, #10
 8004490:	4641      	mov	r1, r8
 8004492:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004496:	3b30      	subs	r3, #48	; 0x30
 8004498:	2b09      	cmp	r3, #9
 800449a:	d969      	bls.n	8004570 <_vfiprintf_r+0x1a0>
 800449c:	b360      	cbz	r0, 80044f8 <_vfiprintf_r+0x128>
 800449e:	e024      	b.n	80044ea <_vfiprintf_r+0x11a>
 80044a0:	4b50      	ldr	r3, [pc, #320]	; (80045e4 <_vfiprintf_r+0x214>)
 80044a2:	429c      	cmp	r4, r3
 80044a4:	d101      	bne.n	80044aa <_vfiprintf_r+0xda>
 80044a6:	68b4      	ldr	r4, [r6, #8]
 80044a8:	e7a2      	b.n	80043f0 <_vfiprintf_r+0x20>
 80044aa:	4b4f      	ldr	r3, [pc, #316]	; (80045e8 <_vfiprintf_r+0x218>)
 80044ac:	429c      	cmp	r4, r3
 80044ae:	bf08      	it	eq
 80044b0:	68f4      	ldreq	r4, [r6, #12]
 80044b2:	e79d      	b.n	80043f0 <_vfiprintf_r+0x20>
 80044b4:	4621      	mov	r1, r4
 80044b6:	4630      	mov	r0, r6
 80044b8:	f000 fd7a 	bl	8004fb0 <__swsetup_r>
 80044bc:	2800      	cmp	r0, #0
 80044be:	d09d      	beq.n	80043fc <_vfiprintf_r+0x2c>
 80044c0:	f04f 30ff 	mov.w	r0, #4294967295
 80044c4:	b01d      	add	sp, #116	; 0x74
 80044c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ca:	46a8      	mov	r8, r5
 80044cc:	e7a2      	b.n	8004414 <_vfiprintf_r+0x44>
 80044ce:	4a44      	ldr	r2, [pc, #272]	; (80045e0 <_vfiprintf_r+0x210>)
 80044d0:	1a80      	subs	r0, r0, r2
 80044d2:	fa0b f000 	lsl.w	r0, fp, r0
 80044d6:	4318      	orrs	r0, r3
 80044d8:	9004      	str	r0, [sp, #16]
 80044da:	4645      	mov	r5, r8
 80044dc:	e7be      	b.n	800445c <_vfiprintf_r+0x8c>
 80044de:	9a03      	ldr	r2, [sp, #12]
 80044e0:	1d11      	adds	r1, r2, #4
 80044e2:	6812      	ldr	r2, [r2, #0]
 80044e4:	9103      	str	r1, [sp, #12]
 80044e6:	2a00      	cmp	r2, #0
 80044e8:	db01      	blt.n	80044ee <_vfiprintf_r+0x11e>
 80044ea:	9207      	str	r2, [sp, #28]
 80044ec:	e004      	b.n	80044f8 <_vfiprintf_r+0x128>
 80044ee:	4252      	negs	r2, r2
 80044f0:	f043 0302 	orr.w	r3, r3, #2
 80044f4:	9207      	str	r2, [sp, #28]
 80044f6:	9304      	str	r3, [sp, #16]
 80044f8:	f898 3000 	ldrb.w	r3, [r8]
 80044fc:	2b2e      	cmp	r3, #46	; 0x2e
 80044fe:	d10e      	bne.n	800451e <_vfiprintf_r+0x14e>
 8004500:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004504:	2b2a      	cmp	r3, #42	; 0x2a
 8004506:	d138      	bne.n	800457a <_vfiprintf_r+0x1aa>
 8004508:	9b03      	ldr	r3, [sp, #12]
 800450a:	1d1a      	adds	r2, r3, #4
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	9203      	str	r2, [sp, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	bfb8      	it	lt
 8004514:	f04f 33ff 	movlt.w	r3, #4294967295
 8004518:	f108 0802 	add.w	r8, r8, #2
 800451c:	9305      	str	r3, [sp, #20]
 800451e:	4d33      	ldr	r5, [pc, #204]	; (80045ec <_vfiprintf_r+0x21c>)
 8004520:	f898 1000 	ldrb.w	r1, [r8]
 8004524:	2203      	movs	r2, #3
 8004526:	4628      	mov	r0, r5
 8004528:	f7fb fe5a 	bl	80001e0 <memchr>
 800452c:	b140      	cbz	r0, 8004540 <_vfiprintf_r+0x170>
 800452e:	2340      	movs	r3, #64	; 0x40
 8004530:	1b40      	subs	r0, r0, r5
 8004532:	fa03 f000 	lsl.w	r0, r3, r0
 8004536:	9b04      	ldr	r3, [sp, #16]
 8004538:	4303      	orrs	r3, r0
 800453a:	f108 0801 	add.w	r8, r8, #1
 800453e:	9304      	str	r3, [sp, #16]
 8004540:	f898 1000 	ldrb.w	r1, [r8]
 8004544:	482a      	ldr	r0, [pc, #168]	; (80045f0 <_vfiprintf_r+0x220>)
 8004546:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800454a:	2206      	movs	r2, #6
 800454c:	f108 0701 	add.w	r7, r8, #1
 8004550:	f7fb fe46 	bl	80001e0 <memchr>
 8004554:	2800      	cmp	r0, #0
 8004556:	d037      	beq.n	80045c8 <_vfiprintf_r+0x1f8>
 8004558:	4b26      	ldr	r3, [pc, #152]	; (80045f4 <_vfiprintf_r+0x224>)
 800455a:	bb1b      	cbnz	r3, 80045a4 <_vfiprintf_r+0x1d4>
 800455c:	9b03      	ldr	r3, [sp, #12]
 800455e:	3307      	adds	r3, #7
 8004560:	f023 0307 	bic.w	r3, r3, #7
 8004564:	3308      	adds	r3, #8
 8004566:	9303      	str	r3, [sp, #12]
 8004568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800456a:	444b      	add	r3, r9
 800456c:	9309      	str	r3, [sp, #36]	; 0x24
 800456e:	e750      	b.n	8004412 <_vfiprintf_r+0x42>
 8004570:	fb05 3202 	mla	r2, r5, r2, r3
 8004574:	2001      	movs	r0, #1
 8004576:	4688      	mov	r8, r1
 8004578:	e78a      	b.n	8004490 <_vfiprintf_r+0xc0>
 800457a:	2300      	movs	r3, #0
 800457c:	f108 0801 	add.w	r8, r8, #1
 8004580:	9305      	str	r3, [sp, #20]
 8004582:	4619      	mov	r1, r3
 8004584:	250a      	movs	r5, #10
 8004586:	4640      	mov	r0, r8
 8004588:	f810 2b01 	ldrb.w	r2, [r0], #1
 800458c:	3a30      	subs	r2, #48	; 0x30
 800458e:	2a09      	cmp	r2, #9
 8004590:	d903      	bls.n	800459a <_vfiprintf_r+0x1ca>
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0c3      	beq.n	800451e <_vfiprintf_r+0x14e>
 8004596:	9105      	str	r1, [sp, #20]
 8004598:	e7c1      	b.n	800451e <_vfiprintf_r+0x14e>
 800459a:	fb05 2101 	mla	r1, r5, r1, r2
 800459e:	2301      	movs	r3, #1
 80045a0:	4680      	mov	r8, r0
 80045a2:	e7f0      	b.n	8004586 <_vfiprintf_r+0x1b6>
 80045a4:	ab03      	add	r3, sp, #12
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	4622      	mov	r2, r4
 80045aa:	4b13      	ldr	r3, [pc, #76]	; (80045f8 <_vfiprintf_r+0x228>)
 80045ac:	a904      	add	r1, sp, #16
 80045ae:	4630      	mov	r0, r6
 80045b0:	f3af 8000 	nop.w
 80045b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80045b8:	4681      	mov	r9, r0
 80045ba:	d1d5      	bne.n	8004568 <_vfiprintf_r+0x198>
 80045bc:	89a3      	ldrh	r3, [r4, #12]
 80045be:	065b      	lsls	r3, r3, #25
 80045c0:	f53f af7e 	bmi.w	80044c0 <_vfiprintf_r+0xf0>
 80045c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045c6:	e77d      	b.n	80044c4 <_vfiprintf_r+0xf4>
 80045c8:	ab03      	add	r3, sp, #12
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	4622      	mov	r2, r4
 80045ce:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <_vfiprintf_r+0x228>)
 80045d0:	a904      	add	r1, sp, #16
 80045d2:	4630      	mov	r0, r6
 80045d4:	f000 f888 	bl	80046e8 <_printf_i>
 80045d8:	e7ec      	b.n	80045b4 <_vfiprintf_r+0x1e4>
 80045da:	bf00      	nop
 80045dc:	08005520 	.word	0x08005520
 80045e0:	08005564 	.word	0x08005564
 80045e4:	08005540 	.word	0x08005540
 80045e8:	08005500 	.word	0x08005500
 80045ec:	08005560 	.word	0x08005560
 80045f0:	0800556a 	.word	0x0800556a
 80045f4:	00000000 	.word	0x00000000
 80045f8:	080043ab 	.word	0x080043ab

080045fc <_printf_common>:
 80045fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004600:	4691      	mov	r9, r2
 8004602:	461f      	mov	r7, r3
 8004604:	688a      	ldr	r2, [r1, #8]
 8004606:	690b      	ldr	r3, [r1, #16]
 8004608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800460c:	4293      	cmp	r3, r2
 800460e:	bfb8      	it	lt
 8004610:	4613      	movlt	r3, r2
 8004612:	f8c9 3000 	str.w	r3, [r9]
 8004616:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800461a:	4606      	mov	r6, r0
 800461c:	460c      	mov	r4, r1
 800461e:	b112      	cbz	r2, 8004626 <_printf_common+0x2a>
 8004620:	3301      	adds	r3, #1
 8004622:	f8c9 3000 	str.w	r3, [r9]
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	0699      	lsls	r1, r3, #26
 800462a:	bf42      	ittt	mi
 800462c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004630:	3302      	addmi	r3, #2
 8004632:	f8c9 3000 	strmi.w	r3, [r9]
 8004636:	6825      	ldr	r5, [r4, #0]
 8004638:	f015 0506 	ands.w	r5, r5, #6
 800463c:	d107      	bne.n	800464e <_printf_common+0x52>
 800463e:	f104 0a19 	add.w	sl, r4, #25
 8004642:	68e3      	ldr	r3, [r4, #12]
 8004644:	f8d9 2000 	ldr.w	r2, [r9]
 8004648:	1a9b      	subs	r3, r3, r2
 800464a:	42ab      	cmp	r3, r5
 800464c:	dc28      	bgt.n	80046a0 <_printf_common+0xa4>
 800464e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004652:	6822      	ldr	r2, [r4, #0]
 8004654:	3300      	adds	r3, #0
 8004656:	bf18      	it	ne
 8004658:	2301      	movne	r3, #1
 800465a:	0692      	lsls	r2, r2, #26
 800465c:	d42d      	bmi.n	80046ba <_printf_common+0xbe>
 800465e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004662:	4639      	mov	r1, r7
 8004664:	4630      	mov	r0, r6
 8004666:	47c0      	blx	r8
 8004668:	3001      	adds	r0, #1
 800466a:	d020      	beq.n	80046ae <_printf_common+0xb2>
 800466c:	6823      	ldr	r3, [r4, #0]
 800466e:	68e5      	ldr	r5, [r4, #12]
 8004670:	f8d9 2000 	ldr.w	r2, [r9]
 8004674:	f003 0306 	and.w	r3, r3, #6
 8004678:	2b04      	cmp	r3, #4
 800467a:	bf08      	it	eq
 800467c:	1aad      	subeq	r5, r5, r2
 800467e:	68a3      	ldr	r3, [r4, #8]
 8004680:	6922      	ldr	r2, [r4, #16]
 8004682:	bf0c      	ite	eq
 8004684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004688:	2500      	movne	r5, #0
 800468a:	4293      	cmp	r3, r2
 800468c:	bfc4      	itt	gt
 800468e:	1a9b      	subgt	r3, r3, r2
 8004690:	18ed      	addgt	r5, r5, r3
 8004692:	f04f 0900 	mov.w	r9, #0
 8004696:	341a      	adds	r4, #26
 8004698:	454d      	cmp	r5, r9
 800469a:	d11a      	bne.n	80046d2 <_printf_common+0xd6>
 800469c:	2000      	movs	r0, #0
 800469e:	e008      	b.n	80046b2 <_printf_common+0xb6>
 80046a0:	2301      	movs	r3, #1
 80046a2:	4652      	mov	r2, sl
 80046a4:	4639      	mov	r1, r7
 80046a6:	4630      	mov	r0, r6
 80046a8:	47c0      	blx	r8
 80046aa:	3001      	adds	r0, #1
 80046ac:	d103      	bne.n	80046b6 <_printf_common+0xba>
 80046ae:	f04f 30ff 	mov.w	r0, #4294967295
 80046b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b6:	3501      	adds	r5, #1
 80046b8:	e7c3      	b.n	8004642 <_printf_common+0x46>
 80046ba:	18e1      	adds	r1, r4, r3
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	2030      	movs	r0, #48	; 0x30
 80046c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046c4:	4422      	add	r2, r4
 80046c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046ce:	3302      	adds	r3, #2
 80046d0:	e7c5      	b.n	800465e <_printf_common+0x62>
 80046d2:	2301      	movs	r3, #1
 80046d4:	4622      	mov	r2, r4
 80046d6:	4639      	mov	r1, r7
 80046d8:	4630      	mov	r0, r6
 80046da:	47c0      	blx	r8
 80046dc:	3001      	adds	r0, #1
 80046de:	d0e6      	beq.n	80046ae <_printf_common+0xb2>
 80046e0:	f109 0901 	add.w	r9, r9, #1
 80046e4:	e7d8      	b.n	8004698 <_printf_common+0x9c>
	...

080046e8 <_printf_i>:
 80046e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80046ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80046f0:	460c      	mov	r4, r1
 80046f2:	7e09      	ldrb	r1, [r1, #24]
 80046f4:	b085      	sub	sp, #20
 80046f6:	296e      	cmp	r1, #110	; 0x6e
 80046f8:	4617      	mov	r7, r2
 80046fa:	4606      	mov	r6, r0
 80046fc:	4698      	mov	r8, r3
 80046fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004700:	f000 80b3 	beq.w	800486a <_printf_i+0x182>
 8004704:	d822      	bhi.n	800474c <_printf_i+0x64>
 8004706:	2963      	cmp	r1, #99	; 0x63
 8004708:	d036      	beq.n	8004778 <_printf_i+0x90>
 800470a:	d80a      	bhi.n	8004722 <_printf_i+0x3a>
 800470c:	2900      	cmp	r1, #0
 800470e:	f000 80b9 	beq.w	8004884 <_printf_i+0x19c>
 8004712:	2958      	cmp	r1, #88	; 0x58
 8004714:	f000 8083 	beq.w	800481e <_printf_i+0x136>
 8004718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800471c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004720:	e032      	b.n	8004788 <_printf_i+0xa0>
 8004722:	2964      	cmp	r1, #100	; 0x64
 8004724:	d001      	beq.n	800472a <_printf_i+0x42>
 8004726:	2969      	cmp	r1, #105	; 0x69
 8004728:	d1f6      	bne.n	8004718 <_printf_i+0x30>
 800472a:	6820      	ldr	r0, [r4, #0]
 800472c:	6813      	ldr	r3, [r2, #0]
 800472e:	0605      	lsls	r5, r0, #24
 8004730:	f103 0104 	add.w	r1, r3, #4
 8004734:	d52a      	bpl.n	800478c <_printf_i+0xa4>
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6011      	str	r1, [r2, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	da03      	bge.n	8004746 <_printf_i+0x5e>
 800473e:	222d      	movs	r2, #45	; 0x2d
 8004740:	425b      	negs	r3, r3
 8004742:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004746:	486f      	ldr	r0, [pc, #444]	; (8004904 <_printf_i+0x21c>)
 8004748:	220a      	movs	r2, #10
 800474a:	e039      	b.n	80047c0 <_printf_i+0xd8>
 800474c:	2973      	cmp	r1, #115	; 0x73
 800474e:	f000 809d 	beq.w	800488c <_printf_i+0x1a4>
 8004752:	d808      	bhi.n	8004766 <_printf_i+0x7e>
 8004754:	296f      	cmp	r1, #111	; 0x6f
 8004756:	d020      	beq.n	800479a <_printf_i+0xb2>
 8004758:	2970      	cmp	r1, #112	; 0x70
 800475a:	d1dd      	bne.n	8004718 <_printf_i+0x30>
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	f043 0320 	orr.w	r3, r3, #32
 8004762:	6023      	str	r3, [r4, #0]
 8004764:	e003      	b.n	800476e <_printf_i+0x86>
 8004766:	2975      	cmp	r1, #117	; 0x75
 8004768:	d017      	beq.n	800479a <_printf_i+0xb2>
 800476a:	2978      	cmp	r1, #120	; 0x78
 800476c:	d1d4      	bne.n	8004718 <_printf_i+0x30>
 800476e:	2378      	movs	r3, #120	; 0x78
 8004770:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004774:	4864      	ldr	r0, [pc, #400]	; (8004908 <_printf_i+0x220>)
 8004776:	e055      	b.n	8004824 <_printf_i+0x13c>
 8004778:	6813      	ldr	r3, [r2, #0]
 800477a:	1d19      	adds	r1, r3, #4
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6011      	str	r1, [r2, #0]
 8004780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004788:	2301      	movs	r3, #1
 800478a:	e08c      	b.n	80048a6 <_printf_i+0x1be>
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6011      	str	r1, [r2, #0]
 8004790:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004794:	bf18      	it	ne
 8004796:	b21b      	sxthne	r3, r3
 8004798:	e7cf      	b.n	800473a <_printf_i+0x52>
 800479a:	6813      	ldr	r3, [r2, #0]
 800479c:	6825      	ldr	r5, [r4, #0]
 800479e:	1d18      	adds	r0, r3, #4
 80047a0:	6010      	str	r0, [r2, #0]
 80047a2:	0628      	lsls	r0, r5, #24
 80047a4:	d501      	bpl.n	80047aa <_printf_i+0xc2>
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	e002      	b.n	80047b0 <_printf_i+0xc8>
 80047aa:	0668      	lsls	r0, r5, #25
 80047ac:	d5fb      	bpl.n	80047a6 <_printf_i+0xbe>
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	4854      	ldr	r0, [pc, #336]	; (8004904 <_printf_i+0x21c>)
 80047b2:	296f      	cmp	r1, #111	; 0x6f
 80047b4:	bf14      	ite	ne
 80047b6:	220a      	movne	r2, #10
 80047b8:	2208      	moveq	r2, #8
 80047ba:	2100      	movs	r1, #0
 80047bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047c0:	6865      	ldr	r5, [r4, #4]
 80047c2:	60a5      	str	r5, [r4, #8]
 80047c4:	2d00      	cmp	r5, #0
 80047c6:	f2c0 8095 	blt.w	80048f4 <_printf_i+0x20c>
 80047ca:	6821      	ldr	r1, [r4, #0]
 80047cc:	f021 0104 	bic.w	r1, r1, #4
 80047d0:	6021      	str	r1, [r4, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d13d      	bne.n	8004852 <_printf_i+0x16a>
 80047d6:	2d00      	cmp	r5, #0
 80047d8:	f040 808e 	bne.w	80048f8 <_printf_i+0x210>
 80047dc:	4665      	mov	r5, ip
 80047de:	2a08      	cmp	r2, #8
 80047e0:	d10b      	bne.n	80047fa <_printf_i+0x112>
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	07db      	lsls	r3, r3, #31
 80047e6:	d508      	bpl.n	80047fa <_printf_i+0x112>
 80047e8:	6923      	ldr	r3, [r4, #16]
 80047ea:	6862      	ldr	r2, [r4, #4]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	bfde      	ittt	le
 80047f0:	2330      	movle	r3, #48	; 0x30
 80047f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047fa:	ebac 0305 	sub.w	r3, ip, r5
 80047fe:	6123      	str	r3, [r4, #16]
 8004800:	f8cd 8000 	str.w	r8, [sp]
 8004804:	463b      	mov	r3, r7
 8004806:	aa03      	add	r2, sp, #12
 8004808:	4621      	mov	r1, r4
 800480a:	4630      	mov	r0, r6
 800480c:	f7ff fef6 	bl	80045fc <_printf_common>
 8004810:	3001      	adds	r0, #1
 8004812:	d14d      	bne.n	80048b0 <_printf_i+0x1c8>
 8004814:	f04f 30ff 	mov.w	r0, #4294967295
 8004818:	b005      	add	sp, #20
 800481a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800481e:	4839      	ldr	r0, [pc, #228]	; (8004904 <_printf_i+0x21c>)
 8004820:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004824:	6813      	ldr	r3, [r2, #0]
 8004826:	6821      	ldr	r1, [r4, #0]
 8004828:	1d1d      	adds	r5, r3, #4
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6015      	str	r5, [r2, #0]
 800482e:	060a      	lsls	r2, r1, #24
 8004830:	d50b      	bpl.n	800484a <_printf_i+0x162>
 8004832:	07ca      	lsls	r2, r1, #31
 8004834:	bf44      	itt	mi
 8004836:	f041 0120 	orrmi.w	r1, r1, #32
 800483a:	6021      	strmi	r1, [r4, #0]
 800483c:	b91b      	cbnz	r3, 8004846 <_printf_i+0x15e>
 800483e:	6822      	ldr	r2, [r4, #0]
 8004840:	f022 0220 	bic.w	r2, r2, #32
 8004844:	6022      	str	r2, [r4, #0]
 8004846:	2210      	movs	r2, #16
 8004848:	e7b7      	b.n	80047ba <_printf_i+0xd2>
 800484a:	064d      	lsls	r5, r1, #25
 800484c:	bf48      	it	mi
 800484e:	b29b      	uxthmi	r3, r3
 8004850:	e7ef      	b.n	8004832 <_printf_i+0x14a>
 8004852:	4665      	mov	r5, ip
 8004854:	fbb3 f1f2 	udiv	r1, r3, r2
 8004858:	fb02 3311 	mls	r3, r2, r1, r3
 800485c:	5cc3      	ldrb	r3, [r0, r3]
 800485e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004862:	460b      	mov	r3, r1
 8004864:	2900      	cmp	r1, #0
 8004866:	d1f5      	bne.n	8004854 <_printf_i+0x16c>
 8004868:	e7b9      	b.n	80047de <_printf_i+0xf6>
 800486a:	6813      	ldr	r3, [r2, #0]
 800486c:	6825      	ldr	r5, [r4, #0]
 800486e:	6961      	ldr	r1, [r4, #20]
 8004870:	1d18      	adds	r0, r3, #4
 8004872:	6010      	str	r0, [r2, #0]
 8004874:	0628      	lsls	r0, r5, #24
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	d501      	bpl.n	800487e <_printf_i+0x196>
 800487a:	6019      	str	r1, [r3, #0]
 800487c:	e002      	b.n	8004884 <_printf_i+0x19c>
 800487e:	066a      	lsls	r2, r5, #25
 8004880:	d5fb      	bpl.n	800487a <_printf_i+0x192>
 8004882:	8019      	strh	r1, [r3, #0]
 8004884:	2300      	movs	r3, #0
 8004886:	6123      	str	r3, [r4, #16]
 8004888:	4665      	mov	r5, ip
 800488a:	e7b9      	b.n	8004800 <_printf_i+0x118>
 800488c:	6813      	ldr	r3, [r2, #0]
 800488e:	1d19      	adds	r1, r3, #4
 8004890:	6011      	str	r1, [r2, #0]
 8004892:	681d      	ldr	r5, [r3, #0]
 8004894:	6862      	ldr	r2, [r4, #4]
 8004896:	2100      	movs	r1, #0
 8004898:	4628      	mov	r0, r5
 800489a:	f7fb fca1 	bl	80001e0 <memchr>
 800489e:	b108      	cbz	r0, 80048a4 <_printf_i+0x1bc>
 80048a0:	1b40      	subs	r0, r0, r5
 80048a2:	6060      	str	r0, [r4, #4]
 80048a4:	6863      	ldr	r3, [r4, #4]
 80048a6:	6123      	str	r3, [r4, #16]
 80048a8:	2300      	movs	r3, #0
 80048aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048ae:	e7a7      	b.n	8004800 <_printf_i+0x118>
 80048b0:	6923      	ldr	r3, [r4, #16]
 80048b2:	462a      	mov	r2, r5
 80048b4:	4639      	mov	r1, r7
 80048b6:	4630      	mov	r0, r6
 80048b8:	47c0      	blx	r8
 80048ba:	3001      	adds	r0, #1
 80048bc:	d0aa      	beq.n	8004814 <_printf_i+0x12c>
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	079b      	lsls	r3, r3, #30
 80048c2:	d413      	bmi.n	80048ec <_printf_i+0x204>
 80048c4:	68e0      	ldr	r0, [r4, #12]
 80048c6:	9b03      	ldr	r3, [sp, #12]
 80048c8:	4298      	cmp	r0, r3
 80048ca:	bfb8      	it	lt
 80048cc:	4618      	movlt	r0, r3
 80048ce:	e7a3      	b.n	8004818 <_printf_i+0x130>
 80048d0:	2301      	movs	r3, #1
 80048d2:	464a      	mov	r2, r9
 80048d4:	4639      	mov	r1, r7
 80048d6:	4630      	mov	r0, r6
 80048d8:	47c0      	blx	r8
 80048da:	3001      	adds	r0, #1
 80048dc:	d09a      	beq.n	8004814 <_printf_i+0x12c>
 80048de:	3501      	adds	r5, #1
 80048e0:	68e3      	ldr	r3, [r4, #12]
 80048e2:	9a03      	ldr	r2, [sp, #12]
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	42ab      	cmp	r3, r5
 80048e8:	dcf2      	bgt.n	80048d0 <_printf_i+0x1e8>
 80048ea:	e7eb      	b.n	80048c4 <_printf_i+0x1dc>
 80048ec:	2500      	movs	r5, #0
 80048ee:	f104 0919 	add.w	r9, r4, #25
 80048f2:	e7f5      	b.n	80048e0 <_printf_i+0x1f8>
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1ac      	bne.n	8004852 <_printf_i+0x16a>
 80048f8:	7803      	ldrb	r3, [r0, #0]
 80048fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004902:	e76c      	b.n	80047de <_printf_i+0xf6>
 8004904:	08005571 	.word	0x08005571
 8004908:	08005582 	.word	0x08005582

0800490c <_scanf_chars>:
 800490c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004910:	4615      	mov	r5, r2
 8004912:	688a      	ldr	r2, [r1, #8]
 8004914:	4680      	mov	r8, r0
 8004916:	460c      	mov	r4, r1
 8004918:	b932      	cbnz	r2, 8004928 <_scanf_chars+0x1c>
 800491a:	698a      	ldr	r2, [r1, #24]
 800491c:	2a00      	cmp	r2, #0
 800491e:	bf14      	ite	ne
 8004920:	f04f 32ff 	movne.w	r2, #4294967295
 8004924:	2201      	moveq	r2, #1
 8004926:	608a      	str	r2, [r1, #8]
 8004928:	6822      	ldr	r2, [r4, #0]
 800492a:	06d1      	lsls	r1, r2, #27
 800492c:	bf5f      	itttt	pl
 800492e:	681a      	ldrpl	r2, [r3, #0]
 8004930:	1d11      	addpl	r1, r2, #4
 8004932:	6019      	strpl	r1, [r3, #0]
 8004934:	6817      	ldrpl	r7, [r2, #0]
 8004936:	2600      	movs	r6, #0
 8004938:	69a3      	ldr	r3, [r4, #24]
 800493a:	b1db      	cbz	r3, 8004974 <_scanf_chars+0x68>
 800493c:	2b01      	cmp	r3, #1
 800493e:	d107      	bne.n	8004950 <_scanf_chars+0x44>
 8004940:	682b      	ldr	r3, [r5, #0]
 8004942:	6962      	ldr	r2, [r4, #20]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	5cd3      	ldrb	r3, [r2, r3]
 8004948:	b9a3      	cbnz	r3, 8004974 <_scanf_chars+0x68>
 800494a:	2e00      	cmp	r6, #0
 800494c:	d132      	bne.n	80049b4 <_scanf_chars+0xa8>
 800494e:	e006      	b.n	800495e <_scanf_chars+0x52>
 8004950:	2b02      	cmp	r3, #2
 8004952:	d007      	beq.n	8004964 <_scanf_chars+0x58>
 8004954:	2e00      	cmp	r6, #0
 8004956:	d12d      	bne.n	80049b4 <_scanf_chars+0xa8>
 8004958:	69a3      	ldr	r3, [r4, #24]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d12a      	bne.n	80049b4 <_scanf_chars+0xa8>
 800495e:	2001      	movs	r0, #1
 8004960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004964:	f000 fc46 	bl	80051f4 <__locale_ctype_ptr>
 8004968:	682b      	ldr	r3, [r5, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	4418      	add	r0, r3
 800496e:	7843      	ldrb	r3, [r0, #1]
 8004970:	071b      	lsls	r3, r3, #28
 8004972:	d4ef      	bmi.n	8004954 <_scanf_chars+0x48>
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	06da      	lsls	r2, r3, #27
 8004978:	bf5e      	ittt	pl
 800497a:	682b      	ldrpl	r3, [r5, #0]
 800497c:	781b      	ldrbpl	r3, [r3, #0]
 800497e:	703b      	strbpl	r3, [r7, #0]
 8004980:	682a      	ldr	r2, [r5, #0]
 8004982:	686b      	ldr	r3, [r5, #4]
 8004984:	f102 0201 	add.w	r2, r2, #1
 8004988:	602a      	str	r2, [r5, #0]
 800498a:	68a2      	ldr	r2, [r4, #8]
 800498c:	f103 33ff 	add.w	r3, r3, #4294967295
 8004990:	f102 32ff 	add.w	r2, r2, #4294967295
 8004994:	606b      	str	r3, [r5, #4]
 8004996:	f106 0601 	add.w	r6, r6, #1
 800499a:	bf58      	it	pl
 800499c:	3701      	addpl	r7, #1
 800499e:	60a2      	str	r2, [r4, #8]
 80049a0:	b142      	cbz	r2, 80049b4 <_scanf_chars+0xa8>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	dcc8      	bgt.n	8004938 <_scanf_chars+0x2c>
 80049a6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80049aa:	4629      	mov	r1, r5
 80049ac:	4640      	mov	r0, r8
 80049ae:	4798      	blx	r3
 80049b0:	2800      	cmp	r0, #0
 80049b2:	d0c1      	beq.n	8004938 <_scanf_chars+0x2c>
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	f013 0310 	ands.w	r3, r3, #16
 80049ba:	d105      	bne.n	80049c8 <_scanf_chars+0xbc>
 80049bc:	68e2      	ldr	r2, [r4, #12]
 80049be:	3201      	adds	r2, #1
 80049c0:	60e2      	str	r2, [r4, #12]
 80049c2:	69a2      	ldr	r2, [r4, #24]
 80049c4:	b102      	cbz	r2, 80049c8 <_scanf_chars+0xbc>
 80049c6:	703b      	strb	r3, [r7, #0]
 80049c8:	6923      	ldr	r3, [r4, #16]
 80049ca:	441e      	add	r6, r3
 80049cc:	6126      	str	r6, [r4, #16]
 80049ce:	2000      	movs	r0, #0
 80049d0:	e7c6      	b.n	8004960 <_scanf_chars+0x54>
	...

080049d4 <_scanf_i>:
 80049d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d8:	469a      	mov	sl, r3
 80049da:	4b74      	ldr	r3, [pc, #464]	; (8004bac <_scanf_i+0x1d8>)
 80049dc:	460c      	mov	r4, r1
 80049de:	4683      	mov	fp, r0
 80049e0:	4616      	mov	r6, r2
 80049e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80049e6:	b087      	sub	sp, #28
 80049e8:	ab03      	add	r3, sp, #12
 80049ea:	68a7      	ldr	r7, [r4, #8]
 80049ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80049f0:	4b6f      	ldr	r3, [pc, #444]	; (8004bb0 <_scanf_i+0x1dc>)
 80049f2:	69a1      	ldr	r1, [r4, #24]
 80049f4:	4a6f      	ldr	r2, [pc, #444]	; (8004bb4 <_scanf_i+0x1e0>)
 80049f6:	2903      	cmp	r1, #3
 80049f8:	bf08      	it	eq
 80049fa:	461a      	moveq	r2, r3
 80049fc:	1e7b      	subs	r3, r7, #1
 80049fe:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8004a02:	bf84      	itt	hi
 8004a04:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004a08:	60a3      	strhi	r3, [r4, #8]
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	9200      	str	r2, [sp, #0]
 8004a0e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004a12:	bf88      	it	hi
 8004a14:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004a18:	f104 091c 	add.w	r9, r4, #28
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	bf8c      	ite	hi
 8004a20:	197f      	addhi	r7, r7, r5
 8004a22:	2700      	movls	r7, #0
 8004a24:	464b      	mov	r3, r9
 8004a26:	f04f 0800 	mov.w	r8, #0
 8004a2a:	9301      	str	r3, [sp, #4]
 8004a2c:	6831      	ldr	r1, [r6, #0]
 8004a2e:	ab03      	add	r3, sp, #12
 8004a30:	2202      	movs	r2, #2
 8004a32:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004a36:	7809      	ldrb	r1, [r1, #0]
 8004a38:	f7fb fbd2 	bl	80001e0 <memchr>
 8004a3c:	9b01      	ldr	r3, [sp, #4]
 8004a3e:	b330      	cbz	r0, 8004a8e <_scanf_i+0xba>
 8004a40:	f1b8 0f01 	cmp.w	r8, #1
 8004a44:	d15a      	bne.n	8004afc <_scanf_i+0x128>
 8004a46:	6862      	ldr	r2, [r4, #4]
 8004a48:	b92a      	cbnz	r2, 8004a56 <_scanf_i+0x82>
 8004a4a:	6822      	ldr	r2, [r4, #0]
 8004a4c:	2108      	movs	r1, #8
 8004a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a52:	6061      	str	r1, [r4, #4]
 8004a54:	6022      	str	r2, [r4, #0]
 8004a56:	6822      	ldr	r2, [r4, #0]
 8004a58:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004a5c:	6022      	str	r2, [r4, #0]
 8004a5e:	68a2      	ldr	r2, [r4, #8]
 8004a60:	1e51      	subs	r1, r2, #1
 8004a62:	60a1      	str	r1, [r4, #8]
 8004a64:	b19a      	cbz	r2, 8004a8e <_scanf_i+0xba>
 8004a66:	6832      	ldr	r2, [r6, #0]
 8004a68:	1c51      	adds	r1, r2, #1
 8004a6a:	6031      	str	r1, [r6, #0]
 8004a6c:	7812      	ldrb	r2, [r2, #0]
 8004a6e:	701a      	strb	r2, [r3, #0]
 8004a70:	1c5d      	adds	r5, r3, #1
 8004a72:	6873      	ldr	r3, [r6, #4]
 8004a74:	3b01      	subs	r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	6073      	str	r3, [r6, #4]
 8004a7a:	dc07      	bgt.n	8004a8c <_scanf_i+0xb8>
 8004a7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004a80:	4631      	mov	r1, r6
 8004a82:	4658      	mov	r0, fp
 8004a84:	4798      	blx	r3
 8004a86:	2800      	cmp	r0, #0
 8004a88:	f040 8086 	bne.w	8004b98 <_scanf_i+0x1c4>
 8004a8c:	462b      	mov	r3, r5
 8004a8e:	f108 0801 	add.w	r8, r8, #1
 8004a92:	f1b8 0f03 	cmp.w	r8, #3
 8004a96:	d1c8      	bne.n	8004a2a <_scanf_i+0x56>
 8004a98:	6862      	ldr	r2, [r4, #4]
 8004a9a:	b90a      	cbnz	r2, 8004aa0 <_scanf_i+0xcc>
 8004a9c:	220a      	movs	r2, #10
 8004a9e:	6062      	str	r2, [r4, #4]
 8004aa0:	6862      	ldr	r2, [r4, #4]
 8004aa2:	4945      	ldr	r1, [pc, #276]	; (8004bb8 <_scanf_i+0x1e4>)
 8004aa4:	6960      	ldr	r0, [r4, #20]
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	1a89      	subs	r1, r1, r2
 8004aaa:	f000 f8a9 	bl	8004c00 <__sccl>
 8004aae:	9b01      	ldr	r3, [sp, #4]
 8004ab0:	f04f 0800 	mov.w	r8, #0
 8004ab4:	461d      	mov	r5, r3
 8004ab6:	68a3      	ldr	r3, [r4, #8]
 8004ab8:	6822      	ldr	r2, [r4, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d03a      	beq.n	8004b34 <_scanf_i+0x160>
 8004abe:	6831      	ldr	r1, [r6, #0]
 8004ac0:	6960      	ldr	r0, [r4, #20]
 8004ac2:	f891 c000 	ldrb.w	ip, [r1]
 8004ac6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004aca:	2800      	cmp	r0, #0
 8004acc:	d032      	beq.n	8004b34 <_scanf_i+0x160>
 8004ace:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004ad2:	d121      	bne.n	8004b18 <_scanf_i+0x144>
 8004ad4:	0510      	lsls	r0, r2, #20
 8004ad6:	d51f      	bpl.n	8004b18 <_scanf_i+0x144>
 8004ad8:	f108 0801 	add.w	r8, r8, #1
 8004adc:	b117      	cbz	r7, 8004ae4 <_scanf_i+0x110>
 8004ade:	3301      	adds	r3, #1
 8004ae0:	3f01      	subs	r7, #1
 8004ae2:	60a3      	str	r3, [r4, #8]
 8004ae4:	6873      	ldr	r3, [r6, #4]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	6073      	str	r3, [r6, #4]
 8004aec:	dd1b      	ble.n	8004b26 <_scanf_i+0x152>
 8004aee:	6833      	ldr	r3, [r6, #0]
 8004af0:	3301      	adds	r3, #1
 8004af2:	6033      	str	r3, [r6, #0]
 8004af4:	68a3      	ldr	r3, [r4, #8]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	60a3      	str	r3, [r4, #8]
 8004afa:	e7dc      	b.n	8004ab6 <_scanf_i+0xe2>
 8004afc:	f1b8 0f02 	cmp.w	r8, #2
 8004b00:	d1ad      	bne.n	8004a5e <_scanf_i+0x8a>
 8004b02:	6822      	ldr	r2, [r4, #0]
 8004b04:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004b08:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004b0c:	d1bf      	bne.n	8004a8e <_scanf_i+0xba>
 8004b0e:	2110      	movs	r1, #16
 8004b10:	6061      	str	r1, [r4, #4]
 8004b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b16:	e7a1      	b.n	8004a5c <_scanf_i+0x88>
 8004b18:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004b1c:	6022      	str	r2, [r4, #0]
 8004b1e:	780b      	ldrb	r3, [r1, #0]
 8004b20:	702b      	strb	r3, [r5, #0]
 8004b22:	3501      	adds	r5, #1
 8004b24:	e7de      	b.n	8004ae4 <_scanf_i+0x110>
 8004b26:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004b2a:	4631      	mov	r1, r6
 8004b2c:	4658      	mov	r0, fp
 8004b2e:	4798      	blx	r3
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d0df      	beq.n	8004af4 <_scanf_i+0x120>
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	05d9      	lsls	r1, r3, #23
 8004b38:	d50c      	bpl.n	8004b54 <_scanf_i+0x180>
 8004b3a:	454d      	cmp	r5, r9
 8004b3c:	d908      	bls.n	8004b50 <_scanf_i+0x17c>
 8004b3e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004b42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b46:	4632      	mov	r2, r6
 8004b48:	4658      	mov	r0, fp
 8004b4a:	4798      	blx	r3
 8004b4c:	1e6f      	subs	r7, r5, #1
 8004b4e:	463d      	mov	r5, r7
 8004b50:	454d      	cmp	r5, r9
 8004b52:	d029      	beq.n	8004ba8 <_scanf_i+0x1d4>
 8004b54:	6822      	ldr	r2, [r4, #0]
 8004b56:	f012 0210 	ands.w	r2, r2, #16
 8004b5a:	d113      	bne.n	8004b84 <_scanf_i+0x1b0>
 8004b5c:	702a      	strb	r2, [r5, #0]
 8004b5e:	6863      	ldr	r3, [r4, #4]
 8004b60:	9e00      	ldr	r6, [sp, #0]
 8004b62:	4649      	mov	r1, r9
 8004b64:	4658      	mov	r0, fp
 8004b66:	47b0      	blx	r6
 8004b68:	f8da 3000 	ldr.w	r3, [sl]
 8004b6c:	6821      	ldr	r1, [r4, #0]
 8004b6e:	1d1a      	adds	r2, r3, #4
 8004b70:	f8ca 2000 	str.w	r2, [sl]
 8004b74:	f011 0f20 	tst.w	r1, #32
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	d010      	beq.n	8004b9e <_scanf_i+0x1ca>
 8004b7c:	6018      	str	r0, [r3, #0]
 8004b7e:	68e3      	ldr	r3, [r4, #12]
 8004b80:	3301      	adds	r3, #1
 8004b82:	60e3      	str	r3, [r4, #12]
 8004b84:	eba5 0509 	sub.w	r5, r5, r9
 8004b88:	44a8      	add	r8, r5
 8004b8a:	6925      	ldr	r5, [r4, #16]
 8004b8c:	4445      	add	r5, r8
 8004b8e:	6125      	str	r5, [r4, #16]
 8004b90:	2000      	movs	r0, #0
 8004b92:	b007      	add	sp, #28
 8004b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b98:	f04f 0800 	mov.w	r8, #0
 8004b9c:	e7ca      	b.n	8004b34 <_scanf_i+0x160>
 8004b9e:	07ca      	lsls	r2, r1, #31
 8004ba0:	bf4c      	ite	mi
 8004ba2:	8018      	strhmi	r0, [r3, #0]
 8004ba4:	6018      	strpl	r0, [r3, #0]
 8004ba6:	e7ea      	b.n	8004b7e <_scanf_i+0x1aa>
 8004ba8:	2001      	movs	r0, #1
 8004baa:	e7f2      	b.n	8004b92 <_scanf_i+0x1be>
 8004bac:	080054a8 	.word	0x080054a8
 8004bb0:	08004d5d 	.word	0x08004d5d
 8004bb4:	08004e75 	.word	0x08004e75
 8004bb8:	080055a3 	.word	0x080055a3

08004bbc <_read_r>:
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	4c07      	ldr	r4, [pc, #28]	; (8004bdc <_read_r+0x20>)
 8004bc0:	4605      	mov	r5, r0
 8004bc2:	4608      	mov	r0, r1
 8004bc4:	4611      	mov	r1, r2
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	6022      	str	r2, [r4, #0]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f7fb ff3a 	bl	8000a44 <_read>
 8004bd0:	1c43      	adds	r3, r0, #1
 8004bd2:	d102      	bne.n	8004bda <_read_r+0x1e>
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	b103      	cbz	r3, 8004bda <_read_r+0x1e>
 8004bd8:	602b      	str	r3, [r5, #0]
 8004bda:	bd38      	pop	{r3, r4, r5, pc}
 8004bdc:	200002fc 	.word	0x200002fc

08004be0 <_sbrk_r>:
 8004be0:	b538      	push	{r3, r4, r5, lr}
 8004be2:	4c06      	ldr	r4, [pc, #24]	; (8004bfc <_sbrk_r+0x1c>)
 8004be4:	2300      	movs	r3, #0
 8004be6:	4605      	mov	r5, r0
 8004be8:	4608      	mov	r0, r1
 8004bea:	6023      	str	r3, [r4, #0]
 8004bec:	f7fb ff7c 	bl	8000ae8 <_sbrk>
 8004bf0:	1c43      	adds	r3, r0, #1
 8004bf2:	d102      	bne.n	8004bfa <_sbrk_r+0x1a>
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	b103      	cbz	r3, 8004bfa <_sbrk_r+0x1a>
 8004bf8:	602b      	str	r3, [r5, #0]
 8004bfa:	bd38      	pop	{r3, r4, r5, pc}
 8004bfc:	200002fc 	.word	0x200002fc

08004c00 <__sccl>:
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	780b      	ldrb	r3, [r1, #0]
 8004c04:	2b5e      	cmp	r3, #94	; 0x5e
 8004c06:	bf13      	iteet	ne
 8004c08:	1c4a      	addne	r2, r1, #1
 8004c0a:	1c8a      	addeq	r2, r1, #2
 8004c0c:	784b      	ldrbeq	r3, [r1, #1]
 8004c0e:	2100      	movne	r1, #0
 8004c10:	bf08      	it	eq
 8004c12:	2101      	moveq	r1, #1
 8004c14:	1e44      	subs	r4, r0, #1
 8004c16:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8004c1a:	f804 1f01 	strb.w	r1, [r4, #1]!
 8004c1e:	42ac      	cmp	r4, r5
 8004c20:	d1fb      	bne.n	8004c1a <__sccl+0x1a>
 8004c22:	b913      	cbnz	r3, 8004c2a <__sccl+0x2a>
 8004c24:	3a01      	subs	r2, #1
 8004c26:	4610      	mov	r0, r2
 8004c28:	bd70      	pop	{r4, r5, r6, pc}
 8004c2a:	f081 0401 	eor.w	r4, r1, #1
 8004c2e:	54c4      	strb	r4, [r0, r3]
 8004c30:	1c51      	adds	r1, r2, #1
 8004c32:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8004c36:	2d2d      	cmp	r5, #45	; 0x2d
 8004c38:	f101 36ff 	add.w	r6, r1, #4294967295
 8004c3c:	460a      	mov	r2, r1
 8004c3e:	d006      	beq.n	8004c4e <__sccl+0x4e>
 8004c40:	2d5d      	cmp	r5, #93	; 0x5d
 8004c42:	d0f0      	beq.n	8004c26 <__sccl+0x26>
 8004c44:	b90d      	cbnz	r5, 8004c4a <__sccl+0x4a>
 8004c46:	4632      	mov	r2, r6
 8004c48:	e7ed      	b.n	8004c26 <__sccl+0x26>
 8004c4a:	462b      	mov	r3, r5
 8004c4c:	e7ef      	b.n	8004c2e <__sccl+0x2e>
 8004c4e:	780e      	ldrb	r6, [r1, #0]
 8004c50:	2e5d      	cmp	r6, #93	; 0x5d
 8004c52:	d0fa      	beq.n	8004c4a <__sccl+0x4a>
 8004c54:	42b3      	cmp	r3, r6
 8004c56:	dcf8      	bgt.n	8004c4a <__sccl+0x4a>
 8004c58:	3301      	adds	r3, #1
 8004c5a:	429e      	cmp	r6, r3
 8004c5c:	54c4      	strb	r4, [r0, r3]
 8004c5e:	dcfb      	bgt.n	8004c58 <__sccl+0x58>
 8004c60:	3102      	adds	r1, #2
 8004c62:	e7e6      	b.n	8004c32 <__sccl+0x32>

08004c64 <_strtol_l.isra.0>:
 8004c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c68:	4680      	mov	r8, r0
 8004c6a:	4689      	mov	r9, r1
 8004c6c:	4692      	mov	sl, r2
 8004c6e:	461e      	mov	r6, r3
 8004c70:	460f      	mov	r7, r1
 8004c72:	463d      	mov	r5, r7
 8004c74:	9808      	ldr	r0, [sp, #32]
 8004c76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c7a:	f000 fab7 	bl	80051ec <__locale_ctype_ptr_l>
 8004c7e:	4420      	add	r0, r4
 8004c80:	7843      	ldrb	r3, [r0, #1]
 8004c82:	f013 0308 	ands.w	r3, r3, #8
 8004c86:	d132      	bne.n	8004cee <_strtol_l.isra.0+0x8a>
 8004c88:	2c2d      	cmp	r4, #45	; 0x2d
 8004c8a:	d132      	bne.n	8004cf2 <_strtol_l.isra.0+0x8e>
 8004c8c:	787c      	ldrb	r4, [r7, #1]
 8004c8e:	1cbd      	adds	r5, r7, #2
 8004c90:	2201      	movs	r2, #1
 8004c92:	2e00      	cmp	r6, #0
 8004c94:	d05d      	beq.n	8004d52 <_strtol_l.isra.0+0xee>
 8004c96:	2e10      	cmp	r6, #16
 8004c98:	d109      	bne.n	8004cae <_strtol_l.isra.0+0x4a>
 8004c9a:	2c30      	cmp	r4, #48	; 0x30
 8004c9c:	d107      	bne.n	8004cae <_strtol_l.isra.0+0x4a>
 8004c9e:	782b      	ldrb	r3, [r5, #0]
 8004ca0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004ca4:	2b58      	cmp	r3, #88	; 0x58
 8004ca6:	d14f      	bne.n	8004d48 <_strtol_l.isra.0+0xe4>
 8004ca8:	786c      	ldrb	r4, [r5, #1]
 8004caa:	2610      	movs	r6, #16
 8004cac:	3502      	adds	r5, #2
 8004cae:	2a00      	cmp	r2, #0
 8004cb0:	bf14      	ite	ne
 8004cb2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004cb6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004cba:	2700      	movs	r7, #0
 8004cbc:	fbb1 fcf6 	udiv	ip, r1, r6
 8004cc0:	4638      	mov	r0, r7
 8004cc2:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004cc6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004cca:	2b09      	cmp	r3, #9
 8004ccc:	d817      	bhi.n	8004cfe <_strtol_l.isra.0+0x9a>
 8004cce:	461c      	mov	r4, r3
 8004cd0:	42a6      	cmp	r6, r4
 8004cd2:	dd23      	ble.n	8004d1c <_strtol_l.isra.0+0xb8>
 8004cd4:	1c7b      	adds	r3, r7, #1
 8004cd6:	d007      	beq.n	8004ce8 <_strtol_l.isra.0+0x84>
 8004cd8:	4584      	cmp	ip, r0
 8004cda:	d31c      	bcc.n	8004d16 <_strtol_l.isra.0+0xb2>
 8004cdc:	d101      	bne.n	8004ce2 <_strtol_l.isra.0+0x7e>
 8004cde:	45a6      	cmp	lr, r4
 8004ce0:	db19      	blt.n	8004d16 <_strtol_l.isra.0+0xb2>
 8004ce2:	fb00 4006 	mla	r0, r0, r6, r4
 8004ce6:	2701      	movs	r7, #1
 8004ce8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004cec:	e7eb      	b.n	8004cc6 <_strtol_l.isra.0+0x62>
 8004cee:	462f      	mov	r7, r5
 8004cf0:	e7bf      	b.n	8004c72 <_strtol_l.isra.0+0xe>
 8004cf2:	2c2b      	cmp	r4, #43	; 0x2b
 8004cf4:	bf04      	itt	eq
 8004cf6:	1cbd      	addeq	r5, r7, #2
 8004cf8:	787c      	ldrbeq	r4, [r7, #1]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	e7c9      	b.n	8004c92 <_strtol_l.isra.0+0x2e>
 8004cfe:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004d02:	2b19      	cmp	r3, #25
 8004d04:	d801      	bhi.n	8004d0a <_strtol_l.isra.0+0xa6>
 8004d06:	3c37      	subs	r4, #55	; 0x37
 8004d08:	e7e2      	b.n	8004cd0 <_strtol_l.isra.0+0x6c>
 8004d0a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004d0e:	2b19      	cmp	r3, #25
 8004d10:	d804      	bhi.n	8004d1c <_strtol_l.isra.0+0xb8>
 8004d12:	3c57      	subs	r4, #87	; 0x57
 8004d14:	e7dc      	b.n	8004cd0 <_strtol_l.isra.0+0x6c>
 8004d16:	f04f 37ff 	mov.w	r7, #4294967295
 8004d1a:	e7e5      	b.n	8004ce8 <_strtol_l.isra.0+0x84>
 8004d1c:	1c7b      	adds	r3, r7, #1
 8004d1e:	d108      	bne.n	8004d32 <_strtol_l.isra.0+0xce>
 8004d20:	2322      	movs	r3, #34	; 0x22
 8004d22:	f8c8 3000 	str.w	r3, [r8]
 8004d26:	4608      	mov	r0, r1
 8004d28:	f1ba 0f00 	cmp.w	sl, #0
 8004d2c:	d107      	bne.n	8004d3e <_strtol_l.isra.0+0xda>
 8004d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d32:	b102      	cbz	r2, 8004d36 <_strtol_l.isra.0+0xd2>
 8004d34:	4240      	negs	r0, r0
 8004d36:	f1ba 0f00 	cmp.w	sl, #0
 8004d3a:	d0f8      	beq.n	8004d2e <_strtol_l.isra.0+0xca>
 8004d3c:	b10f      	cbz	r7, 8004d42 <_strtol_l.isra.0+0xde>
 8004d3e:	f105 39ff 	add.w	r9, r5, #4294967295
 8004d42:	f8ca 9000 	str.w	r9, [sl]
 8004d46:	e7f2      	b.n	8004d2e <_strtol_l.isra.0+0xca>
 8004d48:	2430      	movs	r4, #48	; 0x30
 8004d4a:	2e00      	cmp	r6, #0
 8004d4c:	d1af      	bne.n	8004cae <_strtol_l.isra.0+0x4a>
 8004d4e:	2608      	movs	r6, #8
 8004d50:	e7ad      	b.n	8004cae <_strtol_l.isra.0+0x4a>
 8004d52:	2c30      	cmp	r4, #48	; 0x30
 8004d54:	d0a3      	beq.n	8004c9e <_strtol_l.isra.0+0x3a>
 8004d56:	260a      	movs	r6, #10
 8004d58:	e7a9      	b.n	8004cae <_strtol_l.isra.0+0x4a>
	...

08004d5c <_strtol_r>:
 8004d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d5e:	4c06      	ldr	r4, [pc, #24]	; (8004d78 <_strtol_r+0x1c>)
 8004d60:	4d06      	ldr	r5, [pc, #24]	; (8004d7c <_strtol_r+0x20>)
 8004d62:	6824      	ldr	r4, [r4, #0]
 8004d64:	6a24      	ldr	r4, [r4, #32]
 8004d66:	2c00      	cmp	r4, #0
 8004d68:	bf08      	it	eq
 8004d6a:	462c      	moveq	r4, r5
 8004d6c:	9400      	str	r4, [sp, #0]
 8004d6e:	f7ff ff79 	bl	8004c64 <_strtol_l.isra.0>
 8004d72:	b003      	add	sp, #12
 8004d74:	bd30      	pop	{r4, r5, pc}
 8004d76:	bf00      	nop
 8004d78:	20000010 	.word	0x20000010
 8004d7c:	20000074 	.word	0x20000074

08004d80 <_strtoul_l.isra.0>:
 8004d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d84:	4680      	mov	r8, r0
 8004d86:	4689      	mov	r9, r1
 8004d88:	4692      	mov	sl, r2
 8004d8a:	461e      	mov	r6, r3
 8004d8c:	460f      	mov	r7, r1
 8004d8e:	463d      	mov	r5, r7
 8004d90:	9808      	ldr	r0, [sp, #32]
 8004d92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d96:	f000 fa29 	bl	80051ec <__locale_ctype_ptr_l>
 8004d9a:	4420      	add	r0, r4
 8004d9c:	7843      	ldrb	r3, [r0, #1]
 8004d9e:	f013 0308 	ands.w	r3, r3, #8
 8004da2:	d130      	bne.n	8004e06 <_strtoul_l.isra.0+0x86>
 8004da4:	2c2d      	cmp	r4, #45	; 0x2d
 8004da6:	d130      	bne.n	8004e0a <_strtoul_l.isra.0+0x8a>
 8004da8:	787c      	ldrb	r4, [r7, #1]
 8004daa:	1cbd      	adds	r5, r7, #2
 8004dac:	2101      	movs	r1, #1
 8004dae:	2e00      	cmp	r6, #0
 8004db0:	d05c      	beq.n	8004e6c <_strtoul_l.isra.0+0xec>
 8004db2:	2e10      	cmp	r6, #16
 8004db4:	d109      	bne.n	8004dca <_strtoul_l.isra.0+0x4a>
 8004db6:	2c30      	cmp	r4, #48	; 0x30
 8004db8:	d107      	bne.n	8004dca <_strtoul_l.isra.0+0x4a>
 8004dba:	782b      	ldrb	r3, [r5, #0]
 8004dbc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004dc0:	2b58      	cmp	r3, #88	; 0x58
 8004dc2:	d14e      	bne.n	8004e62 <_strtoul_l.isra.0+0xe2>
 8004dc4:	786c      	ldrb	r4, [r5, #1]
 8004dc6:	2610      	movs	r6, #16
 8004dc8:	3502      	adds	r5, #2
 8004dca:	f04f 32ff 	mov.w	r2, #4294967295
 8004dce:	2300      	movs	r3, #0
 8004dd0:	fbb2 f2f6 	udiv	r2, r2, r6
 8004dd4:	fb06 fc02 	mul.w	ip, r6, r2
 8004dd8:	ea6f 0c0c 	mvn.w	ip, ip
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004de2:	2f09      	cmp	r7, #9
 8004de4:	d817      	bhi.n	8004e16 <_strtoul_l.isra.0+0x96>
 8004de6:	463c      	mov	r4, r7
 8004de8:	42a6      	cmp	r6, r4
 8004dea:	dd23      	ble.n	8004e34 <_strtoul_l.isra.0+0xb4>
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	db1e      	blt.n	8004e2e <_strtoul_l.isra.0+0xae>
 8004df0:	4282      	cmp	r2, r0
 8004df2:	d31c      	bcc.n	8004e2e <_strtoul_l.isra.0+0xae>
 8004df4:	d101      	bne.n	8004dfa <_strtoul_l.isra.0+0x7a>
 8004df6:	45a4      	cmp	ip, r4
 8004df8:	db19      	blt.n	8004e2e <_strtoul_l.isra.0+0xae>
 8004dfa:	fb00 4006 	mla	r0, r0, r6, r4
 8004dfe:	2301      	movs	r3, #1
 8004e00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e04:	e7eb      	b.n	8004dde <_strtoul_l.isra.0+0x5e>
 8004e06:	462f      	mov	r7, r5
 8004e08:	e7c1      	b.n	8004d8e <_strtoul_l.isra.0+0xe>
 8004e0a:	2c2b      	cmp	r4, #43	; 0x2b
 8004e0c:	bf04      	itt	eq
 8004e0e:	1cbd      	addeq	r5, r7, #2
 8004e10:	787c      	ldrbeq	r4, [r7, #1]
 8004e12:	4619      	mov	r1, r3
 8004e14:	e7cb      	b.n	8004dae <_strtoul_l.isra.0+0x2e>
 8004e16:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004e1a:	2f19      	cmp	r7, #25
 8004e1c:	d801      	bhi.n	8004e22 <_strtoul_l.isra.0+0xa2>
 8004e1e:	3c37      	subs	r4, #55	; 0x37
 8004e20:	e7e2      	b.n	8004de8 <_strtoul_l.isra.0+0x68>
 8004e22:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004e26:	2f19      	cmp	r7, #25
 8004e28:	d804      	bhi.n	8004e34 <_strtoul_l.isra.0+0xb4>
 8004e2a:	3c57      	subs	r4, #87	; 0x57
 8004e2c:	e7dc      	b.n	8004de8 <_strtoul_l.isra.0+0x68>
 8004e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e32:	e7e5      	b.n	8004e00 <_strtoul_l.isra.0+0x80>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	da09      	bge.n	8004e4c <_strtoul_l.isra.0+0xcc>
 8004e38:	2322      	movs	r3, #34	; 0x22
 8004e3a:	f8c8 3000 	str.w	r3, [r8]
 8004e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e42:	f1ba 0f00 	cmp.w	sl, #0
 8004e46:	d107      	bne.n	8004e58 <_strtoul_l.isra.0+0xd8>
 8004e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e4c:	b101      	cbz	r1, 8004e50 <_strtoul_l.isra.0+0xd0>
 8004e4e:	4240      	negs	r0, r0
 8004e50:	f1ba 0f00 	cmp.w	sl, #0
 8004e54:	d0f8      	beq.n	8004e48 <_strtoul_l.isra.0+0xc8>
 8004e56:	b10b      	cbz	r3, 8004e5c <_strtoul_l.isra.0+0xdc>
 8004e58:	f105 39ff 	add.w	r9, r5, #4294967295
 8004e5c:	f8ca 9000 	str.w	r9, [sl]
 8004e60:	e7f2      	b.n	8004e48 <_strtoul_l.isra.0+0xc8>
 8004e62:	2430      	movs	r4, #48	; 0x30
 8004e64:	2e00      	cmp	r6, #0
 8004e66:	d1b0      	bne.n	8004dca <_strtoul_l.isra.0+0x4a>
 8004e68:	2608      	movs	r6, #8
 8004e6a:	e7ae      	b.n	8004dca <_strtoul_l.isra.0+0x4a>
 8004e6c:	2c30      	cmp	r4, #48	; 0x30
 8004e6e:	d0a4      	beq.n	8004dba <_strtoul_l.isra.0+0x3a>
 8004e70:	260a      	movs	r6, #10
 8004e72:	e7aa      	b.n	8004dca <_strtoul_l.isra.0+0x4a>

08004e74 <_strtoul_r>:
 8004e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e76:	4c06      	ldr	r4, [pc, #24]	; (8004e90 <_strtoul_r+0x1c>)
 8004e78:	4d06      	ldr	r5, [pc, #24]	; (8004e94 <_strtoul_r+0x20>)
 8004e7a:	6824      	ldr	r4, [r4, #0]
 8004e7c:	6a24      	ldr	r4, [r4, #32]
 8004e7e:	2c00      	cmp	r4, #0
 8004e80:	bf08      	it	eq
 8004e82:	462c      	moveq	r4, r5
 8004e84:	9400      	str	r4, [sp, #0]
 8004e86:	f7ff ff7b 	bl	8004d80 <_strtoul_l.isra.0>
 8004e8a:	b003      	add	sp, #12
 8004e8c:	bd30      	pop	{r4, r5, pc}
 8004e8e:	bf00      	nop
 8004e90:	20000010 	.word	0x20000010
 8004e94:	20000074 	.word	0x20000074

08004e98 <__submore>:
 8004e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e9c:	460c      	mov	r4, r1
 8004e9e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004ea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ea4:	4299      	cmp	r1, r3
 8004ea6:	d11d      	bne.n	8004ee4 <__submore+0x4c>
 8004ea8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004eac:	f7ff f862 	bl	8003f74 <_malloc_r>
 8004eb0:	b918      	cbnz	r0, 8004eba <__submore+0x22>
 8004eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ebe:	63a3      	str	r3, [r4, #56]	; 0x38
 8004ec0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004ec4:	6360      	str	r0, [r4, #52]	; 0x34
 8004ec6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004eca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004ece:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004ed2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004ed6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004eda:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004ede:	6020      	str	r0, [r4, #0]
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	e7e8      	b.n	8004eb6 <__submore+0x1e>
 8004ee4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004ee6:	0077      	lsls	r7, r6, #1
 8004ee8:	463a      	mov	r2, r7
 8004eea:	f000 fa63 	bl	80053b4 <_realloc_r>
 8004eee:	4605      	mov	r5, r0
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d0de      	beq.n	8004eb2 <__submore+0x1a>
 8004ef4:	eb00 0806 	add.w	r8, r0, r6
 8004ef8:	4601      	mov	r1, r0
 8004efa:	4632      	mov	r2, r6
 8004efc:	4640      	mov	r0, r8
 8004efe:	f000 f9fd 	bl	80052fc <memcpy>
 8004f02:	f8c4 8000 	str.w	r8, [r4]
 8004f06:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004f0a:	e7e9      	b.n	8004ee0 <__submore+0x48>

08004f0c <__swbuf_r>:
 8004f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0e:	460e      	mov	r6, r1
 8004f10:	4614      	mov	r4, r2
 8004f12:	4605      	mov	r5, r0
 8004f14:	b118      	cbz	r0, 8004f1e <__swbuf_r+0x12>
 8004f16:	6983      	ldr	r3, [r0, #24]
 8004f18:	b90b      	cbnz	r3, 8004f1e <__swbuf_r+0x12>
 8004f1a:	f7fe ff8f 	bl	8003e3c <__sinit>
 8004f1e:	4b21      	ldr	r3, [pc, #132]	; (8004fa4 <__swbuf_r+0x98>)
 8004f20:	429c      	cmp	r4, r3
 8004f22:	d12a      	bne.n	8004f7a <__swbuf_r+0x6e>
 8004f24:	686c      	ldr	r4, [r5, #4]
 8004f26:	69a3      	ldr	r3, [r4, #24]
 8004f28:	60a3      	str	r3, [r4, #8]
 8004f2a:	89a3      	ldrh	r3, [r4, #12]
 8004f2c:	071a      	lsls	r2, r3, #28
 8004f2e:	d52e      	bpl.n	8004f8e <__swbuf_r+0x82>
 8004f30:	6923      	ldr	r3, [r4, #16]
 8004f32:	b363      	cbz	r3, 8004f8e <__swbuf_r+0x82>
 8004f34:	6923      	ldr	r3, [r4, #16]
 8004f36:	6820      	ldr	r0, [r4, #0]
 8004f38:	1ac0      	subs	r0, r0, r3
 8004f3a:	6963      	ldr	r3, [r4, #20]
 8004f3c:	b2f6      	uxtb	r6, r6
 8004f3e:	4283      	cmp	r3, r0
 8004f40:	4637      	mov	r7, r6
 8004f42:	dc04      	bgt.n	8004f4e <__swbuf_r+0x42>
 8004f44:	4621      	mov	r1, r4
 8004f46:	4628      	mov	r0, r5
 8004f48:	f000 f926 	bl	8005198 <_fflush_r>
 8004f4c:	bb28      	cbnz	r0, 8004f9a <__swbuf_r+0x8e>
 8004f4e:	68a3      	ldr	r3, [r4, #8]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	60a3      	str	r3, [r4, #8]
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	6022      	str	r2, [r4, #0]
 8004f5a:	701e      	strb	r6, [r3, #0]
 8004f5c:	6963      	ldr	r3, [r4, #20]
 8004f5e:	3001      	adds	r0, #1
 8004f60:	4283      	cmp	r3, r0
 8004f62:	d004      	beq.n	8004f6e <__swbuf_r+0x62>
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	07db      	lsls	r3, r3, #31
 8004f68:	d519      	bpl.n	8004f9e <__swbuf_r+0x92>
 8004f6a:	2e0a      	cmp	r6, #10
 8004f6c:	d117      	bne.n	8004f9e <__swbuf_r+0x92>
 8004f6e:	4621      	mov	r1, r4
 8004f70:	4628      	mov	r0, r5
 8004f72:	f000 f911 	bl	8005198 <_fflush_r>
 8004f76:	b190      	cbz	r0, 8004f9e <__swbuf_r+0x92>
 8004f78:	e00f      	b.n	8004f9a <__swbuf_r+0x8e>
 8004f7a:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <__swbuf_r+0x9c>)
 8004f7c:	429c      	cmp	r4, r3
 8004f7e:	d101      	bne.n	8004f84 <__swbuf_r+0x78>
 8004f80:	68ac      	ldr	r4, [r5, #8]
 8004f82:	e7d0      	b.n	8004f26 <__swbuf_r+0x1a>
 8004f84:	4b09      	ldr	r3, [pc, #36]	; (8004fac <__swbuf_r+0xa0>)
 8004f86:	429c      	cmp	r4, r3
 8004f88:	bf08      	it	eq
 8004f8a:	68ec      	ldreq	r4, [r5, #12]
 8004f8c:	e7cb      	b.n	8004f26 <__swbuf_r+0x1a>
 8004f8e:	4621      	mov	r1, r4
 8004f90:	4628      	mov	r0, r5
 8004f92:	f000 f80d 	bl	8004fb0 <__swsetup_r>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d0cc      	beq.n	8004f34 <__swbuf_r+0x28>
 8004f9a:	f04f 37ff 	mov.w	r7, #4294967295
 8004f9e:	4638      	mov	r0, r7
 8004fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	08005520 	.word	0x08005520
 8004fa8:	08005540 	.word	0x08005540
 8004fac:	08005500 	.word	0x08005500

08004fb0 <__swsetup_r>:
 8004fb0:	4b32      	ldr	r3, [pc, #200]	; (800507c <__swsetup_r+0xcc>)
 8004fb2:	b570      	push	{r4, r5, r6, lr}
 8004fb4:	681d      	ldr	r5, [r3, #0]
 8004fb6:	4606      	mov	r6, r0
 8004fb8:	460c      	mov	r4, r1
 8004fba:	b125      	cbz	r5, 8004fc6 <__swsetup_r+0x16>
 8004fbc:	69ab      	ldr	r3, [r5, #24]
 8004fbe:	b913      	cbnz	r3, 8004fc6 <__swsetup_r+0x16>
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	f7fe ff3b 	bl	8003e3c <__sinit>
 8004fc6:	4b2e      	ldr	r3, [pc, #184]	; (8005080 <__swsetup_r+0xd0>)
 8004fc8:	429c      	cmp	r4, r3
 8004fca:	d10f      	bne.n	8004fec <__swsetup_r+0x3c>
 8004fcc:	686c      	ldr	r4, [r5, #4]
 8004fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	0715      	lsls	r5, r2, #28
 8004fd6:	d42c      	bmi.n	8005032 <__swsetup_r+0x82>
 8004fd8:	06d0      	lsls	r0, r2, #27
 8004fda:	d411      	bmi.n	8005000 <__swsetup_r+0x50>
 8004fdc:	2209      	movs	r2, #9
 8004fde:	6032      	str	r2, [r6, #0]
 8004fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fe4:	81a3      	strh	r3, [r4, #12]
 8004fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fea:	e03e      	b.n	800506a <__swsetup_r+0xba>
 8004fec:	4b25      	ldr	r3, [pc, #148]	; (8005084 <__swsetup_r+0xd4>)
 8004fee:	429c      	cmp	r4, r3
 8004ff0:	d101      	bne.n	8004ff6 <__swsetup_r+0x46>
 8004ff2:	68ac      	ldr	r4, [r5, #8]
 8004ff4:	e7eb      	b.n	8004fce <__swsetup_r+0x1e>
 8004ff6:	4b24      	ldr	r3, [pc, #144]	; (8005088 <__swsetup_r+0xd8>)
 8004ff8:	429c      	cmp	r4, r3
 8004ffa:	bf08      	it	eq
 8004ffc:	68ec      	ldreq	r4, [r5, #12]
 8004ffe:	e7e6      	b.n	8004fce <__swsetup_r+0x1e>
 8005000:	0751      	lsls	r1, r2, #29
 8005002:	d512      	bpl.n	800502a <__swsetup_r+0x7a>
 8005004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005006:	b141      	cbz	r1, 800501a <__swsetup_r+0x6a>
 8005008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800500c:	4299      	cmp	r1, r3
 800500e:	d002      	beq.n	8005016 <__swsetup_r+0x66>
 8005010:	4630      	mov	r0, r6
 8005012:	f000 f981 	bl	8005318 <_free_r>
 8005016:	2300      	movs	r3, #0
 8005018:	6363      	str	r3, [r4, #52]	; 0x34
 800501a:	89a3      	ldrh	r3, [r4, #12]
 800501c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005020:	81a3      	strh	r3, [r4, #12]
 8005022:	2300      	movs	r3, #0
 8005024:	6063      	str	r3, [r4, #4]
 8005026:	6923      	ldr	r3, [r4, #16]
 8005028:	6023      	str	r3, [r4, #0]
 800502a:	89a3      	ldrh	r3, [r4, #12]
 800502c:	f043 0308 	orr.w	r3, r3, #8
 8005030:	81a3      	strh	r3, [r4, #12]
 8005032:	6923      	ldr	r3, [r4, #16]
 8005034:	b94b      	cbnz	r3, 800504a <__swsetup_r+0x9a>
 8005036:	89a3      	ldrh	r3, [r4, #12]
 8005038:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800503c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005040:	d003      	beq.n	800504a <__swsetup_r+0x9a>
 8005042:	4621      	mov	r1, r4
 8005044:	4630      	mov	r0, r6
 8005046:	f000 f907 	bl	8005258 <__smakebuf_r>
 800504a:	89a2      	ldrh	r2, [r4, #12]
 800504c:	f012 0301 	ands.w	r3, r2, #1
 8005050:	d00c      	beq.n	800506c <__swsetup_r+0xbc>
 8005052:	2300      	movs	r3, #0
 8005054:	60a3      	str	r3, [r4, #8]
 8005056:	6963      	ldr	r3, [r4, #20]
 8005058:	425b      	negs	r3, r3
 800505a:	61a3      	str	r3, [r4, #24]
 800505c:	6923      	ldr	r3, [r4, #16]
 800505e:	b953      	cbnz	r3, 8005076 <__swsetup_r+0xc6>
 8005060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005064:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005068:	d1ba      	bne.n	8004fe0 <__swsetup_r+0x30>
 800506a:	bd70      	pop	{r4, r5, r6, pc}
 800506c:	0792      	lsls	r2, r2, #30
 800506e:	bf58      	it	pl
 8005070:	6963      	ldrpl	r3, [r4, #20]
 8005072:	60a3      	str	r3, [r4, #8]
 8005074:	e7f2      	b.n	800505c <__swsetup_r+0xac>
 8005076:	2000      	movs	r0, #0
 8005078:	e7f7      	b.n	800506a <__swsetup_r+0xba>
 800507a:	bf00      	nop
 800507c:	20000010 	.word	0x20000010
 8005080:	08005520 	.word	0x08005520
 8005084:	08005540 	.word	0x08005540
 8005088:	08005500 	.word	0x08005500

0800508c <__sflush_r>:
 800508c:	898a      	ldrh	r2, [r1, #12]
 800508e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005092:	4605      	mov	r5, r0
 8005094:	0710      	lsls	r0, r2, #28
 8005096:	460c      	mov	r4, r1
 8005098:	d458      	bmi.n	800514c <__sflush_r+0xc0>
 800509a:	684b      	ldr	r3, [r1, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	dc05      	bgt.n	80050ac <__sflush_r+0x20>
 80050a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	dc02      	bgt.n	80050ac <__sflush_r+0x20>
 80050a6:	2000      	movs	r0, #0
 80050a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050ae:	2e00      	cmp	r6, #0
 80050b0:	d0f9      	beq.n	80050a6 <__sflush_r+0x1a>
 80050b2:	2300      	movs	r3, #0
 80050b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80050b8:	682f      	ldr	r7, [r5, #0]
 80050ba:	6a21      	ldr	r1, [r4, #32]
 80050bc:	602b      	str	r3, [r5, #0]
 80050be:	d032      	beq.n	8005126 <__sflush_r+0x9a>
 80050c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	075a      	lsls	r2, r3, #29
 80050c6:	d505      	bpl.n	80050d4 <__sflush_r+0x48>
 80050c8:	6863      	ldr	r3, [r4, #4]
 80050ca:	1ac0      	subs	r0, r0, r3
 80050cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050ce:	b10b      	cbz	r3, 80050d4 <__sflush_r+0x48>
 80050d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050d2:	1ac0      	subs	r0, r0, r3
 80050d4:	2300      	movs	r3, #0
 80050d6:	4602      	mov	r2, r0
 80050d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050da:	6a21      	ldr	r1, [r4, #32]
 80050dc:	4628      	mov	r0, r5
 80050de:	47b0      	blx	r6
 80050e0:	1c43      	adds	r3, r0, #1
 80050e2:	89a3      	ldrh	r3, [r4, #12]
 80050e4:	d106      	bne.n	80050f4 <__sflush_r+0x68>
 80050e6:	6829      	ldr	r1, [r5, #0]
 80050e8:	291d      	cmp	r1, #29
 80050ea:	d848      	bhi.n	800517e <__sflush_r+0xf2>
 80050ec:	4a29      	ldr	r2, [pc, #164]	; (8005194 <__sflush_r+0x108>)
 80050ee:	40ca      	lsrs	r2, r1
 80050f0:	07d6      	lsls	r6, r2, #31
 80050f2:	d544      	bpl.n	800517e <__sflush_r+0xf2>
 80050f4:	2200      	movs	r2, #0
 80050f6:	6062      	str	r2, [r4, #4]
 80050f8:	04d9      	lsls	r1, r3, #19
 80050fa:	6922      	ldr	r2, [r4, #16]
 80050fc:	6022      	str	r2, [r4, #0]
 80050fe:	d504      	bpl.n	800510a <__sflush_r+0x7e>
 8005100:	1c42      	adds	r2, r0, #1
 8005102:	d101      	bne.n	8005108 <__sflush_r+0x7c>
 8005104:	682b      	ldr	r3, [r5, #0]
 8005106:	b903      	cbnz	r3, 800510a <__sflush_r+0x7e>
 8005108:	6560      	str	r0, [r4, #84]	; 0x54
 800510a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800510c:	602f      	str	r7, [r5, #0]
 800510e:	2900      	cmp	r1, #0
 8005110:	d0c9      	beq.n	80050a6 <__sflush_r+0x1a>
 8005112:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005116:	4299      	cmp	r1, r3
 8005118:	d002      	beq.n	8005120 <__sflush_r+0x94>
 800511a:	4628      	mov	r0, r5
 800511c:	f000 f8fc 	bl	8005318 <_free_r>
 8005120:	2000      	movs	r0, #0
 8005122:	6360      	str	r0, [r4, #52]	; 0x34
 8005124:	e7c0      	b.n	80050a8 <__sflush_r+0x1c>
 8005126:	2301      	movs	r3, #1
 8005128:	4628      	mov	r0, r5
 800512a:	47b0      	blx	r6
 800512c:	1c41      	adds	r1, r0, #1
 800512e:	d1c8      	bne.n	80050c2 <__sflush_r+0x36>
 8005130:	682b      	ldr	r3, [r5, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0c5      	beq.n	80050c2 <__sflush_r+0x36>
 8005136:	2b1d      	cmp	r3, #29
 8005138:	d001      	beq.n	800513e <__sflush_r+0xb2>
 800513a:	2b16      	cmp	r3, #22
 800513c:	d101      	bne.n	8005142 <__sflush_r+0xb6>
 800513e:	602f      	str	r7, [r5, #0]
 8005140:	e7b1      	b.n	80050a6 <__sflush_r+0x1a>
 8005142:	89a3      	ldrh	r3, [r4, #12]
 8005144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005148:	81a3      	strh	r3, [r4, #12]
 800514a:	e7ad      	b.n	80050a8 <__sflush_r+0x1c>
 800514c:	690f      	ldr	r7, [r1, #16]
 800514e:	2f00      	cmp	r7, #0
 8005150:	d0a9      	beq.n	80050a6 <__sflush_r+0x1a>
 8005152:	0793      	lsls	r3, r2, #30
 8005154:	680e      	ldr	r6, [r1, #0]
 8005156:	bf08      	it	eq
 8005158:	694b      	ldreq	r3, [r1, #20]
 800515a:	600f      	str	r7, [r1, #0]
 800515c:	bf18      	it	ne
 800515e:	2300      	movne	r3, #0
 8005160:	eba6 0807 	sub.w	r8, r6, r7
 8005164:	608b      	str	r3, [r1, #8]
 8005166:	f1b8 0f00 	cmp.w	r8, #0
 800516a:	dd9c      	ble.n	80050a6 <__sflush_r+0x1a>
 800516c:	4643      	mov	r3, r8
 800516e:	463a      	mov	r2, r7
 8005170:	6a21      	ldr	r1, [r4, #32]
 8005172:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005174:	4628      	mov	r0, r5
 8005176:	47b0      	blx	r6
 8005178:	2800      	cmp	r0, #0
 800517a:	dc06      	bgt.n	800518a <__sflush_r+0xfe>
 800517c:	89a3      	ldrh	r3, [r4, #12]
 800517e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005182:	81a3      	strh	r3, [r4, #12]
 8005184:	f04f 30ff 	mov.w	r0, #4294967295
 8005188:	e78e      	b.n	80050a8 <__sflush_r+0x1c>
 800518a:	4407      	add	r7, r0
 800518c:	eba8 0800 	sub.w	r8, r8, r0
 8005190:	e7e9      	b.n	8005166 <__sflush_r+0xda>
 8005192:	bf00      	nop
 8005194:	20400001 	.word	0x20400001

08005198 <_fflush_r>:
 8005198:	b538      	push	{r3, r4, r5, lr}
 800519a:	690b      	ldr	r3, [r1, #16]
 800519c:	4605      	mov	r5, r0
 800519e:	460c      	mov	r4, r1
 80051a0:	b1db      	cbz	r3, 80051da <_fflush_r+0x42>
 80051a2:	b118      	cbz	r0, 80051ac <_fflush_r+0x14>
 80051a4:	6983      	ldr	r3, [r0, #24]
 80051a6:	b90b      	cbnz	r3, 80051ac <_fflush_r+0x14>
 80051a8:	f7fe fe48 	bl	8003e3c <__sinit>
 80051ac:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <_fflush_r+0x48>)
 80051ae:	429c      	cmp	r4, r3
 80051b0:	d109      	bne.n	80051c6 <_fflush_r+0x2e>
 80051b2:	686c      	ldr	r4, [r5, #4]
 80051b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051b8:	b17b      	cbz	r3, 80051da <_fflush_r+0x42>
 80051ba:	4621      	mov	r1, r4
 80051bc:	4628      	mov	r0, r5
 80051be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051c2:	f7ff bf63 	b.w	800508c <__sflush_r>
 80051c6:	4b07      	ldr	r3, [pc, #28]	; (80051e4 <_fflush_r+0x4c>)
 80051c8:	429c      	cmp	r4, r3
 80051ca:	d101      	bne.n	80051d0 <_fflush_r+0x38>
 80051cc:	68ac      	ldr	r4, [r5, #8]
 80051ce:	e7f1      	b.n	80051b4 <_fflush_r+0x1c>
 80051d0:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <_fflush_r+0x50>)
 80051d2:	429c      	cmp	r4, r3
 80051d4:	bf08      	it	eq
 80051d6:	68ec      	ldreq	r4, [r5, #12]
 80051d8:	e7ec      	b.n	80051b4 <_fflush_r+0x1c>
 80051da:	2000      	movs	r0, #0
 80051dc:	bd38      	pop	{r3, r4, r5, pc}
 80051de:	bf00      	nop
 80051e0:	08005520 	.word	0x08005520
 80051e4:	08005540 	.word	0x08005540
 80051e8:	08005500 	.word	0x08005500

080051ec <__locale_ctype_ptr_l>:
 80051ec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80051f0:	4770      	bx	lr
	...

080051f4 <__locale_ctype_ptr>:
 80051f4:	4b04      	ldr	r3, [pc, #16]	; (8005208 <__locale_ctype_ptr+0x14>)
 80051f6:	4a05      	ldr	r2, [pc, #20]	; (800520c <__locale_ctype_ptr+0x18>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	bf08      	it	eq
 8005200:	4613      	moveq	r3, r2
 8005202:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8005206:	4770      	bx	lr
 8005208:	20000010 	.word	0x20000010
 800520c:	20000074 	.word	0x20000074

08005210 <__swhatbuf_r>:
 8005210:	b570      	push	{r4, r5, r6, lr}
 8005212:	460e      	mov	r6, r1
 8005214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005218:	2900      	cmp	r1, #0
 800521a:	b096      	sub	sp, #88	; 0x58
 800521c:	4614      	mov	r4, r2
 800521e:	461d      	mov	r5, r3
 8005220:	da07      	bge.n	8005232 <__swhatbuf_r+0x22>
 8005222:	2300      	movs	r3, #0
 8005224:	602b      	str	r3, [r5, #0]
 8005226:	89b3      	ldrh	r3, [r6, #12]
 8005228:	061a      	lsls	r2, r3, #24
 800522a:	d410      	bmi.n	800524e <__swhatbuf_r+0x3e>
 800522c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005230:	e00e      	b.n	8005250 <__swhatbuf_r+0x40>
 8005232:	466a      	mov	r2, sp
 8005234:	f000 f8f2 	bl	800541c <_fstat_r>
 8005238:	2800      	cmp	r0, #0
 800523a:	dbf2      	blt.n	8005222 <__swhatbuf_r+0x12>
 800523c:	9a01      	ldr	r2, [sp, #4]
 800523e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005242:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005246:	425a      	negs	r2, r3
 8005248:	415a      	adcs	r2, r3
 800524a:	602a      	str	r2, [r5, #0]
 800524c:	e7ee      	b.n	800522c <__swhatbuf_r+0x1c>
 800524e:	2340      	movs	r3, #64	; 0x40
 8005250:	2000      	movs	r0, #0
 8005252:	6023      	str	r3, [r4, #0]
 8005254:	b016      	add	sp, #88	; 0x58
 8005256:	bd70      	pop	{r4, r5, r6, pc}

08005258 <__smakebuf_r>:
 8005258:	898b      	ldrh	r3, [r1, #12]
 800525a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800525c:	079d      	lsls	r5, r3, #30
 800525e:	4606      	mov	r6, r0
 8005260:	460c      	mov	r4, r1
 8005262:	d507      	bpl.n	8005274 <__smakebuf_r+0x1c>
 8005264:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	6123      	str	r3, [r4, #16]
 800526c:	2301      	movs	r3, #1
 800526e:	6163      	str	r3, [r4, #20]
 8005270:	b002      	add	sp, #8
 8005272:	bd70      	pop	{r4, r5, r6, pc}
 8005274:	ab01      	add	r3, sp, #4
 8005276:	466a      	mov	r2, sp
 8005278:	f7ff ffca 	bl	8005210 <__swhatbuf_r>
 800527c:	9900      	ldr	r1, [sp, #0]
 800527e:	4605      	mov	r5, r0
 8005280:	4630      	mov	r0, r6
 8005282:	f7fe fe77 	bl	8003f74 <_malloc_r>
 8005286:	b948      	cbnz	r0, 800529c <__smakebuf_r+0x44>
 8005288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800528c:	059a      	lsls	r2, r3, #22
 800528e:	d4ef      	bmi.n	8005270 <__smakebuf_r+0x18>
 8005290:	f023 0303 	bic.w	r3, r3, #3
 8005294:	f043 0302 	orr.w	r3, r3, #2
 8005298:	81a3      	strh	r3, [r4, #12]
 800529a:	e7e3      	b.n	8005264 <__smakebuf_r+0xc>
 800529c:	4b0d      	ldr	r3, [pc, #52]	; (80052d4 <__smakebuf_r+0x7c>)
 800529e:	62b3      	str	r3, [r6, #40]	; 0x28
 80052a0:	89a3      	ldrh	r3, [r4, #12]
 80052a2:	6020      	str	r0, [r4, #0]
 80052a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a8:	81a3      	strh	r3, [r4, #12]
 80052aa:	9b00      	ldr	r3, [sp, #0]
 80052ac:	6163      	str	r3, [r4, #20]
 80052ae:	9b01      	ldr	r3, [sp, #4]
 80052b0:	6120      	str	r0, [r4, #16]
 80052b2:	b15b      	cbz	r3, 80052cc <__smakebuf_r+0x74>
 80052b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052b8:	4630      	mov	r0, r6
 80052ba:	f000 f8c1 	bl	8005440 <_isatty_r>
 80052be:	b128      	cbz	r0, 80052cc <__smakebuf_r+0x74>
 80052c0:	89a3      	ldrh	r3, [r4, #12]
 80052c2:	f023 0303 	bic.w	r3, r3, #3
 80052c6:	f043 0301 	orr.w	r3, r3, #1
 80052ca:	81a3      	strh	r3, [r4, #12]
 80052cc:	89a3      	ldrh	r3, [r4, #12]
 80052ce:	431d      	orrs	r5, r3
 80052d0:	81a5      	strh	r5, [r4, #12]
 80052d2:	e7cd      	b.n	8005270 <__smakebuf_r+0x18>
 80052d4:	08003e05 	.word	0x08003e05

080052d8 <__ascii_mbtowc>:
 80052d8:	b082      	sub	sp, #8
 80052da:	b901      	cbnz	r1, 80052de <__ascii_mbtowc+0x6>
 80052dc:	a901      	add	r1, sp, #4
 80052de:	b142      	cbz	r2, 80052f2 <__ascii_mbtowc+0x1a>
 80052e0:	b14b      	cbz	r3, 80052f6 <__ascii_mbtowc+0x1e>
 80052e2:	7813      	ldrb	r3, [r2, #0]
 80052e4:	600b      	str	r3, [r1, #0]
 80052e6:	7812      	ldrb	r2, [r2, #0]
 80052e8:	1c10      	adds	r0, r2, #0
 80052ea:	bf18      	it	ne
 80052ec:	2001      	movne	r0, #1
 80052ee:	b002      	add	sp, #8
 80052f0:	4770      	bx	lr
 80052f2:	4610      	mov	r0, r2
 80052f4:	e7fb      	b.n	80052ee <__ascii_mbtowc+0x16>
 80052f6:	f06f 0001 	mvn.w	r0, #1
 80052fa:	e7f8      	b.n	80052ee <__ascii_mbtowc+0x16>

080052fc <memcpy>:
 80052fc:	b510      	push	{r4, lr}
 80052fe:	1e43      	subs	r3, r0, #1
 8005300:	440a      	add	r2, r1
 8005302:	4291      	cmp	r1, r2
 8005304:	d100      	bne.n	8005308 <memcpy+0xc>
 8005306:	bd10      	pop	{r4, pc}
 8005308:	f811 4b01 	ldrb.w	r4, [r1], #1
 800530c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005310:	e7f7      	b.n	8005302 <memcpy+0x6>

08005312 <__malloc_lock>:
 8005312:	4770      	bx	lr

08005314 <__malloc_unlock>:
 8005314:	4770      	bx	lr
	...

08005318 <_free_r>:
 8005318:	b538      	push	{r3, r4, r5, lr}
 800531a:	4605      	mov	r5, r0
 800531c:	2900      	cmp	r1, #0
 800531e:	d045      	beq.n	80053ac <_free_r+0x94>
 8005320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005324:	1f0c      	subs	r4, r1, #4
 8005326:	2b00      	cmp	r3, #0
 8005328:	bfb8      	it	lt
 800532a:	18e4      	addlt	r4, r4, r3
 800532c:	f7ff fff1 	bl	8005312 <__malloc_lock>
 8005330:	4a1f      	ldr	r2, [pc, #124]	; (80053b0 <_free_r+0x98>)
 8005332:	6813      	ldr	r3, [r2, #0]
 8005334:	4610      	mov	r0, r2
 8005336:	b933      	cbnz	r3, 8005346 <_free_r+0x2e>
 8005338:	6063      	str	r3, [r4, #4]
 800533a:	6014      	str	r4, [r2, #0]
 800533c:	4628      	mov	r0, r5
 800533e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005342:	f7ff bfe7 	b.w	8005314 <__malloc_unlock>
 8005346:	42a3      	cmp	r3, r4
 8005348:	d90c      	bls.n	8005364 <_free_r+0x4c>
 800534a:	6821      	ldr	r1, [r4, #0]
 800534c:	1862      	adds	r2, r4, r1
 800534e:	4293      	cmp	r3, r2
 8005350:	bf04      	itt	eq
 8005352:	681a      	ldreq	r2, [r3, #0]
 8005354:	685b      	ldreq	r3, [r3, #4]
 8005356:	6063      	str	r3, [r4, #4]
 8005358:	bf04      	itt	eq
 800535a:	1852      	addeq	r2, r2, r1
 800535c:	6022      	streq	r2, [r4, #0]
 800535e:	6004      	str	r4, [r0, #0]
 8005360:	e7ec      	b.n	800533c <_free_r+0x24>
 8005362:	4613      	mov	r3, r2
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	b10a      	cbz	r2, 800536c <_free_r+0x54>
 8005368:	42a2      	cmp	r2, r4
 800536a:	d9fa      	bls.n	8005362 <_free_r+0x4a>
 800536c:	6819      	ldr	r1, [r3, #0]
 800536e:	1858      	adds	r0, r3, r1
 8005370:	42a0      	cmp	r0, r4
 8005372:	d10b      	bne.n	800538c <_free_r+0x74>
 8005374:	6820      	ldr	r0, [r4, #0]
 8005376:	4401      	add	r1, r0
 8005378:	1858      	adds	r0, r3, r1
 800537a:	4282      	cmp	r2, r0
 800537c:	6019      	str	r1, [r3, #0]
 800537e:	d1dd      	bne.n	800533c <_free_r+0x24>
 8005380:	6810      	ldr	r0, [r2, #0]
 8005382:	6852      	ldr	r2, [r2, #4]
 8005384:	605a      	str	r2, [r3, #4]
 8005386:	4401      	add	r1, r0
 8005388:	6019      	str	r1, [r3, #0]
 800538a:	e7d7      	b.n	800533c <_free_r+0x24>
 800538c:	d902      	bls.n	8005394 <_free_r+0x7c>
 800538e:	230c      	movs	r3, #12
 8005390:	602b      	str	r3, [r5, #0]
 8005392:	e7d3      	b.n	800533c <_free_r+0x24>
 8005394:	6820      	ldr	r0, [r4, #0]
 8005396:	1821      	adds	r1, r4, r0
 8005398:	428a      	cmp	r2, r1
 800539a:	bf04      	itt	eq
 800539c:	6811      	ldreq	r1, [r2, #0]
 800539e:	6852      	ldreq	r2, [r2, #4]
 80053a0:	6062      	str	r2, [r4, #4]
 80053a2:	bf04      	itt	eq
 80053a4:	1809      	addeq	r1, r1, r0
 80053a6:	6021      	streq	r1, [r4, #0]
 80053a8:	605c      	str	r4, [r3, #4]
 80053aa:	e7c7      	b.n	800533c <_free_r+0x24>
 80053ac:	bd38      	pop	{r3, r4, r5, pc}
 80053ae:	bf00      	nop
 80053b0:	20000200 	.word	0x20000200

080053b4 <_realloc_r>:
 80053b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b6:	4607      	mov	r7, r0
 80053b8:	4614      	mov	r4, r2
 80053ba:	460e      	mov	r6, r1
 80053bc:	b921      	cbnz	r1, 80053c8 <_realloc_r+0x14>
 80053be:	4611      	mov	r1, r2
 80053c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80053c4:	f7fe bdd6 	b.w	8003f74 <_malloc_r>
 80053c8:	b922      	cbnz	r2, 80053d4 <_realloc_r+0x20>
 80053ca:	f7ff ffa5 	bl	8005318 <_free_r>
 80053ce:	4625      	mov	r5, r4
 80053d0:	4628      	mov	r0, r5
 80053d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053d4:	f000 f844 	bl	8005460 <_malloc_usable_size_r>
 80053d8:	42a0      	cmp	r0, r4
 80053da:	d20f      	bcs.n	80053fc <_realloc_r+0x48>
 80053dc:	4621      	mov	r1, r4
 80053de:	4638      	mov	r0, r7
 80053e0:	f7fe fdc8 	bl	8003f74 <_malloc_r>
 80053e4:	4605      	mov	r5, r0
 80053e6:	2800      	cmp	r0, #0
 80053e8:	d0f2      	beq.n	80053d0 <_realloc_r+0x1c>
 80053ea:	4631      	mov	r1, r6
 80053ec:	4622      	mov	r2, r4
 80053ee:	f7ff ff85 	bl	80052fc <memcpy>
 80053f2:	4631      	mov	r1, r6
 80053f4:	4638      	mov	r0, r7
 80053f6:	f7ff ff8f 	bl	8005318 <_free_r>
 80053fa:	e7e9      	b.n	80053d0 <_realloc_r+0x1c>
 80053fc:	4635      	mov	r5, r6
 80053fe:	e7e7      	b.n	80053d0 <_realloc_r+0x1c>

08005400 <__ascii_wctomb>:
 8005400:	b149      	cbz	r1, 8005416 <__ascii_wctomb+0x16>
 8005402:	2aff      	cmp	r2, #255	; 0xff
 8005404:	bf85      	ittet	hi
 8005406:	238a      	movhi	r3, #138	; 0x8a
 8005408:	6003      	strhi	r3, [r0, #0]
 800540a:	700a      	strbls	r2, [r1, #0]
 800540c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005410:	bf98      	it	ls
 8005412:	2001      	movls	r0, #1
 8005414:	4770      	bx	lr
 8005416:	4608      	mov	r0, r1
 8005418:	4770      	bx	lr
	...

0800541c <_fstat_r>:
 800541c:	b538      	push	{r3, r4, r5, lr}
 800541e:	4c07      	ldr	r4, [pc, #28]	; (800543c <_fstat_r+0x20>)
 8005420:	2300      	movs	r3, #0
 8005422:	4605      	mov	r5, r0
 8005424:	4608      	mov	r0, r1
 8005426:	4611      	mov	r1, r2
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	f7fb fb34 	bl	8000a96 <_fstat>
 800542e:	1c43      	adds	r3, r0, #1
 8005430:	d102      	bne.n	8005438 <_fstat_r+0x1c>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	b103      	cbz	r3, 8005438 <_fstat_r+0x1c>
 8005436:	602b      	str	r3, [r5, #0]
 8005438:	bd38      	pop	{r3, r4, r5, pc}
 800543a:	bf00      	nop
 800543c:	200002fc 	.word	0x200002fc

08005440 <_isatty_r>:
 8005440:	b538      	push	{r3, r4, r5, lr}
 8005442:	4c06      	ldr	r4, [pc, #24]	; (800545c <_isatty_r+0x1c>)
 8005444:	2300      	movs	r3, #0
 8005446:	4605      	mov	r5, r0
 8005448:	4608      	mov	r0, r1
 800544a:	6023      	str	r3, [r4, #0]
 800544c:	f7fb fb33 	bl	8000ab6 <_isatty>
 8005450:	1c43      	adds	r3, r0, #1
 8005452:	d102      	bne.n	800545a <_isatty_r+0x1a>
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	b103      	cbz	r3, 800545a <_isatty_r+0x1a>
 8005458:	602b      	str	r3, [r5, #0]
 800545a:	bd38      	pop	{r3, r4, r5, pc}
 800545c:	200002fc 	.word	0x200002fc

08005460 <_malloc_usable_size_r>:
 8005460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005464:	1f18      	subs	r0, r3, #4
 8005466:	2b00      	cmp	r3, #0
 8005468:	bfbc      	itt	lt
 800546a:	580b      	ldrlt	r3, [r1, r0]
 800546c:	18c0      	addlt	r0, r0, r3
 800546e:	4770      	bx	lr

08005470 <_init>:
 8005470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005472:	bf00      	nop
 8005474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005476:	bc08      	pop	{r3}
 8005478:	469e      	mov	lr, r3
 800547a:	4770      	bx	lr

0800547c <_fini>:
 800547c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547e:	bf00      	nop
 8005480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005482:	bc08      	pop	{r3}
 8005484:	469e      	mov	lr, r3
 8005486:	4770      	bx	lr
